
ledmeter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a32  00000000  00000000  00000094  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000a32  00000ac6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  00000ac6  2**0
                  ALLOC
  3 .noinit       00000000  00800061  00800061  00000ac6  2**0
                  CONTENTS
  4 .eeprom       00000000  00810000  00810000  00000ac6  2**0
                  CONTENTS
  5 .stab         00001110  00000000  00000000  00000ac8  2**2
                  CONTENTS, READONLY, DEBUGGING
  6 .stabstr      00000964  00000000  00000000  00001bd8  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	3d c3       	rjmp	.+1658   	; 0x67e <__vector_1>
   4:	2c c0       	rjmp	.+88     	; 0x5e <__bad_interrupt>
   6:	2b c0       	rjmp	.+86     	; 0x5e <__bad_interrupt>
   8:	2a c0       	rjmp	.+84     	; 0x5e <__bad_interrupt>
   a:	29 c0       	rjmp	.+82     	; 0x5e <__bad_interrupt>
   c:	28 c0       	rjmp	.+80     	; 0x5e <__bad_interrupt>
   e:	27 c0       	rjmp	.+78     	; 0x5e <__bad_interrupt>
  10:	26 c0       	rjmp	.+76     	; 0x5e <__bad_interrupt>
  12:	25 c0       	rjmp	.+74     	; 0x5e <__bad_interrupt>
  14:	24 c0       	rjmp	.+72     	; 0x5e <__bad_interrupt>
  16:	23 c0       	rjmp	.+70     	; 0x5e <__bad_interrupt>
  18:	22 c0       	rjmp	.+68     	; 0x5e <__bad_interrupt>
  1a:	21 c0       	rjmp	.+66     	; 0x5e <__bad_interrupt>
  1c:	20 c0       	rjmp	.+64     	; 0x5e <__bad_interrupt>
  1e:	1f c0       	rjmp	.+62     	; 0x5e <__bad_interrupt>
  20:	1e c0       	rjmp	.+60     	; 0x5e <__bad_interrupt>
  22:	1d c0       	rjmp	.+58     	; 0x5e <__bad_interrupt>
  24:	1c c0       	rjmp	.+56     	; 0x5e <__bad_interrupt>
  26:	1b c0       	rjmp	.+54     	; 0x5e <__bad_interrupt>
  28:	1a c0       	rjmp	.+52     	; 0x5e <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf e5       	ldi	r28, 0x5F	; 95
  30:	d2 e0       	ldi	r29, 0x02	; 2
  32:	de bf       	out	0x3e, r29	; 62
  34:	cd bf       	out	0x3d, r28	; 61

00000036 <__do_copy_data>:
  36:	10 e0       	ldi	r17, 0x00	; 0
  38:	a0 e6       	ldi	r26, 0x60	; 96
  3a:	b0 e0       	ldi	r27, 0x00	; 0
  3c:	e2 e3       	ldi	r30, 0x32	; 50
  3e:	fa e0       	ldi	r31, 0x0A	; 10
  40:	02 c0       	rjmp	.+4      	; 0x46 <.do_copy_data_start>

00000042 <.do_copy_data_loop>:
  42:	05 90       	lpm	r0, Z+
  44:	0d 92       	st	X+, r0

00000046 <.do_copy_data_start>:
  46:	a0 36       	cpi	r26, 0x60	; 96
  48:	b1 07       	cpc	r27, r17
  4a:	d9 f7       	brne	.-10     	; 0x42 <.do_copy_data_loop>

0000004c <__do_clear_bss>:
  4c:	10 e0       	ldi	r17, 0x00	; 0
  4e:	a0 e6       	ldi	r26, 0x60	; 96
  50:	b0 e0       	ldi	r27, 0x00	; 0
  52:	01 c0       	rjmp	.+2      	; 0x56 <.do_clear_bss_start>

00000054 <.do_clear_bss_loop>:
  54:	1d 92       	st	X+, r1

00000056 <.do_clear_bss_start>:
  56:	a1 36       	cpi	r26, 0x61	; 97
  58:	b1 07       	cpc	r27, r17
  5a:	e1 f7       	brne	.-8      	; 0x54 <.do_clear_bss_loop>
  5c:	b1 c3       	rjmp	.+1890   	; 0x7c0 <main>

0000005e <__bad_interrupt>:
  5e:	d0 cf       	rjmp	.-96     	; 0x0 <__vectors>

00000060 <switch_on_all_leds>:

/*
 *
 */
void switch_on_all_leds() {
  60:	cf 93       	push	r28
  62:	df 93       	push	r29
  64:	cd b7       	in	r28, 0x3d	; 61
  66:	de b7       	in	r29, 0x3e	; 62
    PORTC = 0x00;
  68:	10 92 35 00 	sts	0x0035, r1
  6c:	df 91       	pop	r29
  6e:	cf 91       	pop	r28
  70:	08 95       	ret

00000072 <switch_off_all_leds>:
}

/*
 *
 */
void switch_off_all_leds() {
  72:	cf 93       	push	r28
  74:	df 93       	push	r29
  76:	cd b7       	in	r28, 0x3d	; 61
  78:	de b7       	in	r29, 0x3e	; 62
    PORTC = 0xFF;
  7a:	8f ef       	ldi	r24, 0xFF	; 255
  7c:	80 93 35 00 	sts	0x0035, r24
  80:	df 91       	pop	r29
  82:	cf 91       	pop	r28
  84:	08 95       	ret

00000086 <switch_on_led>:
}

// led from 1 to 8 (LEDSNUM)
// PCx with w from 0 to 7

/*
 *  switch on the led with the number called "led"
 */
void switch_on_led(int led) {
  86:	cf 93       	push	r28
  88:	df 93       	push	r29
  8a:	cd b7       	in	r28, 0x3d	; 61
  8c:	de b7       	in	r29, 0x3e	; 62
  8e:	26 97       	sbiw	r28, 0x06	; 6
  90:	0f b6       	in	r0, 0x3f	; 63
  92:	f8 94       	cli
  94:	de bf       	out	0x3e, r29	; 62
  96:	0f be       	out	0x3f, r0	; 63
  98:	cd bf       	out	0x3d, r28	; 61
  9a:	9a 83       	std	Y+2, r25	; 0x02
  9c:	89 83       	std	Y+1, r24	; 0x01
    int pin = led - 1;
  9e:	89 81       	ldd	r24, Y+1	; 0x01
  a0:	9a 81       	ldd	r25, Y+2	; 0x02
  a2:	01 97       	sbiw	r24, 0x01	; 1
  a4:	9c 83       	std	Y+4, r25	; 0x04
  a6:	8b 83       	std	Y+3, r24	; 0x03
    int mask = ~(0x01<<pin);
  a8:	81 e0       	ldi	r24, 0x01	; 1
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	0b 80       	ldd	r0, Y+3	; 0x03
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <switch_on_led+0x2e>
  b0:	88 0f       	add	r24, r24
  b2:	99 1f       	adc	r25, r25
  b4:	0a 94       	dec	r0
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <switch_on_led+0x2a>
  b8:	80 95       	com	r24
  ba:	90 95       	com	r25
  bc:	9e 83       	std	Y+6, r25	; 0x06
  be:	8d 83       	std	Y+5, r24	; 0x05
    PORTC&=mask;
  c0:	90 91 35 00 	lds	r25, 0x0035
  c4:	8d 81       	ldd	r24, Y+5	; 0x05
  c6:	89 23       	and	r24, r25
  c8:	80 93 35 00 	sts	0x0035, r24
  cc:	26 96       	adiw	r28, 0x06	; 6
  ce:	0f b6       	in	r0, 0x3f	; 63
  d0:	f8 94       	cli
  d2:	de bf       	out	0x3e, r29	; 62
  d4:	0f be       	out	0x3f, r0	; 63
  d6:	cd bf       	out	0x3d, r28	; 61
  d8:	df 91       	pop	r29
  da:	cf 91       	pop	r28
  dc:	08 95       	ret

000000de <switch_off_led>:
}

/*
 *  switch off the led with the number called "led"
 */
void switch_off_led(int led) {
  de:	cf 93       	push	r28
  e0:	df 93       	push	r29
  e2:	cd b7       	in	r28, 0x3d	; 61
  e4:	de b7       	in	r29, 0x3e	; 62
  e6:	26 97       	sbiw	r28, 0x06	; 6
  e8:	0f b6       	in	r0, 0x3f	; 63
  ea:	f8 94       	cli
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	0f be       	out	0x3f, r0	; 63
  f0:	cd bf       	out	0x3d, r28	; 61
  f2:	9a 83       	std	Y+2, r25	; 0x02
  f4:	89 83       	std	Y+1, r24	; 0x01
    int pin = led - 1;
  f6:	89 81       	ldd	r24, Y+1	; 0x01
  f8:	9a 81       	ldd	r25, Y+2	; 0x02
  fa:	01 97       	sbiw	r24, 0x01	; 1
  fc:	9c 83       	std	Y+4, r25	; 0x04
  fe:	8b 83       	std	Y+3, r24	; 0x03
    int mask = (0x01<<pin);
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	0b 80       	ldd	r0, Y+3	; 0x03
 106:	02 c0       	rjmp	.+4      	; 0x10c <switch_off_led+0x2e>
 108:	88 0f       	add	r24, r24
 10a:	99 1f       	adc	r25, r25
 10c:	0a 94       	dec	r0
 10e:	e2 f7       	brpl	.-8      	; 0x108 <switch_off_led+0x2a>
 110:	9e 83       	std	Y+6, r25	; 0x06
 112:	8d 83       	std	Y+5, r24	; 0x05
    PORTC|=mask;
 114:	90 91 35 00 	lds	r25, 0x0035
 118:	8d 81       	ldd	r24, Y+5	; 0x05
 11a:	89 2b       	or	r24, r25
 11c:	80 93 35 00 	sts	0x0035, r24
 120:	26 96       	adiw	r28, 0x06	; 6
 122:	0f b6       	in	r0, 0x3f	; 63
 124:	f8 94       	cli
 126:	de bf       	out	0x3e, r29	; 62
 128:	0f be       	out	0x3f, r0	; 63
 12a:	cd bf       	out	0x3d, r28	; 61
 12c:	df 91       	pop	r29
 12e:	cf 91       	pop	r28
 130:	08 95       	ret

00000132 <switch_on_leds_with_delay>:
}

/*
 *  switch on every leds one after one with a delay (called "delay")
 */
void switch_on_leds_with_delay(double delay) {
 132:	cf 93       	push	r28
 134:	df 93       	push	r29
 136:	cd b7       	in	r28, 0x3d	; 61
 138:	de b7       	in	r29, 0x3e	; 62
 13a:	62 97       	sbiw	r28, 0x12	; 18
 13c:	0f b6       	in	r0, 0x3f	; 63
 13e:	f8 94       	cli
 140:	de bf       	out	0x3e, r29	; 62
 142:	0f be       	out	0x3f, r0	; 63
 144:	cd bf       	out	0x3d, r28	; 61
 146:	69 83       	std	Y+1, r22	; 0x01
 148:	7a 83       	std	Y+2, r23	; 0x02
 14a:	8b 83       	std	Y+3, r24	; 0x03
 14c:	9c 83       	std	Y+4, r25	; 0x04
    int i;
    for(i = 1; i<=Nleds; i++) {
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	9e 83       	std	Y+6, r25	; 0x06
 154:	8d 83       	std	Y+5, r24	; 0x05
 156:	8d 81       	ldd	r24, Y+5	; 0x05
 158:	9e 81       	ldd	r25, Y+6	; 0x06
 15a:	89 30       	cpi	r24, 0x09	; 9
 15c:	91 05       	cpc	r25, r1
 15e:	0c f0       	brlt	.+2      	; 0x162 <switch_on_leds_with_delay+0x30>
 160:	53 c0       	rjmp	.+166    	; 0x208 <switch_on_leds_with_delay+0xd6>
   The maximal possible delay is 262.14 ms / F_CPU in MHz.
 */
void
_delay_ms(double __ms)
{
 162:	89 81       	ldd	r24, Y+1	; 0x01
 164:	9a 81       	ldd	r25, Y+2	; 0x02
 166:	ab 81       	ldd	r26, Y+3	; 0x03
 168:	bc 81       	ldd	r27, Y+4	; 0x04
 16a:	8f 83       	std	Y+7, r24	; 0x07
 16c:	98 87       	std	Y+8, r25	; 0x08
 16e:	a9 87       	std	Y+9, r26	; 0x09
 170:	ba 87       	std	Y+10, r27	; 0x0a
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 172:	20 e0       	ldi	r18, 0x00	; 0
 174:	30 e0       	ldi	r19, 0x00	; 0
 176:	4a e7       	ldi	r20, 0x7A	; 122
 178:	53 e4       	ldi	r21, 0x43	; 67
 17a:	6f 81       	ldd	r22, Y+7	; 0x07
 17c:	78 85       	ldd	r23, Y+8	; 0x08
 17e:	89 85       	ldd	r24, Y+9	; 0x09
 180:	9a 85       	ldd	r25, Y+10	; 0x0a
 182:	0f d4       	rcall	.+2078   	; 0x9a2 <__mulsf3>
 184:	dc 01       	movw	r26, r24
 186:	cb 01       	movw	r24, r22
 188:	8d 87       	std	Y+13, r24	; 0x0d
 18a:	9e 87       	std	Y+14, r25	; 0x0e
 18c:	af 87       	std	Y+15, r26	; 0x0f
 18e:	b8 8b       	std	Y+16, r27	; 0x10
	if (__tmp < 1.0)
 190:	20 e0       	ldi	r18, 0x00	; 0
 192:	30 e0       	ldi	r19, 0x00	; 0
 194:	40 e8       	ldi	r20, 0x80	; 128
 196:	5f e3       	ldi	r21, 0x3F	; 63
 198:	6d 85       	ldd	r22, Y+13	; 0x0d
 19a:	7e 85       	ldd	r23, Y+14	; 0x0e
 19c:	8f 85       	ldd	r24, Y+15	; 0x0f
 19e:	98 89       	ldd	r25, Y+16	; 0x10
 1a0:	90 d3       	rcall	.+1824   	; 0x8c2 <__eqsf2>
 1a2:	88 23       	and	r24, r24
 1a4:	0c f0       	brlt	.+2      	; 0x1a8 <switch_on_leds_with_delay+0x76>
 1a6:	05 c0       	rjmp	.+10     	; 0x1b2 <switch_on_leds_with_delay+0x80>
		__ticks = 1;
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	9c 87       	std	Y+12, r25	; 0x0c
 1ae:	8b 87       	std	Y+11, r24	; 0x0b
 1b0:	18 c0       	rjmp	.+48     	; 0x1e2 <switch_on_leds_with_delay+0xb0>
	else if (__tmp > 65535)
 1b2:	20 e0       	ldi	r18, 0x00	; 0
 1b4:	3f ef       	ldi	r19, 0xFF	; 255
 1b6:	4f e7       	ldi	r20, 0x7F	; 127
 1b8:	57 e4       	ldi	r21, 0x47	; 71
 1ba:	6d 85       	ldd	r22, Y+13	; 0x0d
 1bc:	7e 85       	ldd	r23, Y+14	; 0x0e
 1be:	8f 85       	ldd	r24, Y+15	; 0x0f
 1c0:	98 89       	ldd	r25, Y+16	; 0x10
 1c2:	82 d3       	rcall	.+1796   	; 0x8c8 <__gesf2>
 1c4:	18 16       	cp	r1, r24
 1c6:	0c f0       	brlt	.+2      	; 0x1ca <switch_on_leds_with_delay+0x98>
 1c8:	03 c0       	rjmp	.+6      	; 0x1d0 <switch_on_leds_with_delay+0x9e>
		__ticks = 0;	/* i.e. 65536 */
 1ca:	1c 86       	std	Y+12, r1	; 0x0c
 1cc:	1b 86       	std	Y+11, r1	; 0x0b
 1ce:	09 c0       	rjmp	.+18     	; 0x1e2 <switch_on_leds_with_delay+0xb0>
	else
		__ticks = (uint16_t)__tmp;
 1d0:	6d 85       	ldd	r22, Y+13	; 0x0d
 1d2:	7e 85       	ldd	r23, Y+14	; 0x0e
 1d4:	8f 85       	ldd	r24, Y+15	; 0x0f
 1d6:	98 89       	ldd	r25, Y+16	; 0x10
 1d8:	40 d3       	rcall	.+1664   	; 0x85a <__fixsfsi>
 1da:	dc 01       	movw	r26, r24
 1dc:	cb 01       	movw	r24, r22
 1de:	9c 87       	std	Y+12, r25	; 0x0c
 1e0:	8b 87       	std	Y+11, r24	; 0x0b
 1e2:	8b 85       	ldd	r24, Y+11	; 0x0b
 1e4:	9c 85       	ldd	r25, Y+12	; 0x0c
 1e6:	9a 8b       	std	Y+18, r25	; 0x12
 1e8:	89 8b       	std	Y+17, r24	; 0x11
 1ea:	89 89       	ldd	r24, Y+17	; 0x11
 1ec:	9a 89       	ldd	r25, Y+18	; 0x12
 1ee:	01 97       	sbiw	r24, 0x01	; 1
 1f0:	f1 f7       	brne	.-4      	; 0x1ee <switch_on_leds_with_delay+0xbc>
 1f2:	9a 8b       	std	Y+18, r25	; 0x12
 1f4:	89 8b       	std	Y+17, r24	; 0x11
        _delay_ms(delay);
        switch_on_led(i);
 1f6:	8d 81       	ldd	r24, Y+5	; 0x05
 1f8:	9e 81       	ldd	r25, Y+6	; 0x06
 1fa:	45 df       	rcall	.-374    	; 0x86 <switch_on_led>
 1fc:	8d 81       	ldd	r24, Y+5	; 0x05
 1fe:	9e 81       	ldd	r25, Y+6	; 0x06
 200:	01 96       	adiw	r24, 0x01	; 1
 202:	9e 83       	std	Y+6, r25	; 0x06
 204:	8d 83       	std	Y+5, r24	; 0x05
 206:	a7 cf       	rjmp	.-178    	; 0x156 <switch_on_leds_with_delay+0x24>
 208:	62 96       	adiw	r28, 0x12	; 18
 20a:	0f b6       	in	r0, 0x3f	; 63
 20c:	f8 94       	cli
 20e:	de bf       	out	0x3e, r29	; 62
 210:	0f be       	out	0x3f, r0	; 63
 212:	cd bf       	out	0x3d, r28	; 61
 214:	df 91       	pop	r29
 216:	cf 91       	pop	r28
 218:	08 95       	ret

0000021a <switch_off_leds_with_delay>:
    }
}

/*
 *  switch off every leds on after one with a delay (called "delay")
 */
void switch_off_leds_with_delay(double delay) {
 21a:	cf 93       	push	r28
 21c:	df 93       	push	r29
 21e:	cd b7       	in	r28, 0x3d	; 61
 220:	de b7       	in	r29, 0x3e	; 62
 222:	62 97       	sbiw	r28, 0x12	; 18
 224:	0f b6       	in	r0, 0x3f	; 63
 226:	f8 94       	cli
 228:	de bf       	out	0x3e, r29	; 62
 22a:	0f be       	out	0x3f, r0	; 63
 22c:	cd bf       	out	0x3d, r28	; 61
 22e:	69 83       	std	Y+1, r22	; 0x01
 230:	7a 83       	std	Y+2, r23	; 0x02
 232:	8b 83       	std	Y+3, r24	; 0x03
 234:	9c 83       	std	Y+4, r25	; 0x04
    int i;
    for(i = Nleds; i>=0; i--) {
 236:	88 e0       	ldi	r24, 0x08	; 8
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	9e 83       	std	Y+6, r25	; 0x06
 23c:	8d 83       	std	Y+5, r24	; 0x05
 23e:	8d 81       	ldd	r24, Y+5	; 0x05
 240:	9e 81       	ldd	r25, Y+6	; 0x06
 242:	99 23       	and	r25, r25
 244:	0c f4       	brge	.+2      	; 0x248 <switch_off_leds_with_delay+0x2e>
 246:	53 c0       	rjmp	.+166    	; 0x2ee <__stack+0x8f>
   The maximal possible delay is 262.14 ms / F_CPU in MHz.
 */
void
_delay_ms(double __ms)
{
 248:	89 81       	ldd	r24, Y+1	; 0x01
 24a:	9a 81       	ldd	r25, Y+2	; 0x02
 24c:	ab 81       	ldd	r26, Y+3	; 0x03
 24e:	bc 81       	ldd	r27, Y+4	; 0x04
 250:	8f 83       	std	Y+7, r24	; 0x07
 252:	98 87       	std	Y+8, r25	; 0x08
 254:	a9 87       	std	Y+9, r26	; 0x09
 256:	ba 87       	std	Y+10, r27	; 0x0a
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 258:	20 e0       	ldi	r18, 0x00	; 0
 25a:	30 e0       	ldi	r19, 0x00	; 0
 25c:	4a e7       	ldi	r20, 0x7A	; 122
 25e:	53 e4       	ldi	r21, 0x43	; 67
 260:	6f 81       	ldd	r22, Y+7	; 0x07
 262:	78 85       	ldd	r23, Y+8	; 0x08
 264:	89 85       	ldd	r24, Y+9	; 0x09
 266:	9a 85       	ldd	r25, Y+10	; 0x0a
 268:	9c d3       	rcall	.+1848   	; 0x9a2 <__mulsf3>
 26a:	dc 01       	movw	r26, r24
 26c:	cb 01       	movw	r24, r22
 26e:	8d 87       	std	Y+13, r24	; 0x0d
 270:	9e 87       	std	Y+14, r25	; 0x0e
 272:	af 87       	std	Y+15, r26	; 0x0f
 274:	b8 8b       	std	Y+16, r27	; 0x10
	if (__tmp < 1.0)
 276:	20 e0       	ldi	r18, 0x00	; 0
 278:	30 e0       	ldi	r19, 0x00	; 0
 27a:	40 e8       	ldi	r20, 0x80	; 128
 27c:	5f e3       	ldi	r21, 0x3F	; 63
 27e:	6d 85       	ldd	r22, Y+13	; 0x0d
 280:	7e 85       	ldd	r23, Y+14	; 0x0e
 282:	8f 85       	ldd	r24, Y+15	; 0x0f
 284:	98 89       	ldd	r25, Y+16	; 0x10
 286:	1d d3       	rcall	.+1594   	; 0x8c2 <__eqsf2>
 288:	88 23       	and	r24, r24
 28a:	0c f0       	brlt	.+2      	; 0x28e <__stack+0x2f>
 28c:	05 c0       	rjmp	.+10     	; 0x298 <__stack+0x39>
		__ticks = 1;
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	9c 87       	std	Y+12, r25	; 0x0c
 294:	8b 87       	std	Y+11, r24	; 0x0b
 296:	18 c0       	rjmp	.+48     	; 0x2c8 <__stack+0x69>
	else if (__tmp > 65535)
 298:	20 e0       	ldi	r18, 0x00	; 0
 29a:	3f ef       	ldi	r19, 0xFF	; 255
 29c:	4f e7       	ldi	r20, 0x7F	; 127
 29e:	57 e4       	ldi	r21, 0x47	; 71
 2a0:	6d 85       	ldd	r22, Y+13	; 0x0d
 2a2:	7e 85       	ldd	r23, Y+14	; 0x0e
 2a4:	8f 85       	ldd	r24, Y+15	; 0x0f
 2a6:	98 89       	ldd	r25, Y+16	; 0x10
 2a8:	0f d3       	rcall	.+1566   	; 0x8c8 <__gesf2>
 2aa:	18 16       	cp	r1, r24
 2ac:	0c f0       	brlt	.+2      	; 0x2b0 <__stack+0x51>
 2ae:	03 c0       	rjmp	.+6      	; 0x2b6 <__stack+0x57>
		__ticks = 0;	/* i.e. 65536 */
 2b0:	1c 86       	std	Y+12, r1	; 0x0c
 2b2:	1b 86       	std	Y+11, r1	; 0x0b
 2b4:	09 c0       	rjmp	.+18     	; 0x2c8 <__stack+0x69>
	else
		__ticks = (uint16_t)__tmp;
 2b6:	6d 85       	ldd	r22, Y+13	; 0x0d
 2b8:	7e 85       	ldd	r23, Y+14	; 0x0e
 2ba:	8f 85       	ldd	r24, Y+15	; 0x0f
 2bc:	98 89       	ldd	r25, Y+16	; 0x10
 2be:	cd d2       	rcall	.+1434   	; 0x85a <__fixsfsi>
 2c0:	dc 01       	movw	r26, r24
 2c2:	cb 01       	movw	r24, r22
 2c4:	9c 87       	std	Y+12, r25	; 0x0c
 2c6:	8b 87       	std	Y+11, r24	; 0x0b
 2c8:	8b 85       	ldd	r24, Y+11	; 0x0b
 2ca:	9c 85       	ldd	r25, Y+12	; 0x0c
 2cc:	9a 8b       	std	Y+18, r25	; 0x12
 2ce:	89 8b       	std	Y+17, r24	; 0x11
 2d0:	89 89       	ldd	r24, Y+17	; 0x11
 2d2:	9a 89       	ldd	r25, Y+18	; 0x12
 2d4:	01 97       	sbiw	r24, 0x01	; 1
 2d6:	f1 f7       	brne	.-4      	; 0x2d4 <__stack+0x75>
 2d8:	9a 8b       	std	Y+18, r25	; 0x12
 2da:	89 8b       	std	Y+17, r24	; 0x11
        _delay_ms(delay);
        switch_off_led(i);
 2dc:	8d 81       	ldd	r24, Y+5	; 0x05
 2de:	9e 81       	ldd	r25, Y+6	; 0x06
 2e0:	fe de       	rcall	.-516    	; 0xde <switch_off_led>
 2e2:	8d 81       	ldd	r24, Y+5	; 0x05
 2e4:	9e 81       	ldd	r25, Y+6	; 0x06
 2e6:	01 97       	sbiw	r24, 0x01	; 1
 2e8:	9e 83       	std	Y+6, r25	; 0x06
 2ea:	8d 83       	std	Y+5, r24	; 0x05
 2ec:	a8 cf       	rjmp	.-176    	; 0x23e <switch_off_leds_with_delay+0x24>
 2ee:	62 96       	adiw	r28, 0x12	; 18
 2f0:	0f b6       	in	r0, 0x3f	; 63
 2f2:	f8 94       	cli
 2f4:	de bf       	out	0x3e, r29	; 62
 2f6:	0f be       	out	0x3f, r0	; 63
 2f8:	cd bf       	out	0x3d, r28	; 61
 2fa:	df 91       	pop	r29
 2fc:	cf 91       	pop	r28
 2fe:	08 95       	ret

00000300 <test_leds>:
    }
}

/*
 * a function for testing leds that switch on every leds and switch off every leds (one after one)
 */
void test_leds() {
 300:	cf 93       	push	r28
 302:	df 93       	push	r29
 304:	cd b7       	in	r28, 0x3d	; 61
 306:	de b7       	in	r29, 0x3e	; 62
 308:	2c 97       	sbiw	r28, 0x0c	; 12
 30a:	0f b6       	in	r0, 0x3f	; 63
 30c:	f8 94       	cli
 30e:	de bf       	out	0x3e, r29	; 62
 310:	0f be       	out	0x3f, r0	; 63
 312:	cd bf       	out	0x3d, r28	; 61
    switch_on_leds_with_delay(100);
 314:	60 e0       	ldi	r22, 0x00	; 0
 316:	70 e0       	ldi	r23, 0x00	; 0
 318:	88 ec       	ldi	r24, 0xC8	; 200
 31a:	92 e4       	ldi	r25, 0x42	; 66
 31c:	0a df       	rcall	.-492    	; 0x132 <switch_on_leds_with_delay>
   The maximal possible delay is 262.14 ms / F_CPU in MHz.
 */
void
_delay_ms(double __ms)
{
 31e:	80 e0       	ldi	r24, 0x00	; 0
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	a8 e4       	ldi	r26, 0x48	; 72
 324:	b2 e4       	ldi	r27, 0x42	; 66
 326:	89 83       	std	Y+1, r24	; 0x01
 328:	9a 83       	std	Y+2, r25	; 0x02
 32a:	ab 83       	std	Y+3, r26	; 0x03
 32c:	bc 83       	std	Y+4, r27	; 0x04
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 32e:	20 e0       	ldi	r18, 0x00	; 0
 330:	30 e0       	ldi	r19, 0x00	; 0
 332:	4a e7       	ldi	r20, 0x7A	; 122
 334:	53 e4       	ldi	r21, 0x43	; 67
 336:	69 81       	ldd	r22, Y+1	; 0x01
 338:	7a 81       	ldd	r23, Y+2	; 0x02
 33a:	8b 81       	ldd	r24, Y+3	; 0x03
 33c:	9c 81       	ldd	r25, Y+4	; 0x04
 33e:	31 d3       	rcall	.+1634   	; 0x9a2 <__mulsf3>
 340:	dc 01       	movw	r26, r24
 342:	cb 01       	movw	r24, r22
 344:	8f 83       	std	Y+7, r24	; 0x07
 346:	98 87       	std	Y+8, r25	; 0x08
 348:	a9 87       	std	Y+9, r26	; 0x09
 34a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
 34c:	20 e0       	ldi	r18, 0x00	; 0
 34e:	30 e0       	ldi	r19, 0x00	; 0
 350:	40 e8       	ldi	r20, 0x80	; 128
 352:	5f e3       	ldi	r21, 0x3F	; 63
 354:	6f 81       	ldd	r22, Y+7	; 0x07
 356:	78 85       	ldd	r23, Y+8	; 0x08
 358:	89 85       	ldd	r24, Y+9	; 0x09
 35a:	9a 85       	ldd	r25, Y+10	; 0x0a
 35c:	b2 d2       	rcall	.+1380   	; 0x8c2 <__eqsf2>
 35e:	88 23       	and	r24, r24
 360:	0c f0       	brlt	.+2      	; 0x364 <test_leds+0x64>
 362:	05 c0       	rjmp	.+10     	; 0x36e <test_leds+0x6e>
		__ticks = 1;
 364:	81 e0       	ldi	r24, 0x01	; 1
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	9e 83       	std	Y+6, r25	; 0x06
 36a:	8d 83       	std	Y+5, r24	; 0x05
 36c:	18 c0       	rjmp	.+48     	; 0x39e <test_leds+0x9e>
	else if (__tmp > 65535)
 36e:	20 e0       	ldi	r18, 0x00	; 0
 370:	3f ef       	ldi	r19, 0xFF	; 255
 372:	4f e7       	ldi	r20, 0x7F	; 127
 374:	57 e4       	ldi	r21, 0x47	; 71
 376:	6f 81       	ldd	r22, Y+7	; 0x07
 378:	78 85       	ldd	r23, Y+8	; 0x08
 37a:	89 85       	ldd	r24, Y+9	; 0x09
 37c:	9a 85       	ldd	r25, Y+10	; 0x0a
 37e:	a4 d2       	rcall	.+1352   	; 0x8c8 <__gesf2>
 380:	18 16       	cp	r1, r24
 382:	0c f0       	brlt	.+2      	; 0x386 <test_leds+0x86>
 384:	03 c0       	rjmp	.+6      	; 0x38c <test_leds+0x8c>
		__ticks = 0;	/* i.e. 65536 */
 386:	1e 82       	std	Y+6, r1	; 0x06
 388:	1d 82       	std	Y+5, r1	; 0x05
 38a:	09 c0       	rjmp	.+18     	; 0x39e <test_leds+0x9e>
	else
		__ticks = (uint16_t)__tmp;
 38c:	6f 81       	ldd	r22, Y+7	; 0x07
 38e:	78 85       	ldd	r23, Y+8	; 0x08
 390:	89 85       	ldd	r24, Y+9	; 0x09
 392:	9a 85       	ldd	r25, Y+10	; 0x0a
 394:	62 d2       	rcall	.+1220   	; 0x85a <__fixsfsi>
 396:	dc 01       	movw	r26, r24
 398:	cb 01       	movw	r24, r22
 39a:	9e 83       	std	Y+6, r25	; 0x06
 39c:	8d 83       	std	Y+5, r24	; 0x05
 39e:	8d 81       	ldd	r24, Y+5	; 0x05
 3a0:	9e 81       	ldd	r25, Y+6	; 0x06
 3a2:	9c 87       	std	Y+12, r25	; 0x0c
 3a4:	8b 87       	std	Y+11, r24	; 0x0b
 3a6:	8b 85       	ldd	r24, Y+11	; 0x0b
 3a8:	9c 85       	ldd	r25, Y+12	; 0x0c
 3aa:	01 97       	sbiw	r24, 0x01	; 1
 3ac:	f1 f7       	brne	.-4      	; 0x3aa <test_leds+0xaa>
 3ae:	9c 87       	std	Y+12, r25	; 0x0c
 3b0:	8b 87       	std	Y+11, r24	; 0x0b
    _delay_ms(50);
    switch_off_leds_with_delay(100);
 3b2:	60 e0       	ldi	r22, 0x00	; 0
 3b4:	70 e0       	ldi	r23, 0x00	; 0
 3b6:	88 ec       	ldi	r24, 0xC8	; 200
 3b8:	92 e4       	ldi	r25, 0x42	; 66
 3ba:	2f df       	rcall	.-418    	; 0x21a <switch_off_leds_with_delay>
 3bc:	2c 96       	adiw	r28, 0x0c	; 12
 3be:	0f b6       	in	r0, 0x3f	; 63
 3c0:	f8 94       	cli
 3c2:	de bf       	out	0x3e, r29	; 62
 3c4:	0f be       	out	0x3f, r0	; 63
 3c6:	cd bf       	out	0x3d, r28	; 61
 3c8:	df 91       	pop	r29
 3ca:	cf 91       	pop	r28
 3cc:	08 95       	ret

000003ce <switch_on_min_dels>:
}

/*
 *  switch on every leds (from 0 to n)
 */
void switch_on_min_dels(int n) {
 3ce:	cf 93       	push	r28
 3d0:	df 93       	push	r29
 3d2:	cd b7       	in	r28, 0x3d	; 61
 3d4:	de b7       	in	r29, 0x3e	; 62
 3d6:	24 97       	sbiw	r28, 0x04	; 4
 3d8:	0f b6       	in	r0, 0x3f	; 63
 3da:	f8 94       	cli
 3dc:	de bf       	out	0x3e, r29	; 62
 3de:	0f be       	out	0x3f, r0	; 63
 3e0:	cd bf       	out	0x3d, r28	; 61
 3e2:	9a 83       	std	Y+2, r25	; 0x02
 3e4:	89 83       	std	Y+1, r24	; 0x01
    int i;
    for(i = 1; (i<=Nleds) && (i<=n); i++) {
 3e6:	81 e0       	ldi	r24, 0x01	; 1
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	9c 83       	std	Y+4, r25	; 0x04
 3ec:	8b 83       	std	Y+3, r24	; 0x03
 3ee:	8b 81       	ldd	r24, Y+3	; 0x03
 3f0:	9c 81       	ldd	r25, Y+4	; 0x04
 3f2:	89 30       	cpi	r24, 0x09	; 9
 3f4:	91 05       	cpc	r25, r1
 3f6:	84 f4       	brge	.+32     	; 0x418 <switch_on_min_dels+0x4a>
 3f8:	2b 81       	ldd	r18, Y+3	; 0x03
 3fa:	3c 81       	ldd	r19, Y+4	; 0x04
 3fc:	89 81       	ldd	r24, Y+1	; 0x01
 3fe:	9a 81       	ldd	r25, Y+2	; 0x02
 400:	82 17       	cp	r24, r18
 402:	93 07       	cpc	r25, r19
 404:	4c f0       	brlt	.+18     	; 0x418 <switch_on_min_dels+0x4a>
        switch_on_led(i);
 406:	8b 81       	ldd	r24, Y+3	; 0x03
 408:	9c 81       	ldd	r25, Y+4	; 0x04
 40a:	3d de       	rcall	.-902    	; 0x86 <switch_on_led>
 40c:	8b 81       	ldd	r24, Y+3	; 0x03
 40e:	9c 81       	ldd	r25, Y+4	; 0x04
 410:	01 96       	adiw	r24, 0x01	; 1
 412:	9c 83       	std	Y+4, r25	; 0x04
 414:	8b 83       	std	Y+3, r24	; 0x03
 416:	eb cf       	rjmp	.-42     	; 0x3ee <switch_on_min_dels+0x20>
 418:	24 96       	adiw	r28, 0x04	; 4
 41a:	0f b6       	in	r0, 0x3f	; 63
 41c:	f8 94       	cli
 41e:	de bf       	out	0x3e, r29	; 62
 420:	0f be       	out	0x3f, r0	; 63
 422:	cd bf       	out	0x3d, r28	; 61
 424:	df 91       	pop	r29
 426:	cf 91       	pop	r28
 428:	08 95       	ret

0000042a <switch_on_max_dels>:
    }
}

/*
 *  switch on every leds (from Nleds to n)
 */
void switch_on_max_dels(int n) {
 42a:	cf 93       	push	r28
 42c:	df 93       	push	r29
 42e:	cd b7       	in	r28, 0x3d	; 61
 430:	de b7       	in	r29, 0x3e	; 62
 432:	24 97       	sbiw	r28, 0x04	; 4
 434:	0f b6       	in	r0, 0x3f	; 63
 436:	f8 94       	cli
 438:	de bf       	out	0x3e, r29	; 62
 43a:	0f be       	out	0x3f, r0	; 63
 43c:	cd bf       	out	0x3d, r28	; 61
 43e:	9a 83       	std	Y+2, r25	; 0x02
 440:	89 83       	std	Y+1, r24	; 0x01
    int i;
    for(i = Nleds; i>=n; i--) {
 442:	88 e0       	ldi	r24, 0x08	; 8
 444:	90 e0       	ldi	r25, 0x00	; 0
 446:	9c 83       	std	Y+4, r25	; 0x04
 448:	8b 83       	std	Y+3, r24	; 0x03
 44a:	2b 81       	ldd	r18, Y+3	; 0x03
 44c:	3c 81       	ldd	r19, Y+4	; 0x04
 44e:	89 81       	ldd	r24, Y+1	; 0x01
 450:	9a 81       	ldd	r25, Y+2	; 0x02
 452:	28 17       	cp	r18, r24
 454:	39 07       	cpc	r19, r25
 456:	4c f0       	brlt	.+18     	; 0x46a <switch_on_max_dels+0x40>
        switch_on_led(i);
 458:	8b 81       	ldd	r24, Y+3	; 0x03
 45a:	9c 81       	ldd	r25, Y+4	; 0x04
 45c:	14 de       	rcall	.-984    	; 0x86 <switch_on_led>
 45e:	8b 81       	ldd	r24, Y+3	; 0x03
 460:	9c 81       	ldd	r25, Y+4	; 0x04
 462:	01 97       	sbiw	r24, 0x01	; 1
 464:	9c 83       	std	Y+4, r25	; 0x04
 466:	8b 83       	std	Y+3, r24	; 0x03
 468:	f0 cf       	rjmp	.-32     	; 0x44a <switch_on_max_dels+0x20>
 46a:	24 96       	adiw	r28, 0x04	; 4
 46c:	0f b6       	in	r0, 0x3f	; 63
 46e:	f8 94       	cli
 470:	de bf       	out	0x3e, r29	; 62
 472:	0f be       	out	0x3f, r0	; 63
 474:	cd bf       	out	0x3d, r28	; 61
 476:	df 91       	pop	r29
 478:	cf 91       	pop	r28
 47a:	08 95       	ret

0000047c <led_alarm>:
    }
}

/*
 * switch off every leds, wait and swith them all, n times (a sort of visual alarm)
 */
void led_alarm(int n) {
 47c:	cf 93       	push	r28
 47e:	df 93       	push	r29
 480:	cd b7       	in	r28, 0x3d	; 61
 482:	de b7       	in	r29, 0x3e	; 62
 484:	60 97       	sbiw	r28, 0x10	; 16
 486:	0f b6       	in	r0, 0x3f	; 63
 488:	f8 94       	cli
 48a:	de bf       	out	0x3e, r29	; 62
 48c:	0f be       	out	0x3f, r0	; 63
 48e:	cd bf       	out	0x3d, r28	; 61
 490:	9a 83       	std	Y+2, r25	; 0x02
 492:	89 83       	std	Y+1, r24	; 0x01
    int i;
    for(i = 1; i<=n; i++) {
 494:	81 e0       	ldi	r24, 0x01	; 1
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	9c 83       	std	Y+4, r25	; 0x04
 49a:	8b 83       	std	Y+3, r24	; 0x03
 49c:	2b 81       	ldd	r18, Y+3	; 0x03
 49e:	3c 81       	ldd	r19, Y+4	; 0x04
 4a0:	89 81       	ldd	r24, Y+1	; 0x01
 4a2:	9a 81       	ldd	r25, Y+2	; 0x02
 4a4:	82 17       	cp	r24, r18
 4a6:	93 07       	cpc	r25, r19
 4a8:	0c f4       	brge	.+2      	; 0x4ac <led_alarm+0x30>
 4aa:	9c c0       	rjmp	.+312    	; 0x5e4 <led_alarm+0x168>
        switch_off_all_leds();
 4ac:	e2 dd       	rcall	.-1084   	; 0x72 <switch_off_all_leds>
   The maximal possible delay is 262.14 ms / F_CPU in MHz.
 */
void
_delay_ms(double __ms)
{
 4ae:	80 e0       	ldi	r24, 0x00	; 0
 4b0:	90 e0       	ldi	r25, 0x00	; 0
 4b2:	a8 ec       	ldi	r26, 0xC8	; 200
 4b4:	b2 e4       	ldi	r27, 0x42	; 66
 4b6:	8d 83       	std	Y+5, r24	; 0x05
 4b8:	9e 83       	std	Y+6, r25	; 0x06
 4ba:	af 83       	std	Y+7, r26	; 0x07
 4bc:	b8 87       	std	Y+8, r27	; 0x08
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 4be:	20 e0       	ldi	r18, 0x00	; 0
 4c0:	30 e0       	ldi	r19, 0x00	; 0
 4c2:	4a e7       	ldi	r20, 0x7A	; 122
 4c4:	53 e4       	ldi	r21, 0x43	; 67
 4c6:	6d 81       	ldd	r22, Y+5	; 0x05
 4c8:	7e 81       	ldd	r23, Y+6	; 0x06
 4ca:	8f 81       	ldd	r24, Y+7	; 0x07
 4cc:	98 85       	ldd	r25, Y+8	; 0x08
 4ce:	69 d2       	rcall	.+1234   	; 0x9a2 <__mulsf3>
 4d0:	dc 01       	movw	r26, r24
 4d2:	cb 01       	movw	r24, r22
 4d4:	8b 87       	std	Y+11, r24	; 0x0b
 4d6:	9c 87       	std	Y+12, r25	; 0x0c
 4d8:	ad 87       	std	Y+13, r26	; 0x0d
 4da:	be 87       	std	Y+14, r27	; 0x0e
	if (__tmp < 1.0)
 4dc:	20 e0       	ldi	r18, 0x00	; 0
 4de:	30 e0       	ldi	r19, 0x00	; 0
 4e0:	40 e8       	ldi	r20, 0x80	; 128
 4e2:	5f e3       	ldi	r21, 0x3F	; 63
 4e4:	6b 85       	ldd	r22, Y+11	; 0x0b
 4e6:	7c 85       	ldd	r23, Y+12	; 0x0c
 4e8:	8d 85       	ldd	r24, Y+13	; 0x0d
 4ea:	9e 85       	ldd	r25, Y+14	; 0x0e
 4ec:	ea d1       	rcall	.+980    	; 0x8c2 <__eqsf2>
 4ee:	88 23       	and	r24, r24
 4f0:	0c f0       	brlt	.+2      	; 0x4f4 <led_alarm+0x78>
 4f2:	05 c0       	rjmp	.+10     	; 0x4fe <led_alarm+0x82>
		__ticks = 1;
 4f4:	81 e0       	ldi	r24, 0x01	; 1
 4f6:	90 e0       	ldi	r25, 0x00	; 0
 4f8:	9a 87       	std	Y+10, r25	; 0x0a
 4fa:	89 87       	std	Y+9, r24	; 0x09
 4fc:	18 c0       	rjmp	.+48     	; 0x52e <led_alarm+0xb2>
	else if (__tmp > 65535)
 4fe:	20 e0       	ldi	r18, 0x00	; 0
 500:	3f ef       	ldi	r19, 0xFF	; 255
 502:	4f e7       	ldi	r20, 0x7F	; 127
 504:	57 e4       	ldi	r21, 0x47	; 71
 506:	6b 85       	ldd	r22, Y+11	; 0x0b
 508:	7c 85       	ldd	r23, Y+12	; 0x0c
 50a:	8d 85       	ldd	r24, Y+13	; 0x0d
 50c:	9e 85       	ldd	r25, Y+14	; 0x0e
 50e:	dc d1       	rcall	.+952    	; 0x8c8 <__gesf2>
 510:	18 16       	cp	r1, r24
 512:	0c f0       	brlt	.+2      	; 0x516 <led_alarm+0x9a>
 514:	03 c0       	rjmp	.+6      	; 0x51c <led_alarm+0xa0>
		__ticks = 0;	/* i.e. 65536 */
 516:	1a 86       	std	Y+10, r1	; 0x0a
 518:	19 86       	std	Y+9, r1	; 0x09
 51a:	09 c0       	rjmp	.+18     	; 0x52e <led_alarm+0xb2>
	else
		__ticks = (uint16_t)__tmp;
 51c:	6b 85       	ldd	r22, Y+11	; 0x0b
 51e:	7c 85       	ldd	r23, Y+12	; 0x0c
 520:	8d 85       	ldd	r24, Y+13	; 0x0d
 522:	9e 85       	ldd	r25, Y+14	; 0x0e
 524:	9a d1       	rcall	.+820    	; 0x85a <__fixsfsi>
 526:	dc 01       	movw	r26, r24
 528:	cb 01       	movw	r24, r22
 52a:	9a 87       	std	Y+10, r25	; 0x0a
 52c:	89 87       	std	Y+9, r24	; 0x09
 52e:	89 85       	ldd	r24, Y+9	; 0x09
 530:	9a 85       	ldd	r25, Y+10	; 0x0a
 532:	98 8b       	std	Y+16, r25	; 0x10
 534:	8f 87       	std	Y+15, r24	; 0x0f
 536:	8f 85       	ldd	r24, Y+15	; 0x0f
 538:	98 89       	ldd	r25, Y+16	; 0x10
 53a:	01 97       	sbiw	r24, 0x01	; 1
 53c:	f1 f7       	brne	.-4      	; 0x53a <led_alarm+0xbe>
 53e:	98 8b       	std	Y+16, r25	; 0x10
 540:	8f 87       	std	Y+15, r24	; 0x0f
        _delay_ms(100);
        switch_on_all_leds();
 542:	8e dd       	rcall	.-1252   	; 0x60 <switch_on_all_leds>
   The maximal possible delay is 262.14 ms / F_CPU in MHz.
 */
void
_delay_ms(double __ms)
{
 544:	80 e0       	ldi	r24, 0x00	; 0
 546:	90 e0       	ldi	r25, 0x00	; 0
 548:	a8 ec       	ldi	r26, 0xC8	; 200
 54a:	b2 e4       	ldi	r27, 0x42	; 66
 54c:	8b 87       	std	Y+11, r24	; 0x0b
 54e:	9c 87       	std	Y+12, r25	; 0x0c
 550:	ad 87       	std	Y+13, r26	; 0x0d
 552:	be 87       	std	Y+14, r27	; 0x0e
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 554:	20 e0       	ldi	r18, 0x00	; 0
 556:	30 e0       	ldi	r19, 0x00	; 0
 558:	4a e7       	ldi	r20, 0x7A	; 122
 55a:	53 e4       	ldi	r21, 0x43	; 67
 55c:	6b 85       	ldd	r22, Y+11	; 0x0b
 55e:	7c 85       	ldd	r23, Y+12	; 0x0c
 560:	8d 85       	ldd	r24, Y+13	; 0x0d
 562:	9e 85       	ldd	r25, Y+14	; 0x0e
 564:	1e d2       	rcall	.+1084   	; 0x9a2 <__mulsf3>
 566:	dc 01       	movw	r26, r24
 568:	cb 01       	movw	r24, r22
 56a:	8d 83       	std	Y+5, r24	; 0x05
 56c:	9e 83       	std	Y+6, r25	; 0x06
 56e:	af 83       	std	Y+7, r26	; 0x07
 570:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
 572:	20 e0       	ldi	r18, 0x00	; 0
 574:	30 e0       	ldi	r19, 0x00	; 0
 576:	40 e8       	ldi	r20, 0x80	; 128
 578:	5f e3       	ldi	r21, 0x3F	; 63
 57a:	6d 81       	ldd	r22, Y+5	; 0x05
 57c:	7e 81       	ldd	r23, Y+6	; 0x06
 57e:	8f 81       	ldd	r24, Y+7	; 0x07
 580:	98 85       	ldd	r25, Y+8	; 0x08
 582:	9f d1       	rcall	.+830    	; 0x8c2 <__eqsf2>
 584:	88 23       	and	r24, r24
 586:	0c f0       	brlt	.+2      	; 0x58a <led_alarm+0x10e>
 588:	05 c0       	rjmp	.+10     	; 0x594 <led_alarm+0x118>
		__ticks = 1;
 58a:	81 e0       	ldi	r24, 0x01	; 1
 58c:	90 e0       	ldi	r25, 0x00	; 0
 58e:	98 8b       	std	Y+16, r25	; 0x10
 590:	8f 87       	std	Y+15, r24	; 0x0f
 592:	18 c0       	rjmp	.+48     	; 0x5c4 <led_alarm+0x148>
	else if (__tmp > 65535)
 594:	20 e0       	ldi	r18, 0x00	; 0
 596:	3f ef       	ldi	r19, 0xFF	; 255
 598:	4f e7       	ldi	r20, 0x7F	; 127
 59a:	57 e4       	ldi	r21, 0x47	; 71
 59c:	6d 81       	ldd	r22, Y+5	; 0x05
 59e:	7e 81       	ldd	r23, Y+6	; 0x06
 5a0:	8f 81       	ldd	r24, Y+7	; 0x07
 5a2:	98 85       	ldd	r25, Y+8	; 0x08
 5a4:	91 d1       	rcall	.+802    	; 0x8c8 <__gesf2>
 5a6:	18 16       	cp	r1, r24
 5a8:	0c f0       	brlt	.+2      	; 0x5ac <led_alarm+0x130>
 5aa:	03 c0       	rjmp	.+6      	; 0x5b2 <led_alarm+0x136>
		__ticks = 0;	/* i.e. 65536 */
 5ac:	18 8a       	std	Y+16, r1	; 0x10
 5ae:	1f 86       	std	Y+15, r1	; 0x0f
 5b0:	09 c0       	rjmp	.+18     	; 0x5c4 <led_alarm+0x148>
	else
		__ticks = (uint16_t)__tmp;
 5b2:	6d 81       	ldd	r22, Y+5	; 0x05
 5b4:	7e 81       	ldd	r23, Y+6	; 0x06
 5b6:	8f 81       	ldd	r24, Y+7	; 0x07
 5b8:	98 85       	ldd	r25, Y+8	; 0x08
 5ba:	4f d1       	rcall	.+670    	; 0x85a <__fixsfsi>
 5bc:	dc 01       	movw	r26, r24
 5be:	cb 01       	movw	r24, r22
 5c0:	98 8b       	std	Y+16, r25	; 0x10
 5c2:	8f 87       	std	Y+15, r24	; 0x0f
 5c4:	8f 85       	ldd	r24, Y+15	; 0x0f
 5c6:	98 89       	ldd	r25, Y+16	; 0x10
 5c8:	9a 87       	std	Y+10, r25	; 0x0a
 5ca:	89 87       	std	Y+9, r24	; 0x09
 5cc:	89 85       	ldd	r24, Y+9	; 0x09
 5ce:	9a 85       	ldd	r25, Y+10	; 0x0a
 5d0:	01 97       	sbiw	r24, 0x01	; 1
 5d2:	f1 f7       	brne	.-4      	; 0x5d0 <led_alarm+0x154>
 5d4:	9a 87       	std	Y+10, r25	; 0x0a
 5d6:	89 87       	std	Y+9, r24	; 0x09
 5d8:	8b 81       	ldd	r24, Y+3	; 0x03
 5da:	9c 81       	ldd	r25, Y+4	; 0x04
 5dc:	01 96       	adiw	r24, 0x01	; 1
 5de:	9c 83       	std	Y+4, r25	; 0x04
 5e0:	8b 83       	std	Y+3, r24	; 0x03
 5e2:	5c cf       	rjmp	.-328    	; 0x49c <led_alarm+0x20>
 5e4:	60 96       	adiw	r28, 0x10	; 16
 5e6:	0f b6       	in	r0, 0x3f	; 63
 5e8:	f8 94       	cli
 5ea:	de bf       	out	0x3e, r29	; 62
 5ec:	0f be       	out	0x3f, r0	; 63
 5ee:	cd bf       	out	0x3d, r28	; 61
 5f0:	df 91       	pop	r29
 5f2:	cf 91       	pop	r28
 5f4:	08 95       	ret

000005f6 <show_percent>:
        _delay_ms(100);
    }
}

/*
 * switch on every dels depending of the percentage p
 */
void show_percent(double p) {
 5f6:	cf 93       	push	r28
 5f8:	df 93       	push	r29
 5fa:	cd b7       	in	r28, 0x3d	; 61
 5fc:	de b7       	in	r29, 0x3e	; 62
 5fe:	26 97       	sbiw	r28, 0x06	; 6
 600:	0f b6       	in	r0, 0x3f	; 63
 602:	f8 94       	cli
 604:	de bf       	out	0x3e, r29	; 62
 606:	0f be       	out	0x3f, r0	; 63
 608:	cd bf       	out	0x3d, r28	; 61
 60a:	69 83       	std	Y+1, r22	; 0x01
 60c:	7a 83       	std	Y+2, r23	; 0x02
 60e:	8b 83       	std	Y+3, r24	; 0x03
 610:	9c 83       	std	Y+4, r25	; 0x04
    // p pourcent
    int n;
    //n = 4;
    n = floor(p / 100.0 * Nleds); // TO FIX (math.h ceil floor ...)
 612:	20 e0       	ldi	r18, 0x00	; 0
 614:	30 e0       	ldi	r19, 0x00	; 0
 616:	48 ec       	ldi	r20, 0xC8	; 200
 618:	52 e4       	ldi	r21, 0x42	; 66
 61a:	69 81       	ldd	r22, Y+1	; 0x01
 61c:	7a 81       	ldd	r23, Y+2	; 0x02
 61e:	8b 81       	ldd	r24, Y+3	; 0x03
 620:	9c 81       	ldd	r25, Y+4	; 0x04
 622:	d5 d0       	rcall	.+426    	; 0x7ce <__divsf3>
 624:	dc 01       	movw	r26, r24
 626:	cb 01       	movw	r24, r22
 628:	20 e0       	ldi	r18, 0x00	; 0
 62a:	30 e0       	ldi	r19, 0x00	; 0
 62c:	40 e0       	ldi	r20, 0x00	; 0
 62e:	51 e4       	ldi	r21, 0x41	; 65
 630:	bc 01       	movw	r22, r24
 632:	cd 01       	movw	r24, r26
 634:	b6 d1       	rcall	.+876    	; 0x9a2 <__mulsf3>
 636:	dc 01       	movw	r26, r24
 638:	cb 01       	movw	r24, r22
 63a:	bc 01       	movw	r22, r24
 63c:	cd 01       	movw	r24, r26
 63e:	28 d1       	rcall	.+592    	; 0x890 <floor>
 640:	dc 01       	movw	r26, r24
 642:	cb 01       	movw	r24, r22
 644:	bc 01       	movw	r22, r24
 646:	cd 01       	movw	r24, r26
 648:	08 d1       	rcall	.+528    	; 0x85a <__fixsfsi>
 64a:	dc 01       	movw	r26, r24
 64c:	cb 01       	movw	r24, r22
 64e:	9e 83       	std	Y+6, r25	; 0x06
 650:	8d 83       	std	Y+5, r24	; 0x05
    switch_on_min_dels(n);
 652:	8d 81       	ldd	r24, Y+5	; 0x05
 654:	9e 81       	ldd	r25, Y+6	; 0x06
 656:	bb de       	rcall	.-650    	; 0x3ce <switch_on_min_dels>
 658:	26 96       	adiw	r28, 0x06	; 6
 65a:	0f b6       	in	r0, 0x3f	; 63
 65c:	f8 94       	cli
 65e:	de bf       	out	0x3e, r29	; 62
 660:	0f be       	out	0x3f, r0	; 63
 662:	cd bf       	out	0x3d, r28	; 61
 664:	df 91       	pop	r29
 666:	cf 91       	pop	r28
 668:	08 95       	ret

0000066a <StartStopChronometer>:
}


/*
 * Start or stop chronometer
 */
void StartStopChronometer() {
 66a:	cf 93       	push	r28
 66c:	df 93       	push	r29
 66e:	cd b7       	in	r28, 0x3d	; 61
 670:	de b7       	in	r29, 0x3e	; 62
    led_alarm(3);
 672:	83 e0       	ldi	r24, 0x03	; 3
 674:	90 e0       	ldi	r25, 0x00	; 0
 676:	02 df       	rcall	.-508    	; 0x47c <led_alarm>
 678:	df 91       	pop	r29
 67a:	cf 91       	pop	r28
 67c:	08 95       	ret

0000067e <__vector_1>:
}

/*
 * Interrupt handler example for INT0
 */
SIGNAL(SIG_INTERRUPT0) {
 67e:	1f 92       	push	r1
 680:	0f 92       	push	r0
 682:	0f b6       	in	r0, 0x3f	; 63
 684:	0f 92       	push	r0
 686:	11 24       	eor	r1, r1
 688:	2f 93       	push	r18
 68a:	3f 93       	push	r19
 68c:	4f 93       	push	r20
 68e:	5f 93       	push	r21
 690:	6f 93       	push	r22
 692:	7f 93       	push	r23
 694:	8f 93       	push	r24
 696:	9f 93       	push	r25
 698:	af 93       	push	r26
 69a:	bf 93       	push	r27
 69c:	ef 93       	push	r30
 69e:	ff 93       	push	r31
 6a0:	cf 93       	push	r28
 6a2:	df 93       	push	r29
 6a4:	cd b7       	in	r28, 0x3d	; 61
 6a6:	de b7       	in	r29, 0x3e	; 62
    //StartStopChronometer();
    switch_on_led(8);
 6a8:	88 e0       	ldi	r24, 0x08	; 8
 6aa:	90 e0       	ldi	r25, 0x00	; 0
 6ac:	ec dc       	rcall	.-1576   	; 0x86 <switch_on_led>
 6ae:	df 91       	pop	r29
 6b0:	cf 91       	pop	r28
 6b2:	ff 91       	pop	r31
 6b4:	ef 91       	pop	r30
 6b6:	bf 91       	pop	r27
 6b8:	af 91       	pop	r26
 6ba:	9f 91       	pop	r25
 6bc:	8f 91       	pop	r24
 6be:	7f 91       	pop	r23
 6c0:	6f 91       	pop	r22
 6c2:	5f 91       	pop	r21
 6c4:	4f 91       	pop	r20
 6c6:	3f 91       	pop	r19
 6c8:	2f 91       	pop	r18
 6ca:	0f 90       	pop	r0
 6cc:	0f be       	out	0x3f, r0	; 63
 6ce:	0f 90       	pop	r0
 6d0:	1f 90       	pop	r1
 6d2:	18 95       	reti

000006d4 <init>:
}



/*
 *  init function
 */
void init() {
 6d4:	cf 93       	push	r28
 6d6:	df 93       	push	r29
 6d8:	cd b7       	in	r28, 0x3d	; 61
 6da:	de b7       	in	r29, 0x3e	; 62
   // ********
   // * Dels *
   // ********
   DDRC=0xFF; // set up PORTD pins 0 to 7 as output
 6dc:	8f ef       	ldi	r24, 0xFF	; 255
 6de:	80 93 34 00 	sts	0x0034, r24
   //switch_on_all_leds();
   switch_off_all_leds();
 6e2:	c7 dc       	rcall	.-1650   	; 0x72 <switch_off_all_leds>

   // *********************************
   // * Start/Stop chronometer (INT0) *
   // *********************************
   // Set Pin 6 (PD2) as the pin to use for this example
   //PCMSK |= (1<<PIND2); // TO FIX

   // interrupt on INT0 pin falling edge (sensor triggered)
   MCUCR = (1<<ISC01) | (1<<ISC00);
 6e4:	83 e0       	ldi	r24, 0x03	; 3
 6e6:	80 93 55 00 	sts	0x0055, r24

   // turn on interrupts!
   //GIMSK  |= (1<<INT0); // TO FIX

   // *************************************************
   // * Conv Analog to Digital (CAN for RPM and Temp) *
   // *************************************************

/*
	ADCSRA |= (_BV(ADEN));   // enable ADC (turn on ADC power)
	ADCSRA &= ~(_BV(ADATE)); // default to single sample convert mode

   //  set default prescaler 0x06 -> CPU clk/64      a2dSetPrescaler(0x06)
   ADCSRA = (((ADCSRA) & ~0x07) | 0x06); // ADC_PRESCALE_MASK 0x07
	
   //	a2dSetReference(0x01);	// set default reference ADC_REFERENCE=0x01  ADC_REFERENCE_MASK=
   ADMUX = (((ADMUX) & ~0xC0) | (0x01<<6));
	
	ADMUX &= ~(_BV(ADLAR));  // set to right-adjusted result
   ADCSRA |= (_BV(ADIE));   // enable ADC interrupts

	a2dCompleteFlag = 0;		// clear conversion complete flag (FALSE=0 TRUE=-1)

	__asm__ __volatile__ ("sei" ::);
*/
	
	// configure a2d port (PORTA) as input
	// so we can receive analog signals
   DDRA=0x00;
 6ea:	10 92 3a 00 	sts	0x003A, r1
	// make sure pull-up resistors are turned off
	PORTA = 0x00;
 6ee:	10 92 3b 00 	sts	0x003B, r1
 6f2:	df 91       	pop	r29
 6f4:	cf 91       	pop	r28
 6f6:	08 95       	ret

000006f8 <adcConvert10bit>:

   // ***************
   // * Graphic LCD *
   // ***************
}

/*
 * convert from analog to digital (10 bits)
 */
unsigned short adcConvert10bit(unsigned char ch)
{
 6f8:	cf 93       	push	r28
 6fa:	df 93       	push	r29
 6fc:	cd b7       	in	r28, 0x3d	; 61
 6fe:	de b7       	in	r29, 0x3e	; 62
 700:	21 97       	sbiw	r28, 0x01	; 1
 702:	0f b6       	in	r0, 0x3f	; 63
 704:	f8 94       	cli
 706:	de bf       	out	0x3e, r29	; 62
 708:	0f be       	out	0x3f, r0	; 63
 70a:	cd bf       	out	0x3d, r28	; 61
 70c:	89 83       	std	Y+1, r24	; 0x01
	a2dCompleteFlag = 0;				// clear conversion complete flag
 70e:	10 92 60 00 	sts	0x0060, r1
	ADMUX = ((ADMUX) & ~0x1F) | (ch & 0x1F);	// set channel ADC_MUX_MASK=0x1F
 712:	80 91 27 00 	lds	r24, 0x0027
 716:	98 2f       	mov	r25, r24
 718:	90 7e       	andi	r25, 0xE0	; 224
 71a:	89 81       	ldd	r24, Y+1	; 0x01
 71c:	8f 71       	andi	r24, 0x1F	; 31
 71e:	89 2b       	or	r24, r25
 720:	80 93 27 00 	sts	0x0027, r24
	ADCSRA |= (_BV(ADIF)); // clear hardware "conversion complete" flag
 724:	80 91 26 00 	lds	r24, 0x0026
 728:	80 61       	ori	r24, 0x10	; 16
 72a:	80 93 26 00 	sts	0x0026, r24
	ADCSRA |= (_BV(ADSC)); // start conversion
 72e:	80 91 26 00 	lds	r24, 0x0026
 732:	80 64       	ori	r24, 0x40	; 64
 734:	80 93 26 00 	sts	0x0026, r24
							
	//while(!a2dCompleteFlag);				// wait until conversion complete
	//while( bit_is_clear(ADCSR, ADIF) );		// wait until conversion complete
	while( bit_is_set(ADCSRA, ADSC) );		// wait until conversion complete
 738:	80 91 26 00 	lds	r24, 0x0026
 73c:	99 27       	eor	r25, r25
 73e:	80 74       	andi	r24, 0x40	; 64
 740:	90 70       	andi	r25, 0x00	; 0
 742:	00 97       	sbiw	r24, 0x00	; 0
 744:	09 f0       	breq	.+2      	; 0x748 <adcConvert10bit+0x50>
 746:	f8 cf       	rjmp	.-16     	; 0x738 <adcConvert10bit+0x40>

	// CAUTION: MUST READ ADCL BEFORE ADCH!!!
	return ((ADCL) | ((ADCH)<<8));	// read ADC (full 10 bits);
 748:	80 91 24 00 	lds	r24, 0x0024
 74c:	28 2f       	mov	r18, r24
 74e:	33 27       	eor	r19, r19
 750:	80 91 25 00 	lds	r24, 0x0025
 754:	99 27       	eor	r25, r25
 756:	98 2f       	mov	r25, r24
 758:	88 27       	eor	r24, r24
 75a:	28 2b       	or	r18, r24
 75c:	39 2b       	or	r19, r25
 75e:	c9 01       	movw	r24, r18
 760:	21 96       	adiw	r28, 0x01	; 1
 762:	0f b6       	in	r0, 0x3f	; 63
 764:	f8 94       	cli
 766:	de bf       	out	0x3e, r29	; 62
 768:	0f be       	out	0x3f, r0	; 63
 76a:	cd bf       	out	0x3d, r28	; 61
 76c:	df 91       	pop	r29
 76e:	cf 91       	pop	r28
 770:	08 95       	ret

00000772 <adcConvert8bit>:
}

/*
 * convert from analog to digital (8 bits)
 * starts conversion, waits until conversion is done, and returns result
 */
unsigned char adcConvert8bit(unsigned char ch)
{
 772:	cf 93       	push	r28
 774:	df 93       	push	r29
 776:	cd b7       	in	r28, 0x3d	; 61
 778:	de b7       	in	r29, 0x3e	; 62
 77a:	21 97       	sbiw	r28, 0x01	; 1
 77c:	0f b6       	in	r0, 0x3f	; 63
 77e:	f8 94       	cli
 780:	de bf       	out	0x3e, r29	; 62
 782:	0f be       	out	0x3f, r0	; 63
 784:	cd bf       	out	0x3d, r28	; 61
 786:	89 83       	std	Y+1, r24	; 0x01
	// do 10-bit conversion and return highest 8 bits
	return adcConvert10bit(ch)>>2;			// return ADC MSB byte
 788:	89 81       	ldd	r24, Y+1	; 0x01
 78a:	b6 df       	rcall	.-148    	; 0x6f8 <adcConvert10bit>
 78c:	96 95       	lsr	r25
 78e:	87 95       	ror	r24
 790:	96 95       	lsr	r25
 792:	87 95       	ror	r24
 794:	99 27       	eor	r25, r25
 796:	21 96       	adiw	r28, 0x01	; 1
 798:	0f b6       	in	r0, 0x3f	; 63
 79a:	f8 94       	cli
 79c:	de bf       	out	0x3e, r29	; 62
 79e:	0f be       	out	0x3f, r0	; 63
 7a0:	cd bf       	out	0x3d, r28	; 61
 7a2:	df 91       	pop	r29
 7a4:	cf 91       	pop	r28
 7a6:	08 95       	ret

000007a8 <loop>:
}

/*
 *  This is the main loop
 */
void loop(void) {
 7a8:	cf 93       	push	r28
 7aa:	df 93       	push	r29
 7ac:	cd b7       	in	r28, 0x3d	; 61
 7ae:	de b7       	in	r29, 0x3e	; 62
   show_percent(0x80 * 100 / 0xFF);
 7b0:	60 e0       	ldi	r22, 0x00	; 0
 7b2:	70 e0       	ldi	r23, 0x00	; 0
 7b4:	88 e4       	ldi	r24, 0x48	; 72
 7b6:	92 e4       	ldi	r25, 0x42	; 66
 7b8:	1e df       	rcall	.-452    	; 0x5f6 <show_percent>
 7ba:	df 91       	pop	r29
 7bc:	cf 91       	pop	r28
 7be:	08 95       	ret

000007c0 <main>:
   //show_percent(adcConvert10bit(0));

   //show_percent(25);
   //_delay_ms(500);                                how
   //show_percent(50);
   //_delay_ms(500);
   //show_percent(100);

   //led_alarm(3);

   //test_leds();
   //switch_on_min_dels(5);
   //switch_on_max_dels(3);

	//switch_on_led(3);
	//switch_on_led(5);
	//switch_on_led(7);	
	
	//switch_off_led(5);
}


/*
 * Main program
 */
int main(void) {
 7c0:	cf e5       	ldi	r28, 0x5F	; 95
 7c2:	d2 e0       	ldi	r29, 0x02	; 2
 7c4:	de bf       	out	0x3e, r29	; 62
 7c6:	cd bf       	out	0x3d, r28	; 61
   init();
 7c8:	85 df       	rcall	.-246    	; 0x6d4 <init>

   while(1) {             // Infinite loop; define here the
      loop();      // system behaviour
 7ca:	ee df       	rcall	.-36     	; 0x7a8 <loop>
 7cc:	fe cf       	rjmp	.-4      	; 0x7ca <main+0xa>

000007ce <__divsf3>:
 7ce:	bb d0       	rcall	.+374    	; 0x946 <__fp_split3>
 7d0:	01 d0       	rcall	.+2      	; 0x7d4 <__divsf3x>
 7d2:	9e c0       	rjmp	.+316    	; 0x910 <__fp_merge>

000007d4 <__divsf3x>:
 7d4:	55 23       	and	r21, r21
 7d6:	59 f0       	breq	.+22     	; 0x7ee <__divsf3x+0x1a>
 7d8:	99 23       	and	r25, r25
 7da:	69 f0       	breq	.+26     	; 0x7f6 <__divsf3x+0x22>
 7dc:	9f 57       	subi	r25, 0x7F	; 127
 7de:	5f 57       	subi	r21, 0x7F	; 127
 7e0:	95 1b       	sub	r25, r21
 7e2:	33 f4       	brvc	.+12     	; 0x7f0 <__divsf3x+0x1c>
 7e4:	42 f4       	brpl	.+16     	; 0x7f6 <__divsf3x+0x22>
 7e6:	90 38       	cpi	r25, 0x80	; 128
 7e8:	11 f4       	brne	.+4      	; 0x7ee <__divsf3x+0x1a>
 7ea:	91 58       	subi	r25, 0x81	; 129
 7ec:	05 c0       	rjmp	.+10     	; 0x7f8 <__divsf3x+0x24>
 7ee:	a8 c0       	rjmp	.+336    	; 0x940 <__fp_nan>
 7f0:	91 58       	subi	r25, 0x81	; 129
 7f2:	9f 3f       	cpi	r25, 0xFF	; 255
 7f4:	09 f4       	brne	.+2      	; 0x7f8 <__divsf3x+0x24>
 7f6:	d3 c0       	rjmp	.+422    	; 0x99e <__fp_zerox>
 7f8:	bb 27       	eor	r27, r27
 7fa:	11 24       	eor	r1, r1
 7fc:	62 17       	cp	r22, r18
 7fe:	73 07       	cpc	r23, r19
 800:	84 07       	cpc	r24, r20
 802:	30 f4       	brcc	.+12     	; 0x810 <__divsf3x+0x3c>
 804:	66 0f       	add	r22, r22
 806:	77 1f       	adc	r23, r23
 808:	88 1f       	adc	r24, r24
 80a:	bb 1f       	adc	r27, r27
 80c:	91 50       	subi	r25, 0x01	; 1
 80e:	98 f3       	brcs	.-26     	; 0x7f6 <__divsf3x+0x22>
 810:	11 d0       	rcall	.+34     	; 0x834 <__divsf3x+0x60>
 812:	0f 92       	push	r0
 814:	0f d0       	rcall	.+30     	; 0x834 <__divsf3x+0x60>
 816:	0f 92       	push	r0
 818:	0d d0       	rcall	.+26     	; 0x834 <__divsf3x+0x60>
 81a:	a0 e8       	ldi	r26, 0x80	; 128
 81c:	26 17       	cp	r18, r22
 81e:	37 07       	cpc	r19, r23
 820:	48 07       	cpc	r20, r24
 822:	1b 06       	cpc	r1, r27
 824:	09 f0       	breq	.+2      	; 0x828 <__divsf3x+0x54>
 826:	a0 48       	sbci	r26, 0x80	; 128
 828:	ba 2f       	mov	r27, r26
 82a:	60 2d       	mov	r22, r0
 82c:	7f 91       	pop	r23
 82e:	8f 91       	pop	r24
 830:	00 24       	eor	r0, r0
 832:	08 95       	ret
 834:	a0 e8       	ldi	r26, 0x80	; 128
 836:	00 24       	eor	r0, r0
 838:	62 17       	cp	r22, r18
 83a:	73 07       	cpc	r23, r19
 83c:	84 07       	cpc	r24, r20
 83e:	b1 05       	cpc	r27, r1
 840:	28 f0       	brcs	.+10     	; 0x84c <__divsf3x+0x78>
 842:	62 1b       	sub	r22, r18
 844:	73 0b       	sbc	r23, r19
 846:	84 0b       	sbc	r24, r20
 848:	b1 09       	sbc	r27, r1
 84a:	0a 2a       	or	r0, r26
 84c:	66 0f       	add	r22, r22
 84e:	77 1f       	adc	r23, r23
 850:	88 1f       	adc	r24, r24
 852:	bb 1f       	adc	r27, r27
 854:	a6 95       	lsr	r26
 856:	81 f7       	brne	.-32     	; 0x838 <__divsf3x+0x64>
 858:	08 95       	ret

0000085a <__fixsfsi>:
 85a:	97 fb       	bst	r25, 7
 85c:	80 d0       	rcall	.+256    	; 0x95e <__fp_split1>
 85e:	9f 37       	cpi	r25, 0x7F	; 127
 860:	38 f0       	brcs	.+14     	; 0x870 <__fixsfsi+0x16>
 862:	fe e9       	ldi	r31, 0x9E	; 158
 864:	f9 1b       	sub	r31, r25
 866:	98 2f       	mov	r25, r24
 868:	87 2f       	mov	r24, r23
 86a:	76 2f       	mov	r23, r22
 86c:	6b 2f       	mov	r22, r27
 86e:	05 c0       	rjmp	.+10     	; 0x87a <__fixsfsi+0x20>
 870:	93 c0       	rjmp	.+294    	; 0x998 <__fp_zero>
 872:	96 95       	lsr	r25
 874:	87 95       	ror	r24
 876:	77 95       	ror	r23
 878:	67 95       	ror	r22
 87a:	f1 50       	subi	r31, 0x01	; 1
 87c:	d0 f7       	brcc	.-12     	; 0x872 <__fixsfsi+0x18>
 87e:	3e f4       	brtc	.+14     	; 0x88e <__fp_lneg+0xe>

00000880 <__fp_lneg>:
 880:	90 95       	com	r25
 882:	80 95       	com	r24
 884:	70 95       	com	r23
 886:	61 95       	neg	r22
 888:	7f 4f       	sbci	r23, 0xFF	; 255
 88a:	8f 4f       	sbci	r24, 0xFF	; 255
 88c:	9f 4f       	sbci	r25, 0xFF	; 255
 88e:	08 95       	ret

00000890 <floor>:
 890:	74 d0       	rcall	.+232    	; 0x97a <__fp_split_a>
 892:	9f 37       	cpi	r25, 0x7F	; 127
 894:	60 f4       	brcc	.+24     	; 0x8ae <floor+0x1e>
 896:	0e f0       	brts	.+2      	; 0x89a <floor+0xa>
 898:	7f c0       	rjmp	.+254    	; 0x998 <__fp_zero>
 89a:	9f eb       	ldi	r25, 0xBF	; 191
 89c:	80 e8       	ldi	r24, 0x80	; 128
 89e:	77 27       	eor	r23, r23
 8a0:	66 27       	eor	r22, r22
 8a2:	08 95       	ret
 8a4:	86 95       	lsr	r24
 8a6:	77 95       	ror	r23
 8a8:	67 95       	ror	r22
 8aa:	b1 1d       	adc	r27, r1
 8ac:	93 95       	inc	r25
 8ae:	96 39       	cpi	r25, 0x96	; 150
 8b0:	c8 f3       	brcs	.-14     	; 0x8a4 <floor+0x14>
 8b2:	2e f4       	brtc	.+10     	; 0x8be <floor+0x2e>
 8b4:	bb 23       	and	r27, r27
 8b6:	19 f0       	breq	.+6      	; 0x8be <floor+0x2e>
 8b8:	6f 5f       	subi	r22, 0xFF	; 255
 8ba:	7f 4f       	sbci	r23, 0xFF	; 255
 8bc:	8f 4f       	sbci	r24, 0xFF	; 255
 8be:	bb 27       	eor	r27, r27
 8c0:	27 c0       	rjmp	.+78     	; 0x910 <__fp_merge>

000008c2 <__eqsf2>:
 8c2:	0e d0       	rcall	.+28     	; 0x8e0 <.fp_cmp>
 8c4:	5e f0       	brts	.+22     	; 0x8dc <__cmpsf2+0xe>
 8c6:	04 c0       	rjmp	.+8      	; 0x8d0 <__cmpsf2+0x2>

000008c8 <__gesf2>:
 8c8:	0b d0       	rcall	.+22     	; 0x8e0 <.fp_cmp>
 8ca:	26 f0       	brts	.+8      	; 0x8d4 <__cmpsf2+0x6>
 8cc:	01 c0       	rjmp	.+2      	; 0x8d0 <__cmpsf2+0x2>

000008ce <__cmpsf2>:
 8ce:	08 d0       	rcall	.+16     	; 0x8e0 <.fp_cmp>
 8d0:	19 f0       	breq	.+6      	; 0x8d8 <__cmpsf2+0xa>
 8d2:	20 f4       	brcc	.+8      	; 0x8dc <__cmpsf2+0xe>
 8d4:	8f ef       	ldi	r24, 0xFF	; 255
 8d6:	08 95       	ret
 8d8:	80 e0       	ldi	r24, 0x00	; 0
 8da:	08 95       	ret
 8dc:	81 e0       	ldi	r24, 0x01	; 1
 8de:	08 95       	ret

000008e0 <.fp_cmp>:
 8e0:	97 fb       	bst	r25, 7
 8e2:	09 2e       	mov	r0, r25
 8e4:	05 26       	eor	r0, r21
 8e6:	00 f8       	bld	r0, 0
 8e8:	68 94       	set
 8ea:	30 d0       	rcall	.+96     	; 0x94c <__fp_split2>
 8ec:	e8 94       	clt
 8ee:	07 fc       	sbrc	r0, 7
 8f0:	07 c0       	rjmp	.+14     	; 0x900 <.fp_cmp+0x20>
 8f2:	62 17       	cp	r22, r18
 8f4:	73 07       	cpc	r23, r19
 8f6:	84 07       	cpc	r24, r20
 8f8:	95 07       	cpc	r25, r21
 8fa:	21 f0       	breq	.+8      	; 0x904 <.fp_cmp+0x24>
 8fc:	08 f4       	brcc	.+2      	; 0x900 <.fp_cmp+0x20>
 8fe:	00 94       	com	r0
 900:	07 94       	ror	r0
 902:	98 94       	clz
 904:	08 95       	ret
 906:	9a 95       	dec	r25
 908:	bb 0f       	add	r27, r27
 90a:	66 1f       	adc	r22, r22
 90c:	77 1f       	adc	r23, r23
 90e:	88 1f       	adc	r24, r24

00000910 <__fp_merge>:
 910:	11 24       	eor	r1, r1
 912:	99 23       	and	r25, r25
 914:	a1 f0       	breq	.+40     	; 0x93e <__fp_merge+0x2e>
 916:	88 23       	and	r24, r24
 918:	b2 f7       	brpl	.-20     	; 0x906 <.fp_cmp+0x26>
 91a:	9f 3f       	cpi	r25, 0xFF	; 255
 91c:	59 f0       	breq	.+22     	; 0x934 <__fp_merge+0x24>
 91e:	bb 0f       	add	r27, r27
 920:	48 f4       	brcc	.+18     	; 0x934 <__fp_merge+0x24>
 922:	21 f4       	brne	.+8      	; 0x92c <__fp_merge+0x1c>
 924:	00 20       	and	r0, r0
 926:	11 f4       	brne	.+4      	; 0x92c <__fp_merge+0x1c>
 928:	60 ff       	sbrs	r22, 0
 92a:	04 c0       	rjmp	.+8      	; 0x934 <__fp_merge+0x24>
 92c:	6f 5f       	subi	r22, 0xFF	; 255
 92e:	7f 4f       	sbci	r23, 0xFF	; 255
 930:	8f 4f       	sbci	r24, 0xFF	; 255
 932:	9f 4f       	sbci	r25, 0xFF	; 255
 934:	88 1f       	adc	r24, r24
 936:	97 95       	ror	r25
 938:	87 95       	ror	r24
 93a:	97 f9       	bld	r25, 7
 93c:	08 95       	ret
 93e:	2c c0       	rjmp	.+88     	; 0x998 <__fp_zero>

00000940 <__fp_nan>:
 940:	9f ef       	ldi	r25, 0xFF	; 255
 942:	80 ec       	ldi	r24, 0xC0	; 192
 944:	08 95       	ret

00000946 <__fp_split3>:
 946:	05 2e       	mov	r0, r21
 948:	09 26       	eor	r0, r25
 94a:	07 fa       	bst	r0, 7

0000094c <__fp_split2>:
 94c:	44 0f       	add	r20, r20
 94e:	55 1f       	adc	r21, r21
 950:	5f 3f       	cpi	r21, 0xFF	; 255
 952:	79 f0       	breq	.+30     	; 0x972 <__fp_split1+0x14>
 954:	aa 27       	eor	r26, r26
 956:	a5 17       	cp	r26, r21
 958:	08 f0       	brcs	.+2      	; 0x95c <__fp_split2+0x10>
 95a:	51 e0       	ldi	r21, 0x01	; 1
 95c:	47 95       	ror	r20

0000095e <__fp_split1>:
 95e:	88 0f       	add	r24, r24
 960:	99 1f       	adc	r25, r25
 962:	9f 3f       	cpi	r25, 0xFF	; 255
 964:	31 f0       	breq	.+12     	; 0x972 <__fp_split1+0x14>
 966:	bb 27       	eor	r27, r27
 968:	b9 17       	cp	r27, r25
 96a:	08 f0       	brcs	.+2      	; 0x96e <__fp_split1+0x10>
 96c:	91 e0       	ldi	r25, 0x01	; 1
 96e:	87 95       	ror	r24
 970:	08 95       	ret
 972:	9f 91       	pop	r25
 974:	9f 91       	pop	r25
 976:	11 24       	eor	r1, r1
 978:	e3 cf       	rjmp	.-58     	; 0x940 <__fp_nan>

0000097a <__fp_split_a>:
 97a:	97 fb       	bst	r25, 7
 97c:	88 0f       	add	r24, r24
 97e:	99 1f       	adc	r25, r25
 980:	9f 3f       	cpi	r25, 0xFF	; 255
 982:	31 f0       	breq	.+12     	; 0x990 <__fp_split_a+0x16>
 984:	bb 27       	eor	r27, r27
 986:	b9 17       	cp	r27, r25
 988:	08 f0       	brcs	.+2      	; 0x98c <__fp_split_a+0x12>
 98a:	91 e0       	ldi	r25, 0x01	; 1
 98c:	87 95       	ror	r24
 98e:	08 95       	ret
 990:	9f 91       	pop	r25
 992:	9f 91       	pop	r25
 994:	11 24       	eor	r1, r1
 996:	d4 cf       	rjmp	.-88     	; 0x940 <__fp_nan>

00000998 <__fp_zero>:
 998:	66 27       	eor	r22, r22
 99a:	77 27       	eor	r23, r23
 99c:	88 27       	eor	r24, r24

0000099e <__fp_zerox>:
 99e:	99 27       	eor	r25, r25
 9a0:	08 95       	ret

000009a2 <__mulsf3>:
 9a2:	d1 df       	rcall	.-94     	; 0x946 <__fp_split3>
 9a4:	01 d0       	rcall	.+2      	; 0x9a8 <__mulsf3x>
 9a6:	b4 cf       	rjmp	.-152    	; 0x910 <__fp_merge>

000009a8 <__mulsf3x>:
 9a8:	99 23       	and	r25, r25
 9aa:	39 f0       	breq	.+14     	; 0x9ba <__mulsf3x+0x12>
 9ac:	55 23       	and	r21, r21
 9ae:	29 f0       	breq	.+10     	; 0x9ba <__mulsf3x+0x12>
 9b0:	9f 57       	subi	r25, 0x7F	; 127
 9b2:	5f 57       	subi	r21, 0x7F	; 127
 9b4:	95 0f       	add	r25, r21
 9b6:	13 f4       	brvc	.+4      	; 0x9bc <__mulsf3x+0x14>
 9b8:	9a f1       	brmi	.+102    	; 0xa20 <__mulsf3x+0x78>
 9ba:	f1 cf       	rjmp	.-30     	; 0x99e <__fp_zerox>
 9bc:	91 58       	subi	r25, 0x81	; 129
 9be:	9f 3f       	cpi	r25, 0xFF	; 255
 9c0:	e1 f3       	breq	.-8      	; 0x9ba <__mulsf3x+0x12>
 9c2:	62 9f       	mul	r22, r18
 9c4:	a1 2d       	mov	r26, r1
 9c6:	0f 92       	push	r0
 9c8:	bb 27       	eor	r27, r27
 9ca:	63 9f       	mul	r22, r19
 9cc:	a0 0d       	add	r26, r0
 9ce:	b1 1d       	adc	r27, r1
 9d0:	ee 27       	eor	r30, r30
 9d2:	72 9f       	mul	r23, r18
 9d4:	a0 0d       	add	r26, r0
 9d6:	b1 1d       	adc	r27, r1
 9d8:	ee 1f       	adc	r30, r30
 9da:	af 93       	push	r26
 9dc:	aa 27       	eor	r26, r26
 9de:	64 9f       	mul	r22, r20
 9e0:	b0 0d       	add	r27, r0
 9e2:	e1 1d       	adc	r30, r1
 9e4:	73 9f       	mul	r23, r19
 9e6:	b0 0d       	add	r27, r0
 9e8:	e1 1d       	adc	r30, r1
 9ea:	aa 1f       	adc	r26, r26
 9ec:	66 27       	eor	r22, r22
 9ee:	82 9f       	mul	r24, r18
 9f0:	b0 0d       	add	r27, r0
 9f2:	e1 1d       	adc	r30, r1
 9f4:	a6 1f       	adc	r26, r22
 9f6:	55 27       	eor	r21, r21
 9f8:	74 9f       	mul	r23, r20
 9fa:	e0 0d       	add	r30, r0
 9fc:	a1 1d       	adc	r26, r1
 9fe:	55 1f       	adc	r21, r21
 a00:	83 9f       	mul	r24, r19
 a02:	e0 0d       	add	r30, r0
 a04:	a1 1d       	adc	r26, r1
 a06:	56 1f       	adc	r21, r22
 a08:	84 9f       	mul	r24, r20
 a0a:	a0 0d       	add	r26, r0
 a0c:	51 1d       	adc	r21, r1
 a0e:	85 2f       	mov	r24, r21
 a10:	7a 2f       	mov	r23, r26
 a12:	6e 2f       	mov	r22, r30
 a14:	1f 90       	pop	r1
 a16:	0f 90       	pop	r0
 a18:	88 23       	and	r24, r24
 a1a:	1a f4       	brpl	.+6      	; 0xa22 <__mulsf3x+0x7a>
 a1c:	93 95       	inc	r25
 a1e:	39 f4       	brne	.+14     	; 0xa2e <__mulsf3x+0x86>
 a20:	8f cf       	rjmp	.-226    	; 0x940 <__fp_nan>
 a22:	00 0c       	add	r0, r0
 a24:	11 1c       	adc	r1, r1
 a26:	bb 1f       	adc	r27, r27
 a28:	66 1f       	adc	r22, r22
 a2a:	77 1f       	adc	r23, r23
 a2c:	88 1f       	adc	r24, r24
 a2e:	01 28       	or	r0, r1
 a30:	08 95       	ret
