
ledmeter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000018a4  00000000  00000000  00000094  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  000018a4  00001938  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000020  0080007c  0080007c  00001954  2**0
                  ALLOC
  3 .noinit       00000000  0080009c  0080009c  00001954  2**0
                  CONTENTS
  4 .eeprom       00000000  00810000  00810000  00001954  2**0
                  CONTENTS
  5 .stab         00001a40  00000000  00000000  00001954  2**2
                  CONTENTS, READONLY, DEBUGGING
  6 .stabstr      00000b3f  00000000  00000000  00003394  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
       0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
       2:	6e c7       	rjmp	.+3804   	; 0xee0 <__vector_1>
       4:	2c c0       	rjmp	.+88     	; 0x5e <__bad_interrupt>
       6:	2b c0       	rjmp	.+86     	; 0x5e <__bad_interrupt>
       8:	2a c0       	rjmp	.+84     	; 0x5e <__bad_interrupt>
       a:	29 c0       	rjmp	.+82     	; 0x5e <__bad_interrupt>
       c:	28 c0       	rjmp	.+80     	; 0x5e <__bad_interrupt>
       e:	27 c0       	rjmp	.+78     	; 0x5e <__bad_interrupt>
      10:	26 c0       	rjmp	.+76     	; 0x5e <__bad_interrupt>
      12:	25 c0       	rjmp	.+74     	; 0x5e <__bad_interrupt>
      14:	24 c0       	rjmp	.+72     	; 0x5e <__bad_interrupt>
      16:	23 c0       	rjmp	.+70     	; 0x5e <__bad_interrupt>
      18:	22 c0       	rjmp	.+68     	; 0x5e <__bad_interrupt>
      1a:	21 c0       	rjmp	.+66     	; 0x5e <__bad_interrupt>
      1c:	20 c0       	rjmp	.+64     	; 0x5e <__bad_interrupt>
      1e:	1f c0       	rjmp	.+62     	; 0x5e <__bad_interrupt>
      20:	1e c0       	rjmp	.+60     	; 0x5e <__bad_interrupt>
      22:	1d c0       	rjmp	.+58     	; 0x5e <__bad_interrupt>
      24:	1c c0       	rjmp	.+56     	; 0x5e <__bad_interrupt>
      26:	1b c0       	rjmp	.+54     	; 0x5e <__bad_interrupt>
      28:	1a c0       	rjmp	.+52     	; 0x5e <__bad_interrupt>

0000002a <__ctors_end>:
      2a:	11 24       	eor	r1, r1
      2c:	1f be       	out	0x3f, r1	; 63
      2e:	cf e5       	ldi	r28, 0x5F	; 95
      30:	d2 e0       	ldi	r29, 0x02	; 2
      32:	de bf       	out	0x3e, r29	; 62
      34:	cd bf       	out	0x3d, r28	; 61

00000036 <__do_copy_data>:
      36:	10 e0       	ldi	r17, 0x00	; 0
      38:	a0 e6       	ldi	r26, 0x60	; 96
      3a:	b0 e0       	ldi	r27, 0x00	; 0
      3c:	e4 ea       	ldi	r30, 0xA4	; 164
      3e:	f8 e1       	ldi	r31, 0x18	; 24
      40:	02 c0       	rjmp	.+4      	; 0x46 <.do_copy_data_start>

00000042 <.do_copy_data_loop>:
      42:	05 90       	lpm	r0, Z+
      44:	0d 92       	st	X+, r0

00000046 <.do_copy_data_start>:
      46:	ac 37       	cpi	r26, 0x7C	; 124
      48:	b1 07       	cpc	r27, r17
      4a:	d9 f7       	brne	.-10     	; 0x42 <.do_copy_data_loop>

0000004c <__do_clear_bss>:
      4c:	10 e0       	ldi	r17, 0x00	; 0
      4e:	ac e7       	ldi	r26, 0x7C	; 124
      50:	b0 e0       	ldi	r27, 0x00	; 0
      52:	01 c0       	rjmp	.+2      	; 0x56 <.do_clear_bss_start>

00000054 <.do_clear_bss_loop>:
      54:	1d 92       	st	X+, r1

00000056 <.do_clear_bss_start>:
      56:	ac 39       	cpi	r26, 0x9C	; 156
      58:	b1 07       	cpc	r27, r17
      5a:	e1 f7       	brne	.-8      	; 0x54 <.do_clear_bss_loop>
      5c:	3a c7       	rjmp	.+3700   	; 0xed2 <main>

0000005e <__bad_interrupt>:
      5e:	d0 cf       	rjmp	.-96     	; 0x0 <__vectors>

00000060 <init_time>:
time_typ current_time;
time_typ last_time;
time_typ best_time;

void init_time(time_typ * time) {
      60:	cf 93       	push	r28
      62:	df 93       	push	r29
      64:	cd b7       	in	r28, 0x3d	; 61
      66:	de b7       	in	r29, 0x3e	; 62
      68:	22 97       	sbiw	r28, 0x02	; 2
      6a:	0f b6       	in	r0, 0x3f	; 63
      6c:	f8 94       	cli
      6e:	de bf       	out	0x3e, r29	; 62
      70:	0f be       	out	0x3f, r0	; 63
      72:	cd bf       	out	0x3d, r28	; 61
      74:	9a 83       	std	Y+2, r25	; 0x02
      76:	89 83       	std	Y+1, r24	; 0x01
    time->hh = 0;
      78:	e9 81       	ldd	r30, Y+1	; 0x01
      7a:	fa 81       	ldd	r31, Y+2	; 0x02
      7c:	11 82       	std	Z+1, r1	; 0x01
      7e:	10 82       	st	Z, r1
    time->mm = 0;
      80:	e9 81       	ldd	r30, Y+1	; 0x01
      82:	fa 81       	ldd	r31, Y+2	; 0x02
      84:	13 82       	std	Z+3, r1	; 0x03
      86:	12 82       	std	Z+2, r1	; 0x02
    time->ss = 0;
      88:	e9 81       	ldd	r30, Y+1	; 0x01
      8a:	fa 81       	ldd	r31, Y+2	; 0x02
      8c:	15 82       	std	Z+5, r1	; 0x05
      8e:	14 82       	std	Z+4, r1	; 0x04
    time->xx = 0;
      90:	e9 81       	ldd	r30, Y+1	; 0x01
      92:	fa 81       	ldd	r31, Y+2	; 0x02
      94:	17 82       	std	Z+7, r1	; 0x07
      96:	16 82       	std	Z+6, r1	; 0x06
      98:	22 96       	adiw	r28, 0x02	; 2
      9a:	0f b6       	in	r0, 0x3f	; 63
      9c:	f8 94       	cli
      9e:	de bf       	out	0x3e, r29	; 62
      a0:	0f be       	out	0x3f, r0	; 63
      a2:	cd bf       	out	0x3d, r28	; 61
      a4:	df 91       	pop	r29
      a6:	cf 91       	pop	r28
      a8:	08 95       	ret

000000aa <print_time>:
}

void print_time(time_typ * t) {
      aa:	cf 93       	push	r28
      ac:	df 93       	push	r29
      ae:	cd b7       	in	r28, 0x3d	; 61
      b0:	de b7       	in	r29, 0x3e	; 62
      b2:	22 97       	sbiw	r28, 0x02	; 2
      b4:	0f b6       	in	r0, 0x3f	; 63
      b6:	f8 94       	cli
      b8:	de bf       	out	0x3e, r29	; 62
      ba:	0f be       	out	0x3f, r0	; 63
      bc:	cd bf       	out	0x3d, r28	; 61
      be:	9a 83       	std	Y+2, r25	; 0x02
      c0:	89 83       	std	Y+1, r24	; 0x01
    printf("===%02i:%02i:%02i:%03u===\n",t->hh,t->mm,t->ss,t->xx);
      c2:	e9 81       	ldd	r30, Y+1	; 0x01
      c4:	fa 81       	ldd	r31, Y+2	; 0x02
      c6:	86 81       	ldd	r24, Z+6	; 0x06
      c8:	97 81       	ldd	r25, Z+7	; 0x07
      ca:	9f 93       	push	r25
      cc:	8f 93       	push	r24
      ce:	e9 81       	ldd	r30, Y+1	; 0x01
      d0:	fa 81       	ldd	r31, Y+2	; 0x02
      d2:	84 81       	ldd	r24, Z+4	; 0x04
      d4:	95 81       	ldd	r25, Z+5	; 0x05
      d6:	9f 93       	push	r25
      d8:	8f 93       	push	r24
      da:	e9 81       	ldd	r30, Y+1	; 0x01
      dc:	fa 81       	ldd	r31, Y+2	; 0x02
      de:	82 81       	ldd	r24, Z+2	; 0x02
      e0:	93 81       	ldd	r25, Z+3	; 0x03
      e2:	9f 93       	push	r25
      e4:	8f 93       	push	r24
      e6:	e9 81       	ldd	r30, Y+1	; 0x01
      e8:	fa 81       	ldd	r31, Y+2	; 0x02
      ea:	80 81       	ld	r24, Z
      ec:	91 81       	ldd	r25, Z+1	; 0x01
      ee:	9f 93       	push	r25
      f0:	8f 93       	push	r24
      f2:	80 e6       	ldi	r24, 0x60	; 96
      f4:	90 e0       	ldi	r25, 0x00	; 0
      f6:	9f 93       	push	r25
      f8:	8f 93       	push	r24
      fa:	1b d7       	rcall	.+3638   	; 0xf32 <printf>
      fc:	8d b7       	in	r24, 0x3d	; 61
      fe:	9e b7       	in	r25, 0x3e	; 62
     100:	0a 96       	adiw	r24, 0x0a	; 10
     102:	0f b6       	in	r0, 0x3f	; 63
     104:	f8 94       	cli
     106:	9e bf       	out	0x3e, r25	; 62
     108:	0f be       	out	0x3f, r0	; 63
     10a:	8d bf       	out	0x3d, r24	; 61
     10c:	22 96       	adiw	r28, 0x02	; 2
     10e:	0f b6       	in	r0, 0x3f	; 63
     110:	f8 94       	cli
     112:	de bf       	out	0x3e, r29	; 62
     114:	0f be       	out	0x3f, r0	; 63
     116:	cd bf       	out	0x3d, r28	; 61
     118:	df 91       	pop	r29
     11a:	cf 91       	pop	r28
     11c:	08 95       	ret

0000011e <copy_time>:
}

void copy_time(time_typ * time_source, time_typ * time_dest) { // TO TEST (pointer ?)
     11e:	cf 93       	push	r28
     120:	df 93       	push	r29
     122:	cd b7       	in	r28, 0x3d	; 61
     124:	de b7       	in	r29, 0x3e	; 62
     126:	24 97       	sbiw	r28, 0x04	; 4
     128:	0f b6       	in	r0, 0x3f	; 63
     12a:	f8 94       	cli
     12c:	de bf       	out	0x3e, r29	; 62
     12e:	0f be       	out	0x3f, r0	; 63
     130:	cd bf       	out	0x3d, r28	; 61
     132:	9a 83       	std	Y+2, r25	; 0x02
     134:	89 83       	std	Y+1, r24	; 0x01
     136:	7c 83       	std	Y+4, r23	; 0x04
     138:	6b 83       	std	Y+3, r22	; 0x03
    time_dest->hh = time_source->hh;
     13a:	ab 81       	ldd	r26, Y+3	; 0x03
     13c:	bc 81       	ldd	r27, Y+4	; 0x04
     13e:	e9 81       	ldd	r30, Y+1	; 0x01
     140:	fa 81       	ldd	r31, Y+2	; 0x02
     142:	80 81       	ld	r24, Z
     144:	91 81       	ldd	r25, Z+1	; 0x01
     146:	8d 93       	st	X+, r24
     148:	9c 93       	st	X, r25
    time_dest->mm = time_source->mm;
     14a:	ab 81       	ldd	r26, Y+3	; 0x03
     14c:	bc 81       	ldd	r27, Y+4	; 0x04
     14e:	e9 81       	ldd	r30, Y+1	; 0x01
     150:	fa 81       	ldd	r31, Y+2	; 0x02
     152:	82 81       	ldd	r24, Z+2	; 0x02
     154:	93 81       	ldd	r25, Z+3	; 0x03
     156:	fd 01       	movw	r30, r26
     158:	93 83       	std	Z+3, r25	; 0x03
     15a:	82 83       	std	Z+2, r24	; 0x02
    time_dest->ss = time_source->ss;
     15c:	ab 81       	ldd	r26, Y+3	; 0x03
     15e:	bc 81       	ldd	r27, Y+4	; 0x04
     160:	e9 81       	ldd	r30, Y+1	; 0x01
     162:	fa 81       	ldd	r31, Y+2	; 0x02
     164:	84 81       	ldd	r24, Z+4	; 0x04
     166:	95 81       	ldd	r25, Z+5	; 0x05
     168:	fd 01       	movw	r30, r26
     16a:	95 83       	std	Z+5, r25	; 0x05
     16c:	84 83       	std	Z+4, r24	; 0x04
    time_dest->xx = time_source->xx;
     16e:	ab 81       	ldd	r26, Y+3	; 0x03
     170:	bc 81       	ldd	r27, Y+4	; 0x04
     172:	e9 81       	ldd	r30, Y+1	; 0x01
     174:	fa 81       	ldd	r31, Y+2	; 0x02
     176:	86 81       	ldd	r24, Z+6	; 0x06
     178:	97 81       	ldd	r25, Z+7	; 0x07
     17a:	fd 01       	movw	r30, r26
     17c:	97 83       	std	Z+7, r25	; 0x07
     17e:	86 83       	std	Z+6, r24	; 0x06
     180:	24 96       	adiw	r28, 0x04	; 4
     182:	0f b6       	in	r0, 0x3f	; 63
     184:	f8 94       	cli
     186:	de bf       	out	0x3e, r29	; 62
     188:	0f be       	out	0x3f, r0	; 63
     18a:	cd bf       	out	0x3d, r28	; 61
     18c:	df 91       	pop	r29
     18e:	cf 91       	pop	r28
     190:	08 95       	ret

00000192 <compare_time>:
}

int compare_time(time_typ * time1, time_typ * time2) {
     192:	cf 93       	push	r28
     194:	df 93       	push	r29
     196:	cd b7       	in	r28, 0x3d	; 61
     198:	de b7       	in	r29, 0x3e	; 62
     19a:	24 97       	sbiw	r28, 0x04	; 4
     19c:	0f b6       	in	r0, 0x3f	; 63
     19e:	f8 94       	cli
     1a0:	de bf       	out	0x3e, r29	; 62
     1a2:	0f be       	out	0x3f, r0	; 63
     1a4:	cd bf       	out	0x3d, r28	; 61
     1a6:	9a 83       	std	Y+2, r25	; 0x02
     1a8:	89 83       	std	Y+1, r24	; 0x01
     1aa:	7c 83       	std	Y+4, r23	; 0x04
     1ac:	6b 83       	std	Y+3, r22	; 0x03
    //  0 time1=time2
    // -1 time1<time2
    //  1 time1>time2
    return 0;
     1ae:	80 e0       	ldi	r24, 0x00	; 0
     1b0:	90 e0       	ldi	r25, 0x00	; 0
     1b2:	24 96       	adiw	r28, 0x04	; 4
     1b4:	0f b6       	in	r0, 0x3f	; 63
     1b6:	f8 94       	cli
     1b8:	de bf       	out	0x3e, r29	; 62
     1ba:	0f be       	out	0x3f, r0	; 63
     1bc:	cd bf       	out	0x3d, r28	; 61
     1be:	df 91       	pop	r29
     1c0:	cf 91       	pop	r28
     1c2:	08 95       	ret

000001c4 <inc_time>:
}

void inc_time(time_typ * time) {
     1c4:	cf 93       	push	r28
     1c6:	df 93       	push	r29
     1c8:	cd b7       	in	r28, 0x3d	; 61
     1ca:	de b7       	in	r29, 0x3e	; 62
     1cc:	2e 97       	sbiw	r28, 0x0e	; 14
     1ce:	0f b6       	in	r0, 0x3f	; 63
     1d0:	f8 94       	cli
     1d2:	de bf       	out	0x3e, r29	; 62
     1d4:	0f be       	out	0x3f, r0	; 63
     1d6:	cd bf       	out	0x3d, r28	; 61
     1d8:	9a 83       	std	Y+2, r25	; 0x02
     1da:	89 83       	std	Y+1, r24	; 0x01
  if (running_chronometer) {
     1dc:	80 91 7c 00 	lds	r24, 0x007C
     1e0:	90 91 7d 00 	lds	r25, 0x007D
     1e4:	00 97       	sbiw	r24, 0x00	; 0
     1e6:	09 f4       	brne	.+2      	; 0x1ea <inc_time+0x26>
     1e8:	a0 c0       	rjmp	.+320    	; 0x32a <__stack+0xcb>
    time->xx++;
     1ea:	a9 81       	ldd	r26, Y+1	; 0x01
     1ec:	ba 81       	ldd	r27, Y+2	; 0x02
     1ee:	e9 81       	ldd	r30, Y+1	; 0x01
     1f0:	fa 81       	ldd	r31, Y+2	; 0x02
     1f2:	86 81       	ldd	r24, Z+6	; 0x06
     1f4:	97 81       	ldd	r25, Z+7	; 0x07
     1f6:	01 96       	adiw	r24, 0x01	; 1
     1f8:	fd 01       	movw	r30, r26
     1fa:	97 83       	std	Z+7, r25	; 0x07
     1fc:	86 83       	std	Z+6, r24	; 0x06
    if(time->xx >= 1000) {
     1fe:	e9 81       	ldd	r30, Y+1	; 0x01
     200:	fa 81       	ldd	r31, Y+2	; 0x02
     202:	86 81       	ldd	r24, Z+6	; 0x06
     204:	97 81       	ldd	r25, Z+7	; 0x07
     206:	f3 e0       	ldi	r31, 0x03	; 3
     208:	88 3e       	cpi	r24, 0xE8	; 232
     20a:	9f 07       	cpc	r25, r31
     20c:	08 f4       	brcc	.+2      	; 0x210 <inc_time+0x4c>
     20e:	43 c0       	rjmp	.+134    	; 0x296 <__stack+0x37>
        time->xx = 0;
     210:	e9 81       	ldd	r30, Y+1	; 0x01
     212:	fa 81       	ldd	r31, Y+2	; 0x02
     214:	17 82       	std	Z+7, r1	; 0x07
     216:	16 82       	std	Z+6, r1	; 0x06
        time->ss++;
     218:	a9 81       	ldd	r26, Y+1	; 0x01
     21a:	ba 81       	ldd	r27, Y+2	; 0x02
     21c:	e9 81       	ldd	r30, Y+1	; 0x01
     21e:	fa 81       	ldd	r31, Y+2	; 0x02
     220:	84 81       	ldd	r24, Z+4	; 0x04
     222:	95 81       	ldd	r25, Z+5	; 0x05
     224:	01 96       	adiw	r24, 0x01	; 1
     226:	fd 01       	movw	r30, r26
     228:	95 83       	std	Z+5, r25	; 0x05
     22a:	84 83       	std	Z+4, r24	; 0x04
        if (time->ss >= 60) {
     22c:	e9 81       	ldd	r30, Y+1	; 0x01
     22e:	fa 81       	ldd	r31, Y+2	; 0x02
     230:	84 81       	ldd	r24, Z+4	; 0x04
     232:	95 81       	ldd	r25, Z+5	; 0x05
     234:	8c 33       	cpi	r24, 0x3C	; 60
     236:	91 05       	cpc	r25, r1
     238:	74 f1       	brlt	.+92     	; 0x296 <__stack+0x37>
            time->ss = 0;
     23a:	e9 81       	ldd	r30, Y+1	; 0x01
     23c:	fa 81       	ldd	r31, Y+2	; 0x02
     23e:	15 82       	std	Z+5, r1	; 0x05
     240:	14 82       	std	Z+4, r1	; 0x04
            time->mm++;
     242:	a9 81       	ldd	r26, Y+1	; 0x01
     244:	ba 81       	ldd	r27, Y+2	; 0x02
     246:	e9 81       	ldd	r30, Y+1	; 0x01
     248:	fa 81       	ldd	r31, Y+2	; 0x02
     24a:	82 81       	ldd	r24, Z+2	; 0x02
     24c:	93 81       	ldd	r25, Z+3	; 0x03
     24e:	01 96       	adiw	r24, 0x01	; 1
     250:	fd 01       	movw	r30, r26
     252:	93 83       	std	Z+3, r25	; 0x03
     254:	82 83       	std	Z+2, r24	; 0x02
            if (time->mm >= 60) {
     256:	e9 81       	ldd	r30, Y+1	; 0x01
     258:	fa 81       	ldd	r31, Y+2	; 0x02
     25a:	82 81       	ldd	r24, Z+2	; 0x02
     25c:	93 81       	ldd	r25, Z+3	; 0x03
     25e:	8c 33       	cpi	r24, 0x3C	; 60
     260:	91 05       	cpc	r25, r1
     262:	cc f0       	brlt	.+50     	; 0x296 <__stack+0x37>
                time->mm = 0;
     264:	e9 81       	ldd	r30, Y+1	; 0x01
     266:	fa 81       	ldd	r31, Y+2	; 0x02
     268:	13 82       	std	Z+3, r1	; 0x03
     26a:	12 82       	std	Z+2, r1	; 0x02
                time->hh++;
     26c:	a9 81       	ldd	r26, Y+1	; 0x01
     26e:	ba 81       	ldd	r27, Y+2	; 0x02
     270:	e9 81       	ldd	r30, Y+1	; 0x01
     272:	fa 81       	ldd	r31, Y+2	; 0x02
     274:	80 81       	ld	r24, Z
     276:	91 81       	ldd	r25, Z+1	; 0x01
     278:	01 96       	adiw	r24, 0x01	; 1
     27a:	11 96       	adiw	r26, 0x01	; 1
     27c:	9c 93       	st	X, r25
     27e:	8e 93       	st	-X, r24
                if (time->hh >= 24) {
     280:	e9 81       	ldd	r30, Y+1	; 0x01
     282:	fa 81       	ldd	r31, Y+2	; 0x02
     284:	80 81       	ld	r24, Z
     286:	91 81       	ldd	r25, Z+1	; 0x01
     288:	88 31       	cpi	r24, 0x18	; 24
     28a:	91 05       	cpc	r25, r1
     28c:	24 f0       	brlt	.+8      	; 0x296 <__stack+0x37>
                    time->hh = 0;
     28e:	e9 81       	ldd	r30, Y+1	; 0x01
     290:	fa 81       	ldd	r31, Y+2	; 0x02
     292:	11 82       	std	Z+1, r1	; 0x01
     294:	10 82       	st	Z, r1
   The maximal possible delay is 262.14 ms / F_CPU in MHz.
 */
void
_delay_ms(double __ms)
{
     296:	80 e0       	ldi	r24, 0x00	; 0
     298:	90 e0       	ldi	r25, 0x00	; 0
     29a:	a0 e8       	ldi	r26, 0x80	; 128
     29c:	bf e3       	ldi	r27, 0x3F	; 63
     29e:	8b 83       	std	Y+3, r24	; 0x03
     2a0:	9c 83       	std	Y+4, r25	; 0x04
     2a2:	ad 83       	std	Y+5, r26	; 0x05
     2a4:	be 83       	std	Y+6, r27	; 0x06
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     2a6:	20 e0       	ldi	r18, 0x00	; 0
     2a8:	30 e0       	ldi	r19, 0x00	; 0
     2aa:	4a e7       	ldi	r20, 0x7A	; 122
     2ac:	53 e4       	ldi	r21, 0x43	; 67
     2ae:	6b 81       	ldd	r22, Y+3	; 0x03
     2b0:	7c 81       	ldd	r23, Y+4	; 0x04
     2b2:	8d 81       	ldd	r24, Y+5	; 0x05
     2b4:	9e 81       	ldd	r25, Y+6	; 0x06
     2b6:	55 da       	rcall	.-2902   	; 0xfffff762 <__eeprom_end+0xff7ef762>
     2b8:	dc 01       	movw	r26, r24
     2ba:	cb 01       	movw	r24, r22
     2bc:	89 87       	std	Y+9, r24	; 0x09
     2be:	9a 87       	std	Y+10, r25	; 0x0a
     2c0:	ab 87       	std	Y+11, r26	; 0x0b
     2c2:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
     2c4:	20 e0       	ldi	r18, 0x00	; 0
     2c6:	30 e0       	ldi	r19, 0x00	; 0
     2c8:	40 e8       	ldi	r20, 0x80	; 128
     2ca:	5f e3       	ldi	r21, 0x3F	; 63
     2cc:	69 85       	ldd	r22, Y+9	; 0x09
     2ce:	7a 85       	ldd	r23, Y+10	; 0x0a
     2d0:	8b 85       	ldd	r24, Y+11	; 0x0b
     2d2:	9c 85       	ldd	r25, Y+12	; 0x0c
     2d4:	d6 d9       	rcall	.-3156   	; 0xfffff682 <__eeprom_end+0xff7ef682>
     2d6:	88 23       	and	r24, r24
     2d8:	0c f0       	brlt	.+2      	; 0x2dc <__stack+0x7d>
     2da:	05 c0       	rjmp	.+10     	; 0x2e6 <__stack+0x87>
		__ticks = 1;
     2dc:	81 e0       	ldi	r24, 0x01	; 1
     2de:	90 e0       	ldi	r25, 0x00	; 0
     2e0:	98 87       	std	Y+8, r25	; 0x08
     2e2:	8f 83       	std	Y+7, r24	; 0x07
     2e4:	18 c0       	rjmp	.+48     	; 0x316 <__stack+0xb7>
	else if (__tmp > 65535)
     2e6:	20 e0       	ldi	r18, 0x00	; 0
     2e8:	3f ef       	ldi	r19, 0xFF	; 255
     2ea:	4f e7       	ldi	r20, 0x7F	; 127
     2ec:	57 e4       	ldi	r21, 0x47	; 71
     2ee:	69 85       	ldd	r22, Y+9	; 0x09
     2f0:	7a 85       	ldd	r23, Y+10	; 0x0a
     2f2:	8b 85       	ldd	r24, Y+11	; 0x0b
     2f4:	9c 85       	ldd	r25, Y+12	; 0x0c
     2f6:	c8 d9       	rcall	.-3184   	; 0xfffff688 <__eeprom_end+0xff7ef688>
     2f8:	18 16       	cp	r1, r24
     2fa:	0c f0       	brlt	.+2      	; 0x2fe <__stack+0x9f>
     2fc:	03 c0       	rjmp	.+6      	; 0x304 <__stack+0xa5>
		__ticks = 0;	/* i.e. 65536 */
     2fe:	18 86       	std	Y+8, r1	; 0x08
     300:	1f 82       	std	Y+7, r1	; 0x07
     302:	09 c0       	rjmp	.+18     	; 0x316 <__stack+0xb7>
	else
		__ticks = (uint16_t)__tmp;
     304:	69 85       	ldd	r22, Y+9	; 0x09
     306:	7a 85       	ldd	r23, Y+10	; 0x0a
     308:	8b 85       	ldd	r24, Y+11	; 0x0b
     30a:	9c 85       	ldd	r25, Y+12	; 0x0c
     30c:	7a d9       	rcall	.-3340   	; 0xfffff602 <__eeprom_end+0xff7ef602>
     30e:	dc 01       	movw	r26, r24
     310:	cb 01       	movw	r24, r22
     312:	98 87       	std	Y+8, r25	; 0x08
     314:	8f 83       	std	Y+7, r24	; 0x07
     316:	8f 81       	ldd	r24, Y+7	; 0x07
     318:	98 85       	ldd	r25, Y+8	; 0x08
     31a:	9e 87       	std	Y+14, r25	; 0x0e
     31c:	8d 87       	std	Y+13, r24	; 0x0d
     31e:	8d 85       	ldd	r24, Y+13	; 0x0d
     320:	9e 85       	ldd	r25, Y+14	; 0x0e
     322:	01 97       	sbiw	r24, 0x01	; 1
     324:	f1 f7       	brne	.-4      	; 0x322 <__stack+0xc3>
     326:	9e 87       	std	Y+14, r25	; 0x0e
     328:	8d 87       	std	Y+13, r24	; 0x0d
     32a:	2e 96       	adiw	r28, 0x0e	; 14
     32c:	0f b6       	in	r0, 0x3f	; 63
     32e:	f8 94       	cli
     330:	de bf       	out	0x3e, r29	; 62
     332:	0f be       	out	0x3f, r0	; 63
     334:	cd bf       	out	0x3d, r28	; 61
     336:	df 91       	pop	r29
     338:	cf 91       	pop	r28
     33a:	08 95       	ret

0000033c <switch_on_all_leds>:
					 }
            }
        }
    }
    _delay_ms(1);
  }
}



/*
void switch_on_all_leds();
void switch_off_all_leds();
void switch_on_led(int led);
void switch_off_led(int led);
void loop(void);
void init(void);
*/

// 1=off
// 0=on

/*
 * switch on all leds
 */
void switch_on_all_leds() {
     33c:	cf 93       	push	r28
     33e:	df 93       	push	r29
     340:	cd b7       	in	r28, 0x3d	; 61
     342:	de b7       	in	r29, 0x3e	; 62
    PORTC = 0x00;
     344:	10 92 35 00 	sts	0x0035, r1
     348:	df 91       	pop	r29
     34a:	cf 91       	pop	r28
     34c:	08 95       	ret

0000034e <switch_off_all_leds>:
}

/*
 * switch off all leds
 */
void switch_off_all_leds() {
     34e:	cf 93       	push	r28
     350:	df 93       	push	r29
     352:	cd b7       	in	r28, 0x3d	; 61
     354:	de b7       	in	r29, 0x3e	; 62
    PORTC = 0xFF;
     356:	8f ef       	ldi	r24, 0xFF	; 255
     358:	80 93 35 00 	sts	0x0035, r24
     35c:	df 91       	pop	r29
     35e:	cf 91       	pop	r28
     360:	08 95       	ret

00000362 <switch_on_led>:
}

// led from 1 to 8 (LEDSNUM)
// PCx with w from 0 to 7

/*
 * switch on the led with the number called "led"
 */
void switch_on_led(int led) {
     362:	cf 93       	push	r28
     364:	df 93       	push	r29
     366:	cd b7       	in	r28, 0x3d	; 61
     368:	de b7       	in	r29, 0x3e	; 62
     36a:	26 97       	sbiw	r28, 0x06	; 6
     36c:	0f b6       	in	r0, 0x3f	; 63
     36e:	f8 94       	cli
     370:	de bf       	out	0x3e, r29	; 62
     372:	0f be       	out	0x3f, r0	; 63
     374:	cd bf       	out	0x3d, r28	; 61
     376:	9a 83       	std	Y+2, r25	; 0x02
     378:	89 83       	std	Y+1, r24	; 0x01
    int pin = led - 1;
     37a:	89 81       	ldd	r24, Y+1	; 0x01
     37c:	9a 81       	ldd	r25, Y+2	; 0x02
     37e:	01 97       	sbiw	r24, 0x01	; 1
     380:	9c 83       	std	Y+4, r25	; 0x04
     382:	8b 83       	std	Y+3, r24	; 0x03
    int mask = ~(1<<pin);
     384:	81 e0       	ldi	r24, 0x01	; 1
     386:	90 e0       	ldi	r25, 0x00	; 0
     388:	0b 80       	ldd	r0, Y+3	; 0x03
     38a:	02 c0       	rjmp	.+4      	; 0x390 <switch_on_led+0x2e>
     38c:	88 0f       	add	r24, r24
     38e:	99 1f       	adc	r25, r25
     390:	0a 94       	dec	r0
     392:	e2 f7       	brpl	.-8      	; 0x38c <switch_on_led+0x2a>
     394:	80 95       	com	r24
     396:	90 95       	com	r25
     398:	9e 83       	std	Y+6, r25	; 0x06
     39a:	8d 83       	std	Y+5, r24	; 0x05
    PORTC&=mask;
     39c:	90 91 35 00 	lds	r25, 0x0035
     3a0:	8d 81       	ldd	r24, Y+5	; 0x05
     3a2:	89 23       	and	r24, r25
     3a4:	80 93 35 00 	sts	0x0035, r24
     3a8:	26 96       	adiw	r28, 0x06	; 6
     3aa:	0f b6       	in	r0, 0x3f	; 63
     3ac:	f8 94       	cli
     3ae:	de bf       	out	0x3e, r29	; 62
     3b0:	0f be       	out	0x3f, r0	; 63
     3b2:	cd bf       	out	0x3d, r28	; 61
     3b4:	df 91       	pop	r29
     3b6:	cf 91       	pop	r28
     3b8:	08 95       	ret

000003ba <switch_off_led>:
}

/*
 * switch off the led with the number called "led"
 */
void switch_off_led(int led) {
     3ba:	cf 93       	push	r28
     3bc:	df 93       	push	r29
     3be:	cd b7       	in	r28, 0x3d	; 61
     3c0:	de b7       	in	r29, 0x3e	; 62
     3c2:	26 97       	sbiw	r28, 0x06	; 6
     3c4:	0f b6       	in	r0, 0x3f	; 63
     3c6:	f8 94       	cli
     3c8:	de bf       	out	0x3e, r29	; 62
     3ca:	0f be       	out	0x3f, r0	; 63
     3cc:	cd bf       	out	0x3d, r28	; 61
     3ce:	9a 83       	std	Y+2, r25	; 0x02
     3d0:	89 83       	std	Y+1, r24	; 0x01
    int pin = led - 1;
     3d2:	89 81       	ldd	r24, Y+1	; 0x01
     3d4:	9a 81       	ldd	r25, Y+2	; 0x02
     3d6:	01 97       	sbiw	r24, 0x01	; 1
     3d8:	9c 83       	std	Y+4, r25	; 0x04
     3da:	8b 83       	std	Y+3, r24	; 0x03
    int mask = (1<<pin);
     3dc:	81 e0       	ldi	r24, 0x01	; 1
     3de:	90 e0       	ldi	r25, 0x00	; 0
     3e0:	0b 80       	ldd	r0, Y+3	; 0x03
     3e2:	02 c0       	rjmp	.+4      	; 0x3e8 <switch_off_led+0x2e>
     3e4:	88 0f       	add	r24, r24
     3e6:	99 1f       	adc	r25, r25
     3e8:	0a 94       	dec	r0
     3ea:	e2 f7       	brpl	.-8      	; 0x3e4 <switch_off_led+0x2a>
     3ec:	9e 83       	std	Y+6, r25	; 0x06
     3ee:	8d 83       	std	Y+5, r24	; 0x05
    PORTC|=mask;
     3f0:	90 91 35 00 	lds	r25, 0x0035
     3f4:	8d 81       	ldd	r24, Y+5	; 0x05
     3f6:	89 2b       	or	r24, r25
     3f8:	80 93 35 00 	sts	0x0035, r24
     3fc:	26 96       	adiw	r28, 0x06	; 6
     3fe:	0f b6       	in	r0, 0x3f	; 63
     400:	f8 94       	cli
     402:	de bf       	out	0x3e, r29	; 62
     404:	0f be       	out	0x3f, r0	; 63
     406:	cd bf       	out	0x3d, r28	; 61
     408:	df 91       	pop	r29
     40a:	cf 91       	pop	r28
     40c:	08 95       	ret

0000040e <switch_on_leds_with_delay>:
}

/*
 * switch on every leds one after one with a delay (called "delay")
 */
void switch_on_leds_with_delay(double delay) {
     40e:	cf 93       	push	r28
     410:	df 93       	push	r29
     412:	cd b7       	in	r28, 0x3d	; 61
     414:	de b7       	in	r29, 0x3e	; 62
     416:	62 97       	sbiw	r28, 0x12	; 18
     418:	0f b6       	in	r0, 0x3f	; 63
     41a:	f8 94       	cli
     41c:	de bf       	out	0x3e, r29	; 62
     41e:	0f be       	out	0x3f, r0	; 63
     420:	cd bf       	out	0x3d, r28	; 61
     422:	69 83       	std	Y+1, r22	; 0x01
     424:	7a 83       	std	Y+2, r23	; 0x02
     426:	8b 83       	std	Y+3, r24	; 0x03
     428:	9c 83       	std	Y+4, r25	; 0x04
    int i;
    for(i = 1; i<=Nleds; i++) {
     42a:	81 e0       	ldi	r24, 0x01	; 1
     42c:	90 e0       	ldi	r25, 0x00	; 0
     42e:	9e 83       	std	Y+6, r25	; 0x06
     430:	8d 83       	std	Y+5, r24	; 0x05
     432:	8d 81       	ldd	r24, Y+5	; 0x05
     434:	9e 81       	ldd	r25, Y+6	; 0x06
     436:	89 30       	cpi	r24, 0x09	; 9
     438:	91 05       	cpc	r25, r1
     43a:	0c f0       	brlt	.+2      	; 0x43e <switch_on_leds_with_delay+0x30>
     43c:	53 c0       	rjmp	.+166    	; 0x4e4 <switch_on_leds_with_delay+0xd6>
   The maximal possible delay is 262.14 ms / F_CPU in MHz.
 */
void
_delay_ms(double __ms)
{
     43e:	89 81       	ldd	r24, Y+1	; 0x01
     440:	9a 81       	ldd	r25, Y+2	; 0x02
     442:	ab 81       	ldd	r26, Y+3	; 0x03
     444:	bc 81       	ldd	r27, Y+4	; 0x04
     446:	8f 83       	std	Y+7, r24	; 0x07
     448:	98 87       	std	Y+8, r25	; 0x08
     44a:	a9 87       	std	Y+9, r26	; 0x09
     44c:	ba 87       	std	Y+10, r27	; 0x0a
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     44e:	20 e0       	ldi	r18, 0x00	; 0
     450:	30 e0       	ldi	r19, 0x00	; 0
     452:	4a e7       	ldi	r20, 0x7A	; 122
     454:	53 e4       	ldi	r21, 0x43	; 67
     456:	6f 81       	ldd	r22, Y+7	; 0x07
     458:	78 85       	ldd	r23, Y+8	; 0x08
     45a:	89 85       	ldd	r24, Y+9	; 0x09
     45c:	9a 85       	ldd	r25, Y+10	; 0x0a
     45e:	81 d9       	rcall	.-3326   	; 0xfffff762 <__eeprom_end+0xff7ef762>
     460:	dc 01       	movw	r26, r24
     462:	cb 01       	movw	r24, r22
     464:	8d 87       	std	Y+13, r24	; 0x0d
     466:	9e 87       	std	Y+14, r25	; 0x0e
     468:	af 87       	std	Y+15, r26	; 0x0f
     46a:	b8 8b       	std	Y+16, r27	; 0x10
	if (__tmp < 1.0)
     46c:	20 e0       	ldi	r18, 0x00	; 0
     46e:	30 e0       	ldi	r19, 0x00	; 0
     470:	40 e8       	ldi	r20, 0x80	; 128
     472:	5f e3       	ldi	r21, 0x3F	; 63
     474:	6d 85       	ldd	r22, Y+13	; 0x0d
     476:	7e 85       	ldd	r23, Y+14	; 0x0e
     478:	8f 85       	ldd	r24, Y+15	; 0x0f
     47a:	98 89       	ldd	r25, Y+16	; 0x10
     47c:	02 d9       	rcall	.-3580   	; 0xfffff682 <__eeprom_end+0xff7ef682>
     47e:	88 23       	and	r24, r24
     480:	0c f0       	brlt	.+2      	; 0x484 <switch_on_leds_with_delay+0x76>
     482:	05 c0       	rjmp	.+10     	; 0x48e <switch_on_leds_with_delay+0x80>
		__ticks = 1;
     484:	81 e0       	ldi	r24, 0x01	; 1
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	9c 87       	std	Y+12, r25	; 0x0c
     48a:	8b 87       	std	Y+11, r24	; 0x0b
     48c:	18 c0       	rjmp	.+48     	; 0x4be <switch_on_leds_with_delay+0xb0>
	else if (__tmp > 65535)
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	3f ef       	ldi	r19, 0xFF	; 255
     492:	4f e7       	ldi	r20, 0x7F	; 127
     494:	57 e4       	ldi	r21, 0x47	; 71
     496:	6d 85       	ldd	r22, Y+13	; 0x0d
     498:	7e 85       	ldd	r23, Y+14	; 0x0e
     49a:	8f 85       	ldd	r24, Y+15	; 0x0f
     49c:	98 89       	ldd	r25, Y+16	; 0x10
     49e:	f4 d8       	rcall	.-3608   	; 0xfffff688 <__eeprom_end+0xff7ef688>
     4a0:	18 16       	cp	r1, r24
     4a2:	0c f0       	brlt	.+2      	; 0x4a6 <switch_on_leds_with_delay+0x98>
     4a4:	03 c0       	rjmp	.+6      	; 0x4ac <switch_on_leds_with_delay+0x9e>
		__ticks = 0;	/* i.e. 65536 */
     4a6:	1c 86       	std	Y+12, r1	; 0x0c
     4a8:	1b 86       	std	Y+11, r1	; 0x0b
     4aa:	09 c0       	rjmp	.+18     	; 0x4be <switch_on_leds_with_delay+0xb0>
	else
		__ticks = (uint16_t)__tmp;
     4ac:	6d 85       	ldd	r22, Y+13	; 0x0d
     4ae:	7e 85       	ldd	r23, Y+14	; 0x0e
     4b0:	8f 85       	ldd	r24, Y+15	; 0x0f
     4b2:	98 89       	ldd	r25, Y+16	; 0x10
     4b4:	a6 d8       	rcall	.-3764   	; 0xfffff602 <__eeprom_end+0xff7ef602>
     4b6:	dc 01       	movw	r26, r24
     4b8:	cb 01       	movw	r24, r22
     4ba:	9c 87       	std	Y+12, r25	; 0x0c
     4bc:	8b 87       	std	Y+11, r24	; 0x0b
     4be:	8b 85       	ldd	r24, Y+11	; 0x0b
     4c0:	9c 85       	ldd	r25, Y+12	; 0x0c
     4c2:	9a 8b       	std	Y+18, r25	; 0x12
     4c4:	89 8b       	std	Y+17, r24	; 0x11
     4c6:	89 89       	ldd	r24, Y+17	; 0x11
     4c8:	9a 89       	ldd	r25, Y+18	; 0x12
     4ca:	01 97       	sbiw	r24, 0x01	; 1
     4cc:	f1 f7       	brne	.-4      	; 0x4ca <switch_on_leds_with_delay+0xbc>
     4ce:	9a 8b       	std	Y+18, r25	; 0x12
     4d0:	89 8b       	std	Y+17, r24	; 0x11
        _delay_ms(delay);
        switch_on_led(i);
     4d2:	8d 81       	ldd	r24, Y+5	; 0x05
     4d4:	9e 81       	ldd	r25, Y+6	; 0x06
     4d6:	45 df       	rcall	.-374    	; 0x362 <switch_on_led>
     4d8:	8d 81       	ldd	r24, Y+5	; 0x05
     4da:	9e 81       	ldd	r25, Y+6	; 0x06
     4dc:	01 96       	adiw	r24, 0x01	; 1
     4de:	9e 83       	std	Y+6, r25	; 0x06
     4e0:	8d 83       	std	Y+5, r24	; 0x05
     4e2:	a7 cf       	rjmp	.-178    	; 0x432 <switch_on_leds_with_delay+0x24>
     4e4:	62 96       	adiw	r28, 0x12	; 18
     4e6:	0f b6       	in	r0, 0x3f	; 63
     4e8:	f8 94       	cli
     4ea:	de bf       	out	0x3e, r29	; 62
     4ec:	0f be       	out	0x3f, r0	; 63
     4ee:	cd bf       	out	0x3d, r28	; 61
     4f0:	df 91       	pop	r29
     4f2:	cf 91       	pop	r28
     4f4:	08 95       	ret

000004f6 <switch_off_leds_with_delay>:
    }
}

/*
 * switch off every leds on after one with a delay (called "delay")
 */
void switch_off_leds_with_delay(double delay) {
     4f6:	cf 93       	push	r28
     4f8:	df 93       	push	r29
     4fa:	cd b7       	in	r28, 0x3d	; 61
     4fc:	de b7       	in	r29, 0x3e	; 62
     4fe:	62 97       	sbiw	r28, 0x12	; 18
     500:	0f b6       	in	r0, 0x3f	; 63
     502:	f8 94       	cli
     504:	de bf       	out	0x3e, r29	; 62
     506:	0f be       	out	0x3f, r0	; 63
     508:	cd bf       	out	0x3d, r28	; 61
     50a:	69 83       	std	Y+1, r22	; 0x01
     50c:	7a 83       	std	Y+2, r23	; 0x02
     50e:	8b 83       	std	Y+3, r24	; 0x03
     510:	9c 83       	std	Y+4, r25	; 0x04
    int i;
    for(i = Nleds; i>=0; i--) {
     512:	88 e0       	ldi	r24, 0x08	; 8
     514:	90 e0       	ldi	r25, 0x00	; 0
     516:	9e 83       	std	Y+6, r25	; 0x06
     518:	8d 83       	std	Y+5, r24	; 0x05
     51a:	8d 81       	ldd	r24, Y+5	; 0x05
     51c:	9e 81       	ldd	r25, Y+6	; 0x06
     51e:	99 23       	and	r25, r25
     520:	0c f4       	brge	.+2      	; 0x524 <switch_off_leds_with_delay+0x2e>
     522:	53 c0       	rjmp	.+166    	; 0x5ca <switch_off_leds_with_delay+0xd4>
   The maximal possible delay is 262.14 ms / F_CPU in MHz.
 */
void
_delay_ms(double __ms)
{
     524:	89 81       	ldd	r24, Y+1	; 0x01
     526:	9a 81       	ldd	r25, Y+2	; 0x02
     528:	ab 81       	ldd	r26, Y+3	; 0x03
     52a:	bc 81       	ldd	r27, Y+4	; 0x04
     52c:	8f 83       	std	Y+7, r24	; 0x07
     52e:	98 87       	std	Y+8, r25	; 0x08
     530:	a9 87       	std	Y+9, r26	; 0x09
     532:	ba 87       	std	Y+10, r27	; 0x0a
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     534:	20 e0       	ldi	r18, 0x00	; 0
     536:	30 e0       	ldi	r19, 0x00	; 0
     538:	4a e7       	ldi	r20, 0x7A	; 122
     53a:	53 e4       	ldi	r21, 0x43	; 67
     53c:	6f 81       	ldd	r22, Y+7	; 0x07
     53e:	78 85       	ldd	r23, Y+8	; 0x08
     540:	89 85       	ldd	r24, Y+9	; 0x09
     542:	9a 85       	ldd	r25, Y+10	; 0x0a
     544:	0e d9       	rcall	.-3556   	; 0xfffff762 <__eeprom_end+0xff7ef762>
     546:	dc 01       	movw	r26, r24
     548:	cb 01       	movw	r24, r22
     54a:	8d 87       	std	Y+13, r24	; 0x0d
     54c:	9e 87       	std	Y+14, r25	; 0x0e
     54e:	af 87       	std	Y+15, r26	; 0x0f
     550:	b8 8b       	std	Y+16, r27	; 0x10
	if (__tmp < 1.0)
     552:	20 e0       	ldi	r18, 0x00	; 0
     554:	30 e0       	ldi	r19, 0x00	; 0
     556:	40 e8       	ldi	r20, 0x80	; 128
     558:	5f e3       	ldi	r21, 0x3F	; 63
     55a:	6d 85       	ldd	r22, Y+13	; 0x0d
     55c:	7e 85       	ldd	r23, Y+14	; 0x0e
     55e:	8f 85       	ldd	r24, Y+15	; 0x0f
     560:	98 89       	ldd	r25, Y+16	; 0x10
     562:	8f d8       	rcall	.-3810   	; 0xfffff682 <__eeprom_end+0xff7ef682>
     564:	88 23       	and	r24, r24
     566:	0c f0       	brlt	.+2      	; 0x56a <switch_off_leds_with_delay+0x74>
     568:	05 c0       	rjmp	.+10     	; 0x574 <switch_off_leds_with_delay+0x7e>
		__ticks = 1;
     56a:	81 e0       	ldi	r24, 0x01	; 1
     56c:	90 e0       	ldi	r25, 0x00	; 0
     56e:	9c 87       	std	Y+12, r25	; 0x0c
     570:	8b 87       	std	Y+11, r24	; 0x0b
     572:	18 c0       	rjmp	.+48     	; 0x5a4 <switch_off_leds_with_delay+0xae>
	else if (__tmp > 65535)
     574:	20 e0       	ldi	r18, 0x00	; 0
     576:	3f ef       	ldi	r19, 0xFF	; 255
     578:	4f e7       	ldi	r20, 0x7F	; 127
     57a:	57 e4       	ldi	r21, 0x47	; 71
     57c:	6d 85       	ldd	r22, Y+13	; 0x0d
     57e:	7e 85       	ldd	r23, Y+14	; 0x0e
     580:	8f 85       	ldd	r24, Y+15	; 0x0f
     582:	98 89       	ldd	r25, Y+16	; 0x10
     584:	81 d8       	rcall	.-3838   	; 0xfffff688 <__eeprom_end+0xff7ef688>
     586:	18 16       	cp	r1, r24
     588:	0c f0       	brlt	.+2      	; 0x58c <switch_off_leds_with_delay+0x96>
     58a:	03 c0       	rjmp	.+6      	; 0x592 <switch_off_leds_with_delay+0x9c>
		__ticks = 0;	/* i.e. 65536 */
     58c:	1c 86       	std	Y+12, r1	; 0x0c
     58e:	1b 86       	std	Y+11, r1	; 0x0b
     590:	09 c0       	rjmp	.+18     	; 0x5a4 <switch_off_leds_with_delay+0xae>
	else
		__ticks = (uint16_t)__tmp;
     592:	6d 85       	ldd	r22, Y+13	; 0x0d
     594:	7e 85       	ldd	r23, Y+14	; 0x0e
     596:	8f 85       	ldd	r24, Y+15	; 0x0f
     598:	98 89       	ldd	r25, Y+16	; 0x10
     59a:	33 d8       	rcall	.-3994   	; 0xfffff602 <__eeprom_end+0xff7ef602>
     59c:	dc 01       	movw	r26, r24
     59e:	cb 01       	movw	r24, r22
     5a0:	9c 87       	std	Y+12, r25	; 0x0c
     5a2:	8b 87       	std	Y+11, r24	; 0x0b
     5a4:	8b 85       	ldd	r24, Y+11	; 0x0b
     5a6:	9c 85       	ldd	r25, Y+12	; 0x0c
     5a8:	9a 8b       	std	Y+18, r25	; 0x12
     5aa:	89 8b       	std	Y+17, r24	; 0x11
     5ac:	89 89       	ldd	r24, Y+17	; 0x11
     5ae:	9a 89       	ldd	r25, Y+18	; 0x12
     5b0:	01 97       	sbiw	r24, 0x01	; 1
     5b2:	f1 f7       	brne	.-4      	; 0x5b0 <switch_off_leds_with_delay+0xba>
     5b4:	9a 8b       	std	Y+18, r25	; 0x12
     5b6:	89 8b       	std	Y+17, r24	; 0x11
        _delay_ms(delay);
        switch_off_led(i);
     5b8:	8d 81       	ldd	r24, Y+5	; 0x05
     5ba:	9e 81       	ldd	r25, Y+6	; 0x06
     5bc:	fe de       	rcall	.-516    	; 0x3ba <switch_off_led>
     5be:	8d 81       	ldd	r24, Y+5	; 0x05
     5c0:	9e 81       	ldd	r25, Y+6	; 0x06
     5c2:	01 97       	sbiw	r24, 0x01	; 1
     5c4:	9e 83       	std	Y+6, r25	; 0x06
     5c6:	8d 83       	std	Y+5, r24	; 0x05
     5c8:	a8 cf       	rjmp	.-176    	; 0x51a <switch_off_leds_with_delay+0x24>
     5ca:	62 96       	adiw	r28, 0x12	; 18
     5cc:	0f b6       	in	r0, 0x3f	; 63
     5ce:	f8 94       	cli
     5d0:	de bf       	out	0x3e, r29	; 62
     5d2:	0f be       	out	0x3f, r0	; 63
     5d4:	cd bf       	out	0x3d, r28	; 61
     5d6:	df 91       	pop	r29
     5d8:	cf 91       	pop	r28
     5da:	08 95       	ret

000005dc <test_leds>:
    }
}

/*
 * a function for testing leds that switch on every leds and switch off every leds (one after one)
 */
void test_leds() {
     5dc:	cf 93       	push	r28
     5de:	df 93       	push	r29
     5e0:	cd b7       	in	r28, 0x3d	; 61
     5e2:	de b7       	in	r29, 0x3e	; 62
     5e4:	2c 97       	sbiw	r28, 0x0c	; 12
     5e6:	0f b6       	in	r0, 0x3f	; 63
     5e8:	f8 94       	cli
     5ea:	de bf       	out	0x3e, r29	; 62
     5ec:	0f be       	out	0x3f, r0	; 63
     5ee:	cd bf       	out	0x3d, r28	; 61
    switch_on_leds_with_delay(100);
     5f0:	60 e0       	ldi	r22, 0x00	; 0
     5f2:	70 e0       	ldi	r23, 0x00	; 0
     5f4:	88 ec       	ldi	r24, 0xC8	; 200
     5f6:	92 e4       	ldi	r25, 0x42	; 66
     5f8:	0a df       	rcall	.-492    	; 0x40e <switch_on_leds_with_delay>
   The maximal possible delay is 262.14 ms / F_CPU in MHz.
 */
void
_delay_ms(double __ms)
{
     5fa:	80 e0       	ldi	r24, 0x00	; 0
     5fc:	90 e0       	ldi	r25, 0x00	; 0
     5fe:	a8 e4       	ldi	r26, 0x48	; 72
     600:	b2 e4       	ldi	r27, 0x42	; 66
     602:	89 83       	std	Y+1, r24	; 0x01
     604:	9a 83       	std	Y+2, r25	; 0x02
     606:	ab 83       	std	Y+3, r26	; 0x03
     608:	bc 83       	std	Y+4, r27	; 0x04
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     60a:	20 e0       	ldi	r18, 0x00	; 0
     60c:	30 e0       	ldi	r19, 0x00	; 0
     60e:	4a e7       	ldi	r20, 0x7A	; 122
     610:	53 e4       	ldi	r21, 0x43	; 67
     612:	69 81       	ldd	r22, Y+1	; 0x01
     614:	7a 81       	ldd	r23, Y+2	; 0x02
     616:	8b 81       	ldd	r24, Y+3	; 0x03
     618:	9c 81       	ldd	r25, Y+4	; 0x04
     61a:	a3 d8       	rcall	.-3770   	; 0xfffff762 <__eeprom_end+0xff7ef762>
     61c:	dc 01       	movw	r26, r24
     61e:	cb 01       	movw	r24, r22
     620:	8f 83       	std	Y+7, r24	; 0x07
     622:	98 87       	std	Y+8, r25	; 0x08
     624:	a9 87       	std	Y+9, r26	; 0x09
     626:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     628:	20 e0       	ldi	r18, 0x00	; 0
     62a:	30 e0       	ldi	r19, 0x00	; 0
     62c:	40 e8       	ldi	r20, 0x80	; 128
     62e:	5f e3       	ldi	r21, 0x3F	; 63
     630:	6f 81       	ldd	r22, Y+7	; 0x07
     632:	78 85       	ldd	r23, Y+8	; 0x08
     634:	89 85       	ldd	r24, Y+9	; 0x09
     636:	9a 85       	ldd	r25, Y+10	; 0x0a
     638:	24 d8       	rcall	.-4024   	; 0xfffff682 <__eeprom_end+0xff7ef682>
     63a:	88 23       	and	r24, r24
     63c:	0c f0       	brlt	.+2      	; 0x640 <test_leds+0x64>
     63e:	05 c0       	rjmp	.+10     	; 0x64a <test_leds+0x6e>
		__ticks = 1;
     640:	81 e0       	ldi	r24, 0x01	; 1
     642:	90 e0       	ldi	r25, 0x00	; 0
     644:	9e 83       	std	Y+6, r25	; 0x06
     646:	8d 83       	std	Y+5, r24	; 0x05
     648:	18 c0       	rjmp	.+48     	; 0x67a <test_leds+0x9e>
	else if (__tmp > 65535)
     64a:	20 e0       	ldi	r18, 0x00	; 0
     64c:	3f ef       	ldi	r19, 0xFF	; 255
     64e:	4f e7       	ldi	r20, 0x7F	; 127
     650:	57 e4       	ldi	r21, 0x47	; 71
     652:	6f 81       	ldd	r22, Y+7	; 0x07
     654:	78 85       	ldd	r23, Y+8	; 0x08
     656:	89 85       	ldd	r24, Y+9	; 0x09
     658:	9a 85       	ldd	r25, Y+10	; 0x0a
     65a:	16 d8       	rcall	.-4052   	; 0xfffff688 <__eeprom_end+0xff7ef688>
     65c:	18 16       	cp	r1, r24
     65e:	0c f0       	brlt	.+2      	; 0x662 <test_leds+0x86>
     660:	03 c0       	rjmp	.+6      	; 0x668 <test_leds+0x8c>
		__ticks = 0;	/* i.e. 65536 */
     662:	1e 82       	std	Y+6, r1	; 0x06
     664:	1d 82       	std	Y+5, r1	; 0x05
     666:	09 c0       	rjmp	.+18     	; 0x67a <test_leds+0x9e>
	else
		__ticks = (uint16_t)__tmp;
     668:	6f 81       	ldd	r22, Y+7	; 0x07
     66a:	78 85       	ldd	r23, Y+8	; 0x08
     66c:	89 85       	ldd	r24, Y+9	; 0x09
     66e:	9a 85       	ldd	r25, Y+10	; 0x0a
     670:	c8 d7       	rcall	.+3984   	; 0x1602 <__fixsfsi>
     672:	dc 01       	movw	r26, r24
     674:	cb 01       	movw	r24, r22
     676:	9e 83       	std	Y+6, r25	; 0x06
     678:	8d 83       	std	Y+5, r24	; 0x05
     67a:	8d 81       	ldd	r24, Y+5	; 0x05
     67c:	9e 81       	ldd	r25, Y+6	; 0x06
     67e:	9c 87       	std	Y+12, r25	; 0x0c
     680:	8b 87       	std	Y+11, r24	; 0x0b
     682:	8b 85       	ldd	r24, Y+11	; 0x0b
     684:	9c 85       	ldd	r25, Y+12	; 0x0c
     686:	01 97       	sbiw	r24, 0x01	; 1
     688:	f1 f7       	brne	.-4      	; 0x686 <test_leds+0xaa>
     68a:	9c 87       	std	Y+12, r25	; 0x0c
     68c:	8b 87       	std	Y+11, r24	; 0x0b
    _delay_ms(50);
    switch_off_leds_with_delay(100);
     68e:	60 e0       	ldi	r22, 0x00	; 0
     690:	70 e0       	ldi	r23, 0x00	; 0
     692:	88 ec       	ldi	r24, 0xC8	; 200
     694:	92 e4       	ldi	r25, 0x42	; 66
     696:	2f df       	rcall	.-418    	; 0x4f6 <switch_off_leds_with_delay>
     698:	2c 96       	adiw	r28, 0x0c	; 12
     69a:	0f b6       	in	r0, 0x3f	; 63
     69c:	f8 94       	cli
     69e:	de bf       	out	0x3e, r29	; 62
     6a0:	0f be       	out	0x3f, r0	; 63
     6a2:	cd bf       	out	0x3d, r28	; 61
     6a4:	df 91       	pop	r29
     6a6:	cf 91       	pop	r28
     6a8:	08 95       	ret

000006aa <switch_on_min_dels>:
}

/*
 *  switch on every leds (from 0 to n)  (and switch off others)
 */
void switch_on_min_dels(int n) {
     6aa:	cf 93       	push	r28
     6ac:	df 93       	push	r29
     6ae:	cd b7       	in	r28, 0x3d	; 61
     6b0:	de b7       	in	r29, 0x3e	; 62
     6b2:	24 97       	sbiw	r28, 0x04	; 4
     6b4:	0f b6       	in	r0, 0x3f	; 63
     6b6:	f8 94       	cli
     6b8:	de bf       	out	0x3e, r29	; 62
     6ba:	0f be       	out	0x3f, r0	; 63
     6bc:	cd bf       	out	0x3d, r28	; 61
     6be:	9a 83       	std	Y+2, r25	; 0x02
     6c0:	89 83       	std	Y+1, r24	; 0x01
    int i;
    for(i = 1; i<=Nleds; i++) {
     6c2:	81 e0       	ldi	r24, 0x01	; 1
     6c4:	90 e0       	ldi	r25, 0x00	; 0
     6c6:	9c 83       	std	Y+4, r25	; 0x04
     6c8:	8b 83       	std	Y+3, r24	; 0x03
     6ca:	8b 81       	ldd	r24, Y+3	; 0x03
     6cc:	9c 81       	ldd	r25, Y+4	; 0x04
     6ce:	89 30       	cpi	r24, 0x09	; 9
     6d0:	91 05       	cpc	r25, r1
     6d2:	a4 f4       	brge	.+40     	; 0x6fc <switch_on_min_dels+0x52>
        if (i<=n) {
     6d4:	2b 81       	ldd	r18, Y+3	; 0x03
     6d6:	3c 81       	ldd	r19, Y+4	; 0x04
     6d8:	89 81       	ldd	r24, Y+1	; 0x01
     6da:	9a 81       	ldd	r25, Y+2	; 0x02
     6dc:	82 17       	cp	r24, r18
     6de:	93 07       	cpc	r25, r19
     6e0:	24 f0       	brlt	.+8      	; 0x6ea <switch_on_min_dels+0x40>
            switch_on_led(i);
     6e2:	8b 81       	ldd	r24, Y+3	; 0x03
     6e4:	9c 81       	ldd	r25, Y+4	; 0x04
     6e6:	3d de       	rcall	.-902    	; 0x362 <switch_on_led>
     6e8:	03 c0       	rjmp	.+6      	; 0x6f0 <switch_on_min_dels+0x46>
        } else {
            switch_off_led(i);
     6ea:	8b 81       	ldd	r24, Y+3	; 0x03
     6ec:	9c 81       	ldd	r25, Y+4	; 0x04
     6ee:	65 de       	rcall	.-822    	; 0x3ba <switch_off_led>
     6f0:	8b 81       	ldd	r24, Y+3	; 0x03
     6f2:	9c 81       	ldd	r25, Y+4	; 0x04
     6f4:	01 96       	adiw	r24, 0x01	; 1
     6f6:	9c 83       	std	Y+4, r25	; 0x04
     6f8:	8b 83       	std	Y+3, r24	; 0x03
     6fa:	e7 cf       	rjmp	.-50     	; 0x6ca <switch_on_min_dels+0x20>
     6fc:	24 96       	adiw	r28, 0x04	; 4
     6fe:	0f b6       	in	r0, 0x3f	; 63
     700:	f8 94       	cli
     702:	de bf       	out	0x3e, r29	; 62
     704:	0f be       	out	0x3f, r0	; 63
     706:	cd bf       	out	0x3d, r28	; 61
     708:	df 91       	pop	r29
     70a:	cf 91       	pop	r28
     70c:	08 95       	ret

0000070e <switch_on_max_dels>:
        }
    }
}

/*
 *  switch on every leds (from Nleds to n)
 */
void switch_on_max_dels(int n) {
     70e:	cf 93       	push	r28
     710:	df 93       	push	r29
     712:	cd b7       	in	r28, 0x3d	; 61
     714:	de b7       	in	r29, 0x3e	; 62
     716:	24 97       	sbiw	r28, 0x04	; 4
     718:	0f b6       	in	r0, 0x3f	; 63
     71a:	f8 94       	cli
     71c:	de bf       	out	0x3e, r29	; 62
     71e:	0f be       	out	0x3f, r0	; 63
     720:	cd bf       	out	0x3d, r28	; 61
     722:	9a 83       	std	Y+2, r25	; 0x02
     724:	89 83       	std	Y+1, r24	; 0x01
    int i;
    for(i = Nleds; i>=0; i--) {
     726:	88 e0       	ldi	r24, 0x08	; 8
     728:	90 e0       	ldi	r25, 0x00	; 0
     72a:	9c 83       	std	Y+4, r25	; 0x04
     72c:	8b 83       	std	Y+3, r24	; 0x03
     72e:	8b 81       	ldd	r24, Y+3	; 0x03
     730:	9c 81       	ldd	r25, Y+4	; 0x04
     732:	99 23       	and	r25, r25
     734:	c4 f0       	brlt	.+48     	; 0x766 <switch_on_max_dels+0x58>
        if (i>=Nleds-n) {
     736:	28 e0       	ldi	r18, 0x08	; 8
     738:	30 e0       	ldi	r19, 0x00	; 0
     73a:	89 81       	ldd	r24, Y+1	; 0x01
     73c:	9a 81       	ldd	r25, Y+2	; 0x02
     73e:	28 1b       	sub	r18, r24
     740:	39 0b       	sbc	r19, r25
     742:	8b 81       	ldd	r24, Y+3	; 0x03
     744:	9c 81       	ldd	r25, Y+4	; 0x04
     746:	82 17       	cp	r24, r18
     748:	93 07       	cpc	r25, r19
     74a:	24 f0       	brlt	.+8      	; 0x754 <switch_on_max_dels+0x46>
            switch_on_led(i);
     74c:	8b 81       	ldd	r24, Y+3	; 0x03
     74e:	9c 81       	ldd	r25, Y+4	; 0x04
     750:	08 de       	rcall	.-1008   	; 0x362 <switch_on_led>
     752:	03 c0       	rjmp	.+6      	; 0x75a <switch_on_max_dels+0x4c>
        } else {
            switch_off_led(i);
     754:	8b 81       	ldd	r24, Y+3	; 0x03
     756:	9c 81       	ldd	r25, Y+4	; 0x04
     758:	30 de       	rcall	.-928    	; 0x3ba <switch_off_led>
     75a:	8b 81       	ldd	r24, Y+3	; 0x03
     75c:	9c 81       	ldd	r25, Y+4	; 0x04
     75e:	01 97       	sbiw	r24, 0x01	; 1
     760:	9c 83       	std	Y+4, r25	; 0x04
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	e4 cf       	rjmp	.-56     	; 0x72e <switch_on_max_dels+0x20>
     766:	24 96       	adiw	r28, 0x04	; 4
     768:	0f b6       	in	r0, 0x3f	; 63
     76a:	f8 94       	cli
     76c:	de bf       	out	0x3e, r29	; 62
     76e:	0f be       	out	0x3f, r0	; 63
     770:	cd bf       	out	0x3d, r28	; 61
     772:	df 91       	pop	r29
     774:	cf 91       	pop	r28
     776:	08 95       	ret

00000778 <led_alarm>:
        }
    }
    // TO TEST (switch off)
}

/*
 * switch off every leds, wait and swith them all, n times (a sort of visual alarm)
 */
void led_alarm(int n, double delay) {
     778:	cf 93       	push	r28
     77a:	df 93       	push	r29
     77c:	cd b7       	in	r28, 0x3d	; 61
     77e:	de b7       	in	r29, 0x3e	; 62
     780:	64 97       	sbiw	r28, 0x14	; 20
     782:	0f b6       	in	r0, 0x3f	; 63
     784:	f8 94       	cli
     786:	de bf       	out	0x3e, r29	; 62
     788:	0f be       	out	0x3f, r0	; 63
     78a:	cd bf       	out	0x3d, r28	; 61
     78c:	9a 83       	std	Y+2, r25	; 0x02
     78e:	89 83       	std	Y+1, r24	; 0x01
     790:	4b 83       	std	Y+3, r20	; 0x03
     792:	5c 83       	std	Y+4, r21	; 0x04
     794:	6d 83       	std	Y+5, r22	; 0x05
     796:	7e 83       	std	Y+6, r23	; 0x06
    int i;
    for(i = 1; i<=n; i++) {
     798:	81 e0       	ldi	r24, 0x01	; 1
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	98 87       	std	Y+8, r25	; 0x08
     79e:	8f 83       	std	Y+7, r24	; 0x07
     7a0:	2f 81       	ldd	r18, Y+7	; 0x07
     7a2:	38 85       	ldd	r19, Y+8	; 0x08
     7a4:	89 81       	ldd	r24, Y+1	; 0x01
     7a6:	9a 81       	ldd	r25, Y+2	; 0x02
     7a8:	82 17       	cp	r24, r18
     7aa:	93 07       	cpc	r25, r19
     7ac:	0c f4       	brge	.+2      	; 0x7b0 <led_alarm+0x38>
     7ae:	9c c0       	rjmp	.+312    	; 0x8e8 <led_alarm+0x170>
        switch_off_all_leds();
     7b0:	ce dd       	rcall	.-1124   	; 0x34e <switch_off_all_leds>
   The maximal possible delay is 262.14 ms / F_CPU in MHz.
 */
void
_delay_ms(double __ms)
{
     7b2:	8b 81       	ldd	r24, Y+3	; 0x03
     7b4:	9c 81       	ldd	r25, Y+4	; 0x04
     7b6:	ad 81       	ldd	r26, Y+5	; 0x05
     7b8:	be 81       	ldd	r27, Y+6	; 0x06
     7ba:	89 87       	std	Y+9, r24	; 0x09
     7bc:	9a 87       	std	Y+10, r25	; 0x0a
     7be:	ab 87       	std	Y+11, r26	; 0x0b
     7c0:	bc 87       	std	Y+12, r27	; 0x0c
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	4a e7       	ldi	r20, 0x7A	; 122
     7c8:	53 e4       	ldi	r21, 0x43	; 67
     7ca:	69 85       	ldd	r22, Y+9	; 0x09
     7cc:	7a 85       	ldd	r23, Y+10	; 0x0a
     7ce:	8b 85       	ldd	r24, Y+11	; 0x0b
     7d0:	9c 85       	ldd	r25, Y+12	; 0x0c
     7d2:	c7 d7       	rcall	.+3982   	; 0x1762 <__mulsf3>
     7d4:	dc 01       	movw	r26, r24
     7d6:	cb 01       	movw	r24, r22
     7d8:	8f 87       	std	Y+15, r24	; 0x0f
     7da:	98 8b       	std	Y+16, r25	; 0x10
     7dc:	a9 8b       	std	Y+17, r26	; 0x11
     7de:	ba 8b       	std	Y+18, r27	; 0x12
	if (__tmp < 1.0)
     7e0:	20 e0       	ldi	r18, 0x00	; 0
     7e2:	30 e0       	ldi	r19, 0x00	; 0
     7e4:	40 e8       	ldi	r20, 0x80	; 128
     7e6:	5f e3       	ldi	r21, 0x3F	; 63
     7e8:	6f 85       	ldd	r22, Y+15	; 0x0f
     7ea:	78 89       	ldd	r23, Y+16	; 0x10
     7ec:	89 89       	ldd	r24, Y+17	; 0x11
     7ee:	9a 89       	ldd	r25, Y+18	; 0x12
     7f0:	48 d7       	rcall	.+3728   	; 0x1682 <__eqsf2>
     7f2:	88 23       	and	r24, r24
     7f4:	0c f0       	brlt	.+2      	; 0x7f8 <led_alarm+0x80>
     7f6:	05 c0       	rjmp	.+10     	; 0x802 <led_alarm+0x8a>
		__ticks = 1;
     7f8:	81 e0       	ldi	r24, 0x01	; 1
     7fa:	90 e0       	ldi	r25, 0x00	; 0
     7fc:	9e 87       	std	Y+14, r25	; 0x0e
     7fe:	8d 87       	std	Y+13, r24	; 0x0d
     800:	18 c0       	rjmp	.+48     	; 0x832 <led_alarm+0xba>
	else if (__tmp > 65535)
     802:	20 e0       	ldi	r18, 0x00	; 0
     804:	3f ef       	ldi	r19, 0xFF	; 255
     806:	4f e7       	ldi	r20, 0x7F	; 127
     808:	57 e4       	ldi	r21, 0x47	; 71
     80a:	6f 85       	ldd	r22, Y+15	; 0x0f
     80c:	78 89       	ldd	r23, Y+16	; 0x10
     80e:	89 89       	ldd	r24, Y+17	; 0x11
     810:	9a 89       	ldd	r25, Y+18	; 0x12
     812:	3a d7       	rcall	.+3700   	; 0x1688 <__gesf2>
     814:	18 16       	cp	r1, r24
     816:	0c f0       	brlt	.+2      	; 0x81a <led_alarm+0xa2>
     818:	03 c0       	rjmp	.+6      	; 0x820 <led_alarm+0xa8>
		__ticks = 0;	/* i.e. 65536 */
     81a:	1e 86       	std	Y+14, r1	; 0x0e
     81c:	1d 86       	std	Y+13, r1	; 0x0d
     81e:	09 c0       	rjmp	.+18     	; 0x832 <led_alarm+0xba>
	else
		__ticks = (uint16_t)__tmp;
     820:	6f 85       	ldd	r22, Y+15	; 0x0f
     822:	78 89       	ldd	r23, Y+16	; 0x10
     824:	89 89       	ldd	r24, Y+17	; 0x11
     826:	9a 89       	ldd	r25, Y+18	; 0x12
     828:	ec d6       	rcall	.+3544   	; 0x1602 <__fixsfsi>
     82a:	dc 01       	movw	r26, r24
     82c:	cb 01       	movw	r24, r22
     82e:	9e 87       	std	Y+14, r25	; 0x0e
     830:	8d 87       	std	Y+13, r24	; 0x0d
     832:	8d 85       	ldd	r24, Y+13	; 0x0d
     834:	9e 85       	ldd	r25, Y+14	; 0x0e
     836:	9c 8b       	std	Y+20, r25	; 0x14
     838:	8b 8b       	std	Y+19, r24	; 0x13
     83a:	8b 89       	ldd	r24, Y+19	; 0x13
     83c:	9c 89       	ldd	r25, Y+20	; 0x14
     83e:	01 97       	sbiw	r24, 0x01	; 1
     840:	f1 f7       	brne	.-4      	; 0x83e <led_alarm+0xc6>
     842:	9c 8b       	std	Y+20, r25	; 0x14
     844:	8b 8b       	std	Y+19, r24	; 0x13
        _delay_ms(delay);
        switch_on_all_leds();
     846:	7a dd       	rcall	.-1292   	; 0x33c <switch_on_all_leds>
   The maximal possible delay is 262.14 ms / F_CPU in MHz.
 */
void
_delay_ms(double __ms)
{
     848:	8b 81       	ldd	r24, Y+3	; 0x03
     84a:	9c 81       	ldd	r25, Y+4	; 0x04
     84c:	ad 81       	ldd	r26, Y+5	; 0x05
     84e:	be 81       	ldd	r27, Y+6	; 0x06
     850:	8f 87       	std	Y+15, r24	; 0x0f
     852:	98 8b       	std	Y+16, r25	; 0x10
     854:	a9 8b       	std	Y+17, r26	; 0x11
     856:	ba 8b       	std	Y+18, r27	; 0x12
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     858:	20 e0       	ldi	r18, 0x00	; 0
     85a:	30 e0       	ldi	r19, 0x00	; 0
     85c:	4a e7       	ldi	r20, 0x7A	; 122
     85e:	53 e4       	ldi	r21, 0x43	; 67
     860:	6f 85       	ldd	r22, Y+15	; 0x0f
     862:	78 89       	ldd	r23, Y+16	; 0x10
     864:	89 89       	ldd	r24, Y+17	; 0x11
     866:	9a 89       	ldd	r25, Y+18	; 0x12
     868:	7c d7       	rcall	.+3832   	; 0x1762 <__mulsf3>
     86a:	dc 01       	movw	r26, r24
     86c:	cb 01       	movw	r24, r22
     86e:	89 87       	std	Y+9, r24	; 0x09
     870:	9a 87       	std	Y+10, r25	; 0x0a
     872:	ab 87       	std	Y+11, r26	; 0x0b
     874:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
     876:	20 e0       	ldi	r18, 0x00	; 0
     878:	30 e0       	ldi	r19, 0x00	; 0
     87a:	40 e8       	ldi	r20, 0x80	; 128
     87c:	5f e3       	ldi	r21, 0x3F	; 63
     87e:	69 85       	ldd	r22, Y+9	; 0x09
     880:	7a 85       	ldd	r23, Y+10	; 0x0a
     882:	8b 85       	ldd	r24, Y+11	; 0x0b
     884:	9c 85       	ldd	r25, Y+12	; 0x0c
     886:	fd d6       	rcall	.+3578   	; 0x1682 <__eqsf2>
     888:	88 23       	and	r24, r24
     88a:	0c f0       	brlt	.+2      	; 0x88e <led_alarm+0x116>
     88c:	05 c0       	rjmp	.+10     	; 0x898 <led_alarm+0x120>
		__ticks = 1;
     88e:	81 e0       	ldi	r24, 0x01	; 1
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	9c 8b       	std	Y+20, r25	; 0x14
     894:	8b 8b       	std	Y+19, r24	; 0x13
     896:	18 c0       	rjmp	.+48     	; 0x8c8 <led_alarm+0x150>
	else if (__tmp > 65535)
     898:	20 e0       	ldi	r18, 0x00	; 0
     89a:	3f ef       	ldi	r19, 0xFF	; 255
     89c:	4f e7       	ldi	r20, 0x7F	; 127
     89e:	57 e4       	ldi	r21, 0x47	; 71
     8a0:	69 85       	ldd	r22, Y+9	; 0x09
     8a2:	7a 85       	ldd	r23, Y+10	; 0x0a
     8a4:	8b 85       	ldd	r24, Y+11	; 0x0b
     8a6:	9c 85       	ldd	r25, Y+12	; 0x0c
     8a8:	ef d6       	rcall	.+3550   	; 0x1688 <__gesf2>
     8aa:	18 16       	cp	r1, r24
     8ac:	0c f0       	brlt	.+2      	; 0x8b0 <led_alarm+0x138>
     8ae:	03 c0       	rjmp	.+6      	; 0x8b6 <led_alarm+0x13e>
		__ticks = 0;	/* i.e. 65536 */
     8b0:	1c 8a       	std	Y+20, r1	; 0x14
     8b2:	1b 8a       	std	Y+19, r1	; 0x13
     8b4:	09 c0       	rjmp	.+18     	; 0x8c8 <led_alarm+0x150>
	else
		__ticks = (uint16_t)__tmp;
     8b6:	69 85       	ldd	r22, Y+9	; 0x09
     8b8:	7a 85       	ldd	r23, Y+10	; 0x0a
     8ba:	8b 85       	ldd	r24, Y+11	; 0x0b
     8bc:	9c 85       	ldd	r25, Y+12	; 0x0c
     8be:	a1 d6       	rcall	.+3394   	; 0x1602 <__fixsfsi>
     8c0:	dc 01       	movw	r26, r24
     8c2:	cb 01       	movw	r24, r22
     8c4:	9c 8b       	std	Y+20, r25	; 0x14
     8c6:	8b 8b       	std	Y+19, r24	; 0x13
     8c8:	8b 89       	ldd	r24, Y+19	; 0x13
     8ca:	9c 89       	ldd	r25, Y+20	; 0x14
     8cc:	9e 87       	std	Y+14, r25	; 0x0e
     8ce:	8d 87       	std	Y+13, r24	; 0x0d
     8d0:	8d 85       	ldd	r24, Y+13	; 0x0d
     8d2:	9e 85       	ldd	r25, Y+14	; 0x0e
     8d4:	01 97       	sbiw	r24, 0x01	; 1
     8d6:	f1 f7       	brne	.-4      	; 0x8d4 <led_alarm+0x15c>
     8d8:	9e 87       	std	Y+14, r25	; 0x0e
     8da:	8d 87       	std	Y+13, r24	; 0x0d
     8dc:	8f 81       	ldd	r24, Y+7	; 0x07
     8de:	98 85       	ldd	r25, Y+8	; 0x08
     8e0:	01 96       	adiw	r24, 0x01	; 1
     8e2:	98 87       	std	Y+8, r25	; 0x08
     8e4:	8f 83       	std	Y+7, r24	; 0x07
     8e6:	5c cf       	rjmp	.-328    	; 0x7a0 <led_alarm+0x28>
     8e8:	64 96       	adiw	r28, 0x14	; 20
     8ea:	0f b6       	in	r0, 0x3f	; 63
     8ec:	f8 94       	cli
     8ee:	de bf       	out	0x3e, r29	; 62
     8f0:	0f be       	out	0x3f, r0	; 63
     8f2:	cd bf       	out	0x3d, r28	; 61
     8f4:	df 91       	pop	r29
     8f6:	cf 91       	pop	r28
     8f8:	08 95       	ret

000008fa <roundp>:
        _delay_ms(delay);
    }
}

/*
 * switch on every dels depending of the percentage p
 */
//#define roundp floor
inline int roundp(double n) {
     8fa:	cf 93       	push	r28
     8fc:	df 93       	push	r29
     8fe:	cd b7       	in	r28, 0x3d	; 61
     900:	de b7       	in	r29, 0x3e	; 62
     902:	24 97       	sbiw	r28, 0x04	; 4
     904:	0f b6       	in	r0, 0x3f	; 63
     906:	f8 94       	cli
     908:	de bf       	out	0x3e, r29	; 62
     90a:	0f be       	out	0x3f, r0	; 63
     90c:	cd bf       	out	0x3d, r28	; 61
     90e:	69 83       	std	Y+1, r22	; 0x01
     910:	7a 83       	std	Y+2, r23	; 0x02
     912:	8b 83       	std	Y+3, r24	; 0x03
     914:	9c 83       	std	Y+4, r25	; 0x04
    return floor(n+0.5);
     916:	20 e0       	ldi	r18, 0x00	; 0
     918:	30 e0       	ldi	r19, 0x00	; 0
     91a:	40 e0       	ldi	r20, 0x00	; 0
     91c:	5f e3       	ldi	r21, 0x3F	; 63
     91e:	69 81       	ldd	r22, Y+1	; 0x01
     920:	7a 81       	ldd	r23, Y+2	; 0x02
     922:	8b 81       	ldd	r24, Y+3	; 0x03
     924:	9c 81       	ldd	r25, Y+4	; 0x04
     926:	e5 d5       	rcall	.+3018   	; 0x14f2 <__addsf3>
     928:	dc 01       	movw	r26, r24
     92a:	cb 01       	movw	r24, r22
     92c:	bc 01       	movw	r22, r24
     92e:	cd 01       	movw	r24, r26
     930:	8f d6       	rcall	.+3358   	; 0x1650 <floor>
     932:	dc 01       	movw	r26, r24
     934:	cb 01       	movw	r24, r22
     936:	bc 01       	movw	r22, r24
     938:	cd 01       	movw	r24, r26
     93a:	63 d6       	rcall	.+3270   	; 0x1602 <__fixsfsi>
     93c:	dc 01       	movw	r26, r24
     93e:	cb 01       	movw	r24, r22
     940:	24 96       	adiw	r28, 0x04	; 4
     942:	0f b6       	in	r0, 0x3f	; 63
     944:	f8 94       	cli
     946:	de bf       	out	0x3e, r29	; 62
     948:	0f be       	out	0x3f, r0	; 63
     94a:	cd bf       	out	0x3d, r28	; 61
     94c:	df 91       	pop	r29
     94e:	cf 91       	pop	r28
     950:	08 95       	ret

00000952 <show_percent>:
}

// roundp = round for positive number
void show_percent(double p) {
     952:	cf 93       	push	r28
     954:	df 93       	push	r29
     956:	cd b7       	in	r28, 0x3d	; 61
     958:	de b7       	in	r29, 0x3e	; 62
     95a:	26 97       	sbiw	r28, 0x06	; 6
     95c:	0f b6       	in	r0, 0x3f	; 63
     95e:	f8 94       	cli
     960:	de bf       	out	0x3e, r29	; 62
     962:	0f be       	out	0x3f, r0	; 63
     964:	cd bf       	out	0x3d, r28	; 61
     966:	69 83       	std	Y+1, r22	; 0x01
     968:	7a 83       	std	Y+2, r23	; 0x02
     96a:	8b 83       	std	Y+3, r24	; 0x03
     96c:	9c 83       	std	Y+4, r25	; 0x04
    // p pourcent
    int n;
    //n = 4;
    n = roundp(p / 100.0 * Nleds); // TO FIX (math.h ceil floor ... round en Java !)
     96e:	20 e0       	ldi	r18, 0x00	; 0
     970:	30 e0       	ldi	r19, 0x00	; 0
     972:	48 ec       	ldi	r20, 0xC8	; 200
     974:	52 e4       	ldi	r21, 0x42	; 66
     976:	69 81       	ldd	r22, Y+1	; 0x01
     978:	7a 81       	ldd	r23, Y+2	; 0x02
     97a:	8b 81       	ldd	r24, Y+3	; 0x03
     97c:	9c 81       	ldd	r25, Y+4	; 0x04
     97e:	fb d5       	rcall	.+3062   	; 0x1576 <__divsf3>
     980:	dc 01       	movw	r26, r24
     982:	cb 01       	movw	r24, r22
     984:	20 e0       	ldi	r18, 0x00	; 0
     986:	30 e0       	ldi	r19, 0x00	; 0
     988:	40 e0       	ldi	r20, 0x00	; 0
     98a:	51 e4       	ldi	r21, 0x41	; 65
     98c:	bc 01       	movw	r22, r24
     98e:	cd 01       	movw	r24, r26
     990:	e8 d6       	rcall	.+3536   	; 0x1762 <__mulsf3>
     992:	dc 01       	movw	r26, r24
     994:	cb 01       	movw	r24, r22
     996:	bc 01       	movw	r22, r24
     998:	cd 01       	movw	r24, r26
     99a:	af df       	rcall	.-162    	; 0x8fa <roundp>
     99c:	9e 83       	std	Y+6, r25	; 0x06
     99e:	8d 83       	std	Y+5, r24	; 0x05
    // TO FIX : +0.5 is a very dirty hack
    switch_on_min_dels(n);
     9a0:	8d 81       	ldd	r24, Y+5	; 0x05
     9a2:	9e 81       	ldd	r25, Y+6	; 0x06
     9a4:	82 de       	rcall	.-764    	; 0x6aa <switch_on_min_dels>
     9a6:	26 96       	adiw	r28, 0x06	; 6
     9a8:	0f b6       	in	r0, 0x3f	; 63
     9aa:	f8 94       	cli
     9ac:	de bf       	out	0x3e, r29	; 62
     9ae:	0f be       	out	0x3f, r0	; 63
     9b0:	cd bf       	out	0x3d, r28	; 61
     9b2:	df 91       	pop	r29
     9b4:	cf 91       	pop	r28
     9b6:	08 95       	ret

000009b8 <beep>:
}

/*
 * send a sound (on or more beep(s))
 */
void beep(int n, double delay) {
     9b8:	cf 93       	push	r28
     9ba:	df 93       	push	r29
     9bc:	cd b7       	in	r28, 0x3d	; 61
     9be:	de b7       	in	r29, 0x3e	; 62
     9c0:	64 97       	sbiw	r28, 0x14	; 20
     9c2:	0f b6       	in	r0, 0x3f	; 63
     9c4:	f8 94       	cli
     9c6:	de bf       	out	0x3e, r29	; 62
     9c8:	0f be       	out	0x3f, r0	; 63
     9ca:	cd bf       	out	0x3d, r28	; 61
     9cc:	9a 83       	std	Y+2, r25	; 0x02
     9ce:	89 83       	std	Y+1, r24	; 0x01
     9d0:	4b 83       	std	Y+3, r20	; 0x03
     9d2:	5c 83       	std	Y+4, r21	; 0x04
     9d4:	6d 83       	std	Y+5, r22	; 0x05
     9d6:	7e 83       	std	Y+6, r23	; 0x06
    // TO DO
    int i;
    for(i = 1; i<=n; i++) {
     9d8:	81 e0       	ldi	r24, 0x01	; 1
     9da:	90 e0       	ldi	r25, 0x00	; 0
     9dc:	98 87       	std	Y+8, r25	; 0x08
     9de:	8f 83       	std	Y+7, r24	; 0x07
     9e0:	2f 81       	ldd	r18, Y+7	; 0x07
     9e2:	38 85       	ldd	r19, Y+8	; 0x08
     9e4:	89 81       	ldd	r24, Y+1	; 0x01
     9e6:	9a 81       	ldd	r25, Y+2	; 0x02
     9e8:	82 17       	cp	r24, r18
     9ea:	93 07       	cpc	r25, r19
     9ec:	0c f4       	brge	.+2      	; 0x9f0 <beep+0x38>
     9ee:	56 c0       	rjmp	.+172    	; 0xa9c <beep+0xe4>
        //TO DO : send a beep
        if (n>1) {
     9f0:	89 81       	ldd	r24, Y+1	; 0x01
     9f2:	9a 81       	ldd	r25, Y+2	; 0x02
     9f4:	82 30       	cpi	r24, 0x02	; 2
     9f6:	91 05       	cpc	r25, r1
     9f8:	0c f4       	brge	.+2      	; 0x9fc <beep+0x44>
     9fa:	4a c0       	rjmp	.+148    	; 0xa90 <beep+0xd8>
   The maximal possible delay is 262.14 ms / F_CPU in MHz.
 */
void
_delay_ms(double __ms)
{
     9fc:	8b 81       	ldd	r24, Y+3	; 0x03
     9fe:	9c 81       	ldd	r25, Y+4	; 0x04
     a00:	ad 81       	ldd	r26, Y+5	; 0x05
     a02:	be 81       	ldd	r27, Y+6	; 0x06
     a04:	89 87       	std	Y+9, r24	; 0x09
     a06:	9a 87       	std	Y+10, r25	; 0x0a
     a08:	ab 87       	std	Y+11, r26	; 0x0b
     a0a:	bc 87       	std	Y+12, r27	; 0x0c
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     a0c:	20 e0       	ldi	r18, 0x00	; 0
     a0e:	30 e0       	ldi	r19, 0x00	; 0
     a10:	4a e7       	ldi	r20, 0x7A	; 122
     a12:	53 e4       	ldi	r21, 0x43	; 67
     a14:	69 85       	ldd	r22, Y+9	; 0x09
     a16:	7a 85       	ldd	r23, Y+10	; 0x0a
     a18:	8b 85       	ldd	r24, Y+11	; 0x0b
     a1a:	9c 85       	ldd	r25, Y+12	; 0x0c
     a1c:	a2 d6       	rcall	.+3396   	; 0x1762 <__mulsf3>
     a1e:	dc 01       	movw	r26, r24
     a20:	cb 01       	movw	r24, r22
     a22:	8f 87       	std	Y+15, r24	; 0x0f
     a24:	98 8b       	std	Y+16, r25	; 0x10
     a26:	a9 8b       	std	Y+17, r26	; 0x11
     a28:	ba 8b       	std	Y+18, r27	; 0x12
	if (__tmp < 1.0)
     a2a:	20 e0       	ldi	r18, 0x00	; 0
     a2c:	30 e0       	ldi	r19, 0x00	; 0
     a2e:	40 e8       	ldi	r20, 0x80	; 128
     a30:	5f e3       	ldi	r21, 0x3F	; 63
     a32:	6f 85       	ldd	r22, Y+15	; 0x0f
     a34:	78 89       	ldd	r23, Y+16	; 0x10
     a36:	89 89       	ldd	r24, Y+17	; 0x11
     a38:	9a 89       	ldd	r25, Y+18	; 0x12
     a3a:	23 d6       	rcall	.+3142   	; 0x1682 <__eqsf2>
     a3c:	88 23       	and	r24, r24
     a3e:	0c f0       	brlt	.+2      	; 0xa42 <beep+0x8a>
     a40:	05 c0       	rjmp	.+10     	; 0xa4c <beep+0x94>
		__ticks = 1;
     a42:	81 e0       	ldi	r24, 0x01	; 1
     a44:	90 e0       	ldi	r25, 0x00	; 0
     a46:	9e 87       	std	Y+14, r25	; 0x0e
     a48:	8d 87       	std	Y+13, r24	; 0x0d
     a4a:	18 c0       	rjmp	.+48     	; 0xa7c <beep+0xc4>
	else if (__tmp > 65535)
     a4c:	20 e0       	ldi	r18, 0x00	; 0
     a4e:	3f ef       	ldi	r19, 0xFF	; 255
     a50:	4f e7       	ldi	r20, 0x7F	; 127
     a52:	57 e4       	ldi	r21, 0x47	; 71
     a54:	6f 85       	ldd	r22, Y+15	; 0x0f
     a56:	78 89       	ldd	r23, Y+16	; 0x10
     a58:	89 89       	ldd	r24, Y+17	; 0x11
     a5a:	9a 89       	ldd	r25, Y+18	; 0x12
     a5c:	15 d6       	rcall	.+3114   	; 0x1688 <__gesf2>
     a5e:	18 16       	cp	r1, r24
     a60:	0c f0       	brlt	.+2      	; 0xa64 <beep+0xac>
     a62:	03 c0       	rjmp	.+6      	; 0xa6a <beep+0xb2>
		__ticks = 0;	/* i.e. 65536 */
     a64:	1e 86       	std	Y+14, r1	; 0x0e
     a66:	1d 86       	std	Y+13, r1	; 0x0d
     a68:	09 c0       	rjmp	.+18     	; 0xa7c <beep+0xc4>
	else
		__ticks = (uint16_t)__tmp;
     a6a:	6f 85       	ldd	r22, Y+15	; 0x0f
     a6c:	78 89       	ldd	r23, Y+16	; 0x10
     a6e:	89 89       	ldd	r24, Y+17	; 0x11
     a70:	9a 89       	ldd	r25, Y+18	; 0x12
     a72:	c7 d5       	rcall	.+2958   	; 0x1602 <__fixsfsi>
     a74:	dc 01       	movw	r26, r24
     a76:	cb 01       	movw	r24, r22
     a78:	9e 87       	std	Y+14, r25	; 0x0e
     a7a:	8d 87       	std	Y+13, r24	; 0x0d
     a7c:	8d 85       	ldd	r24, Y+13	; 0x0d
     a7e:	9e 85       	ldd	r25, Y+14	; 0x0e
     a80:	9c 8b       	std	Y+20, r25	; 0x14
     a82:	8b 8b       	std	Y+19, r24	; 0x13
     a84:	8b 89       	ldd	r24, Y+19	; 0x13
     a86:	9c 89       	ldd	r25, Y+20	; 0x14
     a88:	01 97       	sbiw	r24, 0x01	; 1
     a8a:	f1 f7       	brne	.-4      	; 0xa88 <beep+0xd0>
     a8c:	9c 8b       	std	Y+20, r25	; 0x14
     a8e:	8b 8b       	std	Y+19, r24	; 0x13
     a90:	8f 81       	ldd	r24, Y+7	; 0x07
     a92:	98 85       	ldd	r25, Y+8	; 0x08
     a94:	01 96       	adiw	r24, 0x01	; 1
     a96:	98 87       	std	Y+8, r25	; 0x08
     a98:	8f 83       	std	Y+7, r24	; 0x07
     a9a:	a2 cf       	rjmp	.-188    	; 0x9e0 <beep+0x28>
     a9c:	64 96       	adiw	r28, 0x14	; 20
     a9e:	0f b6       	in	r0, 0x3f	; 63
     aa0:	f8 94       	cli
     aa2:	de bf       	out	0x3e, r29	; 62
     aa4:	0f be       	out	0x3f, r0	; 63
     aa6:	cd bf       	out	0x3d, r28	; 61
     aa8:	df 91       	pop	r29
     aaa:	cf 91       	pop	r28
     aac:	08 95       	ret

00000aae <StartStopChronometer>:
            _delay_ms(delay);
        }
    }
}

/*
 * start or stop chronometer
 */
inline void StartStopChronometer() {
     aae:	cf 93       	push	r28
     ab0:	df 93       	push	r29
     ab2:	cd b7       	in	r28, 0x3d	; 61
     ab4:	de b7       	in	r29, 0x3e	; 62
    beep(1,100);
     ab6:	40 e0       	ldi	r20, 0x00	; 0
     ab8:	50 e0       	ldi	r21, 0x00	; 0
     aba:	68 ec       	ldi	r22, 0xC8	; 200
     abc:	72 e4       	ldi	r23, 0x42	; 66
     abe:	81 e0       	ldi	r24, 0x01	; 1
     ac0:	90 e0       	ldi	r25, 0x00	; 0
     ac2:	7a df       	rcall	.-268    	; 0x9b8 <beep>
    led_alarm(3,50);
     ac4:	40 e0       	ldi	r20, 0x00	; 0
     ac6:	50 e0       	ldi	r21, 0x00	; 0
     ac8:	68 e4       	ldi	r22, 0x48	; 72
     aca:	72 e4       	ldi	r23, 0x42	; 66
     acc:	83 e0       	ldi	r24, 0x03	; 3
     ace:	90 e0       	ldi	r25, 0x00	; 0
     ad0:	53 de       	rcall	.-858    	; 0x778 <led_alarm>
    if (running_chronometer) {
     ad2:	80 91 7c 00 	lds	r24, 0x007C
     ad6:	90 91 7d 00 	lds	r25, 0x007D
     ada:	00 97       	sbiw	r24, 0x00	; 0
     adc:	29 f0       	breq	.+10     	; 0xae8 <StartStopChronometer+0x3a>
       running_chronometer = FALSE; // false = 0
     ade:	10 92 7d 00 	sts	0x007D, r1
     ae2:	10 92 7c 00 	sts	0x007C, r1
     ae6:	06 c0       	rjmp	.+12     	; 0xaf4 <StartStopChronometer+0x46>
    } else {
       running_chronometer = TRUE; // true = -1
     ae8:	8f ef       	ldi	r24, 0xFF	; 255
     aea:	9f ef       	ldi	r25, 0xFF	; 255
     aec:	90 93 7d 00 	sts	0x007D, r25
     af0:	80 93 7c 00 	sts	0x007C, r24
     af4:	df 91       	pop	r29
     af6:	cf 91       	pop	r28
     af8:	08 95       	ret

00000afa <TestRunningChronometer>:
    }
}

void TestRunningChronometer() {
     afa:	cf 93       	push	r28
     afc:	df 93       	push	r29
     afe:	cd b7       	in	r28, 0x3d	; 61
     b00:	de b7       	in	r29, 0x3e	; 62
     b02:	2c 97       	sbiw	r28, 0x0c	; 12
     b04:	0f b6       	in	r0, 0x3f	; 63
     b06:	f8 94       	cli
     b08:	de bf       	out	0x3e, r29	; 62
     b0a:	0f be       	out	0x3f, r0	; 63
     b0c:	cd bf       	out	0x3d, r28	; 61
    if (running_chronometer) {
     b0e:	80 91 7c 00 	lds	r24, 0x007C
     b12:	90 91 7d 00 	lds	r25, 0x007D
     b16:	00 97       	sbiw	r24, 0x00	; 0
     b18:	09 f4       	brne	.+2      	; 0xb1c <TestRunningChronometer+0x22>
     b1a:	9a c0       	rjmp	.+308    	; 0xc50 <TestRunningChronometer+0x156>
        switch_on_led(8);
     b1c:	88 e0       	ldi	r24, 0x08	; 8
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	20 dc       	rcall	.-1984   	; 0x362 <switch_on_led>
   The maximal possible delay is 262.14 ms / F_CPU in MHz.
 */
void
_delay_ms(double __ms)
{
     b22:	80 e0       	ldi	r24, 0x00	; 0
     b24:	90 e0       	ldi	r25, 0x00	; 0
     b26:	a8 ec       	ldi	r26, 0xC8	; 200
     b28:	b2 e4       	ldi	r27, 0x42	; 66
     b2a:	89 83       	std	Y+1, r24	; 0x01
     b2c:	9a 83       	std	Y+2, r25	; 0x02
     b2e:	ab 83       	std	Y+3, r26	; 0x03
     b30:	bc 83       	std	Y+4, r27	; 0x04
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b32:	20 e0       	ldi	r18, 0x00	; 0
     b34:	30 e0       	ldi	r19, 0x00	; 0
     b36:	4a e7       	ldi	r20, 0x7A	; 122
     b38:	53 e4       	ldi	r21, 0x43	; 67
     b3a:	69 81       	ldd	r22, Y+1	; 0x01
     b3c:	7a 81       	ldd	r23, Y+2	; 0x02
     b3e:	8b 81       	ldd	r24, Y+3	; 0x03
     b40:	9c 81       	ldd	r25, Y+4	; 0x04
     b42:	0f d6       	rcall	.+3102   	; 0x1762 <__mulsf3>
     b44:	dc 01       	movw	r26, r24
     b46:	cb 01       	movw	r24, r22
     b48:	8f 83       	std	Y+7, r24	; 0x07
     b4a:	98 87       	std	Y+8, r25	; 0x08
     b4c:	a9 87       	std	Y+9, r26	; 0x09
     b4e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     b50:	20 e0       	ldi	r18, 0x00	; 0
     b52:	30 e0       	ldi	r19, 0x00	; 0
     b54:	40 e8       	ldi	r20, 0x80	; 128
     b56:	5f e3       	ldi	r21, 0x3F	; 63
     b58:	6f 81       	ldd	r22, Y+7	; 0x07
     b5a:	78 85       	ldd	r23, Y+8	; 0x08
     b5c:	89 85       	ldd	r24, Y+9	; 0x09
     b5e:	9a 85       	ldd	r25, Y+10	; 0x0a
     b60:	90 d5       	rcall	.+2848   	; 0x1682 <__eqsf2>
     b62:	88 23       	and	r24, r24
     b64:	0c f0       	brlt	.+2      	; 0xb68 <TestRunningChronometer+0x6e>
     b66:	05 c0       	rjmp	.+10     	; 0xb72 <TestRunningChronometer+0x78>
		__ticks = 1;
     b68:	81 e0       	ldi	r24, 0x01	; 1
     b6a:	90 e0       	ldi	r25, 0x00	; 0
     b6c:	9e 83       	std	Y+6, r25	; 0x06
     b6e:	8d 83       	std	Y+5, r24	; 0x05
     b70:	18 c0       	rjmp	.+48     	; 0xba2 <TestRunningChronometer+0xa8>
	else if (__tmp > 65535)
     b72:	20 e0       	ldi	r18, 0x00	; 0
     b74:	3f ef       	ldi	r19, 0xFF	; 255
     b76:	4f e7       	ldi	r20, 0x7F	; 127
     b78:	57 e4       	ldi	r21, 0x47	; 71
     b7a:	6f 81       	ldd	r22, Y+7	; 0x07
     b7c:	78 85       	ldd	r23, Y+8	; 0x08
     b7e:	89 85       	ldd	r24, Y+9	; 0x09
     b80:	9a 85       	ldd	r25, Y+10	; 0x0a
     b82:	82 d5       	rcall	.+2820   	; 0x1688 <__gesf2>
     b84:	18 16       	cp	r1, r24
     b86:	0c f0       	brlt	.+2      	; 0xb8a <TestRunningChronometer+0x90>
     b88:	03 c0       	rjmp	.+6      	; 0xb90 <TestRunningChronometer+0x96>
		__ticks = 0;	/* i.e. 65536 */
     b8a:	1e 82       	std	Y+6, r1	; 0x06
     b8c:	1d 82       	std	Y+5, r1	; 0x05
     b8e:	09 c0       	rjmp	.+18     	; 0xba2 <TestRunningChronometer+0xa8>
	else
		__ticks = (uint16_t)__tmp;
     b90:	6f 81       	ldd	r22, Y+7	; 0x07
     b92:	78 85       	ldd	r23, Y+8	; 0x08
     b94:	89 85       	ldd	r24, Y+9	; 0x09
     b96:	9a 85       	ldd	r25, Y+10	; 0x0a
     b98:	34 d5       	rcall	.+2664   	; 0x1602 <__fixsfsi>
     b9a:	dc 01       	movw	r26, r24
     b9c:	cb 01       	movw	r24, r22
     b9e:	9e 83       	std	Y+6, r25	; 0x06
     ba0:	8d 83       	std	Y+5, r24	; 0x05
     ba2:	8d 81       	ldd	r24, Y+5	; 0x05
     ba4:	9e 81       	ldd	r25, Y+6	; 0x06
     ba6:	9c 87       	std	Y+12, r25	; 0x0c
     ba8:	8b 87       	std	Y+11, r24	; 0x0b
     baa:	8b 85       	ldd	r24, Y+11	; 0x0b
     bac:	9c 85       	ldd	r25, Y+12	; 0x0c
     bae:	01 97       	sbiw	r24, 0x01	; 1
     bb0:	f1 f7       	brne	.-4      	; 0xbae <TestRunningChronometer+0xb4>
     bb2:	9c 87       	std	Y+12, r25	; 0x0c
     bb4:	8b 87       	std	Y+11, r24	; 0x0b
        _delay_ms(100);
        switch_off_led(8);
     bb6:	88 e0       	ldi	r24, 0x08	; 8
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	ff db       	rcall	.-2050   	; 0x3ba <switch_off_led>
   The maximal possible delay is 262.14 ms / F_CPU in MHz.
 */
void
_delay_ms(double __ms)
{
     bbc:	80 e0       	ldi	r24, 0x00	; 0
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	a8 ec       	ldi	r26, 0xC8	; 200
     bc2:	b2 e4       	ldi	r27, 0x42	; 66
     bc4:	8f 83       	std	Y+7, r24	; 0x07
     bc6:	98 87       	std	Y+8, r25	; 0x08
     bc8:	a9 87       	std	Y+9, r26	; 0x09
     bca:	ba 87       	std	Y+10, r27	; 0x0a
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bcc:	20 e0       	ldi	r18, 0x00	; 0
     bce:	30 e0       	ldi	r19, 0x00	; 0
     bd0:	4a e7       	ldi	r20, 0x7A	; 122
     bd2:	53 e4       	ldi	r21, 0x43	; 67
     bd4:	6f 81       	ldd	r22, Y+7	; 0x07
     bd6:	78 85       	ldd	r23, Y+8	; 0x08
     bd8:	89 85       	ldd	r24, Y+9	; 0x09
     bda:	9a 85       	ldd	r25, Y+10	; 0x0a
     bdc:	c2 d5       	rcall	.+2948   	; 0x1762 <__mulsf3>
     bde:	dc 01       	movw	r26, r24
     be0:	cb 01       	movw	r24, r22
     be2:	89 83       	std	Y+1, r24	; 0x01
     be4:	9a 83       	std	Y+2, r25	; 0x02
     be6:	ab 83       	std	Y+3, r26	; 0x03
     be8:	bc 83       	std	Y+4, r27	; 0x04
	if (__tmp < 1.0)
     bea:	20 e0       	ldi	r18, 0x00	; 0
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	40 e8       	ldi	r20, 0x80	; 128
     bf0:	5f e3       	ldi	r21, 0x3F	; 63
     bf2:	69 81       	ldd	r22, Y+1	; 0x01
     bf4:	7a 81       	ldd	r23, Y+2	; 0x02
     bf6:	8b 81       	ldd	r24, Y+3	; 0x03
     bf8:	9c 81       	ldd	r25, Y+4	; 0x04
     bfa:	43 d5       	rcall	.+2694   	; 0x1682 <__eqsf2>
     bfc:	88 23       	and	r24, r24
     bfe:	0c f0       	brlt	.+2      	; 0xc02 <TestRunningChronometer+0x108>
     c00:	05 c0       	rjmp	.+10     	; 0xc0c <TestRunningChronometer+0x112>
		__ticks = 1;
     c02:	81 e0       	ldi	r24, 0x01	; 1
     c04:	90 e0       	ldi	r25, 0x00	; 0
     c06:	9c 87       	std	Y+12, r25	; 0x0c
     c08:	8b 87       	std	Y+11, r24	; 0x0b
     c0a:	18 c0       	rjmp	.+48     	; 0xc3c <TestRunningChronometer+0x142>
	else if (__tmp > 65535)
     c0c:	20 e0       	ldi	r18, 0x00	; 0
     c0e:	3f ef       	ldi	r19, 0xFF	; 255
     c10:	4f e7       	ldi	r20, 0x7F	; 127
     c12:	57 e4       	ldi	r21, 0x47	; 71
     c14:	69 81       	ldd	r22, Y+1	; 0x01
     c16:	7a 81       	ldd	r23, Y+2	; 0x02
     c18:	8b 81       	ldd	r24, Y+3	; 0x03
     c1a:	9c 81       	ldd	r25, Y+4	; 0x04
     c1c:	35 d5       	rcall	.+2666   	; 0x1688 <__gesf2>
     c1e:	18 16       	cp	r1, r24
     c20:	0c f0       	brlt	.+2      	; 0xc24 <TestRunningChronometer+0x12a>
     c22:	03 c0       	rjmp	.+6      	; 0xc2a <TestRunningChronometer+0x130>
		__ticks = 0;	/* i.e. 65536 */
     c24:	1c 86       	std	Y+12, r1	; 0x0c
     c26:	1b 86       	std	Y+11, r1	; 0x0b
     c28:	09 c0       	rjmp	.+18     	; 0xc3c <TestRunningChronometer+0x142>
	else
		__ticks = (uint16_t)__tmp;
     c2a:	69 81       	ldd	r22, Y+1	; 0x01
     c2c:	7a 81       	ldd	r23, Y+2	; 0x02
     c2e:	8b 81       	ldd	r24, Y+3	; 0x03
     c30:	9c 81       	ldd	r25, Y+4	; 0x04
     c32:	e7 d4       	rcall	.+2510   	; 0x1602 <__fixsfsi>
     c34:	dc 01       	movw	r26, r24
     c36:	cb 01       	movw	r24, r22
     c38:	9c 87       	std	Y+12, r25	; 0x0c
     c3a:	8b 87       	std	Y+11, r24	; 0x0b
     c3c:	8b 85       	ldd	r24, Y+11	; 0x0b
     c3e:	9c 85       	ldd	r25, Y+12	; 0x0c
     c40:	9e 83       	std	Y+6, r25	; 0x06
     c42:	8d 83       	std	Y+5, r24	; 0x05
     c44:	8d 81       	ldd	r24, Y+5	; 0x05
     c46:	9e 81       	ldd	r25, Y+6	; 0x06
     c48:	01 97       	sbiw	r24, 0x01	; 1
     c4a:	f1 f7       	brne	.-4      	; 0xc48 <TestRunningChronometer+0x14e>
     c4c:	9e 83       	std	Y+6, r25	; 0x06
     c4e:	8d 83       	std	Y+5, r24	; 0x05
     c50:	2c 96       	adiw	r28, 0x0c	; 12
     c52:	0f b6       	in	r0, 0x3f	; 63
     c54:	f8 94       	cli
     c56:	de bf       	out	0x3e, r29	; 62
     c58:	0f be       	out	0x3f, r0	; 63
     c5a:	cd bf       	out	0x3d, r28	; 61
     c5c:	df 91       	pop	r29
     c5e:	cf 91       	pop	r28
     c60:	08 95       	ret

00000c62 <init>:
        _delay_ms(100);
    }
}


/*
 *  init function
 */
void init() {
     c62:	cf 93       	push	r28
     c64:	df 93       	push	r29
     c66:	cd b7       	in	r28, 0x3d	; 61
     c68:	de b7       	in	r29, 0x3e	; 62
     c6a:	22 97       	sbiw	r28, 0x02	; 2
     c6c:	0f b6       	in	r0, 0x3f	; 63
     c6e:	f8 94       	cli
     c70:	de bf       	out	0x3e, r29	; 62
     c72:	0f be       	out	0x3f, r0	; 63
     c74:	cd bf       	out	0x3d, r28	; 61
   // ******************
   // * WatchDog Timer *
   // ******************


   // ********
   // * LEDs *
   // ********
   DDRC=0xFF; // set up PORTD pins 0 to 7 as output
     c76:	8f ef       	ldi	r24, 0xFF	; 255
     c78:	80 93 34 00 	sts	0x0034, r24
   //switch_on_all_leds();
   switch_off_all_leds();
     c7c:	68 db       	rcall	.-2352   	; 0x34e <switch_off_all_leds>

   // *********************************
   // * Start/Stop chronometer (INT0) *
   // *********************************
   // Set Pin 6 (PD2) as the pin to use for this example
   //PCMSK |= (1<<PIND2); // TO FIX
   //PIND |= (1<<PIND2); // try scls:Error : read-only !!!

   // interrupt on INT0 pin falling edge (sensor triggered)
   MCUCR = (1<<ISC01) | (1<<ISC00);
     c7e:	83 e0       	ldi	r24, 0x03	; 3
     c80:	80 93 55 00 	sts	0x0055, r24

   // turn on interrupts!

   GICR |= (1<<INT0); //INT0
     c84:	80 91 5b 00 	lds	r24, 0x005B
     c88:	80 64       	ori	r24, 0x40	; 64
     c8a:	80 93 5b 00 	sts	0x005B, r24

   sei(); // enable interrupts
     c8e:	78 94       	sei

   // *************************************************
   // * Conv Analog to Digital (CAN for RPM and Temp) *
   // *************************************************

   //volatile static int analog_result;
   //volatile static unsigned char analog_busy;

   //analog_busy=1; // busy mark the ADC function
   int channel = 0; // measure ADC0
     c90:	1a 82       	std	Y+2, r1	; 0x02
     c92:	19 82       	std	Y+1, r1	; 0x01

   // use internal 2.56V ref  REFS1=1 & REFS0=1 (11)
   // use external ref (01)
   ADMUX=(0<<REFS1)|(1<<REFS0)|(channel & 0x07); // channel & 0x07
     c94:	89 81       	ldd	r24, Y+1	; 0x01
     c96:	87 70       	andi	r24, 0x07	; 7
     c98:	80 64       	ori	r24, 0x40	; 64
     c9a:	80 93 27 00 	sts	0x0027, r24

   //ADCSRA=(1<<ADEN)|(1<<ADIE)|(1<<ADIF)|(1<<ADPS2); // interrupt ADIE=1
   ADCSRA=(1<<ADEN)|(0<<ADIE)|(1<<ADIF)|(1<<ADPS2); // no interrupt ADIE=0
     c9e:	84 e9       	ldi	r24, 0x94	; 148
     ca0:	80 93 26 00 	sts	0x0026, r24

   ADCSRA |= (1 << (ADSC)); // start conversion
     ca4:	80 91 26 00 	lds	r24, 0x0026
     ca8:	80 64       	ori	r24, 0x40	; 64
     caa:	80 93 26 00 	sts	0x0026, r24

   DDRA=0x00;
     cae:	10 92 3a 00 	sts	0x003A, r1
	// make sure pull-up resistors are turned off
	PORTA = 0x00;
     cb2:	10 92 3b 00 	sts	0x003B, r1
	

   // **********
   // * Keypad *
   // **********
   // 1 joystick button (4 directions, up, down, left, right)
   // 2 push buttons (ok, cancel)
   DDRB=0x00;
     cb6:	10 92 37 00 	sts	0x0037, r1
   PORTB=0xFF;
     cba:	8f ef       	ldi	r24, 0xFF	; 255
     cbc:	80 93 38 00 	sts	0x0038, r24

   // ***************
   // * Graphic LCD *
   // ***************

   // Sound
   beep(3,300);
     cc0:	40 e0       	ldi	r20, 0x00	; 0
     cc2:	50 e0       	ldi	r21, 0x00	; 0
     cc4:	66 e9       	ldi	r22, 0x96	; 150
     cc6:	73 e4       	ldi	r23, 0x43	; 67
     cc8:	83 e0       	ldi	r24, 0x03	; 3
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	75 de       	rcall	.-790    	; 0x9b8 <beep>

   // Time
   running_chronometer = FALSE;
     cce:	10 92 7d 00 	sts	0x007D, r1
     cd2:	10 92 7c 00 	sts	0x007C, r1
   init_time(&current_time);
     cd6:	8e e7       	ldi	r24, 0x7E	; 126
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	c2 d9       	rcall	.-3196   	; 0x60 <init_time>
   init_time(&last_time);
     cdc:	8e e8       	ldi	r24, 0x8E	; 142
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	bf d9       	rcall	.-3202   	; 0x60 <init_time>
   init_time(&best_time);
     ce2:	86 e8       	ldi	r24, 0x86	; 134
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	bc d9       	rcall	.-3208   	; 0x60 <init_time>
     ce8:	22 96       	adiw	r28, 0x02	; 2
     cea:	0f b6       	in	r0, 0x3f	; 63
     cec:	f8 94       	cli
     cee:	de bf       	out	0x3e, r29	; 62
     cf0:	0f be       	out	0x3f, r0	; 63
     cf2:	cd bf       	out	0x3d, r28	; 61
     cf4:	df 91       	pop	r29
     cf6:	cf 91       	pop	r28
     cf8:	08 95       	ret

00000cfa <adcConvert10bit>:

}

/*
 * convert from analog to digital (10 bits)
 */
unsigned short adcConvert10bit(unsigned char ch)
{
     cfa:	cf 93       	push	r28
     cfc:	df 93       	push	r29
     cfe:	cd b7       	in	r28, 0x3d	; 61
     d00:	de b7       	in	r29, 0x3e	; 62
     d02:	21 97       	sbiw	r28, 0x01	; 1
     d04:	0f b6       	in	r0, 0x3f	; 63
     d06:	f8 94       	cli
     d08:	de bf       	out	0x3e, r29	; 62
     d0a:	0f be       	out	0x3f, r0	; 63
     d0c:	cd bf       	out	0x3d, r28	; 61
     d0e:	89 83       	std	Y+1, r24	; 0x01
	//a2dCompleteFlag = 0;				// clear conversion complete flag
	ADMUX = ((ADMUX) & ~0x1F) | (ch & 0x1F);	// set channel ADC_MUX_MASK=0x1F
     d10:	80 91 27 00 	lds	r24, 0x0027
     d14:	98 2f       	mov	r25, r24
     d16:	90 7e       	andi	r25, 0xE0	; 224
     d18:	89 81       	ldd	r24, Y+1	; 0x01
     d1a:	8f 71       	andi	r24, 0x1F	; 31
     d1c:	89 2b       	or	r24, r25
     d1e:	80 93 27 00 	sts	0x0027, r24
	ADCSRA |= (_BV(ADIF)); // clear hardware "conversion complete" flag
     d22:	80 91 26 00 	lds	r24, 0x0026
     d26:	80 61       	ori	r24, 0x10	; 16
     d28:	80 93 26 00 	sts	0x0026, r24
	ADCSRA |= (_BV(ADSC)); // start conversion
     d2c:	80 91 26 00 	lds	r24, 0x0026
     d30:	80 64       	ori	r24, 0x40	; 64
     d32:	80 93 26 00 	sts	0x0026, r24
							
	//while(!a2dCompleteFlag);				// wait until conversion complete
	//while( bit_is_clear(ADCSR, ADIF) );		// wait until conversion complete
	while( bit_is_set(ADCSRA, ADSC) );		// wait until conversion complete
     d36:	80 91 26 00 	lds	r24, 0x0026
     d3a:	99 27       	eor	r25, r25
     d3c:	80 74       	andi	r24, 0x40	; 64
     d3e:	90 70       	andi	r25, 0x00	; 0
     d40:	00 97       	sbiw	r24, 0x00	; 0
     d42:	09 f0       	breq	.+2      	; 0xd46 <adcConvert10bit+0x4c>
     d44:	f8 cf       	rjmp	.-16     	; 0xd36 <adcConvert10bit+0x3c>

	// CAUTION: MUST READ ADCL BEFORE ADCH!!!
	return ((ADCL) | ((ADCH)<<8));	// read ADC (full 10 bits);
     d46:	80 91 24 00 	lds	r24, 0x0024
     d4a:	28 2f       	mov	r18, r24
     d4c:	33 27       	eor	r19, r19
     d4e:	80 91 25 00 	lds	r24, 0x0025
     d52:	99 27       	eor	r25, r25
     d54:	98 2f       	mov	r25, r24
     d56:	88 27       	eor	r24, r24
     d58:	28 2b       	or	r18, r24
     d5a:	39 2b       	or	r19, r25
     d5c:	c9 01       	movw	r24, r18
     d5e:	21 96       	adiw	r28, 0x01	; 1
     d60:	0f b6       	in	r0, 0x3f	; 63
     d62:	f8 94       	cli
     d64:	de bf       	out	0x3e, r29	; 62
     d66:	0f be       	out	0x3f, r0	; 63
     d68:	cd bf       	out	0x3d, r28	; 61
     d6a:	df 91       	pop	r29
     d6c:	cf 91       	pop	r28
     d6e:	08 95       	ret

00000d70 <adcConvert8bit>:
}

/*
 * convert from analog to digital (8 bits)
 * starts conversion, waits until conversion is done, and returns result
 */
unsigned char adcConvert8bit(unsigned char ch)
{
     d70:	cf 93       	push	r28
     d72:	df 93       	push	r29
     d74:	cd b7       	in	r28, 0x3d	; 61
     d76:	de b7       	in	r29, 0x3e	; 62
     d78:	21 97       	sbiw	r28, 0x01	; 1
     d7a:	0f b6       	in	r0, 0x3f	; 63
     d7c:	f8 94       	cli
     d7e:	de bf       	out	0x3e, r29	; 62
     d80:	0f be       	out	0x3f, r0	; 63
     d82:	cd bf       	out	0x3d, r28	; 61
     d84:	89 83       	std	Y+1, r24	; 0x01
	// do 10-bit conversion and return highest 8 bits
	return adcConvert10bit(ch)>>2;			// return ADC MSB byte
     d86:	89 81       	ldd	r24, Y+1	; 0x01
     d88:	b8 df       	rcall	.-144    	; 0xcfa <adcConvert10bit>
     d8a:	96 95       	lsr	r25
     d8c:	87 95       	ror	r24
     d8e:	96 95       	lsr	r25
     d90:	87 95       	ror	r24
     d92:	99 27       	eor	r25, r25
     d94:	21 96       	adiw	r28, 0x01	; 1
     d96:	0f b6       	in	r0, 0x3f	; 63
     d98:	f8 94       	cli
     d9a:	de bf       	out	0x3e, r29	; 62
     d9c:	0f be       	out	0x3f, r0	; 63
     d9e:	cd bf       	out	0x3d, r28	; 61
     da0:	df 91       	pop	r29
     da2:	cf 91       	pop	r28
     da4:	08 95       	ret

00000da6 <SeekButtons>:
}

#define Nbuts 6
#define B_LEFT 0
#define B_RIGHT 1
#define B_UP 2
#define B_DOWN 3
#define B_OK 4
#define B_CANCEL 5

void SeekButtons(void) {
     da6:	cf 93       	push	r28
     da8:	df 93       	push	r29
     daa:	cd b7       	in	r28, 0x3d	; 61
     dac:	de b7       	in	r29, 0x3e	; 62
     dae:	24 97       	sbiw	r28, 0x04	; 4
     db0:	0f b6       	in	r0, 0x3f	; 63
     db2:	f8 94       	cli
     db4:	de bf       	out	0x3e, r29	; 62
     db6:	0f be       	out	0x3f, r0	; 63
     db8:	cd bf       	out	0x3d, r28	; 61
    int bstate = 0;
     dba:	1a 82       	std	Y+2, r1	; 0x02
     dbc:	19 82       	std	Y+1, r1	; 0x01
    int i;
	 for (i=0; i<=Nbuts-1; i++) {
     dbe:	1c 82       	std	Y+4, r1	; 0x04
     dc0:	1b 82       	std	Y+3, r1	; 0x03
     dc2:	8b 81       	ldd	r24, Y+3	; 0x03
     dc4:	9c 81       	ldd	r25, Y+4	; 0x04
     dc6:	86 30       	cpi	r24, 0x06	; 6
     dc8:	91 05       	cpc	r25, r1
     dca:	14 f5       	brge	.+68     	; 0xe10 <SeekButtons+0x6a>
	     if ( (PINB>>i) == 0 ) {
     dcc:	80 91 36 00 	lds	r24, 0x0036
     dd0:	99 27       	eor	r25, r25
     dd2:	0b 80       	ldd	r0, Y+3	; 0x03
     dd4:	02 c0       	rjmp	.+4      	; 0xdda <SeekButtons+0x34>
     dd6:	95 95       	asr	r25
     dd8:	87 95       	ror	r24
     dda:	0a 94       	dec	r0
     ddc:	e2 f7       	brpl	.-8      	; 0xdd6 <SeekButtons+0x30>
     dde:	00 97       	sbiw	r24, 0x00	; 0
     de0:	29 f4       	brne	.+10     	; 0xdec <SeekButtons+0x46>
	         bstate = TRUE;
     de2:	8f ef       	ldi	r24, 0xFF	; 255
     de4:	9f ef       	ldi	r25, 0xFF	; 255
     de6:	9a 83       	std	Y+2, r25	; 0x02
     de8:	89 83       	std	Y+1, r24	; 0x01
     dea:	02 c0       	rjmp	.+4      	; 0xdf0 <SeekButtons+0x4a>
	     } else {
	         bstate = FALSE;
     dec:	1a 82       	std	Y+2, r1	; 0x02
     dee:	19 82       	std	Y+1, r1	; 0x01
	     }
		
	     if ( i==0 && bstate ) { // LEFT

	     }
	     if ( i==1 && bstate ) { // RIGHT

	     }
	     if ( i==2 && bstate ) { // UP

	     }
	     if ( i==3 && bstate ) { // DOWN

	     }
	     if ( i==4 && bstate ) { // OK
     df0:	8b 81       	ldd	r24, Y+3	; 0x03
     df2:	9c 81       	ldd	r25, Y+4	; 0x04
     df4:	84 30       	cpi	r24, 0x04	; 4
     df6:	91 05       	cpc	r25, r1
     df8:	29 f4       	brne	.+10     	; 0xe04 <SeekButtons+0x5e>
     dfa:	89 81       	ldd	r24, Y+1	; 0x01
     dfc:	9a 81       	ldd	r25, Y+2	; 0x02
     dfe:	00 97       	sbiw	r24, 0x00	; 0
     e00:	09 f0       	breq	.+2      	; 0xe04 <SeekButtons+0x5e>
            StartStopChronometer();
     e02:	55 de       	rcall	.-854    	; 0xaae <StartStopChronometer>
     e04:	8b 81       	ldd	r24, Y+3	; 0x03
     e06:	9c 81       	ldd	r25, Y+4	; 0x04
     e08:	01 96       	adiw	r24, 0x01	; 1
     e0a:	9c 83       	std	Y+4, r25	; 0x04
     e0c:	8b 83       	std	Y+3, r24	; 0x03
     e0e:	d9 cf       	rjmp	.-78     	; 0xdc2 <SeekButtons+0x1c>
     e10:	24 96       	adiw	r28, 0x04	; 4
     e12:	0f b6       	in	r0, 0x3f	; 63
     e14:	f8 94       	cli
     e16:	de bf       	out	0x3e, r29	; 62
     e18:	0f be       	out	0x3f, r0	; 63
     e1a:	cd bf       	out	0x3d, r28	; 61
     e1c:	df 91       	pop	r29
     e1e:	cf 91       	pop	r28
     e20:	08 95       	ret

00000e22 <loop>:
	     }
	     if ( i==5 && bstate ) { // CANCEL

	     }	     	     	     	
	}
}

/*
 *  this is the main loop
 */
void loop(void) {
     e22:	0f 93       	push	r16
     e24:	1f 93       	push	r17
     e26:	cf 93       	push	r28
     e28:	df 93       	push	r29
     e2a:	cd b7       	in	r28, 0x3d	; 61
     e2c:	de b7       	in	r29, 0x3e	; 62
     e2e:	28 97       	sbiw	r28, 0x08	; 8
     e30:	0f b6       	in	r0, 0x3f	; 63
     e32:	f8 94       	cli
     e34:	de bf       	out	0x3e, r29	; 62
     e36:	0f be       	out	0x3f, r0	; 63
     e38:	cd bf       	out	0x3d, r28	; 61
    SeekButtons();
     e3a:	b5 df       	rcall	.-150    	; 0xda6 <SeekButtons>

    double ch0 = adcConvert10bit(0);
     e3c:	80 e0       	ldi	r24, 0x00	; 0
     e3e:	5d df       	rcall	.-326    	; 0xcfa <adcConvert10bit>
     e40:	8c 01       	movw	r16, r24
     e42:	c8 01       	movw	r24, r16
     e44:	aa 27       	eor	r26, r26
     e46:	97 fd       	sbrc	r25, 7
     e48:	a0 95       	com	r26
     e4a:	ba 2f       	mov	r27, r26
     e4c:	bc 01       	movw	r22, r24
     e4e:	cd 01       	movw	r24, r26
     e50:	f5 d3       	rcall	.+2026   	; 0x163c <__floatsisf>
     e52:	6d 83       	std	Y+5, r22	; 0x05
     e54:	7e 83       	std	Y+6, r23	; 0x06
     e56:	8f 83       	std	Y+7, r24	; 0x07
     e58:	98 87       	std	Y+8, r25	; 0x08
     e5a:	11 23       	and	r17, r17
     e5c:	7c f4       	brge	.+30     	; 0xe7c <loop+0x5a>
     e5e:	20 e0       	ldi	r18, 0x00	; 0
     e60:	30 e0       	ldi	r19, 0x00	; 0
     e62:	40 e8       	ldi	r20, 0x80	; 128
     e64:	57 e4       	ldi	r21, 0x47	; 71
     e66:	6d 81       	ldd	r22, Y+5	; 0x05
     e68:	7e 81       	ldd	r23, Y+6	; 0x06
     e6a:	8f 81       	ldd	r24, Y+7	; 0x07
     e6c:	98 85       	ldd	r25, Y+8	; 0x08
     e6e:	41 d3       	rcall	.+1666   	; 0x14f2 <__addsf3>
     e70:	dc 01       	movw	r26, r24
     e72:	cb 01       	movw	r24, r22
     e74:	8d 83       	std	Y+5, r24	; 0x05
     e76:	9e 83       	std	Y+6, r25	; 0x06
     e78:	af 83       	std	Y+7, r26	; 0x07
     e7a:	b8 87       	std	Y+8, r27	; 0x08
     e7c:	8d 81       	ldd	r24, Y+5	; 0x05
     e7e:	9e 81       	ldd	r25, Y+6	; 0x06
     e80:	af 81       	ldd	r26, Y+7	; 0x07
     e82:	b8 85       	ldd	r27, Y+8	; 0x08
     e84:	89 83       	std	Y+1, r24	; 0x01
     e86:	9a 83       	std	Y+2, r25	; 0x02
     e88:	ab 83       	std	Y+3, r26	; 0x03
     e8a:	bc 83       	std	Y+4, r27	; 0x04
    ch0 *= 0.09765625; // 0.09765625 = 100 / 2^10
     e8c:	20 e0       	ldi	r18, 0x00	; 0
     e8e:	30 e0       	ldi	r19, 0x00	; 0
     e90:	48 ec       	ldi	r20, 0xC8	; 200
     e92:	5d e3       	ldi	r21, 0x3D	; 61
     e94:	69 81       	ldd	r22, Y+1	; 0x01
     e96:	7a 81       	ldd	r23, Y+2	; 0x02
     e98:	8b 81       	ldd	r24, Y+3	; 0x03
     e9a:	9c 81       	ldd	r25, Y+4	; 0x04
     e9c:	62 d4       	rcall	.+2244   	; 0x1762 <__mulsf3>
     e9e:	dc 01       	movw	r26, r24
     ea0:	cb 01       	movw	r24, r22
     ea2:	89 83       	std	Y+1, r24	; 0x01
     ea4:	9a 83       	std	Y+2, r25	; 0x02
     ea6:	ab 83       	std	Y+3, r26	; 0x03
     ea8:	bc 83       	std	Y+4, r27	; 0x04
    show_percent(ch0);
     eaa:	69 81       	ldd	r22, Y+1	; 0x01
     eac:	7a 81       	ldd	r23, Y+2	; 0x02
     eae:	8b 81       	ldd	r24, Y+3	; 0x03
     eb0:	9c 81       	ldd	r25, Y+4	; 0x04
     eb2:	4f dd       	rcall	.-1378   	; 0x952 <show_percent>

/*
    _delay_ms(500);

    double ch1 = adcConvert10bit(1);
    ch1 *= 0.09765625; // 0.09765625 = 100 / 2^10
    show_percent(ch1);

    _delay_ms(500);
*/

    TestRunningChronometer();
     eb4:	22 de       	rcall	.-956    	; 0xafa <TestRunningChronometer>

    inc_time(&current_time);
     eb6:	8e e7       	ldi	r24, 0x7E	; 126
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	84 d9       	rcall	.-3320   	; 0x1c4 <inc_time>
     ebc:	28 96       	adiw	r28, 0x08	; 8
     ebe:	0f b6       	in	r0, 0x3f	; 63
     ec0:	f8 94       	cli
     ec2:	de bf       	out	0x3e, r29	; 62
     ec4:	0f be       	out	0x3f, r0	; 63
     ec6:	cd bf       	out	0x3d, r28	; 61
     ec8:	df 91       	pop	r29
     eca:	cf 91       	pop	r28
     ecc:	1f 91       	pop	r17
     ece:	0f 91       	pop	r16
     ed0:	08 95       	ret

00000ed2 <main>:
}


/*
 * main program
 */
int main(void) {
     ed2:	cf e5       	ldi	r28, 0x5F	; 95
     ed4:	d2 e0       	ldi	r29, 0x02	; 2
     ed6:	de bf       	out	0x3e, r29	; 62
     ed8:	cd bf       	out	0x3d, r28	; 61
    init();
     eda:	c3 de       	rcall	.-634    	; 0xc62 <init>
    while(1) { // Infinite loop; define here the
        loop(); // system behaviour
     edc:	a2 df       	rcall	.-188    	; 0xe22 <loop>
     ede:	fe cf       	rjmp	.-4      	; 0xedc <main+0xa>

00000ee0 <__vector_1>:
    }
    return 0;
}

/*
 * interrupt handler for INT0
 */
SIGNAL(SIG_INTERRUPT0) {
     ee0:	1f 92       	push	r1
     ee2:	0f 92       	push	r0
     ee4:	0f b6       	in	r0, 0x3f	; 63
     ee6:	0f 92       	push	r0
     ee8:	11 24       	eor	r1, r1
     eea:	2f 93       	push	r18
     eec:	3f 93       	push	r19
     eee:	4f 93       	push	r20
     ef0:	5f 93       	push	r21
     ef2:	6f 93       	push	r22
     ef4:	7f 93       	push	r23
     ef6:	8f 93       	push	r24
     ef8:	9f 93       	push	r25
     efa:	af 93       	push	r26
     efc:	bf 93       	push	r27
     efe:	ef 93       	push	r30
     f00:	ff 93       	push	r31
     f02:	cf 93       	push	r28
     f04:	df 93       	push	r29
     f06:	cd b7       	in	r28, 0x3d	; 61
     f08:	de b7       	in	r29, 0x3e	; 62
    StartStopChronometer();
     f0a:	d1 dd       	rcall	.-1118   	; 0xaae <StartStopChronometer>
     f0c:	df 91       	pop	r29
     f0e:	cf 91       	pop	r28
     f10:	ff 91       	pop	r31
     f12:	ef 91       	pop	r30
     f14:	bf 91       	pop	r27
     f16:	af 91       	pop	r26
     f18:	9f 91       	pop	r25
     f1a:	8f 91       	pop	r24
     f1c:	7f 91       	pop	r23
     f1e:	6f 91       	pop	r22
     f20:	5f 91       	pop	r21
     f22:	4f 91       	pop	r20
     f24:	3f 91       	pop	r19
     f26:	2f 91       	pop	r18
     f28:	0f 90       	pop	r0
     f2a:	0f be       	out	0x3f, r0	; 63
     f2c:	0f 90       	pop	r0
     f2e:	1f 90       	pop	r1
     f30:	18 95       	reti

00000f32 <printf>:
     f32:	a0 e0       	ldi	r26, 0x00	; 0
     f34:	b0 e0       	ldi	r27, 0x00	; 0
     f36:	ee e9       	ldi	r30, 0x9E	; 158
     f38:	f7 e0       	ldi	r31, 0x07	; 7
     f3a:	8d c4       	rjmp	.+2330   	; 0x1856 <__prologue_saves__+0x20>
     f3c:	e5 e0       	ldi	r30, 0x05	; 5
     f3e:	f0 e0       	ldi	r31, 0x00	; 0
     f40:	ec 0f       	add	r30, r28
     f42:	fd 1f       	adc	r31, r29
     f44:	81 91       	ld	r24, Z+
     f46:	91 91       	ld	r25, Z+
     f48:	af 01       	movw	r20, r30
     f4a:	bc 01       	movw	r22, r24
     f4c:	80 91 98 00 	lds	r24, 0x0098
     f50:	90 91 99 00 	lds	r25, 0x0099
     f54:	02 d0       	rcall	.+4      	; 0xf5a <vfprintf>
     f56:	e2 e0       	ldi	r30, 0x02	; 2
     f58:	9a c4       	rjmp	.+2356   	; 0x188e <__epilogue_restores__+0x20>

00000f5a <vfprintf>:
     f5a:	a2 e1       	ldi	r26, 0x12	; 18
     f5c:	b0 e0       	ldi	r27, 0x00	; 0
     f5e:	e2 eb       	ldi	r30, 0xB2	; 178
     f60:	f7 e0       	ldi	r31, 0x07	; 7
     f62:	69 c4       	rjmp	.+2258   	; 0x1836 <__prologue_saves__>
     f64:	ee 24       	eor	r14, r14
     f66:	ff 24       	eor	r15, r15
     f68:	87 01       	movw	r16, r14
     f6a:	1c 01       	movw	r2, r24
     f6c:	7e 87       	std	Y+14, r23	; 0x0e
     f6e:	6d 87       	std	Y+13, r22	; 0x0d
     f70:	2a 01       	movw	r4, r20
     f72:	cc 24       	eor	r12, r12
     f74:	dd 24       	eor	r13, r13
     f76:	fc 01       	movw	r30, r24
     f78:	d7 82       	std	Z+7, r13	; 0x07
     f7a:	c6 82       	std	Z+6, r12	; 0x06
     f7c:	83 81       	ldd	r24, Z+3	; 0x03
     f7e:	81 fd       	sbrc	r24, 1
     f80:	55 c2       	rjmp	.+1194   	; 0x142c <vfprintf+0x4d2>
     f82:	8f ef       	ldi	r24, 0xFF	; 255
     f84:	9f ef       	ldi	r25, 0xFF	; 255
     f86:	65 c2       	rjmp	.+1226   	; 0x1452 <vfprintf+0x4f8>
     f88:	8d 85       	ldd	r24, Y+13	; 0x0d
     f8a:	9e 85       	ldd	r25, Y+14	; 0x0e
     f8c:	01 96       	adiw	r24, 0x01	; 1
     f8e:	9e 87       	std	Y+14, r25	; 0x0e
     f90:	8d 87       	std	Y+13, r24	; 0x0d
     f92:	c0 fe       	sbrs	r12, 0
     f94:	39 c2       	rjmp	.+1138   	; 0x1408 <vfprintf+0x4ae>
     f96:	8f 85       	ldd	r24, Y+15	; 0x0f
     f98:	80 53       	subi	r24, 0x30	; 48
     f9a:	8a 30       	cpi	r24, 0x0A	; 10
     f9c:	d0 f4       	brcc	.+52     	; 0xfd2 <vfprintf+0x78>
     f9e:	9f 85       	ldd	r25, Y+15	; 0x0f
     fa0:	90 33       	cpi	r25, 0x30	; 48
     fa2:	39 f4       	brne	.+14     	; 0xfb2 <vfprintf+0x58>
     fa4:	66 20       	and	r6, r6
     fa6:	29 f4       	brne	.+10     	; 0xfb2 <vfprintf+0x58>
     fa8:	c3 fc       	sbrc	r12, 3
     faa:	03 c0       	rjmp	.+6      	; 0xfb2 <vfprintf+0x58>
     fac:	e0 e0       	ldi	r30, 0x00	; 0
     fae:	f1 e0       	ldi	r31, 0x01	; 1
     fb0:	8d c0       	rjmp	.+282    	; 0x10cc <vfprintf+0x172>
     fb2:	8a e0       	ldi	r24, 0x0A	; 10
     fb4:	68 9e       	mul	r6, r24
     fb6:	60 2c       	mov	r6, r0
     fb8:	11 24       	eor	r1, r1
     fba:	ff 85       	ldd	r31, Y+15	; 0x0f
     fbc:	6f 0e       	add	r6, r31
     fbe:	20 ed       	ldi	r18, 0xD0	; 208
     fc0:	62 0e       	add	r6, r18
     fc2:	67 fe       	sbrs	r6, 7
     fc4:	02 c0       	rjmp	.+4      	; 0xfca <vfprintf+0x70>
     fc6:	5f e7       	ldi	r21, 0x7F	; 127
     fc8:	65 2e       	mov	r6, r21
     fca:	c3 fc       	sbrc	r12, 3
     fcc:	2f c2       	rjmp	.+1118   	; 0x142c <vfprintf+0x4d2>
     fce:	76 2c       	mov	r7, r6
     fd0:	2d c2       	rjmp	.+1114   	; 0x142c <vfprintf+0x4d2>
     fd2:	c3 fe       	sbrs	r12, 3
     fd4:	04 c0       	rjmp	.+8      	; 0xfde <vfprintf+0x84>
     fd6:	66 20       	and	r6, r6
     fd8:	11 f4       	brne	.+4      	; 0xfde <vfprintf+0x84>
     fda:	41 e0       	ldi	r20, 0x01	; 1
     fdc:	64 2e       	mov	r6, r20
     fde:	ef 85       	ldd	r30, Y+15	; 0x0f
     fe0:	8e 2f       	mov	r24, r30
     fe2:	99 27       	eor	r25, r25
     fe4:	87 fd       	sbrc	r24, 7
     fe6:	90 95       	com	r25
     fe8:	88 36       	cpi	r24, 0x68	; 104
     fea:	91 05       	cpc	r25, r1
     fec:	8c f5       	brge	.+98     	; 0x1050 <vfprintf+0xf6>
     fee:	85 36       	cpi	r24, 0x65	; 101
     ff0:	91 05       	cpc	r25, r1
     ff2:	0c f0       	brlt	.+2      	; 0xff6 <vfprintf+0x9c>
     ff4:	6e c0       	rjmp	.+220    	; 0x10d2 <vfprintf+0x178>
     ff6:	83 35       	cpi	r24, 0x53	; 83
     ff8:	91 05       	cpc	r25, r1
     ffa:	09 f4       	brne	.+2      	; 0xffe <vfprintf+0xa4>
     ffc:	92 c0       	rjmp	.+292    	; 0x1122 <vfprintf+0x1c8>
     ffe:	84 35       	cpi	r24, 0x54	; 84
    1000:	91 05       	cpc	r25, r1
    1002:	cc f4       	brge	.+50     	; 0x1036 <vfprintf+0xdc>
    1004:	8b 32       	cpi	r24, 0x2B	; 43
    1006:	91 05       	cpc	r25, r1
    1008:	09 f4       	brne	.+2      	; 0x100c <vfprintf+0xb2>
    100a:	49 c0       	rjmp	.+146    	; 0x109e <vfprintf+0x144>
    100c:	8c 32       	cpi	r24, 0x2C	; 44
    100e:	91 05       	cpc	r25, r1
    1010:	4c f4       	brge	.+18     	; 0x1024 <vfprintf+0xca>
    1012:	80 32       	cpi	r24, 0x20	; 32
    1014:	91 05       	cpc	r25, r1
    1016:	09 f4       	brne	.+2      	; 0x101a <vfprintf+0xc0>
    1018:	46 c0       	rjmp	.+140    	; 0x10a6 <vfprintf+0x14c>
    101a:	83 32       	cpi	r24, 0x23	; 35
    101c:	91 05       	cpc	r25, r1
    101e:	09 f4       	brne	.+2      	; 0x1022 <vfprintf+0xc8>
    1020:	4a c0       	rjmp	.+148    	; 0x10b6 <vfprintf+0x15c>
    1022:	ed c1       	rjmp	.+986    	; 0x13fe <vfprintf+0x4a4>
    1024:	8d 32       	cpi	r24, 0x2D	; 45
    1026:	91 05       	cpc	r25, r1
    1028:	09 f4       	brne	.+2      	; 0x102c <vfprintf+0xd2>
    102a:	40 c0       	rjmp	.+128    	; 0x10ac <vfprintf+0x152>
    102c:	8e 32       	cpi	r24, 0x2E	; 46
    102e:	91 05       	cpc	r25, r1
    1030:	09 f4       	brne	.+2      	; 0x1034 <vfprintf+0xda>
    1032:	44 c0       	rjmp	.+136    	; 0x10bc <vfprintf+0x162>
    1034:	e4 c1       	rjmp	.+968    	; 0x13fe <vfprintf+0x4a4>
    1036:	83 36       	cpi	r24, 0x63	; 99
    1038:	91 05       	cpc	r25, r1
    103a:	09 f4       	brne	.+2      	; 0x103e <vfprintf+0xe4>
    103c:	50 c0       	rjmp	.+160    	; 0x10de <vfprintf+0x184>
    103e:	84 36       	cpi	r24, 0x64	; 100
    1040:	91 05       	cpc	r25, r1
    1042:	0c f0       	brlt	.+2      	; 0x1046 <vfprintf+0xec>
    1044:	87 c0       	rjmp	.+270    	; 0x1154 <vfprintf+0x1fa>
    1046:	88 35       	cpi	r24, 0x58	; 88
    1048:	91 05       	cpc	r25, r1
    104a:	09 f4       	brne	.+2      	; 0x104e <vfprintf+0xf4>
    104c:	b9 c0       	rjmp	.+370    	; 0x11c0 <vfprintf+0x266>
    104e:	d7 c1       	rjmp	.+942    	; 0x13fe <vfprintf+0x4a4>
    1050:	80 37       	cpi	r24, 0x70	; 112
    1052:	91 05       	cpc	r25, r1
    1054:	09 f4       	brne	.+2      	; 0x1058 <vfprintf+0xfe>
    1056:	ae c0       	rjmp	.+348    	; 0x11b4 <vfprintf+0x25a>
    1058:	81 37       	cpi	r24, 0x71	; 113
    105a:	91 05       	cpc	r25, r1
    105c:	84 f4       	brge	.+32     	; 0x107e <vfprintf+0x124>
    105e:	8c 36       	cpi	r24, 0x6C	; 108
    1060:	91 05       	cpc	r25, r1
    1062:	91 f1       	breq	.+100    	; 0x10c8 <vfprintf+0x16e>
    1064:	8d 36       	cpi	r24, 0x6D	; 109
    1066:	91 05       	cpc	r25, r1
    1068:	2c f4       	brge	.+10     	; 0x1074 <vfprintf+0x11a>
    106a:	89 36       	cpi	r24, 0x69	; 105
    106c:	91 05       	cpc	r25, r1
    106e:	09 f4       	brne	.+2      	; 0x1072 <vfprintf+0x118>
    1070:	71 c0       	rjmp	.+226    	; 0x1154 <vfprintf+0x1fa>
    1072:	c5 c1       	rjmp	.+906    	; 0x13fe <vfprintf+0x4a4>
    1074:	8f 36       	cpi	r24, 0x6F	; 111
    1076:	91 05       	cpc	r25, r1
    1078:	09 f4       	brne	.+2      	; 0x107c <vfprintf+0x122>
    107a:	99 c0       	rjmp	.+306    	; 0x11ae <vfprintf+0x254>
    107c:	c0 c1       	rjmp	.+896    	; 0x13fe <vfprintf+0x4a4>
    107e:	85 37       	cpi	r24, 0x75	; 117
    1080:	91 05       	cpc	r25, r1
    1082:	09 f4       	brne	.+2      	; 0x1086 <vfprintf+0x12c>
    1084:	9f c0       	rjmp	.+318    	; 0x11c4 <vfprintf+0x26a>
    1086:	86 37       	cpi	r24, 0x76	; 118
    1088:	91 05       	cpc	r25, r1
    108a:	24 f4       	brge	.+8      	; 0x1094 <vfprintf+0x13a>
    108c:	83 37       	cpi	r24, 0x73	; 115
    108e:	91 05       	cpc	r25, r1
    1090:	71 f1       	breq	.+92     	; 0x10ee <vfprintf+0x194>
    1092:	b5 c1       	rjmp	.+874    	; 0x13fe <vfprintf+0x4a4>
    1094:	88 37       	cpi	r24, 0x78	; 120
    1096:	91 05       	cpc	r25, r1
    1098:	09 f4       	brne	.+2      	; 0x109c <vfprintf+0x142>
    109a:	92 c0       	rjmp	.+292    	; 0x11c0 <vfprintf+0x266>
    109c:	b0 c1       	rjmp	.+864    	; 0x13fe <vfprintf+0x4a4>
    109e:	80 e1       	ldi	r24, 0x10	; 16
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	c8 2a       	or	r12, r24
    10a4:	d9 2a       	or	r13, r25
    10a6:	e0 e2       	ldi	r30, 0x20	; 32
    10a8:	f0 e0       	ldi	r31, 0x00	; 0
    10aa:	10 c0       	rjmp	.+32     	; 0x10cc <vfprintf+0x172>
    10ac:	80 e8       	ldi	r24, 0x80	; 128
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	c8 2a       	or	r12, r24
    10b2:	d9 2a       	or	r13, r25
    10b4:	bb c1       	rjmp	.+886    	; 0x142c <vfprintf+0x4d2>
    10b6:	e0 e4       	ldi	r30, 0x40	; 64
    10b8:	f0 e0       	ldi	r31, 0x00	; 0
    10ba:	08 c0       	rjmp	.+16     	; 0x10cc <vfprintf+0x172>
    10bc:	88 e0       	ldi	r24, 0x08	; 8
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	c8 2a       	or	r12, r24
    10c2:	d9 2a       	or	r13, r25
    10c4:	66 24       	eor	r6, r6
    10c6:	b2 c1       	rjmp	.+868    	; 0x142c <vfprintf+0x4d2>
    10c8:	e4 e0       	ldi	r30, 0x04	; 4
    10ca:	f0 e0       	ldi	r31, 0x00	; 0
    10cc:	ce 2a       	or	r12, r30
    10ce:	df 2a       	or	r13, r31
    10d0:	ad c1       	rjmp	.+858    	; 0x142c <vfprintf+0x4d2>
    10d2:	3f e3       	ldi	r19, 0x3F	; 63
    10d4:	e3 2e       	mov	r14, r19
    10d6:	7a 94       	dec	r7
    10d8:	f3 e6       	ldi	r31, 0x63	; 99
    10da:	ff 87       	std	Y+15, r31	; 0x0f
    10dc:	31 c1       	rjmp	.+610    	; 0x1340 <vfprintf+0x3e6>
    10de:	f2 01       	movw	r30, r4
    10e0:	82 e0       	ldi	r24, 0x02	; 2
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	48 0e       	add	r4, r24
    10e6:	59 1e       	adc	r5, r25
    10e8:	e0 80       	ld	r14, Z
    10ea:	7a 94       	dec	r7
    10ec:	29 c1       	rjmp	.+594    	; 0x1340 <vfprintf+0x3e6>
    10ee:	f2 01       	movw	r30, r4
    10f0:	82 e0       	ldi	r24, 0x02	; 2
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	48 0e       	add	r4, r24
    10f6:	59 1e       	adc	r5, r25
    10f8:	a0 81       	ld	r26, Z
    10fa:	b1 81       	ldd	r27, Z+1	; 0x01
    10fc:	7d 01       	movw	r14, r26
    10fe:	c3 fe       	sbrs	r12, 3
    1100:	08 c0       	rjmp	.+16     	; 0x1112 <vfprintf+0x1b8>
    1102:	86 2d       	mov	r24, r6
    1104:	99 27       	eor	r25, r25
    1106:	87 fd       	sbrc	r24, 7
    1108:	90 95       	com	r25
    110a:	bc 01       	movw	r22, r24
    110c:	cd 01       	movw	r24, r26
    110e:	b8 d1       	rcall	.+880    	; 0x1480 <strnlen>
    1110:	1d c0       	rjmp	.+58     	; 0x114c <vfprintf+0x1f2>
    1112:	fd 01       	movw	r30, r26
    1114:	01 90       	ld	r0, Z+
    1116:	00 20       	and	r0, r0
    1118:	e9 f7       	brne	.-6      	; 0x1114 <vfprintf+0x1ba>
    111a:	31 97       	sbiw	r30, 0x01	; 1
    111c:	ea 1b       	sub	r30, r26
    111e:	e8 8b       	std	Y+16, r30	; 0x10
    1120:	16 c0       	rjmp	.+44     	; 0x114e <vfprintf+0x1f4>
    1122:	f2 01       	movw	r30, r4
    1124:	82 e0       	ldi	r24, 0x02	; 2
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	48 0e       	add	r4, r24
    112a:	59 1e       	adc	r5, r25
    112c:	01 90       	ld	r0, Z+
    112e:	f0 81       	ld	r31, Z
    1130:	e0 2d       	mov	r30, r0
    1132:	7f 01       	movw	r14, r30
    1134:	c3 fe       	sbrs	r12, 3
    1136:	08 c0       	rjmp	.+16     	; 0x1148 <vfprintf+0x1ee>
    1138:	86 2d       	mov	r24, r6
    113a:	99 27       	eor	r25, r25
    113c:	87 fd       	sbrc	r24, 7
    113e:	90 95       	com	r25
    1140:	bc 01       	movw	r22, r24
    1142:	cf 01       	movw	r24, r30
    1144:	92 d1       	rcall	.+804    	; 0x146a <strnlen_P>
    1146:	02 c0       	rjmp	.+4      	; 0x114c <vfprintf+0x1f2>
    1148:	cf 01       	movw	r24, r30
    114a:	86 d1       	rcall	.+780    	; 0x1458 <strlen_P>
    114c:	88 8b       	std	Y+16, r24	; 0x10
    114e:	98 89       	ldd	r25, Y+16	; 0x10
    1150:	79 1a       	sub	r7, r25
    1152:	f6 c0       	rjmp	.+492    	; 0x1340 <vfprintf+0x3e6>
    1154:	c2 fe       	sbrs	r12, 2
    1156:	0a c0       	rjmp	.+20     	; 0x116c <vfprintf+0x212>
    1158:	f2 01       	movw	r30, r4
    115a:	84 e0       	ldi	r24, 0x04	; 4
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	48 0e       	add	r4, r24
    1160:	59 1e       	adc	r5, r25
    1162:	20 81       	ld	r18, Z
    1164:	31 81       	ldd	r19, Z+1	; 0x01
    1166:	42 81       	ldd	r20, Z+2	; 0x02
    1168:	53 81       	ldd	r21, Z+3	; 0x03
    116a:	0c c0       	rjmp	.+24     	; 0x1184 <vfprintf+0x22a>
    116c:	f2 01       	movw	r30, r4
    116e:	82 e0       	ldi	r24, 0x02	; 2
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	48 0e       	add	r4, r24
    1174:	59 1e       	adc	r5, r25
    1176:	80 81       	ld	r24, Z
    1178:	91 81       	ldd	r25, Z+1	; 0x01
    117a:	9c 01       	movw	r18, r24
    117c:	44 27       	eor	r20, r20
    117e:	37 fd       	sbrc	r19, 7
    1180:	40 95       	com	r20
    1182:	54 2f       	mov	r21, r20
    1184:	79 01       	movw	r14, r18
    1186:	8a 01       	movw	r16, r20
    1188:	57 ff       	sbrs	r21, 7
    118a:	0c c0       	rjmp	.+24     	; 0x11a4 <vfprintf+0x24a>
    118c:	e2 e0       	ldi	r30, 0x02	; 2
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	ce 2a       	or	r12, r30
    1192:	df 2a       	or	r13, r31
    1194:	10 95       	com	r17
    1196:	00 95       	com	r16
    1198:	f0 94       	com	r15
    119a:	e0 94       	com	r14
    119c:	e1 1c       	adc	r14, r1
    119e:	f1 1c       	adc	r15, r1
    11a0:	01 1d       	adc	r16, r1
    11a2:	11 1d       	adc	r17, r1
    11a4:	8f eb       	ldi	r24, 0xBF	; 191
    11a6:	9f ef       	ldi	r25, 0xFF	; 255
    11a8:	c8 22       	and	r12, r24
    11aa:	d9 22       	and	r13, r25
    11ac:	27 c0       	rjmp	.+78     	; 0x11fc <vfprintf+0x2a2>
    11ae:	98 e0       	ldi	r25, 0x08	; 8
    11b0:	98 8b       	std	Y+16, r25	; 0x10
    11b2:	08 c0       	rjmp	.+16     	; 0x11c4 <vfprintf+0x26a>
    11b4:	e0 e4       	ldi	r30, 0x40	; 64
    11b6:	f0 e0       	ldi	r31, 0x00	; 0
    11b8:	ce 2a       	or	r12, r30
    11ba:	df 2a       	or	r13, r31
    11bc:	f8 e7       	ldi	r31, 0x78	; 120
    11be:	ff 87       	std	Y+15, r31	; 0x0f
    11c0:	20 e1       	ldi	r18, 0x10	; 16
    11c2:	28 8b       	std	Y+16, r18	; 0x10
    11c4:	c2 fe       	sbrs	r12, 2
    11c6:	0a c0       	rjmp	.+20     	; 0x11dc <vfprintf+0x282>
    11c8:	f2 01       	movw	r30, r4
    11ca:	84 e0       	ldi	r24, 0x04	; 4
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	48 0e       	add	r4, r24
    11d0:	59 1e       	adc	r5, r25
    11d2:	20 81       	ld	r18, Z
    11d4:	31 81       	ldd	r19, Z+1	; 0x01
    11d6:	42 81       	ldd	r20, Z+2	; 0x02
    11d8:	53 81       	ldd	r21, Z+3	; 0x03
    11da:	0a c0       	rjmp	.+20     	; 0x11f0 <vfprintf+0x296>
    11dc:	f2 01       	movw	r30, r4
    11de:	82 e0       	ldi	r24, 0x02	; 2
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	48 0e       	add	r4, r24
    11e4:	59 1e       	adc	r5, r25
    11e6:	80 81       	ld	r24, Z
    11e8:	91 81       	ldd	r25, Z+1	; 0x01
    11ea:	9c 01       	movw	r18, r24
    11ec:	44 27       	eor	r20, r20
    11ee:	55 27       	eor	r21, r21
    11f0:	79 01       	movw	r14, r18
    11f2:	8a 01       	movw	r16, r20
    11f4:	ef ec       	ldi	r30, 0xCF	; 207
    11f6:	ff ef       	ldi	r31, 0xFF	; 255
    11f8:	ce 22       	and	r12, r30
    11fa:	df 22       	and	r13, r31
    11fc:	ce 01       	movw	r24, r28
    11fe:	01 96       	adiw	r24, 0x01	; 1
    1200:	9a 8b       	std	Y+18, r25	; 0x12
    1202:	89 8b       	std	Y+17, r24	; 0x11
    1204:	98 89       	ldd	r25, Y+16	; 0x10
    1206:	89 2e       	mov	r8, r25
    1208:	99 24       	eor	r9, r9
    120a:	aa 24       	eor	r10, r10
    120c:	bb 24       	eor	r11, r11
    120e:	c8 01       	movw	r24, r16
    1210:	b7 01       	movw	r22, r14
    1212:	a5 01       	movw	r20, r10
    1214:	94 01       	movw	r18, r8
    1216:	ed d2       	rcall	.+1498   	; 0x17f2 <__udivmodsi4>
    1218:	dc 01       	movw	r26, r24
    121a:	cb 01       	movw	r24, r22
    121c:	e9 89       	ldd	r30, Y+17	; 0x11
    121e:	fa 89       	ldd	r31, Y+18	; 0x12
    1220:	80 83       	st	Z, r24
    1222:	8a 30       	cpi	r24, 0x0A	; 10
    1224:	24 f0       	brlt	.+8      	; 0x122e <vfprintf+0x2d4>
    1226:	ff 85       	ldd	r31, Y+15	; 0x0f
    1228:	8f 0f       	add	r24, r31
    122a:	81 52       	subi	r24, 0x21	; 33
    122c:	01 c0       	rjmp	.+2      	; 0x1230 <vfprintf+0x2d6>
    122e:	80 5d       	subi	r24, 0xD0	; 208
    1230:	e9 89       	ldd	r30, Y+17	; 0x11
    1232:	fa 89       	ldd	r31, Y+18	; 0x12
    1234:	81 93       	st	Z+, r24
    1236:	fa 8b       	std	Y+18, r31	; 0x12
    1238:	e9 8b       	std	Y+17, r30	; 0x11
    123a:	c8 01       	movw	r24, r16
    123c:	b7 01       	movw	r22, r14
    123e:	a5 01       	movw	r20, r10
    1240:	94 01       	movw	r18, r8
    1242:	d7 d2       	rcall	.+1454   	; 0x17f2 <__udivmodsi4>
    1244:	79 01       	movw	r14, r18
    1246:	8a 01       	movw	r16, r20
    1248:	21 15       	cp	r18, r1
    124a:	31 05       	cpc	r19, r1
    124c:	41 05       	cpc	r20, r1
    124e:	51 05       	cpc	r21, r1
    1250:	f1 f6       	brne	.-68     	; 0x120e <vfprintf+0x2b4>
    1252:	e9 88       	ldd	r14, Y+17	; 0x11
    1254:	81 e0       	ldi	r24, 0x01	; 1
    1256:	90 e0       	ldi	r25, 0x00	; 0
    1258:	8c 0f       	add	r24, r28
    125a:	9d 1f       	adc	r25, r29
    125c:	e8 1a       	sub	r14, r24
    125e:	c6 01       	movw	r24, r12
    1260:	82 73       	andi	r24, 0x32	; 50
    1262:	90 70       	andi	r25, 0x00	; 0
    1264:	89 2b       	or	r24, r25
    1266:	09 f0       	breq	.+2      	; 0x126a <vfprintf+0x310>
    1268:	7a 94       	dec	r7
    126a:	c6 fe       	sbrs	r12, 6
    126c:	0d c0       	rjmp	.+26     	; 0x1288 <vfprintf+0x32e>
    126e:	87 2d       	mov	r24, r7
    1270:	99 27       	eor	r25, r25
    1272:	87 fd       	sbrc	r24, 7
    1274:	90 95       	com	r25
    1276:	e8 89       	ldd	r30, Y+16	; 0x10
    1278:	e0 31       	cpi	r30, 0x10	; 16
    127a:	21 f4       	brne	.+8      	; 0x1284 <vfprintf+0x32a>
    127c:	2e ef       	ldi	r18, 0xFE	; 254
    127e:	72 2e       	mov	r7, r18
    1280:	78 0e       	add	r7, r24
    1282:	02 c0       	rjmp	.+4      	; 0x1288 <vfprintf+0x32e>
    1284:	78 2e       	mov	r7, r24
    1286:	7a 94       	dec	r7
    1288:	c3 fe       	sbrs	r12, 3
    128a:	0f c0       	rjmp	.+30     	; 0x12aa <vfprintf+0x350>
    128c:	26 2d       	mov	r18, r6
    128e:	33 27       	eor	r19, r19
    1290:	27 fd       	sbrc	r18, 7
    1292:	30 95       	com	r19
    1294:	8e 2d       	mov	r24, r14
    1296:	99 27       	eor	r25, r25
    1298:	82 17       	cp	r24, r18
    129a:	93 07       	cpc	r25, r19
    129c:	2c f0       	brlt	.+10     	; 0x12a8 <vfprintf+0x34e>
    129e:	87 ef       	ldi	r24, 0xF7	; 247
    12a0:	9f ef       	ldi	r25, 0xFF	; 255
    12a2:	c8 22       	and	r12, r24
    12a4:	d9 22       	and	r13, r25
    12a6:	01 c0       	rjmp	.+2      	; 0x12aa <vfprintf+0x350>
    12a8:	6e 18       	sub	r6, r14
    12aa:	c3 fe       	sbrs	r12, 3
    12ac:	02 c0       	rjmp	.+4      	; 0x12b2 <vfprintf+0x358>
    12ae:	76 18       	sub	r7, r6
    12b0:	01 c0       	rjmp	.+2      	; 0x12b4 <vfprintf+0x35a>
    12b2:	7e 18       	sub	r7, r14
    12b4:	c6 01       	movw	r24, r12
    12b6:	80 78       	andi	r24, 0x80	; 128
    12b8:	91 70       	andi	r25, 0x01	; 1
    12ba:	89 2b       	or	r24, r25
    12bc:	49 f4       	brne	.+18     	; 0x12d0 <vfprintf+0x376>
    12be:	87 2d       	mov	r24, r7
    12c0:	7a 94       	dec	r7
    12c2:	18 16       	cp	r1, r24
    12c4:	2c f4       	brge	.+10     	; 0x12d0 <vfprintf+0x376>
    12c6:	b1 01       	movw	r22, r2
    12c8:	80 e2       	ldi	r24, 0x20	; 32
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	e4 d0       	rcall	.+456    	; 0x1496 <fputc>
    12ce:	f7 cf       	rjmp	.-18     	; 0x12be <vfprintf+0x364>
    12d0:	c1 fe       	sbrs	r12, 1
    12d2:	04 c0       	rjmp	.+8      	; 0x12dc <vfprintf+0x382>
    12d4:	b1 01       	movw	r22, r2
    12d6:	8d e2       	ldi	r24, 0x2D	; 45
    12d8:	90 e0       	ldi	r25, 0x00	; 0
    12da:	0b c0       	rjmp	.+22     	; 0x12f2 <vfprintf+0x398>
    12dc:	c4 fe       	sbrs	r12, 4
    12de:	04 c0       	rjmp	.+8      	; 0x12e8 <vfprintf+0x38e>
    12e0:	b1 01       	movw	r22, r2
    12e2:	8b e2       	ldi	r24, 0x2B	; 43
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	05 c0       	rjmp	.+10     	; 0x12f2 <vfprintf+0x398>
    12e8:	c5 fe       	sbrs	r12, 5
    12ea:	04 c0       	rjmp	.+8      	; 0x12f4 <vfprintf+0x39a>
    12ec:	b1 01       	movw	r22, r2
    12ee:	80 e2       	ldi	r24, 0x20	; 32
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	d1 d0       	rcall	.+418    	; 0x1496 <fputc>
    12f4:	c6 fe       	sbrs	r12, 6
    12f6:	0e c0       	rjmp	.+28     	; 0x1314 <vfprintf+0x3ba>
    12f8:	b1 01       	movw	r22, r2
    12fa:	80 e3       	ldi	r24, 0x30	; 48
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	cb d0       	rcall	.+406    	; 0x1496 <fputc>
    1300:	98 89       	ldd	r25, Y+16	; 0x10
    1302:	90 31       	cpi	r25, 0x10	; 16
    1304:	39 f4       	brne	.+14     	; 0x1314 <vfprintf+0x3ba>
    1306:	b1 01       	movw	r22, r2
    1308:	ef 85       	ldd	r30, Y+15	; 0x0f
    130a:	8e 2f       	mov	r24, r30
    130c:	99 27       	eor	r25, r25
    130e:	87 fd       	sbrc	r24, 7
    1310:	90 95       	com	r25
    1312:	c1 d0       	rcall	.+386    	; 0x1496 <fputc>
    1314:	d0 fe       	sbrs	r13, 0
    1316:	09 c0       	rjmp	.+18     	; 0x132a <vfprintf+0x3d0>
    1318:	87 2d       	mov	r24, r7
    131a:	7a 94       	dec	r7
    131c:	18 16       	cp	r1, r24
    131e:	2c f4       	brge	.+10     	; 0x132a <vfprintf+0x3d0>
    1320:	b1 01       	movw	r22, r2
    1322:	80 e3       	ldi	r24, 0x30	; 48
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	b7 d0       	rcall	.+366    	; 0x1496 <fputc>
    1328:	f7 cf       	rjmp	.-18     	; 0x1318 <vfprintf+0x3be>
    132a:	c3 fe       	sbrs	r12, 3
    132c:	09 c0       	rjmp	.+18     	; 0x1340 <vfprintf+0x3e6>
    132e:	86 2d       	mov	r24, r6
    1330:	6a 94       	dec	r6
    1332:	18 16       	cp	r1, r24
    1334:	2c f4       	brge	.+10     	; 0x1340 <vfprintf+0x3e6>
    1336:	b1 01       	movw	r22, r2
    1338:	80 e3       	ldi	r24, 0x30	; 48
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	ac d0       	rcall	.+344    	; 0x1496 <fputc>
    133e:	f7 cf       	rjmp	.-18     	; 0x132e <vfprintf+0x3d4>
    1340:	90 e8       	ldi	r25, 0x80	; 128
    1342:	b9 2e       	mov	r11, r25
    1344:	bc 20       	and	r11, r12
    1346:	49 f4       	brne	.+18     	; 0x135a <vfprintf+0x400>
    1348:	87 2d       	mov	r24, r7
    134a:	7a 94       	dec	r7
    134c:	18 16       	cp	r1, r24
    134e:	2c f4       	brge	.+10     	; 0x135a <vfprintf+0x400>
    1350:	b1 01       	movw	r22, r2
    1352:	80 e2       	ldi	r24, 0x20	; 32
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	9f d0       	rcall	.+318    	; 0x1496 <fputc>
    1358:	f7 cf       	rjmp	.-18     	; 0x1348 <vfprintf+0x3ee>
    135a:	ff 85       	ldd	r31, Y+15	; 0x0f
    135c:	f3 36       	cpi	r31, 0x63	; 99
    135e:	39 f4       	brne	.+14     	; 0x136e <vfprintf+0x414>
    1360:	8e 2d       	mov	r24, r14
    1362:	b1 01       	movw	r22, r2
    1364:	99 27       	eor	r25, r25
    1366:	87 fd       	sbrc	r24, 7
    1368:	90 95       	com	r25
    136a:	95 d0       	rcall	.+298    	; 0x1496 <fputc>
    136c:	3d c0       	rjmp	.+122    	; 0x13e8 <vfprintf+0x48e>
    136e:	2f 85       	ldd	r18, Y+15	; 0x0f
    1370:	23 37       	cpi	r18, 0x73	; 115
    1372:	a9 f4       	brne	.+42     	; 0x139e <vfprintf+0x444>
    1374:	88 89       	ldd	r24, Y+16	; 0x10
    1376:	81 50       	subi	r24, 0x01	; 1
    1378:	88 8b       	std	Y+16, r24	; 0x10
    137a:	8f 3f       	cpi	r24, 0xFF	; 255
    137c:	a9 f1       	breq	.+106    	; 0x13e8 <vfprintf+0x48e>
    137e:	f7 01       	movw	r30, r14
    1380:	80 81       	ld	r24, Z
    1382:	08 94       	sec
    1384:	e1 1c       	adc	r14, r1
    1386:	f1 1c       	adc	r15, r1
    1388:	b1 01       	movw	r22, r2
    138a:	99 27       	eor	r25, r25
    138c:	87 fd       	sbrc	r24, 7
    138e:	90 95       	com	r25
    1390:	82 d0       	rcall	.+260    	; 0x1496 <fputc>
    1392:	98 89       	ldd	r25, Y+16	; 0x10
    1394:	91 50       	subi	r25, 0x01	; 1
    1396:	98 8b       	std	Y+16, r25	; 0x10
    1398:	9f 3f       	cpi	r25, 0xFF	; 255
    139a:	89 f7       	brne	.-30     	; 0x137e <vfprintf+0x424>
    139c:	25 c0       	rjmp	.+74     	; 0x13e8 <vfprintf+0x48e>
    139e:	ef 85       	ldd	r30, Y+15	; 0x0f
    13a0:	e3 35       	cpi	r30, 0x53	; 83
    13a2:	71 f4       	brne	.+28     	; 0x13c0 <vfprintf+0x466>
    13a4:	f8 89       	ldd	r31, Y+16	; 0x10
    13a6:	f1 50       	subi	r31, 0x01	; 1
    13a8:	f8 8b       	std	Y+16, r31	; 0x10
    13aa:	ff 3f       	cpi	r31, 0xFF	; 255
    13ac:	e9 f0       	breq	.+58     	; 0x13e8 <vfprintf+0x48e>
    13ae:	f7 01       	movw	r30, r14
    13b0:	84 91       	lpm	r24, Z
    13b2:	b1 01       	movw	r22, r2
    13b4:	99 27       	eor	r25, r25
    13b6:	6f d0       	rcall	.+222    	; 0x1496 <fputc>
    13b8:	08 94       	sec
    13ba:	e1 1c       	adc	r14, r1
    13bc:	f1 1c       	adc	r15, r1
    13be:	f2 cf       	rjmp	.-28     	; 0x13a4 <vfprintf+0x44a>
    13c0:	6e 01       	movw	r12, r28
    13c2:	08 94       	sec
    13c4:	c1 1c       	adc	r12, r1
    13c6:	d1 1c       	adc	r13, r1
    13c8:	89 89       	ldd	r24, Y+17	; 0x11
    13ca:	9a 89       	ldd	r25, Y+18	; 0x12
    13cc:	8c 15       	cp	r24, r12
    13ce:	9d 05       	cpc	r25, r13
    13d0:	59 f0       	breq	.+22     	; 0x13e8 <vfprintf+0x48e>
    13d2:	e9 89       	ldd	r30, Y+17	; 0x11
    13d4:	fa 89       	ldd	r31, Y+18	; 0x12
    13d6:	82 91       	ld	r24, -Z
    13d8:	fa 8b       	std	Y+18, r31	; 0x12
    13da:	e9 8b       	std	Y+17, r30	; 0x11
    13dc:	b1 01       	movw	r22, r2
    13de:	99 27       	eor	r25, r25
    13e0:	87 fd       	sbrc	r24, 7
    13e2:	90 95       	com	r25
    13e4:	58 d0       	rcall	.+176    	; 0x1496 <fputc>
    13e6:	f0 cf       	rjmp	.-32     	; 0x13c8 <vfprintf+0x46e>
    13e8:	bb 20       	and	r11, r11
    13ea:	59 f0       	breq	.+22     	; 0x1402 <vfprintf+0x4a8>
    13ec:	87 2d       	mov	r24, r7
    13ee:	7a 94       	dec	r7
    13f0:	18 16       	cp	r1, r24
    13f2:	3c f4       	brge	.+14     	; 0x1402 <vfprintf+0x4a8>
    13f4:	b1 01       	movw	r22, r2
    13f6:	80 e2       	ldi	r24, 0x20	; 32
    13f8:	90 e0       	ldi	r25, 0x00	; 0
    13fa:	4d d0       	rcall	.+154    	; 0x1496 <fputc>
    13fc:	f7 cf       	rjmp	.-18     	; 0x13ec <vfprintf+0x492>
    13fe:	b1 01       	movw	r22, r2
    1400:	4a d0       	rcall	.+148    	; 0x1496 <fputc>
    1402:	cc 24       	eor	r12, r12
    1404:	dd 24       	eor	r13, r13
    1406:	12 c0       	rjmp	.+36     	; 0x142c <vfprintf+0x4d2>
    1408:	9f 85       	ldd	r25, Y+15	; 0x0f
    140a:	95 32       	cpi	r25, 0x25	; 37
    140c:	41 f4       	brne	.+16     	; 0x141e <vfprintf+0x4c4>
    140e:	81 e0       	ldi	r24, 0x01	; 1
    1410:	c8 2e       	mov	r12, r24
    1412:	d1 2c       	mov	r13, r1
    1414:	66 24       	eor	r6, r6
    1416:	76 2c       	mov	r7, r6
    1418:	ea e0       	ldi	r30, 0x0A	; 10
    141a:	e8 8b       	std	Y+16, r30	; 0x10
    141c:	07 c0       	rjmp	.+14     	; 0x142c <vfprintf+0x4d2>
    141e:	b1 01       	movw	r22, r2
    1420:	ff 85       	ldd	r31, Y+15	; 0x0f
    1422:	8f 2f       	mov	r24, r31
    1424:	99 27       	eor	r25, r25
    1426:	87 fd       	sbrc	r24, 7
    1428:	90 95       	com	r25
    142a:	35 d0       	rcall	.+106    	; 0x1496 <fputc>
    142c:	f1 01       	movw	r30, r2
    142e:	83 81       	ldd	r24, Z+3	; 0x03
    1430:	83 ff       	sbrs	r24, 3
    1432:	04 c0       	rjmp	.+8      	; 0x143c <vfprintf+0x4e2>
    1434:	ed 85       	ldd	r30, Y+13	; 0x0d
    1436:	fe 85       	ldd	r31, Y+14	; 0x0e
    1438:	f4 91       	lpm	r31, Z
    143a:	03 c0       	rjmp	.+6      	; 0x1442 <vfprintf+0x4e8>
    143c:	ed 85       	ldd	r30, Y+13	; 0x0d
    143e:	fe 85       	ldd	r31, Y+14	; 0x0e
    1440:	f0 81       	ld	r31, Z
    1442:	ff 87       	std	Y+15, r31	; 0x0f
    1444:	2f 85       	ldd	r18, Y+15	; 0x0f
    1446:	22 23       	and	r18, r18
    1448:	09 f0       	breq	.+2      	; 0x144c <vfprintf+0x4f2>
    144a:	9e cd       	rjmp	.-1220   	; 0xf88 <vfprintf+0x2e>
    144c:	f1 01       	movw	r30, r2
    144e:	86 81       	ldd	r24, Z+6	; 0x06
    1450:	97 81       	ldd	r25, Z+7	; 0x07
    1452:	e2 e1       	ldi	r30, 0x12	; 18
    1454:	62 96       	adiw	r28, 0x12	; 18
    1456:	0b c2       	rjmp	.+1046   	; 0x186e <__epilogue_restores__>

00001458 <strlen_P>:
    1458:	fc 01       	movw	r30, r24
    145a:	05 90       	lpm	r0, Z+
    145c:	00 20       	and	r0, r0
    145e:	e9 f7       	brne	.-6      	; 0x145a <strlen_P+0x2>
    1460:	80 95       	com	r24
    1462:	90 95       	com	r25
    1464:	8e 0f       	add	r24, r30
    1466:	9f 1f       	adc	r25, r31
    1468:	08 95       	ret

0000146a <strnlen_P>:
    146a:	fc 01       	movw	r30, r24
    146c:	05 90       	lpm	r0, Z+
    146e:	61 50       	subi	r22, 0x01	; 1
    1470:	70 40       	sbci	r23, 0x00	; 0
    1472:	01 10       	cpse	r0, r1
    1474:	d8 f7       	brcc	.-10     	; 0x146c <strnlen_P+0x2>
    1476:	80 95       	com	r24
    1478:	90 95       	com	r25
    147a:	8e 0f       	add	r24, r30
    147c:	9f 1f       	adc	r25, r31
    147e:	08 95       	ret

00001480 <strnlen>:
    1480:	fc 01       	movw	r30, r24
    1482:	61 50       	subi	r22, 0x01	; 1
    1484:	70 40       	sbci	r23, 0x00	; 0
    1486:	01 90       	ld	r0, Z+
    1488:	01 10       	cpse	r0, r1
    148a:	d8 f7       	brcc	.-10     	; 0x1482 <strnlen+0x2>
    148c:	80 95       	com	r24
    148e:	90 95       	com	r25
    1490:	8e 0f       	add	r24, r30
    1492:	9f 1f       	adc	r25, r31
    1494:	08 95       	ret

00001496 <fputc>:
    1496:	0f 93       	push	r16
    1498:	1f 93       	push	r17
    149a:	cf 93       	push	r28
    149c:	df 93       	push	r29
    149e:	8c 01       	movw	r16, r24
    14a0:	eb 01       	movw	r28, r22
    14a2:	8b 81       	ldd	r24, Y+3	; 0x03
    14a4:	99 27       	eor	r25, r25
    14a6:	81 ff       	sbrs	r24, 1
    14a8:	1c c0       	rjmp	.+56     	; 0x14e2 <fputc+0x4c>
    14aa:	82 ff       	sbrs	r24, 2
    14ac:	0d c0       	rjmp	.+26     	; 0x14c8 <fputc+0x32>
    14ae:	2e 81       	ldd	r18, Y+6	; 0x06
    14b0:	3f 81       	ldd	r19, Y+7	; 0x07
    14b2:	8c 81       	ldd	r24, Y+4	; 0x04
    14b4:	9d 81       	ldd	r25, Y+5	; 0x05
    14b6:	28 17       	cp	r18, r24
    14b8:	39 07       	cpc	r19, r25
    14ba:	64 f4       	brge	.+24     	; 0x14d4 <fputc+0x3e>
    14bc:	e8 81       	ld	r30, Y
    14be:	f9 81       	ldd	r31, Y+1	; 0x01
    14c0:	01 93       	st	Z+, r16
    14c2:	f9 83       	std	Y+1, r31	; 0x01
    14c4:	e8 83       	st	Y, r30
    14c6:	06 c0       	rjmp	.+12     	; 0x14d4 <fputc+0x3e>
    14c8:	e8 85       	ldd	r30, Y+8	; 0x08
    14ca:	f9 85       	ldd	r31, Y+9	; 0x09
    14cc:	80 2f       	mov	r24, r16
    14ce:	09 95       	icall
    14d0:	89 2b       	or	r24, r25
    14d2:	39 f4       	brne	.+14     	; 0x14e2 <fputc+0x4c>
    14d4:	8e 81       	ldd	r24, Y+6	; 0x06
    14d6:	9f 81       	ldd	r25, Y+7	; 0x07
    14d8:	01 96       	adiw	r24, 0x01	; 1
    14da:	9f 83       	std	Y+7, r25	; 0x07
    14dc:	8e 83       	std	Y+6, r24	; 0x06
    14de:	c8 01       	movw	r24, r16
    14e0:	02 c0       	rjmp	.+4      	; 0x14e6 <fputc+0x50>
    14e2:	8f ef       	ldi	r24, 0xFF	; 255
    14e4:	9f ef       	ldi	r25, 0xFF	; 255
    14e6:	df 91       	pop	r29
    14e8:	cf 91       	pop	r28
    14ea:	1f 91       	pop	r17
    14ec:	0f 91       	pop	r16
    14ee:	08 95       	ret

000014f0 <__subsf3>:
    14f0:	50 58       	subi	r21, 0x80	; 128

000014f2 <__addsf3>:
    14f2:	19 2e       	mov	r1, r25
    14f4:	08 d1       	rcall	.+528    	; 0x1706 <__fp_split3>
    14f6:	01 d0       	rcall	.+2      	; 0x14fa <__addsf3x>
    14f8:	eb c0       	rjmp	.+470    	; 0x16d0 <__fp_merge>

000014fa <__addsf3x>:
    14fa:	ba 17       	cp	r27, r26
    14fc:	62 07       	cpc	r22, r18
    14fe:	73 07       	cpc	r23, r19
    1500:	84 07       	cpc	r24, r20
    1502:	95 07       	cpc	r25, r21
    1504:	b1 f1       	breq	.+108    	; 0x1572 <__addsf3x+0x78>
    1506:	88 f4       	brcc	.+34     	; 0x152a <__addsf3x+0x30>
    1508:	0e f4       	brtc	.+2      	; 0x150c <__addsf3x+0x12>
    150a:	10 94       	com	r1
    150c:	0b 2e       	mov	r0, r27
    150e:	ba 2f       	mov	r27, r26
    1510:	a0 2d       	mov	r26, r0
    1512:	06 2e       	mov	r0, r22
    1514:	62 2f       	mov	r22, r18
    1516:	20 2d       	mov	r18, r0
    1518:	07 2e       	mov	r0, r23
    151a:	73 2f       	mov	r23, r19
    151c:	30 2d       	mov	r19, r0
    151e:	08 2e       	mov	r0, r24
    1520:	84 2f       	mov	r24, r20
    1522:	40 2d       	mov	r20, r0
    1524:	09 2e       	mov	r0, r25
    1526:	95 2f       	mov	r25, r21
    1528:	50 2d       	mov	r21, r0
    152a:	ff 27       	eor	r31, r31
    152c:	55 23       	and	r21, r21
    152e:	b9 f0       	breq	.+46     	; 0x155e <__addsf3x+0x64>
    1530:	59 1b       	sub	r21, r25
    1532:	49 f0       	breq	.+18     	; 0x1546 <__addsf3x+0x4c>
    1534:	57 3e       	cpi	r21, 0xE7	; 231
    1536:	98 f0       	brcs	.+38     	; 0x155e <__addsf3x+0x64>
    1538:	46 95       	lsr	r20
    153a:	37 95       	ror	r19
    153c:	27 95       	ror	r18
    153e:	a7 95       	ror	r26
    1540:	f0 40       	sbci	r31, 0x00	; 0
    1542:	53 95       	inc	r21
    1544:	c9 f7       	brne	.-14     	; 0x1538 <__addsf3x+0x3e>
    1546:	76 f0       	brts	.+28     	; 0x1564 <__addsf3x+0x6a>
    1548:	ba 0f       	add	r27, r26
    154a:	62 1f       	adc	r22, r18
    154c:	73 1f       	adc	r23, r19
    154e:	84 1f       	adc	r24, r20
    1550:	30 f4       	brcc	.+12     	; 0x155e <__addsf3x+0x64>
    1552:	87 95       	ror	r24
    1554:	77 95       	ror	r23
    1556:	67 95       	ror	r22
    1558:	b7 95       	ror	r27
    155a:	f0 40       	sbci	r31, 0x00	; 0
    155c:	93 95       	inc	r25
    155e:	17 fa       	bst	r1, 7
    1560:	0f 2e       	mov	r0, r31
    1562:	08 95       	ret
    1564:	bf 1b       	sub	r27, r31
    1566:	bb 27       	eor	r27, r27
    1568:	ba 0b       	sbc	r27, r26
    156a:	62 0b       	sbc	r22, r18
    156c:	73 0b       	sbc	r23, r19
    156e:	84 0b       	sbc	r24, r20
    1570:	f6 cf       	rjmp	.-20     	; 0x155e <__addsf3x+0x64>
    1572:	de f6       	brtc	.-74     	; 0x152a <__addsf3x+0x30>
    1574:	f4 c0       	rjmp	.+488    	; 0x175e <__fp_zerox>

00001576 <__divsf3>:
    1576:	c7 d0       	rcall	.+398    	; 0x1706 <__fp_split3>
    1578:	01 d0       	rcall	.+2      	; 0x157c <__divsf3x>
    157a:	aa c0       	rjmp	.+340    	; 0x16d0 <__fp_merge>

0000157c <__divsf3x>:
    157c:	55 23       	and	r21, r21
    157e:	59 f0       	breq	.+22     	; 0x1596 <__divsf3x+0x1a>
    1580:	99 23       	and	r25, r25
    1582:	69 f0       	breq	.+26     	; 0x159e <__divsf3x+0x22>
    1584:	9f 57       	subi	r25, 0x7F	; 127
    1586:	5f 57       	subi	r21, 0x7F	; 127
    1588:	95 1b       	sub	r25, r21
    158a:	33 f4       	brvc	.+12     	; 0x1598 <__divsf3x+0x1c>
    158c:	42 f4       	brpl	.+16     	; 0x159e <__divsf3x+0x22>
    158e:	90 38       	cpi	r25, 0x80	; 128
    1590:	11 f4       	brne	.+4      	; 0x1596 <__divsf3x+0x1a>
    1592:	91 58       	subi	r25, 0x81	; 129
    1594:	05 c0       	rjmp	.+10     	; 0x15a0 <__divsf3x+0x24>
    1596:	b4 c0       	rjmp	.+360    	; 0x1700 <__fp_nan>
    1598:	91 58       	subi	r25, 0x81	; 129
    159a:	9f 3f       	cpi	r25, 0xFF	; 255
    159c:	09 f4       	brne	.+2      	; 0x15a0 <__divsf3x+0x24>
    159e:	df c0       	rjmp	.+446    	; 0x175e <__fp_zerox>
    15a0:	bb 27       	eor	r27, r27
    15a2:	11 24       	eor	r1, r1
    15a4:	62 17       	cp	r22, r18
    15a6:	73 07       	cpc	r23, r19
    15a8:	84 07       	cpc	r24, r20
    15aa:	30 f4       	brcc	.+12     	; 0x15b8 <__divsf3x+0x3c>
    15ac:	66 0f       	add	r22, r22
    15ae:	77 1f       	adc	r23, r23
    15b0:	88 1f       	adc	r24, r24
    15b2:	bb 1f       	adc	r27, r27
    15b4:	91 50       	subi	r25, 0x01	; 1
    15b6:	98 f3       	brcs	.-26     	; 0x159e <__divsf3x+0x22>
    15b8:	11 d0       	rcall	.+34     	; 0x15dc <__divsf3x+0x60>
    15ba:	0f 92       	push	r0
    15bc:	0f d0       	rcall	.+30     	; 0x15dc <__divsf3x+0x60>
    15be:	0f 92       	push	r0
    15c0:	0d d0       	rcall	.+26     	; 0x15dc <__divsf3x+0x60>
    15c2:	a0 e8       	ldi	r26, 0x80	; 128
    15c4:	26 17       	cp	r18, r22
    15c6:	37 07       	cpc	r19, r23
    15c8:	48 07       	cpc	r20, r24
    15ca:	1b 06       	cpc	r1, r27
    15cc:	09 f0       	breq	.+2      	; 0x15d0 <__divsf3x+0x54>
    15ce:	a0 48       	sbci	r26, 0x80	; 128
    15d0:	ba 2f       	mov	r27, r26
    15d2:	60 2d       	mov	r22, r0
    15d4:	7f 91       	pop	r23
    15d6:	8f 91       	pop	r24
    15d8:	00 24       	eor	r0, r0
    15da:	08 95       	ret
    15dc:	a0 e8       	ldi	r26, 0x80	; 128
    15de:	00 24       	eor	r0, r0
    15e0:	62 17       	cp	r22, r18
    15e2:	73 07       	cpc	r23, r19
    15e4:	84 07       	cpc	r24, r20
    15e6:	b1 05       	cpc	r27, r1
    15e8:	28 f0       	brcs	.+10     	; 0x15f4 <__divsf3x+0x78>
    15ea:	62 1b       	sub	r22, r18
    15ec:	73 0b       	sbc	r23, r19
    15ee:	84 0b       	sbc	r24, r20
    15f0:	b1 09       	sbc	r27, r1
    15f2:	0a 2a       	or	r0, r26
    15f4:	66 0f       	add	r22, r22
    15f6:	77 1f       	adc	r23, r23
    15f8:	88 1f       	adc	r24, r24
    15fa:	bb 1f       	adc	r27, r27
    15fc:	a6 95       	lsr	r26
    15fe:	81 f7       	brne	.-32     	; 0x15e0 <__divsf3x+0x64>
    1600:	08 95       	ret

00001602 <__fixsfsi>:
    1602:	97 fb       	bst	r25, 7
    1604:	8c d0       	rcall	.+280    	; 0x171e <__fp_split1>
    1606:	9f 37       	cpi	r25, 0x7F	; 127
    1608:	38 f0       	brcs	.+14     	; 0x1618 <__fixsfsi+0x16>
    160a:	fe e9       	ldi	r31, 0x9E	; 158
    160c:	f9 1b       	sub	r31, r25
    160e:	98 2f       	mov	r25, r24
    1610:	87 2f       	mov	r24, r23
    1612:	76 2f       	mov	r23, r22
    1614:	6b 2f       	mov	r22, r27
    1616:	05 c0       	rjmp	.+10     	; 0x1622 <__fixsfsi+0x20>
    1618:	9f c0       	rjmp	.+318    	; 0x1758 <__fp_zero>
    161a:	96 95       	lsr	r25
    161c:	87 95       	ror	r24
    161e:	77 95       	ror	r23
    1620:	67 95       	ror	r22
    1622:	f1 50       	subi	r31, 0x01	; 1
    1624:	d0 f7       	brcc	.-12     	; 0x161a <__fixsfsi+0x18>
    1626:	3e f4       	brtc	.+14     	; 0x1636 <__fp_lneg+0xe>

00001628 <__fp_lneg>:
    1628:	90 95       	com	r25
    162a:	80 95       	com	r24
    162c:	70 95       	com	r23
    162e:	61 95       	neg	r22
    1630:	7f 4f       	sbci	r23, 0xFF	; 255
    1632:	8f 4f       	sbci	r24, 0xFF	; 255
    1634:	9f 4f       	sbci	r25, 0xFF	; 255
    1636:	08 95       	ret

00001638 <__floatunssisf>:
    1638:	e8 94       	clt
    163a:	03 c0       	rjmp	.+6      	; 0x1642 <__floatsisf+0x6>

0000163c <__floatsisf>:
    163c:	97 fb       	bst	r25, 7
    163e:	0e f4       	brtc	.+2      	; 0x1642 <__floatsisf+0x6>
    1640:	f3 df       	rcall	.-26     	; 0x1628 <__fp_lneg>
    1642:	b6 2f       	mov	r27, r22
    1644:	67 2f       	mov	r22, r23
    1646:	78 2f       	mov	r23, r24
    1648:	89 2f       	mov	r24, r25
    164a:	9e e9       	ldi	r25, 0x9E	; 158
    164c:	00 24       	eor	r0, r0
    164e:	40 c0       	rjmp	.+128    	; 0x16d0 <__fp_merge>

00001650 <floor>:
    1650:	74 d0       	rcall	.+232    	; 0x173a <__fp_split_a>
    1652:	9f 37       	cpi	r25, 0x7F	; 127
    1654:	60 f4       	brcc	.+24     	; 0x166e <floor+0x1e>
    1656:	0e f0       	brts	.+2      	; 0x165a <floor+0xa>
    1658:	7f c0       	rjmp	.+254    	; 0x1758 <__fp_zero>
    165a:	9f eb       	ldi	r25, 0xBF	; 191
    165c:	80 e8       	ldi	r24, 0x80	; 128
    165e:	77 27       	eor	r23, r23
    1660:	66 27       	eor	r22, r22
    1662:	08 95       	ret
    1664:	86 95       	lsr	r24
    1666:	77 95       	ror	r23
    1668:	67 95       	ror	r22
    166a:	b1 1d       	adc	r27, r1
    166c:	93 95       	inc	r25
    166e:	96 39       	cpi	r25, 0x96	; 150
    1670:	c8 f3       	brcs	.-14     	; 0x1664 <floor+0x14>
    1672:	2e f4       	brtc	.+10     	; 0x167e <floor+0x2e>
    1674:	bb 23       	and	r27, r27
    1676:	19 f0       	breq	.+6      	; 0x167e <floor+0x2e>
    1678:	6f 5f       	subi	r22, 0xFF	; 255
    167a:	7f 4f       	sbci	r23, 0xFF	; 255
    167c:	8f 4f       	sbci	r24, 0xFF	; 255
    167e:	bb 27       	eor	r27, r27
    1680:	27 c0       	rjmp	.+78     	; 0x16d0 <__fp_merge>

00001682 <__eqsf2>:
    1682:	0e d0       	rcall	.+28     	; 0x16a0 <.fp_cmp>
    1684:	5e f0       	brts	.+22     	; 0x169c <__cmpsf2+0xe>
    1686:	04 c0       	rjmp	.+8      	; 0x1690 <__cmpsf2+0x2>

00001688 <__gesf2>:
    1688:	0b d0       	rcall	.+22     	; 0x16a0 <.fp_cmp>
    168a:	26 f0       	brts	.+8      	; 0x1694 <__cmpsf2+0x6>
    168c:	01 c0       	rjmp	.+2      	; 0x1690 <__cmpsf2+0x2>

0000168e <__cmpsf2>:
    168e:	08 d0       	rcall	.+16     	; 0x16a0 <.fp_cmp>
    1690:	19 f0       	breq	.+6      	; 0x1698 <__cmpsf2+0xa>
    1692:	20 f4       	brcc	.+8      	; 0x169c <__cmpsf2+0xe>
    1694:	8f ef       	ldi	r24, 0xFF	; 255
    1696:	08 95       	ret
    1698:	80 e0       	ldi	r24, 0x00	; 0
    169a:	08 95       	ret
    169c:	81 e0       	ldi	r24, 0x01	; 1
    169e:	08 95       	ret

000016a0 <.fp_cmp>:
    16a0:	97 fb       	bst	r25, 7
    16a2:	09 2e       	mov	r0, r25
    16a4:	05 26       	eor	r0, r21
    16a6:	00 f8       	bld	r0, 0
    16a8:	68 94       	set
    16aa:	30 d0       	rcall	.+96     	; 0x170c <__fp_split2>
    16ac:	e8 94       	clt
    16ae:	07 fc       	sbrc	r0, 7
    16b0:	07 c0       	rjmp	.+14     	; 0x16c0 <.fp_cmp+0x20>
    16b2:	62 17       	cp	r22, r18
    16b4:	73 07       	cpc	r23, r19
    16b6:	84 07       	cpc	r24, r20
    16b8:	95 07       	cpc	r25, r21
    16ba:	21 f0       	breq	.+8      	; 0x16c4 <.fp_cmp+0x24>
    16bc:	08 f4       	brcc	.+2      	; 0x16c0 <.fp_cmp+0x20>
    16be:	00 94       	com	r0
    16c0:	07 94       	ror	r0
    16c2:	98 94       	clz
    16c4:	08 95       	ret
    16c6:	9a 95       	dec	r25
    16c8:	bb 0f       	add	r27, r27
    16ca:	66 1f       	adc	r22, r22
    16cc:	77 1f       	adc	r23, r23
    16ce:	88 1f       	adc	r24, r24

000016d0 <__fp_merge>:
    16d0:	11 24       	eor	r1, r1
    16d2:	99 23       	and	r25, r25
    16d4:	a1 f0       	breq	.+40     	; 0x16fe <__fp_merge+0x2e>
    16d6:	88 23       	and	r24, r24
    16d8:	b2 f7       	brpl	.-20     	; 0x16c6 <.fp_cmp+0x26>
    16da:	9f 3f       	cpi	r25, 0xFF	; 255
    16dc:	59 f0       	breq	.+22     	; 0x16f4 <__fp_merge+0x24>
    16de:	bb 0f       	add	r27, r27
    16e0:	48 f4       	brcc	.+18     	; 0x16f4 <__fp_merge+0x24>
    16e2:	21 f4       	brne	.+8      	; 0x16ec <__fp_merge+0x1c>
    16e4:	00 20       	and	r0, r0
    16e6:	11 f4       	brne	.+4      	; 0x16ec <__fp_merge+0x1c>
    16e8:	60 ff       	sbrs	r22, 0
    16ea:	04 c0       	rjmp	.+8      	; 0x16f4 <__fp_merge+0x24>
    16ec:	6f 5f       	subi	r22, 0xFF	; 255
    16ee:	7f 4f       	sbci	r23, 0xFF	; 255
    16f0:	8f 4f       	sbci	r24, 0xFF	; 255
    16f2:	9f 4f       	sbci	r25, 0xFF	; 255
    16f4:	88 1f       	adc	r24, r24
    16f6:	97 95       	ror	r25
    16f8:	87 95       	ror	r24
    16fa:	97 f9       	bld	r25, 7
    16fc:	08 95       	ret
    16fe:	2c c0       	rjmp	.+88     	; 0x1758 <__fp_zero>

00001700 <__fp_nan>:
    1700:	9f ef       	ldi	r25, 0xFF	; 255
    1702:	80 ec       	ldi	r24, 0xC0	; 192
    1704:	08 95       	ret

00001706 <__fp_split3>:
    1706:	05 2e       	mov	r0, r21
    1708:	09 26       	eor	r0, r25
    170a:	07 fa       	bst	r0, 7

0000170c <__fp_split2>:
    170c:	44 0f       	add	r20, r20
    170e:	55 1f       	adc	r21, r21
    1710:	5f 3f       	cpi	r21, 0xFF	; 255
    1712:	79 f0       	breq	.+30     	; 0x1732 <__fp_split1+0x14>
    1714:	aa 27       	eor	r26, r26
    1716:	a5 17       	cp	r26, r21
    1718:	08 f0       	brcs	.+2      	; 0x171c <__fp_split2+0x10>
    171a:	51 e0       	ldi	r21, 0x01	; 1
    171c:	47 95       	ror	r20

0000171e <__fp_split1>:
    171e:	88 0f       	add	r24, r24
    1720:	99 1f       	adc	r25, r25
    1722:	9f 3f       	cpi	r25, 0xFF	; 255
    1724:	31 f0       	breq	.+12     	; 0x1732 <__fp_split1+0x14>
    1726:	bb 27       	eor	r27, r27
    1728:	b9 17       	cp	r27, r25
    172a:	08 f0       	brcs	.+2      	; 0x172e <__fp_split1+0x10>
    172c:	91 e0       	ldi	r25, 0x01	; 1
    172e:	87 95       	ror	r24
    1730:	08 95       	ret
    1732:	9f 91       	pop	r25
    1734:	9f 91       	pop	r25
    1736:	11 24       	eor	r1, r1
    1738:	e3 cf       	rjmp	.-58     	; 0x1700 <__fp_nan>

0000173a <__fp_split_a>:
    173a:	97 fb       	bst	r25, 7
    173c:	88 0f       	add	r24, r24
    173e:	99 1f       	adc	r25, r25
    1740:	9f 3f       	cpi	r25, 0xFF	; 255
    1742:	31 f0       	breq	.+12     	; 0x1750 <__fp_split_a+0x16>
    1744:	bb 27       	eor	r27, r27
    1746:	b9 17       	cp	r27, r25
    1748:	08 f0       	brcs	.+2      	; 0x174c <__fp_split_a+0x12>
    174a:	91 e0       	ldi	r25, 0x01	; 1
    174c:	87 95       	ror	r24
    174e:	08 95       	ret
    1750:	9f 91       	pop	r25
    1752:	9f 91       	pop	r25
    1754:	11 24       	eor	r1, r1
    1756:	d4 cf       	rjmp	.-88     	; 0x1700 <__fp_nan>

00001758 <__fp_zero>:
    1758:	66 27       	eor	r22, r22
    175a:	77 27       	eor	r23, r23
    175c:	88 27       	eor	r24, r24

0000175e <__fp_zerox>:
    175e:	99 27       	eor	r25, r25
    1760:	08 95       	ret

00001762 <__mulsf3>:
    1762:	d1 df       	rcall	.-94     	; 0x1706 <__fp_split3>
    1764:	01 d0       	rcall	.+2      	; 0x1768 <__mulsf3x>
    1766:	b4 cf       	rjmp	.-152    	; 0x16d0 <__fp_merge>

00001768 <__mulsf3x>:
    1768:	99 23       	and	r25, r25
    176a:	39 f0       	breq	.+14     	; 0x177a <__mulsf3x+0x12>
    176c:	55 23       	and	r21, r21
    176e:	29 f0       	breq	.+10     	; 0x177a <__mulsf3x+0x12>
    1770:	9f 57       	subi	r25, 0x7F	; 127
    1772:	5f 57       	subi	r21, 0x7F	; 127
    1774:	95 0f       	add	r25, r21
    1776:	13 f4       	brvc	.+4      	; 0x177c <__mulsf3x+0x14>
    1778:	9a f1       	brmi	.+102    	; 0x17e0 <__mulsf3x+0x78>
    177a:	f1 cf       	rjmp	.-30     	; 0x175e <__fp_zerox>
    177c:	91 58       	subi	r25, 0x81	; 129
    177e:	9f 3f       	cpi	r25, 0xFF	; 255
    1780:	e1 f3       	breq	.-8      	; 0x177a <__mulsf3x+0x12>
    1782:	62 9f       	mul	r22, r18
    1784:	a1 2d       	mov	r26, r1
    1786:	0f 92       	push	r0
    1788:	bb 27       	eor	r27, r27
    178a:	63 9f       	mul	r22, r19
    178c:	a0 0d       	add	r26, r0
    178e:	b1 1d       	adc	r27, r1
    1790:	ee 27       	eor	r30, r30
    1792:	72 9f       	mul	r23, r18
    1794:	a0 0d       	add	r26, r0
    1796:	b1 1d       	adc	r27, r1
    1798:	ee 1f       	adc	r30, r30
    179a:	af 93       	push	r26
    179c:	aa 27       	eor	r26, r26
    179e:	64 9f       	mul	r22, r20
    17a0:	b0 0d       	add	r27, r0
    17a2:	e1 1d       	adc	r30, r1
    17a4:	73 9f       	mul	r23, r19
    17a6:	b0 0d       	add	r27, r0
    17a8:	e1 1d       	adc	r30, r1
    17aa:	aa 1f       	adc	r26, r26
    17ac:	66 27       	eor	r22, r22
    17ae:	82 9f       	mul	r24, r18
    17b0:	b0 0d       	add	r27, r0
    17b2:	e1 1d       	adc	r30, r1
    17b4:	a6 1f       	adc	r26, r22
    17b6:	55 27       	eor	r21, r21
    17b8:	74 9f       	mul	r23, r20
    17ba:	e0 0d       	add	r30, r0
    17bc:	a1 1d       	adc	r26, r1
    17be:	55 1f       	adc	r21, r21
    17c0:	83 9f       	mul	r24, r19
    17c2:	e0 0d       	add	r30, r0
    17c4:	a1 1d       	adc	r26, r1
    17c6:	56 1f       	adc	r21, r22
    17c8:	84 9f       	mul	r24, r20
    17ca:	a0 0d       	add	r26, r0
    17cc:	51 1d       	adc	r21, r1
    17ce:	85 2f       	mov	r24, r21
    17d0:	7a 2f       	mov	r23, r26
    17d2:	6e 2f       	mov	r22, r30
    17d4:	1f 90       	pop	r1
    17d6:	0f 90       	pop	r0
    17d8:	88 23       	and	r24, r24
    17da:	1a f4       	brpl	.+6      	; 0x17e2 <__mulsf3x+0x7a>
    17dc:	93 95       	inc	r25
    17de:	39 f4       	brne	.+14     	; 0x17ee <__mulsf3x+0x86>
    17e0:	8f cf       	rjmp	.-226    	; 0x1700 <__fp_nan>
    17e2:	00 0c       	add	r0, r0
    17e4:	11 1c       	adc	r1, r1
    17e6:	bb 1f       	adc	r27, r27
    17e8:	66 1f       	adc	r22, r22
    17ea:	77 1f       	adc	r23, r23
    17ec:	88 1f       	adc	r24, r24
    17ee:	01 28       	or	r0, r1
    17f0:	08 95       	ret

000017f2 <__udivmodsi4>:
    17f2:	a1 e2       	ldi	r26, 0x21	; 33
    17f4:	1a 2e       	mov	r1, r26
    17f6:	aa 1b       	sub	r26, r26
    17f8:	bb 1b       	sub	r27, r27
    17fa:	fd 01       	movw	r30, r26
    17fc:	0d c0       	rjmp	.+26     	; 0x1818 <__udivmodsi4_ep>

000017fe <__udivmodsi4_loop>:
    17fe:	aa 1f       	adc	r26, r26
    1800:	bb 1f       	adc	r27, r27
    1802:	ee 1f       	adc	r30, r30
    1804:	ff 1f       	adc	r31, r31
    1806:	a2 17       	cp	r26, r18
    1808:	b3 07       	cpc	r27, r19
    180a:	e4 07       	cpc	r30, r20
    180c:	f5 07       	cpc	r31, r21
    180e:	20 f0       	brcs	.+8      	; 0x1818 <__udivmodsi4_ep>
    1810:	a2 1b       	sub	r26, r18
    1812:	b3 0b       	sbc	r27, r19
    1814:	e4 0b       	sbc	r30, r20
    1816:	f5 0b       	sbc	r31, r21

00001818 <__udivmodsi4_ep>:
    1818:	66 1f       	adc	r22, r22
    181a:	77 1f       	adc	r23, r23
    181c:	88 1f       	adc	r24, r24
    181e:	99 1f       	adc	r25, r25
    1820:	1a 94       	dec	r1
    1822:	69 f7       	brne	.-38     	; 0x17fe <__udivmodsi4_loop>
    1824:	60 95       	com	r22
    1826:	70 95       	com	r23
    1828:	80 95       	com	r24
    182a:	90 95       	com	r25
    182c:	9b 01       	movw	r18, r22
    182e:	ac 01       	movw	r20, r24
    1830:	bd 01       	movw	r22, r26
    1832:	cf 01       	movw	r24, r30
    1834:	08 95       	ret

00001836 <__prologue_saves__>:
    1836:	2f 92       	push	r2
    1838:	3f 92       	push	r3
    183a:	4f 92       	push	r4
    183c:	5f 92       	push	r5
    183e:	6f 92       	push	r6
    1840:	7f 92       	push	r7
    1842:	8f 92       	push	r8
    1844:	9f 92       	push	r9
    1846:	af 92       	push	r10
    1848:	bf 92       	push	r11
    184a:	cf 92       	push	r12
    184c:	df 92       	push	r13
    184e:	ef 92       	push	r14
    1850:	ff 92       	push	r15
    1852:	0f 93       	push	r16
    1854:	1f 93       	push	r17
    1856:	cf 93       	push	r28
    1858:	df 93       	push	r29
    185a:	cd b7       	in	r28, 0x3d	; 61
    185c:	de b7       	in	r29, 0x3e	; 62
    185e:	ca 1b       	sub	r28, r26
    1860:	db 0b       	sbc	r29, r27
    1862:	0f b6       	in	r0, 0x3f	; 63
    1864:	f8 94       	cli
    1866:	de bf       	out	0x3e, r29	; 62
    1868:	0f be       	out	0x3f, r0	; 63
    186a:	cd bf       	out	0x3d, r28	; 61
    186c:	09 94       	ijmp

0000186e <__epilogue_restores__>:
    186e:	2a 88       	ldd	r2, Y+18	; 0x12
    1870:	39 88       	ldd	r3, Y+17	; 0x11
    1872:	48 88       	ldd	r4, Y+16	; 0x10
    1874:	5f 84       	ldd	r5, Y+15	; 0x0f
    1876:	6e 84       	ldd	r6, Y+14	; 0x0e
    1878:	7d 84       	ldd	r7, Y+13	; 0x0d
    187a:	8c 84       	ldd	r8, Y+12	; 0x0c
    187c:	9b 84       	ldd	r9, Y+11	; 0x0b
    187e:	aa 84       	ldd	r10, Y+10	; 0x0a
    1880:	b9 84       	ldd	r11, Y+9	; 0x09
    1882:	c8 84       	ldd	r12, Y+8	; 0x08
    1884:	df 80       	ldd	r13, Y+7	; 0x07
    1886:	ee 80       	ldd	r14, Y+6	; 0x06
    1888:	fd 80       	ldd	r15, Y+5	; 0x05
    188a:	0c 81       	ldd	r16, Y+4	; 0x04
    188c:	1b 81       	ldd	r17, Y+3	; 0x03
    188e:	aa 81       	ldd	r26, Y+2	; 0x02
    1890:	b9 81       	ldd	r27, Y+1	; 0x01
    1892:	ce 0f       	add	r28, r30
    1894:	d1 1d       	adc	r29, r1
    1896:	0f b6       	in	r0, 0x3f	; 63
    1898:	f8 94       	cli
    189a:	de bf       	out	0x3e, r29	; 62
    189c:	0f be       	out	0x3f, r0	; 63
    189e:	cd bf       	out	0x3d, r28	; 61
    18a0:	ed 01       	movw	r28, r26
    18a2:	08 95       	ret
