
ledmeter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b1e  00000000  00000000  00000094  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000b1e  00000bb2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  00000bb2  2**0
                  ALLOC
  3 .noinit       00000000  00800061  00800061  00000bb2  2**0
                  CONTENTS
  4 .eeprom       00000000  00810000  00810000  00000bb2  2**0
                  CONTENTS
  5 .stab         0000129c  00000000  00000000  00000bb4  2**2
                  CONTENTS, READONLY, DEBUGGING
  6 .stabstr      00000964  00000000  00000000  00001e50  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	4d c3       	rjmp	.+1690   	; 0x69e <__vector_1>
   4:	2c c0       	rjmp	.+88     	; 0x5e <__bad_interrupt>
   6:	2b c0       	rjmp	.+86     	; 0x5e <__bad_interrupt>
   8:	2a c0       	rjmp	.+84     	; 0x5e <__bad_interrupt>
   a:	29 c0       	rjmp	.+82     	; 0x5e <__bad_interrupt>
   c:	28 c0       	rjmp	.+80     	; 0x5e <__bad_interrupt>
   e:	27 c0       	rjmp	.+78     	; 0x5e <__bad_interrupt>
  10:	26 c0       	rjmp	.+76     	; 0x5e <__bad_interrupt>
  12:	25 c0       	rjmp	.+74     	; 0x5e <__bad_interrupt>
  14:	24 c0       	rjmp	.+72     	; 0x5e <__bad_interrupt>
  16:	23 c0       	rjmp	.+70     	; 0x5e <__bad_interrupt>
  18:	22 c0       	rjmp	.+68     	; 0x5e <__bad_interrupt>
  1a:	21 c0       	rjmp	.+66     	; 0x5e <__bad_interrupt>
  1c:	20 c0       	rjmp	.+64     	; 0x5e <__bad_interrupt>
  1e:	1f c0       	rjmp	.+62     	; 0x5e <__bad_interrupt>
  20:	1e c0       	rjmp	.+60     	; 0x5e <__bad_interrupt>
  22:	1d c0       	rjmp	.+58     	; 0x5e <__bad_interrupt>
  24:	1c c0       	rjmp	.+56     	; 0x5e <__bad_interrupt>
  26:	1b c0       	rjmp	.+54     	; 0x5e <__bad_interrupt>
  28:	1a c0       	rjmp	.+52     	; 0x5e <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf e5       	ldi	r28, 0x5F	; 95
  30:	d2 e0       	ldi	r29, 0x02	; 2
  32:	de bf       	out	0x3e, r29	; 62
  34:	cd bf       	out	0x3d, r28	; 61

00000036 <__do_copy_data>:
  36:	10 e0       	ldi	r17, 0x00	; 0
  38:	a0 e6       	ldi	r26, 0x60	; 96
  3a:	b0 e0       	ldi	r27, 0x00	; 0
  3c:	ee e1       	ldi	r30, 0x1E	; 30
  3e:	fb e0       	ldi	r31, 0x0B	; 11
  40:	02 c0       	rjmp	.+4      	; 0x46 <.do_copy_data_start>

00000042 <.do_copy_data_loop>:
  42:	05 90       	lpm	r0, Z+
  44:	0d 92       	st	X+, r0

00000046 <.do_copy_data_start>:
  46:	a0 36       	cpi	r26, 0x60	; 96
  48:	b1 07       	cpc	r27, r17
  4a:	d9 f7       	brne	.-10     	; 0x42 <.do_copy_data_loop>

0000004c <__do_clear_bss>:
  4c:	10 e0       	ldi	r17, 0x00	; 0
  4e:	a0 e6       	ldi	r26, 0x60	; 96
  50:	b0 e0       	ldi	r27, 0x00	; 0
  52:	01 c0       	rjmp	.+2      	; 0x56 <.do_clear_bss_start>

00000054 <.do_clear_bss_loop>:
  54:	1d 92       	st	X+, r1

00000056 <.do_clear_bss_start>:
  56:	a1 36       	cpi	r26, 0x61	; 97
  58:	b1 07       	cpc	r27, r17
  5a:	e1 f7       	brne	.-8      	; 0x54 <.do_clear_bss_loop>
  5c:	27 c4       	rjmp	.+2126   	; 0x8ac <main>

0000005e <__bad_interrupt>:
  5e:	d0 cf       	rjmp	.-96     	; 0x0 <__vectors>

00000060 <switch_on_all_leds>:

/*
 *
 */
void switch_on_all_leds() {
  60:	cf 93       	push	r28
  62:	df 93       	push	r29
  64:	cd b7       	in	r28, 0x3d	; 61
  66:	de b7       	in	r29, 0x3e	; 62
    PORTC = 0x00;
  68:	10 92 35 00 	sts	0x0035, r1
  6c:	df 91       	pop	r29
  6e:	cf 91       	pop	r28
  70:	08 95       	ret

00000072 <switch_off_all_leds>:
}

/*
 *
 */
void switch_off_all_leds() {
  72:	cf 93       	push	r28
  74:	df 93       	push	r29
  76:	cd b7       	in	r28, 0x3d	; 61
  78:	de b7       	in	r29, 0x3e	; 62
    PORTC = 0xFF;
  7a:	8f ef       	ldi	r24, 0xFF	; 255
  7c:	80 93 35 00 	sts	0x0035, r24
  80:	df 91       	pop	r29
  82:	cf 91       	pop	r28
  84:	08 95       	ret

00000086 <switch_on_led>:
}

// led from 1 to 8 (LEDSNUM)
// PCx with w from 0 to 7

/*
 *  switch on the led with the number called "led"
 */
void switch_on_led(int led) {
  86:	cf 93       	push	r28
  88:	df 93       	push	r29
  8a:	cd b7       	in	r28, 0x3d	; 61
  8c:	de b7       	in	r29, 0x3e	; 62
  8e:	26 97       	sbiw	r28, 0x06	; 6
  90:	0f b6       	in	r0, 0x3f	; 63
  92:	f8 94       	cli
  94:	de bf       	out	0x3e, r29	; 62
  96:	0f be       	out	0x3f, r0	; 63
  98:	cd bf       	out	0x3d, r28	; 61
  9a:	9a 83       	std	Y+2, r25	; 0x02
  9c:	89 83       	std	Y+1, r24	; 0x01
    int pin = led - 1;
  9e:	89 81       	ldd	r24, Y+1	; 0x01
  a0:	9a 81       	ldd	r25, Y+2	; 0x02
  a2:	01 97       	sbiw	r24, 0x01	; 1
  a4:	9c 83       	std	Y+4, r25	; 0x04
  a6:	8b 83       	std	Y+3, r24	; 0x03
    int mask = ~(1<<pin);
  a8:	81 e0       	ldi	r24, 0x01	; 1
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	0b 80       	ldd	r0, Y+3	; 0x03
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <switch_on_led+0x2e>
  b0:	88 0f       	add	r24, r24
  b2:	99 1f       	adc	r25, r25
  b4:	0a 94       	dec	r0
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <switch_on_led+0x2a>
  b8:	80 95       	com	r24
  ba:	90 95       	com	r25
  bc:	9e 83       	std	Y+6, r25	; 0x06
  be:	8d 83       	std	Y+5, r24	; 0x05
    PORTC&=mask;
  c0:	90 91 35 00 	lds	r25, 0x0035
  c4:	8d 81       	ldd	r24, Y+5	; 0x05
  c6:	89 23       	and	r24, r25
  c8:	80 93 35 00 	sts	0x0035, r24
  cc:	26 96       	adiw	r28, 0x06	; 6
  ce:	0f b6       	in	r0, 0x3f	; 63
  d0:	f8 94       	cli
  d2:	de bf       	out	0x3e, r29	; 62
  d4:	0f be       	out	0x3f, r0	; 63
  d6:	cd bf       	out	0x3d, r28	; 61
  d8:	df 91       	pop	r29
  da:	cf 91       	pop	r28
  dc:	08 95       	ret

000000de <switch_off_led>:
}

/*
 *  switch off the led with the number called "led"
 */
void switch_off_led(int led) {
  de:	cf 93       	push	r28
  e0:	df 93       	push	r29
  e2:	cd b7       	in	r28, 0x3d	; 61
  e4:	de b7       	in	r29, 0x3e	; 62
  e6:	26 97       	sbiw	r28, 0x06	; 6
  e8:	0f b6       	in	r0, 0x3f	; 63
  ea:	f8 94       	cli
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	0f be       	out	0x3f, r0	; 63
  f0:	cd bf       	out	0x3d, r28	; 61
  f2:	9a 83       	std	Y+2, r25	; 0x02
  f4:	89 83       	std	Y+1, r24	; 0x01
    int pin = led - 1;
  f6:	89 81       	ldd	r24, Y+1	; 0x01
  f8:	9a 81       	ldd	r25, Y+2	; 0x02
  fa:	01 97       	sbiw	r24, 0x01	; 1
  fc:	9c 83       	std	Y+4, r25	; 0x04
  fe:	8b 83       	std	Y+3, r24	; 0x03
    int mask = (1<<pin);
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	0b 80       	ldd	r0, Y+3	; 0x03
 106:	02 c0       	rjmp	.+4      	; 0x10c <switch_off_led+0x2e>
 108:	88 0f       	add	r24, r24
 10a:	99 1f       	adc	r25, r25
 10c:	0a 94       	dec	r0
 10e:	e2 f7       	brpl	.-8      	; 0x108 <switch_off_led+0x2a>
 110:	9e 83       	std	Y+6, r25	; 0x06
 112:	8d 83       	std	Y+5, r24	; 0x05
    PORTC|=mask;
 114:	90 91 35 00 	lds	r25, 0x0035
 118:	8d 81       	ldd	r24, Y+5	; 0x05
 11a:	89 2b       	or	r24, r25
 11c:	80 93 35 00 	sts	0x0035, r24
 120:	26 96       	adiw	r28, 0x06	; 6
 122:	0f b6       	in	r0, 0x3f	; 63
 124:	f8 94       	cli
 126:	de bf       	out	0x3e, r29	; 62
 128:	0f be       	out	0x3f, r0	; 63
 12a:	cd bf       	out	0x3d, r28	; 61
 12c:	df 91       	pop	r29
 12e:	cf 91       	pop	r28
 130:	08 95       	ret

00000132 <switch_on_leds_with_delay>:
}

/*
 *  switch on every leds one after one with a delay (called "delay")
 */
void switch_on_leds_with_delay(double delay) {
 132:	cf 93       	push	r28
 134:	df 93       	push	r29
 136:	cd b7       	in	r28, 0x3d	; 61
 138:	de b7       	in	r29, 0x3e	; 62
 13a:	62 97       	sbiw	r28, 0x12	; 18
 13c:	0f b6       	in	r0, 0x3f	; 63
 13e:	f8 94       	cli
 140:	de bf       	out	0x3e, r29	; 62
 142:	0f be       	out	0x3f, r0	; 63
 144:	cd bf       	out	0x3d, r28	; 61
 146:	69 83       	std	Y+1, r22	; 0x01
 148:	7a 83       	std	Y+2, r23	; 0x02
 14a:	8b 83       	std	Y+3, r24	; 0x03
 14c:	9c 83       	std	Y+4, r25	; 0x04
    int i;
    for(i = 1; i<=Nleds; i++) {
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	9e 83       	std	Y+6, r25	; 0x06
 154:	8d 83       	std	Y+5, r24	; 0x05
 156:	8d 81       	ldd	r24, Y+5	; 0x05
 158:	9e 81       	ldd	r25, Y+6	; 0x06
 15a:	89 30       	cpi	r24, 0x09	; 9
 15c:	91 05       	cpc	r25, r1
 15e:	0c f0       	brlt	.+2      	; 0x162 <switch_on_leds_with_delay+0x30>
 160:	53 c0       	rjmp	.+166    	; 0x208 <switch_on_leds_with_delay+0xd6>
   The maximal possible delay is 262.14 ms / F_CPU in MHz.
 */
void
_delay_ms(double __ms)
{
 162:	89 81       	ldd	r24, Y+1	; 0x01
 164:	9a 81       	ldd	r25, Y+2	; 0x02
 166:	ab 81       	ldd	r26, Y+3	; 0x03
 168:	bc 81       	ldd	r27, Y+4	; 0x04
 16a:	8f 83       	std	Y+7, r24	; 0x07
 16c:	98 87       	std	Y+8, r25	; 0x08
 16e:	a9 87       	std	Y+9, r26	; 0x09
 170:	ba 87       	std	Y+10, r27	; 0x0a
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 172:	20 e0       	ldi	r18, 0x00	; 0
 174:	30 e0       	ldi	r19, 0x00	; 0
 176:	4a e7       	ldi	r20, 0x7A	; 122
 178:	53 e4       	ldi	r21, 0x43	; 67
 17a:	6f 81       	ldd	r22, Y+7	; 0x07
 17c:	78 85       	ldd	r23, Y+8	; 0x08
 17e:	89 85       	ldd	r24, Y+9	; 0x09
 180:	9a 85       	ldd	r25, Y+10	; 0x0a
 182:	85 d4       	rcall	.+2314   	; 0xa8e <__mulsf3>
 184:	dc 01       	movw	r26, r24
 186:	cb 01       	movw	r24, r22
 188:	8d 87       	std	Y+13, r24	; 0x0d
 18a:	9e 87       	std	Y+14, r25	; 0x0e
 18c:	af 87       	std	Y+15, r26	; 0x0f
 18e:	b8 8b       	std	Y+16, r27	; 0x10
	if (__tmp < 1.0)
 190:	20 e0       	ldi	r18, 0x00	; 0
 192:	30 e0       	ldi	r19, 0x00	; 0
 194:	40 e8       	ldi	r20, 0x80	; 128
 196:	5f e3       	ldi	r21, 0x3F	; 63
 198:	6d 85       	ldd	r22, Y+13	; 0x0d
 19a:	7e 85       	ldd	r23, Y+14	; 0x0e
 19c:	8f 85       	ldd	r24, Y+15	; 0x0f
 19e:	98 89       	ldd	r25, Y+16	; 0x10
 1a0:	06 d4       	rcall	.+2060   	; 0x9ae <__eqsf2>
 1a2:	88 23       	and	r24, r24
 1a4:	0c f0       	brlt	.+2      	; 0x1a8 <switch_on_leds_with_delay+0x76>
 1a6:	05 c0       	rjmp	.+10     	; 0x1b2 <switch_on_leds_with_delay+0x80>
		__ticks = 1;
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	9c 87       	std	Y+12, r25	; 0x0c
 1ae:	8b 87       	std	Y+11, r24	; 0x0b
 1b0:	18 c0       	rjmp	.+48     	; 0x1e2 <switch_on_leds_with_delay+0xb0>
	else if (__tmp > 65535)
 1b2:	20 e0       	ldi	r18, 0x00	; 0
 1b4:	3f ef       	ldi	r19, 0xFF	; 255
 1b6:	4f e7       	ldi	r20, 0x7F	; 127
 1b8:	57 e4       	ldi	r21, 0x47	; 71
 1ba:	6d 85       	ldd	r22, Y+13	; 0x0d
 1bc:	7e 85       	ldd	r23, Y+14	; 0x0e
 1be:	8f 85       	ldd	r24, Y+15	; 0x0f
 1c0:	98 89       	ldd	r25, Y+16	; 0x10
 1c2:	f8 d3       	rcall	.+2032   	; 0x9b4 <__gesf2>
 1c4:	18 16       	cp	r1, r24
 1c6:	0c f0       	brlt	.+2      	; 0x1ca <switch_on_leds_with_delay+0x98>
 1c8:	03 c0       	rjmp	.+6      	; 0x1d0 <switch_on_leds_with_delay+0x9e>
		__ticks = 0;	/* i.e. 65536 */
 1ca:	1c 86       	std	Y+12, r1	; 0x0c
 1cc:	1b 86       	std	Y+11, r1	; 0x0b
 1ce:	09 c0       	rjmp	.+18     	; 0x1e2 <switch_on_leds_with_delay+0xb0>
	else
		__ticks = (uint16_t)__tmp;
 1d0:	6d 85       	ldd	r22, Y+13	; 0x0d
 1d2:	7e 85       	ldd	r23, Y+14	; 0x0e
 1d4:	8f 85       	ldd	r24, Y+15	; 0x0f
 1d6:	98 89       	ldd	r25, Y+16	; 0x10
 1d8:	b6 d3       	rcall	.+1900   	; 0x946 <__fixsfsi>
 1da:	dc 01       	movw	r26, r24
 1dc:	cb 01       	movw	r24, r22
 1de:	9c 87       	std	Y+12, r25	; 0x0c
 1e0:	8b 87       	std	Y+11, r24	; 0x0b
 1e2:	8b 85       	ldd	r24, Y+11	; 0x0b
 1e4:	9c 85       	ldd	r25, Y+12	; 0x0c
 1e6:	9a 8b       	std	Y+18, r25	; 0x12
 1e8:	89 8b       	std	Y+17, r24	; 0x11
 1ea:	89 89       	ldd	r24, Y+17	; 0x11
 1ec:	9a 89       	ldd	r25, Y+18	; 0x12
 1ee:	01 97       	sbiw	r24, 0x01	; 1
 1f0:	f1 f7       	brne	.-4      	; 0x1ee <switch_on_leds_with_delay+0xbc>
 1f2:	9a 8b       	std	Y+18, r25	; 0x12
 1f4:	89 8b       	std	Y+17, r24	; 0x11
        _delay_ms(delay);
        switch_on_led(i);
 1f6:	8d 81       	ldd	r24, Y+5	; 0x05
 1f8:	9e 81       	ldd	r25, Y+6	; 0x06
 1fa:	45 df       	rcall	.-374    	; 0x86 <switch_on_led>
 1fc:	8d 81       	ldd	r24, Y+5	; 0x05
 1fe:	9e 81       	ldd	r25, Y+6	; 0x06
 200:	01 96       	adiw	r24, 0x01	; 1
 202:	9e 83       	std	Y+6, r25	; 0x06
 204:	8d 83       	std	Y+5, r24	; 0x05
 206:	a7 cf       	rjmp	.-178    	; 0x156 <switch_on_leds_with_delay+0x24>
 208:	62 96       	adiw	r28, 0x12	; 18
 20a:	0f b6       	in	r0, 0x3f	; 63
 20c:	f8 94       	cli
 20e:	de bf       	out	0x3e, r29	; 62
 210:	0f be       	out	0x3f, r0	; 63
 212:	cd bf       	out	0x3d, r28	; 61
 214:	df 91       	pop	r29
 216:	cf 91       	pop	r28
 218:	08 95       	ret

0000021a <switch_off_leds_with_delay>:
    }
}

/*
 *  switch off every leds on after one with a delay (called "delay")
 */
void switch_off_leds_with_delay(double delay) {
 21a:	cf 93       	push	r28
 21c:	df 93       	push	r29
 21e:	cd b7       	in	r28, 0x3d	; 61
 220:	de b7       	in	r29, 0x3e	; 62
 222:	62 97       	sbiw	r28, 0x12	; 18
 224:	0f b6       	in	r0, 0x3f	; 63
 226:	f8 94       	cli
 228:	de bf       	out	0x3e, r29	; 62
 22a:	0f be       	out	0x3f, r0	; 63
 22c:	cd bf       	out	0x3d, r28	; 61
 22e:	69 83       	std	Y+1, r22	; 0x01
 230:	7a 83       	std	Y+2, r23	; 0x02
 232:	8b 83       	std	Y+3, r24	; 0x03
 234:	9c 83       	std	Y+4, r25	; 0x04
    int i;
    for(i = Nleds; i>=0; i--) {
 236:	88 e0       	ldi	r24, 0x08	; 8
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	9e 83       	std	Y+6, r25	; 0x06
 23c:	8d 83       	std	Y+5, r24	; 0x05
 23e:	8d 81       	ldd	r24, Y+5	; 0x05
 240:	9e 81       	ldd	r25, Y+6	; 0x06
 242:	99 23       	and	r25, r25
 244:	0c f4       	brge	.+2      	; 0x248 <switch_off_leds_with_delay+0x2e>
 246:	53 c0       	rjmp	.+166    	; 0x2ee <__stack+0x8f>
   The maximal possible delay is 262.14 ms / F_CPU in MHz.
 */
void
_delay_ms(double __ms)
{
 248:	89 81       	ldd	r24, Y+1	; 0x01
 24a:	9a 81       	ldd	r25, Y+2	; 0x02
 24c:	ab 81       	ldd	r26, Y+3	; 0x03
 24e:	bc 81       	ldd	r27, Y+4	; 0x04
 250:	8f 83       	std	Y+7, r24	; 0x07
 252:	98 87       	std	Y+8, r25	; 0x08
 254:	a9 87       	std	Y+9, r26	; 0x09
 256:	ba 87       	std	Y+10, r27	; 0x0a
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 258:	20 e0       	ldi	r18, 0x00	; 0
 25a:	30 e0       	ldi	r19, 0x00	; 0
 25c:	4a e7       	ldi	r20, 0x7A	; 122
 25e:	53 e4       	ldi	r21, 0x43	; 67
 260:	6f 81       	ldd	r22, Y+7	; 0x07
 262:	78 85       	ldd	r23, Y+8	; 0x08
 264:	89 85       	ldd	r24, Y+9	; 0x09
 266:	9a 85       	ldd	r25, Y+10	; 0x0a
 268:	12 d4       	rcall	.+2084   	; 0xa8e <__mulsf3>
 26a:	dc 01       	movw	r26, r24
 26c:	cb 01       	movw	r24, r22
 26e:	8d 87       	std	Y+13, r24	; 0x0d
 270:	9e 87       	std	Y+14, r25	; 0x0e
 272:	af 87       	std	Y+15, r26	; 0x0f
 274:	b8 8b       	std	Y+16, r27	; 0x10
	if (__tmp < 1.0)
 276:	20 e0       	ldi	r18, 0x00	; 0
 278:	30 e0       	ldi	r19, 0x00	; 0
 27a:	40 e8       	ldi	r20, 0x80	; 128
 27c:	5f e3       	ldi	r21, 0x3F	; 63
 27e:	6d 85       	ldd	r22, Y+13	; 0x0d
 280:	7e 85       	ldd	r23, Y+14	; 0x0e
 282:	8f 85       	ldd	r24, Y+15	; 0x0f
 284:	98 89       	ldd	r25, Y+16	; 0x10
 286:	93 d3       	rcall	.+1830   	; 0x9ae <__eqsf2>
 288:	88 23       	and	r24, r24
 28a:	0c f0       	brlt	.+2      	; 0x28e <__stack+0x2f>
 28c:	05 c0       	rjmp	.+10     	; 0x298 <__stack+0x39>
		__ticks = 1;
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	9c 87       	std	Y+12, r25	; 0x0c
 294:	8b 87       	std	Y+11, r24	; 0x0b
 296:	18 c0       	rjmp	.+48     	; 0x2c8 <__stack+0x69>
	else if (__tmp > 65535)
 298:	20 e0       	ldi	r18, 0x00	; 0
 29a:	3f ef       	ldi	r19, 0xFF	; 255
 29c:	4f e7       	ldi	r20, 0x7F	; 127
 29e:	57 e4       	ldi	r21, 0x47	; 71
 2a0:	6d 85       	ldd	r22, Y+13	; 0x0d
 2a2:	7e 85       	ldd	r23, Y+14	; 0x0e
 2a4:	8f 85       	ldd	r24, Y+15	; 0x0f
 2a6:	98 89       	ldd	r25, Y+16	; 0x10
 2a8:	85 d3       	rcall	.+1802   	; 0x9b4 <__gesf2>
 2aa:	18 16       	cp	r1, r24
 2ac:	0c f0       	brlt	.+2      	; 0x2b0 <__stack+0x51>
 2ae:	03 c0       	rjmp	.+6      	; 0x2b6 <__stack+0x57>
		__ticks = 0;	/* i.e. 65536 */
 2b0:	1c 86       	std	Y+12, r1	; 0x0c
 2b2:	1b 86       	std	Y+11, r1	; 0x0b
 2b4:	09 c0       	rjmp	.+18     	; 0x2c8 <__stack+0x69>
	else
		__ticks = (uint16_t)__tmp;
 2b6:	6d 85       	ldd	r22, Y+13	; 0x0d
 2b8:	7e 85       	ldd	r23, Y+14	; 0x0e
 2ba:	8f 85       	ldd	r24, Y+15	; 0x0f
 2bc:	98 89       	ldd	r25, Y+16	; 0x10
 2be:	43 d3       	rcall	.+1670   	; 0x946 <__fixsfsi>
 2c0:	dc 01       	movw	r26, r24
 2c2:	cb 01       	movw	r24, r22
 2c4:	9c 87       	std	Y+12, r25	; 0x0c
 2c6:	8b 87       	std	Y+11, r24	; 0x0b
 2c8:	8b 85       	ldd	r24, Y+11	; 0x0b
 2ca:	9c 85       	ldd	r25, Y+12	; 0x0c
 2cc:	9a 8b       	std	Y+18, r25	; 0x12
 2ce:	89 8b       	std	Y+17, r24	; 0x11
 2d0:	89 89       	ldd	r24, Y+17	; 0x11
 2d2:	9a 89       	ldd	r25, Y+18	; 0x12
 2d4:	01 97       	sbiw	r24, 0x01	; 1
 2d6:	f1 f7       	brne	.-4      	; 0x2d4 <__stack+0x75>
 2d8:	9a 8b       	std	Y+18, r25	; 0x12
 2da:	89 8b       	std	Y+17, r24	; 0x11
        _delay_ms(delay);
        switch_off_led(i);
 2dc:	8d 81       	ldd	r24, Y+5	; 0x05
 2de:	9e 81       	ldd	r25, Y+6	; 0x06
 2e0:	fe de       	rcall	.-516    	; 0xde <switch_off_led>
 2e2:	8d 81       	ldd	r24, Y+5	; 0x05
 2e4:	9e 81       	ldd	r25, Y+6	; 0x06
 2e6:	01 97       	sbiw	r24, 0x01	; 1
 2e8:	9e 83       	std	Y+6, r25	; 0x06
 2ea:	8d 83       	std	Y+5, r24	; 0x05
 2ec:	a8 cf       	rjmp	.-176    	; 0x23e <switch_off_leds_with_delay+0x24>
 2ee:	62 96       	adiw	r28, 0x12	; 18
 2f0:	0f b6       	in	r0, 0x3f	; 63
 2f2:	f8 94       	cli
 2f4:	de bf       	out	0x3e, r29	; 62
 2f6:	0f be       	out	0x3f, r0	; 63
 2f8:	cd bf       	out	0x3d, r28	; 61
 2fa:	df 91       	pop	r29
 2fc:	cf 91       	pop	r28
 2fe:	08 95       	ret

00000300 <test_leds>:
    }
}

/*
 * a function for testing leds that switch on every leds and switch off every leds (one after one)
 */
void test_leds() {
 300:	cf 93       	push	r28
 302:	df 93       	push	r29
 304:	cd b7       	in	r28, 0x3d	; 61
 306:	de b7       	in	r29, 0x3e	; 62
 308:	2c 97       	sbiw	r28, 0x0c	; 12
 30a:	0f b6       	in	r0, 0x3f	; 63
 30c:	f8 94       	cli
 30e:	de bf       	out	0x3e, r29	; 62
 310:	0f be       	out	0x3f, r0	; 63
 312:	cd bf       	out	0x3d, r28	; 61
    switch_on_leds_with_delay(100);
 314:	60 e0       	ldi	r22, 0x00	; 0
 316:	70 e0       	ldi	r23, 0x00	; 0
 318:	88 ec       	ldi	r24, 0xC8	; 200
 31a:	92 e4       	ldi	r25, 0x42	; 66
 31c:	0a df       	rcall	.-492    	; 0x132 <switch_on_leds_with_delay>
   The maximal possible delay is 262.14 ms / F_CPU in MHz.
 */
void
_delay_ms(double __ms)
{
 31e:	80 e0       	ldi	r24, 0x00	; 0
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	a8 e4       	ldi	r26, 0x48	; 72
 324:	b2 e4       	ldi	r27, 0x42	; 66
 326:	89 83       	std	Y+1, r24	; 0x01
 328:	9a 83       	std	Y+2, r25	; 0x02
 32a:	ab 83       	std	Y+3, r26	; 0x03
 32c:	bc 83       	std	Y+4, r27	; 0x04
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 32e:	20 e0       	ldi	r18, 0x00	; 0
 330:	30 e0       	ldi	r19, 0x00	; 0
 332:	4a e7       	ldi	r20, 0x7A	; 122
 334:	53 e4       	ldi	r21, 0x43	; 67
 336:	69 81       	ldd	r22, Y+1	; 0x01
 338:	7a 81       	ldd	r23, Y+2	; 0x02
 33a:	8b 81       	ldd	r24, Y+3	; 0x03
 33c:	9c 81       	ldd	r25, Y+4	; 0x04
 33e:	a7 d3       	rcall	.+1870   	; 0xa8e <__mulsf3>
 340:	dc 01       	movw	r26, r24
 342:	cb 01       	movw	r24, r22
 344:	8f 83       	std	Y+7, r24	; 0x07
 346:	98 87       	std	Y+8, r25	; 0x08
 348:	a9 87       	std	Y+9, r26	; 0x09
 34a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
 34c:	20 e0       	ldi	r18, 0x00	; 0
 34e:	30 e0       	ldi	r19, 0x00	; 0
 350:	40 e8       	ldi	r20, 0x80	; 128
 352:	5f e3       	ldi	r21, 0x3F	; 63
 354:	6f 81       	ldd	r22, Y+7	; 0x07
 356:	78 85       	ldd	r23, Y+8	; 0x08
 358:	89 85       	ldd	r24, Y+9	; 0x09
 35a:	9a 85       	ldd	r25, Y+10	; 0x0a
 35c:	28 d3       	rcall	.+1616   	; 0x9ae <__eqsf2>
 35e:	88 23       	and	r24, r24
 360:	0c f0       	brlt	.+2      	; 0x364 <test_leds+0x64>
 362:	05 c0       	rjmp	.+10     	; 0x36e <test_leds+0x6e>
		__ticks = 1;
 364:	81 e0       	ldi	r24, 0x01	; 1
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	9e 83       	std	Y+6, r25	; 0x06
 36a:	8d 83       	std	Y+5, r24	; 0x05
 36c:	18 c0       	rjmp	.+48     	; 0x39e <test_leds+0x9e>
	else if (__tmp > 65535)
 36e:	20 e0       	ldi	r18, 0x00	; 0
 370:	3f ef       	ldi	r19, 0xFF	; 255
 372:	4f e7       	ldi	r20, 0x7F	; 127
 374:	57 e4       	ldi	r21, 0x47	; 71
 376:	6f 81       	ldd	r22, Y+7	; 0x07
 378:	78 85       	ldd	r23, Y+8	; 0x08
 37a:	89 85       	ldd	r24, Y+9	; 0x09
 37c:	9a 85       	ldd	r25, Y+10	; 0x0a
 37e:	1a d3       	rcall	.+1588   	; 0x9b4 <__gesf2>
 380:	18 16       	cp	r1, r24
 382:	0c f0       	brlt	.+2      	; 0x386 <test_leds+0x86>
 384:	03 c0       	rjmp	.+6      	; 0x38c <test_leds+0x8c>
		__ticks = 0;	/* i.e. 65536 */
 386:	1e 82       	std	Y+6, r1	; 0x06
 388:	1d 82       	std	Y+5, r1	; 0x05
 38a:	09 c0       	rjmp	.+18     	; 0x39e <test_leds+0x9e>
	else
		__ticks = (uint16_t)__tmp;
 38c:	6f 81       	ldd	r22, Y+7	; 0x07
 38e:	78 85       	ldd	r23, Y+8	; 0x08
 390:	89 85       	ldd	r24, Y+9	; 0x09
 392:	9a 85       	ldd	r25, Y+10	; 0x0a
 394:	d8 d2       	rcall	.+1456   	; 0x946 <__fixsfsi>
 396:	dc 01       	movw	r26, r24
 398:	cb 01       	movw	r24, r22
 39a:	9e 83       	std	Y+6, r25	; 0x06
 39c:	8d 83       	std	Y+5, r24	; 0x05
 39e:	8d 81       	ldd	r24, Y+5	; 0x05
 3a0:	9e 81       	ldd	r25, Y+6	; 0x06
 3a2:	9c 87       	std	Y+12, r25	; 0x0c
 3a4:	8b 87       	std	Y+11, r24	; 0x0b
 3a6:	8b 85       	ldd	r24, Y+11	; 0x0b
 3a8:	9c 85       	ldd	r25, Y+12	; 0x0c
 3aa:	01 97       	sbiw	r24, 0x01	; 1
 3ac:	f1 f7       	brne	.-4      	; 0x3aa <test_leds+0xaa>
 3ae:	9c 87       	std	Y+12, r25	; 0x0c
 3b0:	8b 87       	std	Y+11, r24	; 0x0b
    _delay_ms(50);
    switch_off_leds_with_delay(100);
 3b2:	60 e0       	ldi	r22, 0x00	; 0
 3b4:	70 e0       	ldi	r23, 0x00	; 0
 3b6:	88 ec       	ldi	r24, 0xC8	; 200
 3b8:	92 e4       	ldi	r25, 0x42	; 66
 3ba:	2f df       	rcall	.-418    	; 0x21a <switch_off_leds_with_delay>
 3bc:	2c 96       	adiw	r28, 0x0c	; 12
 3be:	0f b6       	in	r0, 0x3f	; 63
 3c0:	f8 94       	cli
 3c2:	de bf       	out	0x3e, r29	; 62
 3c4:	0f be       	out	0x3f, r0	; 63
 3c6:	cd bf       	out	0x3d, r28	; 61
 3c8:	df 91       	pop	r29
 3ca:	cf 91       	pop	r28
 3cc:	08 95       	ret

000003ce <switch_on_min_dels>:
}

/*
 *  switch on every leds (from 0 to n)  (and switch off others)
 */
void switch_on_min_dels(int n) {
 3ce:	cf 93       	push	r28
 3d0:	df 93       	push	r29
 3d2:	cd b7       	in	r28, 0x3d	; 61
 3d4:	de b7       	in	r29, 0x3e	; 62
 3d6:	24 97       	sbiw	r28, 0x04	; 4
 3d8:	0f b6       	in	r0, 0x3f	; 63
 3da:	f8 94       	cli
 3dc:	de bf       	out	0x3e, r29	; 62
 3de:	0f be       	out	0x3f, r0	; 63
 3e0:	cd bf       	out	0x3d, r28	; 61
 3e2:	9a 83       	std	Y+2, r25	; 0x02
 3e4:	89 83       	std	Y+1, r24	; 0x01
    int i;
    for(i = 1; i<=Nleds; i++) {
 3e6:	81 e0       	ldi	r24, 0x01	; 1
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	9c 83       	std	Y+4, r25	; 0x04
 3ec:	8b 83       	std	Y+3, r24	; 0x03
 3ee:	8b 81       	ldd	r24, Y+3	; 0x03
 3f0:	9c 81       	ldd	r25, Y+4	; 0x04
 3f2:	89 30       	cpi	r24, 0x09	; 9
 3f4:	91 05       	cpc	r25, r1
 3f6:	a4 f4       	brge	.+40     	; 0x420 <switch_on_min_dels+0x52>
        if (i<=n) {
 3f8:	2b 81       	ldd	r18, Y+3	; 0x03
 3fa:	3c 81       	ldd	r19, Y+4	; 0x04
 3fc:	89 81       	ldd	r24, Y+1	; 0x01
 3fe:	9a 81       	ldd	r25, Y+2	; 0x02
 400:	82 17       	cp	r24, r18
 402:	93 07       	cpc	r25, r19
 404:	24 f0       	brlt	.+8      	; 0x40e <switch_on_min_dels+0x40>
            switch_on_led(i);
 406:	8b 81       	ldd	r24, Y+3	; 0x03
 408:	9c 81       	ldd	r25, Y+4	; 0x04
 40a:	3d de       	rcall	.-902    	; 0x86 <switch_on_led>
 40c:	03 c0       	rjmp	.+6      	; 0x414 <switch_on_min_dels+0x46>
        } else {
            switch_off_led(i);
 40e:	8b 81       	ldd	r24, Y+3	; 0x03
 410:	9c 81       	ldd	r25, Y+4	; 0x04
 412:	65 de       	rcall	.-822    	; 0xde <switch_off_led>
 414:	8b 81       	ldd	r24, Y+3	; 0x03
 416:	9c 81       	ldd	r25, Y+4	; 0x04
 418:	01 96       	adiw	r24, 0x01	; 1
 41a:	9c 83       	std	Y+4, r25	; 0x04
 41c:	8b 83       	std	Y+3, r24	; 0x03
 41e:	e7 cf       	rjmp	.-50     	; 0x3ee <switch_on_min_dels+0x20>
 420:	24 96       	adiw	r28, 0x04	; 4
 422:	0f b6       	in	r0, 0x3f	; 63
 424:	f8 94       	cli
 426:	de bf       	out	0x3e, r29	; 62
 428:	0f be       	out	0x3f, r0	; 63
 42a:	cd bf       	out	0x3d, r28	; 61
 42c:	df 91       	pop	r29
 42e:	cf 91       	pop	r28
 430:	08 95       	ret

00000432 <switch_on_max_dels>:
        }
    }
}

/*
 *  switch on every leds (from Nleds to n)
 */
void switch_on_max_dels(int n) {
 432:	cf 93       	push	r28
 434:	df 93       	push	r29
 436:	cd b7       	in	r28, 0x3d	; 61
 438:	de b7       	in	r29, 0x3e	; 62
 43a:	24 97       	sbiw	r28, 0x04	; 4
 43c:	0f b6       	in	r0, 0x3f	; 63
 43e:	f8 94       	cli
 440:	de bf       	out	0x3e, r29	; 62
 442:	0f be       	out	0x3f, r0	; 63
 444:	cd bf       	out	0x3d, r28	; 61
 446:	9a 83       	std	Y+2, r25	; 0x02
 448:	89 83       	std	Y+1, r24	; 0x01
    int i;
    for(i = Nleds; i>=0; i--) {
 44a:	88 e0       	ldi	r24, 0x08	; 8
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	9c 83       	std	Y+4, r25	; 0x04
 450:	8b 83       	std	Y+3, r24	; 0x03
 452:	8b 81       	ldd	r24, Y+3	; 0x03
 454:	9c 81       	ldd	r25, Y+4	; 0x04
 456:	99 23       	and	r25, r25
 458:	c4 f0       	brlt	.+48     	; 0x48a <switch_on_max_dels+0x58>
        if (i>=Nleds-n) {
 45a:	28 e0       	ldi	r18, 0x08	; 8
 45c:	30 e0       	ldi	r19, 0x00	; 0
 45e:	89 81       	ldd	r24, Y+1	; 0x01
 460:	9a 81       	ldd	r25, Y+2	; 0x02
 462:	28 1b       	sub	r18, r24
 464:	39 0b       	sbc	r19, r25
 466:	8b 81       	ldd	r24, Y+3	; 0x03
 468:	9c 81       	ldd	r25, Y+4	; 0x04
 46a:	82 17       	cp	r24, r18
 46c:	93 07       	cpc	r25, r19
 46e:	24 f0       	brlt	.+8      	; 0x478 <switch_on_max_dels+0x46>
            switch_on_led(i);
 470:	8b 81       	ldd	r24, Y+3	; 0x03
 472:	9c 81       	ldd	r25, Y+4	; 0x04
 474:	08 de       	rcall	.-1008   	; 0x86 <switch_on_led>
 476:	03 c0       	rjmp	.+6      	; 0x47e <switch_on_max_dels+0x4c>
        } else {
            switch_off_led(i);
 478:	8b 81       	ldd	r24, Y+3	; 0x03
 47a:	9c 81       	ldd	r25, Y+4	; 0x04
 47c:	30 de       	rcall	.-928    	; 0xde <switch_off_led>
 47e:	8b 81       	ldd	r24, Y+3	; 0x03
 480:	9c 81       	ldd	r25, Y+4	; 0x04
 482:	01 97       	sbiw	r24, 0x01	; 1
 484:	9c 83       	std	Y+4, r25	; 0x04
 486:	8b 83       	std	Y+3, r24	; 0x03
 488:	e4 cf       	rjmp	.-56     	; 0x452 <switch_on_max_dels+0x20>
 48a:	24 96       	adiw	r28, 0x04	; 4
 48c:	0f b6       	in	r0, 0x3f	; 63
 48e:	f8 94       	cli
 490:	de bf       	out	0x3e, r29	; 62
 492:	0f be       	out	0x3f, r0	; 63
 494:	cd bf       	out	0x3d, r28	; 61
 496:	df 91       	pop	r29
 498:	cf 91       	pop	r28
 49a:	08 95       	ret

0000049c <led_alarm>:
        }
    }
    // TO TEST (switch off)
}

/*
 * switch off every leds, wait and swith them all, n times (a sort of visual alarm)
 */
void led_alarm(int n) {
 49c:	cf 93       	push	r28
 49e:	df 93       	push	r29
 4a0:	cd b7       	in	r28, 0x3d	; 61
 4a2:	de b7       	in	r29, 0x3e	; 62
 4a4:	60 97       	sbiw	r28, 0x10	; 16
 4a6:	0f b6       	in	r0, 0x3f	; 63
 4a8:	f8 94       	cli
 4aa:	de bf       	out	0x3e, r29	; 62
 4ac:	0f be       	out	0x3f, r0	; 63
 4ae:	cd bf       	out	0x3d, r28	; 61
 4b0:	9a 83       	std	Y+2, r25	; 0x02
 4b2:	89 83       	std	Y+1, r24	; 0x01
    int i;
    for(i = 1; i<=n; i++) {
 4b4:	81 e0       	ldi	r24, 0x01	; 1
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	9c 83       	std	Y+4, r25	; 0x04
 4ba:	8b 83       	std	Y+3, r24	; 0x03
 4bc:	2b 81       	ldd	r18, Y+3	; 0x03
 4be:	3c 81       	ldd	r19, Y+4	; 0x04
 4c0:	89 81       	ldd	r24, Y+1	; 0x01
 4c2:	9a 81       	ldd	r25, Y+2	; 0x02
 4c4:	82 17       	cp	r24, r18
 4c6:	93 07       	cpc	r25, r19
 4c8:	0c f4       	brge	.+2      	; 0x4cc <led_alarm+0x30>
 4ca:	9c c0       	rjmp	.+312    	; 0x604 <led_alarm+0x168>
        switch_off_all_leds();
 4cc:	d2 dd       	rcall	.-1116   	; 0x72 <switch_off_all_leds>
   The maximal possible delay is 262.14 ms / F_CPU in MHz.
 */
void
_delay_ms(double __ms)
{
 4ce:	80 e0       	ldi	r24, 0x00	; 0
 4d0:	90 e0       	ldi	r25, 0x00	; 0
 4d2:	a8 e4       	ldi	r26, 0x48	; 72
 4d4:	b2 e4       	ldi	r27, 0x42	; 66
 4d6:	8d 83       	std	Y+5, r24	; 0x05
 4d8:	9e 83       	std	Y+6, r25	; 0x06
 4da:	af 83       	std	Y+7, r26	; 0x07
 4dc:	b8 87       	std	Y+8, r27	; 0x08
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 4de:	20 e0       	ldi	r18, 0x00	; 0
 4e0:	30 e0       	ldi	r19, 0x00	; 0
 4e2:	4a e7       	ldi	r20, 0x7A	; 122
 4e4:	53 e4       	ldi	r21, 0x43	; 67
 4e6:	6d 81       	ldd	r22, Y+5	; 0x05
 4e8:	7e 81       	ldd	r23, Y+6	; 0x06
 4ea:	8f 81       	ldd	r24, Y+7	; 0x07
 4ec:	98 85       	ldd	r25, Y+8	; 0x08
 4ee:	cf d2       	rcall	.+1438   	; 0xa8e <__mulsf3>
 4f0:	dc 01       	movw	r26, r24
 4f2:	cb 01       	movw	r24, r22
 4f4:	8b 87       	std	Y+11, r24	; 0x0b
 4f6:	9c 87       	std	Y+12, r25	; 0x0c
 4f8:	ad 87       	std	Y+13, r26	; 0x0d
 4fa:	be 87       	std	Y+14, r27	; 0x0e
	if (__tmp < 1.0)
 4fc:	20 e0       	ldi	r18, 0x00	; 0
 4fe:	30 e0       	ldi	r19, 0x00	; 0
 500:	40 e8       	ldi	r20, 0x80	; 128
 502:	5f e3       	ldi	r21, 0x3F	; 63
 504:	6b 85       	ldd	r22, Y+11	; 0x0b
 506:	7c 85       	ldd	r23, Y+12	; 0x0c
 508:	8d 85       	ldd	r24, Y+13	; 0x0d
 50a:	9e 85       	ldd	r25, Y+14	; 0x0e
 50c:	50 d2       	rcall	.+1184   	; 0x9ae <__eqsf2>
 50e:	88 23       	and	r24, r24
 510:	0c f0       	brlt	.+2      	; 0x514 <led_alarm+0x78>
 512:	05 c0       	rjmp	.+10     	; 0x51e <led_alarm+0x82>
		__ticks = 1;
 514:	81 e0       	ldi	r24, 0x01	; 1
 516:	90 e0       	ldi	r25, 0x00	; 0
 518:	9a 87       	std	Y+10, r25	; 0x0a
 51a:	89 87       	std	Y+9, r24	; 0x09
 51c:	18 c0       	rjmp	.+48     	; 0x54e <led_alarm+0xb2>
	else if (__tmp > 65535)
 51e:	20 e0       	ldi	r18, 0x00	; 0
 520:	3f ef       	ldi	r19, 0xFF	; 255
 522:	4f e7       	ldi	r20, 0x7F	; 127
 524:	57 e4       	ldi	r21, 0x47	; 71
 526:	6b 85       	ldd	r22, Y+11	; 0x0b
 528:	7c 85       	ldd	r23, Y+12	; 0x0c
 52a:	8d 85       	ldd	r24, Y+13	; 0x0d
 52c:	9e 85       	ldd	r25, Y+14	; 0x0e
 52e:	42 d2       	rcall	.+1156   	; 0x9b4 <__gesf2>
 530:	18 16       	cp	r1, r24
 532:	0c f0       	brlt	.+2      	; 0x536 <led_alarm+0x9a>
 534:	03 c0       	rjmp	.+6      	; 0x53c <led_alarm+0xa0>
		__ticks = 0;	/* i.e. 65536 */
 536:	1a 86       	std	Y+10, r1	; 0x0a
 538:	19 86       	std	Y+9, r1	; 0x09
 53a:	09 c0       	rjmp	.+18     	; 0x54e <led_alarm+0xb2>
	else
		__ticks = (uint16_t)__tmp;
 53c:	6b 85       	ldd	r22, Y+11	; 0x0b
 53e:	7c 85       	ldd	r23, Y+12	; 0x0c
 540:	8d 85       	ldd	r24, Y+13	; 0x0d
 542:	9e 85       	ldd	r25, Y+14	; 0x0e
 544:	00 d2       	rcall	.+1024   	; 0x946 <__fixsfsi>
 546:	dc 01       	movw	r26, r24
 548:	cb 01       	movw	r24, r22
 54a:	9a 87       	std	Y+10, r25	; 0x0a
 54c:	89 87       	std	Y+9, r24	; 0x09
 54e:	89 85       	ldd	r24, Y+9	; 0x09
 550:	9a 85       	ldd	r25, Y+10	; 0x0a
 552:	98 8b       	std	Y+16, r25	; 0x10
 554:	8f 87       	std	Y+15, r24	; 0x0f
 556:	8f 85       	ldd	r24, Y+15	; 0x0f
 558:	98 89       	ldd	r25, Y+16	; 0x10
 55a:	01 97       	sbiw	r24, 0x01	; 1
 55c:	f1 f7       	brne	.-4      	; 0x55a <led_alarm+0xbe>
 55e:	98 8b       	std	Y+16, r25	; 0x10
 560:	8f 87       	std	Y+15, r24	; 0x0f
        _delay_ms(50);
        switch_on_all_leds();
 562:	7e dd       	rcall	.-1284   	; 0x60 <switch_on_all_leds>
   The maximal possible delay is 262.14 ms / F_CPU in MHz.
 */
void
_delay_ms(double __ms)
{
 564:	80 e0       	ldi	r24, 0x00	; 0
 566:	90 e0       	ldi	r25, 0x00	; 0
 568:	a8 e4       	ldi	r26, 0x48	; 72
 56a:	b2 e4       	ldi	r27, 0x42	; 66
 56c:	8b 87       	std	Y+11, r24	; 0x0b
 56e:	9c 87       	std	Y+12, r25	; 0x0c
 570:	ad 87       	std	Y+13, r26	; 0x0d
 572:	be 87       	std	Y+14, r27	; 0x0e
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 574:	20 e0       	ldi	r18, 0x00	; 0
 576:	30 e0       	ldi	r19, 0x00	; 0
 578:	4a e7       	ldi	r20, 0x7A	; 122
 57a:	53 e4       	ldi	r21, 0x43	; 67
 57c:	6b 85       	ldd	r22, Y+11	; 0x0b
 57e:	7c 85       	ldd	r23, Y+12	; 0x0c
 580:	8d 85       	ldd	r24, Y+13	; 0x0d
 582:	9e 85       	ldd	r25, Y+14	; 0x0e
 584:	84 d2       	rcall	.+1288   	; 0xa8e <__mulsf3>
 586:	dc 01       	movw	r26, r24
 588:	cb 01       	movw	r24, r22
 58a:	8d 83       	std	Y+5, r24	; 0x05
 58c:	9e 83       	std	Y+6, r25	; 0x06
 58e:	af 83       	std	Y+7, r26	; 0x07
 590:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
 592:	20 e0       	ldi	r18, 0x00	; 0
 594:	30 e0       	ldi	r19, 0x00	; 0
 596:	40 e8       	ldi	r20, 0x80	; 128
 598:	5f e3       	ldi	r21, 0x3F	; 63
 59a:	6d 81       	ldd	r22, Y+5	; 0x05
 59c:	7e 81       	ldd	r23, Y+6	; 0x06
 59e:	8f 81       	ldd	r24, Y+7	; 0x07
 5a0:	98 85       	ldd	r25, Y+8	; 0x08
 5a2:	05 d2       	rcall	.+1034   	; 0x9ae <__eqsf2>
 5a4:	88 23       	and	r24, r24
 5a6:	0c f0       	brlt	.+2      	; 0x5aa <led_alarm+0x10e>
 5a8:	05 c0       	rjmp	.+10     	; 0x5b4 <led_alarm+0x118>
		__ticks = 1;
 5aa:	81 e0       	ldi	r24, 0x01	; 1
 5ac:	90 e0       	ldi	r25, 0x00	; 0
 5ae:	98 8b       	std	Y+16, r25	; 0x10
 5b0:	8f 87       	std	Y+15, r24	; 0x0f
 5b2:	18 c0       	rjmp	.+48     	; 0x5e4 <led_alarm+0x148>
	else if (__tmp > 65535)
 5b4:	20 e0       	ldi	r18, 0x00	; 0
 5b6:	3f ef       	ldi	r19, 0xFF	; 255
 5b8:	4f e7       	ldi	r20, 0x7F	; 127
 5ba:	57 e4       	ldi	r21, 0x47	; 71
 5bc:	6d 81       	ldd	r22, Y+5	; 0x05
 5be:	7e 81       	ldd	r23, Y+6	; 0x06
 5c0:	8f 81       	ldd	r24, Y+7	; 0x07
 5c2:	98 85       	ldd	r25, Y+8	; 0x08
 5c4:	f7 d1       	rcall	.+1006   	; 0x9b4 <__gesf2>
 5c6:	18 16       	cp	r1, r24
 5c8:	0c f0       	brlt	.+2      	; 0x5cc <led_alarm+0x130>
 5ca:	03 c0       	rjmp	.+6      	; 0x5d2 <led_alarm+0x136>
		__ticks = 0;	/* i.e. 65536 */
 5cc:	18 8a       	std	Y+16, r1	; 0x10
 5ce:	1f 86       	std	Y+15, r1	; 0x0f
 5d0:	09 c0       	rjmp	.+18     	; 0x5e4 <led_alarm+0x148>
	else
		__ticks = (uint16_t)__tmp;
 5d2:	6d 81       	ldd	r22, Y+5	; 0x05
 5d4:	7e 81       	ldd	r23, Y+6	; 0x06
 5d6:	8f 81       	ldd	r24, Y+7	; 0x07
 5d8:	98 85       	ldd	r25, Y+8	; 0x08
 5da:	b5 d1       	rcall	.+874    	; 0x946 <__fixsfsi>
 5dc:	dc 01       	movw	r26, r24
 5de:	cb 01       	movw	r24, r22
 5e0:	98 8b       	std	Y+16, r25	; 0x10
 5e2:	8f 87       	std	Y+15, r24	; 0x0f
 5e4:	8f 85       	ldd	r24, Y+15	; 0x0f
 5e6:	98 89       	ldd	r25, Y+16	; 0x10
 5e8:	9a 87       	std	Y+10, r25	; 0x0a
 5ea:	89 87       	std	Y+9, r24	; 0x09
 5ec:	89 85       	ldd	r24, Y+9	; 0x09
 5ee:	9a 85       	ldd	r25, Y+10	; 0x0a
 5f0:	01 97       	sbiw	r24, 0x01	; 1
 5f2:	f1 f7       	brne	.-4      	; 0x5f0 <led_alarm+0x154>
 5f4:	9a 87       	std	Y+10, r25	; 0x0a
 5f6:	89 87       	std	Y+9, r24	; 0x09
 5f8:	8b 81       	ldd	r24, Y+3	; 0x03
 5fa:	9c 81       	ldd	r25, Y+4	; 0x04
 5fc:	01 96       	adiw	r24, 0x01	; 1
 5fe:	9c 83       	std	Y+4, r25	; 0x04
 600:	8b 83       	std	Y+3, r24	; 0x03
 602:	5c cf       	rjmp	.-328    	; 0x4bc <led_alarm+0x20>
 604:	60 96       	adiw	r28, 0x10	; 16
 606:	0f b6       	in	r0, 0x3f	; 63
 608:	f8 94       	cli
 60a:	de bf       	out	0x3e, r29	; 62
 60c:	0f be       	out	0x3f, r0	; 63
 60e:	cd bf       	out	0x3d, r28	; 61
 610:	df 91       	pop	r29
 612:	cf 91       	pop	r28
 614:	08 95       	ret

00000616 <show_percent>:
        _delay_ms(50);
    }
}

/*
 * switch on every dels depending of the percentage p
 */
void show_percent(double p) {
 616:	cf 93       	push	r28
 618:	df 93       	push	r29
 61a:	cd b7       	in	r28, 0x3d	; 61
 61c:	de b7       	in	r29, 0x3e	; 62
 61e:	26 97       	sbiw	r28, 0x06	; 6
 620:	0f b6       	in	r0, 0x3f	; 63
 622:	f8 94       	cli
 624:	de bf       	out	0x3e, r29	; 62
 626:	0f be       	out	0x3f, r0	; 63
 628:	cd bf       	out	0x3d, r28	; 61
 62a:	69 83       	std	Y+1, r22	; 0x01
 62c:	7a 83       	std	Y+2, r23	; 0x02
 62e:	8b 83       	std	Y+3, r24	; 0x03
 630:	9c 83       	std	Y+4, r25	; 0x04
    // p pourcent
    int n;
    //n = 4;
    n = floor(p / 100.0 * Nleds); // TO FIX (math.h ceil floor ...)
 632:	20 e0       	ldi	r18, 0x00	; 0
 634:	30 e0       	ldi	r19, 0x00	; 0
 636:	48 ec       	ldi	r20, 0xC8	; 200
 638:	52 e4       	ldi	r21, 0x42	; 66
 63a:	69 81       	ldd	r22, Y+1	; 0x01
 63c:	7a 81       	ldd	r23, Y+2	; 0x02
 63e:	8b 81       	ldd	r24, Y+3	; 0x03
 640:	9c 81       	ldd	r25, Y+4	; 0x04
 642:	3b d1       	rcall	.+630    	; 0x8ba <__divsf3>
 644:	dc 01       	movw	r26, r24
 646:	cb 01       	movw	r24, r22
 648:	20 e0       	ldi	r18, 0x00	; 0
 64a:	30 e0       	ldi	r19, 0x00	; 0
 64c:	40 e0       	ldi	r20, 0x00	; 0
 64e:	51 e4       	ldi	r21, 0x41	; 65
 650:	bc 01       	movw	r22, r24
 652:	cd 01       	movw	r24, r26
 654:	1c d2       	rcall	.+1080   	; 0xa8e <__mulsf3>
 656:	dc 01       	movw	r26, r24
 658:	cb 01       	movw	r24, r22
 65a:	bc 01       	movw	r22, r24
 65c:	cd 01       	movw	r24, r26
 65e:	8e d1       	rcall	.+796    	; 0x97c <floor>
 660:	dc 01       	movw	r26, r24
 662:	cb 01       	movw	r24, r22
 664:	bc 01       	movw	r22, r24
 666:	cd 01       	movw	r24, r26
 668:	6e d1       	rcall	.+732    	; 0x946 <__fixsfsi>
 66a:	dc 01       	movw	r26, r24
 66c:	cb 01       	movw	r24, r22
 66e:	9e 83       	std	Y+6, r25	; 0x06
 670:	8d 83       	std	Y+5, r24	; 0x05
    switch_on_min_dels(n);
 672:	8d 81       	ldd	r24, Y+5	; 0x05
 674:	9e 81       	ldd	r25, Y+6	; 0x06
 676:	ab de       	rcall	.-682    	; 0x3ce <switch_on_min_dels>
 678:	26 96       	adiw	r28, 0x06	; 6
 67a:	0f b6       	in	r0, 0x3f	; 63
 67c:	f8 94       	cli
 67e:	de bf       	out	0x3e, r29	; 62
 680:	0f be       	out	0x3f, r0	; 63
 682:	cd bf       	out	0x3d, r28	; 61
 684:	df 91       	pop	r29
 686:	cf 91       	pop	r28
 688:	08 95       	ret

0000068a <StartStopChronometer>:
}


/*
 * start or stop chronometer
 */
void StartStopChronometer() {
 68a:	cf 93       	push	r28
 68c:	df 93       	push	r29
 68e:	cd b7       	in	r28, 0x3d	; 61
 690:	de b7       	in	r29, 0x3e	; 62
    led_alarm(3);
 692:	83 e0       	ldi	r24, 0x03	; 3
 694:	90 e0       	ldi	r25, 0x00	; 0
 696:	02 df       	rcall	.-508    	; 0x49c <led_alarm>
 698:	df 91       	pop	r29
 69a:	cf 91       	pop	r28
 69c:	08 95       	ret

0000069e <__vector_1>:
}

/*
 * interrupt handler example for INT0
 */
SIGNAL(SIG_INTERRUPT0) {
 69e:	1f 92       	push	r1
 6a0:	0f 92       	push	r0
 6a2:	0f b6       	in	r0, 0x3f	; 63
 6a4:	0f 92       	push	r0
 6a6:	11 24       	eor	r1, r1
 6a8:	2f 93       	push	r18
 6aa:	3f 93       	push	r19
 6ac:	4f 93       	push	r20
 6ae:	5f 93       	push	r21
 6b0:	6f 93       	push	r22
 6b2:	7f 93       	push	r23
 6b4:	8f 93       	push	r24
 6b6:	9f 93       	push	r25
 6b8:	af 93       	push	r26
 6ba:	bf 93       	push	r27
 6bc:	ef 93       	push	r30
 6be:	ff 93       	push	r31
 6c0:	cf 93       	push	r28
 6c2:	df 93       	push	r29
 6c4:	cd b7       	in	r28, 0x3d	; 61
 6c6:	de b7       	in	r29, 0x3e	; 62
    //StartStopChronometer();
    StartStopChronometer();
 6c8:	e0 df       	rcall	.-64     	; 0x68a <StartStopChronometer>
 6ca:	df 91       	pop	r29
 6cc:	cf 91       	pop	r28
 6ce:	ff 91       	pop	r31
 6d0:	ef 91       	pop	r30
 6d2:	bf 91       	pop	r27
 6d4:	af 91       	pop	r26
 6d6:	9f 91       	pop	r25
 6d8:	8f 91       	pop	r24
 6da:	7f 91       	pop	r23
 6dc:	6f 91       	pop	r22
 6de:	5f 91       	pop	r21
 6e0:	4f 91       	pop	r20
 6e2:	3f 91       	pop	r19
 6e4:	2f 91       	pop	r18
 6e6:	0f 90       	pop	r0
 6e8:	0f be       	out	0x3f, r0	; 63
 6ea:	0f 90       	pop	r0
 6ec:	1f 90       	pop	r1
 6ee:	18 95       	reti

000006f0 <init>:
}



/*
 *  init function
 */
void init() {
 6f0:	cf 93       	push	r28
 6f2:	df 93       	push	r29
 6f4:	cd b7       	in	r28, 0x3d	; 61
 6f6:	de b7       	in	r29, 0x3e	; 62
   // ********
   // * Dels *
   // ********
   DDRC=0xFF; // set up PORTD pins 0 to 7 as output
 6f8:	8f ef       	ldi	r24, 0xFF	; 255
 6fa:	80 93 34 00 	sts	0x0034, r24
   //switch_on_all_leds();
   switch_off_all_leds();
 6fe:	b9 dc       	rcall	.-1678   	; 0x72 <switch_off_all_leds>

   // *********************************
   // * Start/Stop chronometer (INT0) *
   // *********************************
   // Set Pin 6 (PD2) as the pin to use for this example
   //PCMSK |= (1<<PIND2); // TO FIX
   //PIND |= (1<<PIND2); // try scls:Error : read-only !!!

   // interrupt on INT0 pin falling edge (sensor triggered)
   MCUCR = (1<<ISC01) | (1<<ISC00);
 700:	83 e0       	ldi	r24, 0x03	; 3
 702:	80 93 55 00 	sts	0x0055, r24

   // turn on interrupts!
   //GIMSK  |= (1<<INT0); // TO FIX

   GICR |= (1<<INT0); //INT0
 706:	80 91 5b 00 	lds	r24, 0x005B
 70a:	80 64       	ori	r24, 0x40	; 64
 70c:	80 93 5b 00 	sts	0x005B, r24

   sei();
 710:	78 94       	sei

   // *************************************************
   // * Conv Analog to Digital (CAN for RPM and Temp) *
   // *************************************************

/*
	ADCSRA |= (_BV(ADEN));   // enable ADC (turn on ADC power)
	ADCSRA &= ~(_BV(ADATE)); // default to single sample convert mode

   //  set default prescaler 0x06 -> CPU clk/64      a2dSetPrescaler(0x06)
   ADCSRA = (((ADCSRA) & ~0x07) | 0x06); // ADC_PRESCALE_MASK 0x07
	
   //	a2dSetReference(0x01);	// set default reference ADC_REFERENCE=0x01  ADC_REFERENCE_MASK=
   ADMUX = (((ADMUX) & ~0xC0) | (0x01<<6));
	
	ADMUX &= ~(_BV(ADLAR));  // set to right-adjusted result
   ADCSRA |= (_BV(ADIE));   // enable ADC interrupts

	a2dCompleteFlag = 0;		// clear conversion complete flag (FALSE=0 TRUE=-1)

	__asm__ __volatile__ ("sei" ::);
*/
	
	// configure a2d port (PORTA) as input
	// so we can receive analog signals
   DDRA=0x00;
 712:	10 92 3a 00 	sts	0x003A, r1
	// make sure pull-up resistors are turned off
	PORTA = 0x00;
 716:	10 92 3b 00 	sts	0x003B, r1
 71a:	df 91       	pop	r29
 71c:	cf 91       	pop	r28
 71e:	08 95       	ret

00000720 <adcConvert10bit>:

   // ***************
   // * Graphic LCD *
   // ***************
}

/*
 * convert from analog to digital (10 bits)
 */
unsigned short adcConvert10bit(unsigned char ch)
{
 720:	cf 93       	push	r28
 722:	df 93       	push	r29
 724:	cd b7       	in	r28, 0x3d	; 61
 726:	de b7       	in	r29, 0x3e	; 62
 728:	21 97       	sbiw	r28, 0x01	; 1
 72a:	0f b6       	in	r0, 0x3f	; 63
 72c:	f8 94       	cli
 72e:	de bf       	out	0x3e, r29	; 62
 730:	0f be       	out	0x3f, r0	; 63
 732:	cd bf       	out	0x3d, r28	; 61
 734:	89 83       	std	Y+1, r24	; 0x01
	a2dCompleteFlag = 0;				// clear conversion complete flag
 736:	10 92 60 00 	sts	0x0060, r1
	ADMUX = ((ADMUX) & ~0x1F) | (ch & 0x1F);	// set channel ADC_MUX_MASK=0x1F
 73a:	80 91 27 00 	lds	r24, 0x0027
 73e:	98 2f       	mov	r25, r24
 740:	90 7e       	andi	r25, 0xE0	; 224
 742:	89 81       	ldd	r24, Y+1	; 0x01
 744:	8f 71       	andi	r24, 0x1F	; 31
 746:	89 2b       	or	r24, r25
 748:	80 93 27 00 	sts	0x0027, r24
	ADCSRA |= (_BV(ADIF)); // clear hardware "conversion complete" flag
 74c:	80 91 26 00 	lds	r24, 0x0026
 750:	80 61       	ori	r24, 0x10	; 16
 752:	80 93 26 00 	sts	0x0026, r24
	ADCSRA |= (_BV(ADSC)); // start conversion
 756:	80 91 26 00 	lds	r24, 0x0026
 75a:	80 64       	ori	r24, 0x40	; 64
 75c:	80 93 26 00 	sts	0x0026, r24
							
	//while(!a2dCompleteFlag);				// wait until conversion complete
	//while( bit_is_clear(ADCSR, ADIF) );		// wait until conversion complete
	while( bit_is_set(ADCSRA, ADSC) );		// wait until conversion complete
 760:	80 91 26 00 	lds	r24, 0x0026
 764:	99 27       	eor	r25, r25
 766:	80 74       	andi	r24, 0x40	; 64
 768:	90 70       	andi	r25, 0x00	; 0
 76a:	00 97       	sbiw	r24, 0x00	; 0
 76c:	09 f0       	breq	.+2      	; 0x770 <adcConvert10bit+0x50>
 76e:	f8 cf       	rjmp	.-16     	; 0x760 <adcConvert10bit+0x40>

	// CAUTION: MUST READ ADCL BEFORE ADCH!!!
	return ((ADCL) | ((ADCH)<<8));	// read ADC (full 10 bits);
 770:	80 91 24 00 	lds	r24, 0x0024
 774:	28 2f       	mov	r18, r24
 776:	33 27       	eor	r19, r19
 778:	80 91 25 00 	lds	r24, 0x0025
 77c:	99 27       	eor	r25, r25
 77e:	98 2f       	mov	r25, r24
 780:	88 27       	eor	r24, r24
 782:	28 2b       	or	r18, r24
 784:	39 2b       	or	r19, r25
 786:	c9 01       	movw	r24, r18
 788:	21 96       	adiw	r28, 0x01	; 1
 78a:	0f b6       	in	r0, 0x3f	; 63
 78c:	f8 94       	cli
 78e:	de bf       	out	0x3e, r29	; 62
 790:	0f be       	out	0x3f, r0	; 63
 792:	cd bf       	out	0x3d, r28	; 61
 794:	df 91       	pop	r29
 796:	cf 91       	pop	r28
 798:	08 95       	ret

0000079a <adcConvert8bit>:
}

/*
 * convert from analog to digital (8 bits)
 * starts conversion, waits until conversion is done, and returns result
 */
unsigned char adcConvert8bit(unsigned char ch)
{
 79a:	cf 93       	push	r28
 79c:	df 93       	push	r29
 79e:	cd b7       	in	r28, 0x3d	; 61
 7a0:	de b7       	in	r29, 0x3e	; 62
 7a2:	21 97       	sbiw	r28, 0x01	; 1
 7a4:	0f b6       	in	r0, 0x3f	; 63
 7a6:	f8 94       	cli
 7a8:	de bf       	out	0x3e, r29	; 62
 7aa:	0f be       	out	0x3f, r0	; 63
 7ac:	cd bf       	out	0x3d, r28	; 61
 7ae:	89 83       	std	Y+1, r24	; 0x01
	// do 10-bit conversion and return highest 8 bits
	return adcConvert10bit(ch)>>2;			// return ADC MSB byte
 7b0:	89 81       	ldd	r24, Y+1	; 0x01
 7b2:	b6 df       	rcall	.-148    	; 0x720 <adcConvert10bit>
 7b4:	96 95       	lsr	r25
 7b6:	87 95       	ror	r24
 7b8:	96 95       	lsr	r25
 7ba:	87 95       	ror	r24
 7bc:	99 27       	eor	r25, r25
 7be:	21 96       	adiw	r28, 0x01	; 1
 7c0:	0f b6       	in	r0, 0x3f	; 63
 7c2:	f8 94       	cli
 7c4:	de bf       	out	0x3e, r29	; 62
 7c6:	0f be       	out	0x3f, r0	; 63
 7c8:	cd bf       	out	0x3d, r28	; 61
 7ca:	df 91       	pop	r29
 7cc:	cf 91       	pop	r28
 7ce:	08 95       	ret

000007d0 <loop>:
}

/*
 *  this is the main loop
 */
void loop(void) {
 7d0:	cf 93       	push	r28
 7d2:	df 93       	push	r29
 7d4:	cd b7       	in	r28, 0x3d	; 61
 7d6:	de b7       	in	r29, 0x3e	; 62
 7d8:	2e 97       	sbiw	r28, 0x0e	; 14
 7da:	0f b6       	in	r0, 0x3f	; 63
 7dc:	f8 94       	cli
 7de:	de bf       	out	0x3e, r29	; 62
 7e0:	0f be       	out	0x3f, r0	; 63
 7e2:	cd bf       	out	0x3d, r28	; 61
   //show_percent(0x80 * 100 / 0xFF);

   int i;
   for (i = 0; i<=Nleds; i++) {
 7e4:	1a 82       	std	Y+2, r1	; 0x02
 7e6:	19 82       	std	Y+1, r1	; 0x01
 7e8:	89 81       	ldd	r24, Y+1	; 0x01
 7ea:	9a 81       	ldd	r25, Y+2	; 0x02
 7ec:	89 30       	cpi	r24, 0x09	; 9
 7ee:	91 05       	cpc	r25, r1
 7f0:	0c f0       	brlt	.+2      	; 0x7f4 <loop+0x24>
 7f2:	53 c0       	rjmp	.+166    	; 0x89a <loop+0xca>
       //switch_on_max_dels(i);
       switch_on_min_dels(i);
 7f4:	89 81       	ldd	r24, Y+1	; 0x01
 7f6:	9a 81       	ldd	r25, Y+2	; 0x02
 7f8:	ea dd       	rcall	.-1068   	; 0x3ce <switch_on_min_dels>
   The maximal possible delay is 262.14 ms / F_CPU in MHz.
 */
void
_delay_ms(double __ms)
{
 7fa:	80 e0       	ldi	r24, 0x00	; 0
 7fc:	90 e0       	ldi	r25, 0x00	; 0
 7fe:	aa ef       	ldi	r26, 0xFA	; 250
 800:	b3 e4       	ldi	r27, 0x43	; 67
 802:	8b 83       	std	Y+3, r24	; 0x03
 804:	9c 83       	std	Y+4, r25	; 0x04
 806:	ad 83       	std	Y+5, r26	; 0x05
 808:	be 83       	std	Y+6, r27	; 0x06
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 80a:	20 e0       	ldi	r18, 0x00	; 0
 80c:	30 e0       	ldi	r19, 0x00	; 0
 80e:	4a e7       	ldi	r20, 0x7A	; 122
 810:	53 e4       	ldi	r21, 0x43	; 67
 812:	6b 81       	ldd	r22, Y+3	; 0x03
 814:	7c 81       	ldd	r23, Y+4	; 0x04
 816:	8d 81       	ldd	r24, Y+5	; 0x05
 818:	9e 81       	ldd	r25, Y+6	; 0x06
 81a:	39 d1       	rcall	.+626    	; 0xa8e <__mulsf3>
 81c:	dc 01       	movw	r26, r24
 81e:	cb 01       	movw	r24, r22
 820:	89 87       	std	Y+9, r24	; 0x09
 822:	9a 87       	std	Y+10, r25	; 0x0a
 824:	ab 87       	std	Y+11, r26	; 0x0b
 826:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
 828:	20 e0       	ldi	r18, 0x00	; 0
 82a:	30 e0       	ldi	r19, 0x00	; 0
 82c:	40 e8       	ldi	r20, 0x80	; 128
 82e:	5f e3       	ldi	r21, 0x3F	; 63
 830:	69 85       	ldd	r22, Y+9	; 0x09
 832:	7a 85       	ldd	r23, Y+10	; 0x0a
 834:	8b 85       	ldd	r24, Y+11	; 0x0b
 836:	9c 85       	ldd	r25, Y+12	; 0x0c
 838:	ba d0       	rcall	.+372    	; 0x9ae <__eqsf2>
 83a:	88 23       	and	r24, r24
 83c:	0c f0       	brlt	.+2      	; 0x840 <loop+0x70>
 83e:	05 c0       	rjmp	.+10     	; 0x84a <loop+0x7a>
		__ticks = 1;
 840:	81 e0       	ldi	r24, 0x01	; 1
 842:	90 e0       	ldi	r25, 0x00	; 0
 844:	98 87       	std	Y+8, r25	; 0x08
 846:	8f 83       	std	Y+7, r24	; 0x07
 848:	18 c0       	rjmp	.+48     	; 0x87a <loop+0xaa>
	else if (__tmp > 65535)
 84a:	20 e0       	ldi	r18, 0x00	; 0
 84c:	3f ef       	ldi	r19, 0xFF	; 255
 84e:	4f e7       	ldi	r20, 0x7F	; 127
 850:	57 e4       	ldi	r21, 0x47	; 71
 852:	69 85       	ldd	r22, Y+9	; 0x09
 854:	7a 85       	ldd	r23, Y+10	; 0x0a
 856:	8b 85       	ldd	r24, Y+11	; 0x0b
 858:	9c 85       	ldd	r25, Y+12	; 0x0c
 85a:	ac d0       	rcall	.+344    	; 0x9b4 <__gesf2>
 85c:	18 16       	cp	r1, r24
 85e:	0c f0       	brlt	.+2      	; 0x862 <loop+0x92>
 860:	03 c0       	rjmp	.+6      	; 0x868 <loop+0x98>
		__ticks = 0;	/* i.e. 65536 */
 862:	18 86       	std	Y+8, r1	; 0x08
 864:	1f 82       	std	Y+7, r1	; 0x07
 866:	09 c0       	rjmp	.+18     	; 0x87a <loop+0xaa>
	else
		__ticks = (uint16_t)__tmp;
 868:	69 85       	ldd	r22, Y+9	; 0x09
 86a:	7a 85       	ldd	r23, Y+10	; 0x0a
 86c:	8b 85       	ldd	r24, Y+11	; 0x0b
 86e:	9c 85       	ldd	r25, Y+12	; 0x0c
 870:	6a d0       	rcall	.+212    	; 0x946 <__fixsfsi>
 872:	dc 01       	movw	r26, r24
 874:	cb 01       	movw	r24, r22
 876:	98 87       	std	Y+8, r25	; 0x08
 878:	8f 83       	std	Y+7, r24	; 0x07
 87a:	8f 81       	ldd	r24, Y+7	; 0x07
 87c:	98 85       	ldd	r25, Y+8	; 0x08
 87e:	9e 87       	std	Y+14, r25	; 0x0e
 880:	8d 87       	std	Y+13, r24	; 0x0d
 882:	8d 85       	ldd	r24, Y+13	; 0x0d
 884:	9e 85       	ldd	r25, Y+14	; 0x0e
 886:	01 97       	sbiw	r24, 0x01	; 1
 888:	f1 f7       	brne	.-4      	; 0x886 <loop+0xb6>
 88a:	9e 87       	std	Y+14, r25	; 0x0e
 88c:	8d 87       	std	Y+13, r24	; 0x0d
 88e:	89 81       	ldd	r24, Y+1	; 0x01
 890:	9a 81       	ldd	r25, Y+2	; 0x02
 892:	01 96       	adiw	r24, 0x01	; 1
 894:	9a 83       	std	Y+2, r25	; 0x02
 896:	89 83       	std	Y+1, r24	; 0x01
 898:	a7 cf       	rjmp	.-178    	; 0x7e8 <loop+0x18>
 89a:	2e 96       	adiw	r28, 0x0e	; 14
 89c:	0f b6       	in	r0, 0x3f	; 63
 89e:	f8 94       	cli
 8a0:	de bf       	out	0x3e, r29	; 62
 8a2:	0f be       	out	0x3f, r0	; 63
 8a4:	cd bf       	out	0x3d, r28	; 61
 8a6:	df 91       	pop	r29
 8a8:	cf 91       	pop	r28
 8aa:	08 95       	ret

000008ac <main>:
       _delay_ms(500);
   }

   //show_percent(adcConvert10bit(0));

   /*
   show_percent(25);
   _delay_ms(500);
   show_percent(50);
   _delay_ms(500);
   show_percent(100);
   _delay_ms(500);
   show_percent(75);
   _delay_ms(500);
   show_percent(50);
   */

   //led_alarm(3);

   //test_leds();
   //switch_on_min_dels(5);
   //switch_on_max_dels(3);

	//switch_on_led(3);
	//switch_on_led(5);
	//switch_on_led(7);
	//switch_on_led(8);	
	
	//switch_off_led(5);
}


/*
 * main program
 */
int main(void) {
 8ac:	cf e5       	ldi	r28, 0x5F	; 95
 8ae:	d2 e0       	ldi	r29, 0x02	; 2
 8b0:	de bf       	out	0x3e, r29	; 62
 8b2:	cd bf       	out	0x3d, r28	; 61
   init();
 8b4:	1d df       	rcall	.-454    	; 0x6f0 <init>

   while(1) { // Infinite loop; define here the
      loop(); // system behaviour
 8b6:	8c df       	rcall	.-232    	; 0x7d0 <loop>
 8b8:	fe cf       	rjmp	.-4      	; 0x8b6 <main+0xa>

000008ba <__divsf3>:
 8ba:	bb d0       	rcall	.+374    	; 0xa32 <__fp_split3>
 8bc:	01 d0       	rcall	.+2      	; 0x8c0 <__divsf3x>
 8be:	9e c0       	rjmp	.+316    	; 0x9fc <__fp_merge>

000008c0 <__divsf3x>:
 8c0:	55 23       	and	r21, r21
 8c2:	59 f0       	breq	.+22     	; 0x8da <__divsf3x+0x1a>
 8c4:	99 23       	and	r25, r25
 8c6:	69 f0       	breq	.+26     	; 0x8e2 <__divsf3x+0x22>
 8c8:	9f 57       	subi	r25, 0x7F	; 127
 8ca:	5f 57       	subi	r21, 0x7F	; 127
 8cc:	95 1b       	sub	r25, r21
 8ce:	33 f4       	brvc	.+12     	; 0x8dc <__divsf3x+0x1c>
 8d0:	42 f4       	brpl	.+16     	; 0x8e2 <__divsf3x+0x22>
 8d2:	90 38       	cpi	r25, 0x80	; 128
 8d4:	11 f4       	brne	.+4      	; 0x8da <__divsf3x+0x1a>
 8d6:	91 58       	subi	r25, 0x81	; 129
 8d8:	05 c0       	rjmp	.+10     	; 0x8e4 <__divsf3x+0x24>
 8da:	a8 c0       	rjmp	.+336    	; 0xa2c <__fp_nan>
 8dc:	91 58       	subi	r25, 0x81	; 129
 8de:	9f 3f       	cpi	r25, 0xFF	; 255
 8e0:	09 f4       	brne	.+2      	; 0x8e4 <__divsf3x+0x24>
 8e2:	d3 c0       	rjmp	.+422    	; 0xa8a <__fp_zerox>
 8e4:	bb 27       	eor	r27, r27
 8e6:	11 24       	eor	r1, r1
 8e8:	62 17       	cp	r22, r18
 8ea:	73 07       	cpc	r23, r19
 8ec:	84 07       	cpc	r24, r20
 8ee:	30 f4       	brcc	.+12     	; 0x8fc <__divsf3x+0x3c>
 8f0:	66 0f       	add	r22, r22
 8f2:	77 1f       	adc	r23, r23
 8f4:	88 1f       	adc	r24, r24
 8f6:	bb 1f       	adc	r27, r27
 8f8:	91 50       	subi	r25, 0x01	; 1
 8fa:	98 f3       	brcs	.-26     	; 0x8e2 <__divsf3x+0x22>
 8fc:	11 d0       	rcall	.+34     	; 0x920 <__divsf3x+0x60>
 8fe:	0f 92       	push	r0
 900:	0f d0       	rcall	.+30     	; 0x920 <__divsf3x+0x60>
 902:	0f 92       	push	r0
 904:	0d d0       	rcall	.+26     	; 0x920 <__divsf3x+0x60>
 906:	a0 e8       	ldi	r26, 0x80	; 128
 908:	26 17       	cp	r18, r22
 90a:	37 07       	cpc	r19, r23
 90c:	48 07       	cpc	r20, r24
 90e:	1b 06       	cpc	r1, r27
 910:	09 f0       	breq	.+2      	; 0x914 <__divsf3x+0x54>
 912:	a0 48       	sbci	r26, 0x80	; 128
 914:	ba 2f       	mov	r27, r26
 916:	60 2d       	mov	r22, r0
 918:	7f 91       	pop	r23
 91a:	8f 91       	pop	r24
 91c:	00 24       	eor	r0, r0
 91e:	08 95       	ret
 920:	a0 e8       	ldi	r26, 0x80	; 128
 922:	00 24       	eor	r0, r0
 924:	62 17       	cp	r22, r18
 926:	73 07       	cpc	r23, r19
 928:	84 07       	cpc	r24, r20
 92a:	b1 05       	cpc	r27, r1
 92c:	28 f0       	brcs	.+10     	; 0x938 <__divsf3x+0x78>
 92e:	62 1b       	sub	r22, r18
 930:	73 0b       	sbc	r23, r19
 932:	84 0b       	sbc	r24, r20
 934:	b1 09       	sbc	r27, r1
 936:	0a 2a       	or	r0, r26
 938:	66 0f       	add	r22, r22
 93a:	77 1f       	adc	r23, r23
 93c:	88 1f       	adc	r24, r24
 93e:	bb 1f       	adc	r27, r27
 940:	a6 95       	lsr	r26
 942:	81 f7       	brne	.-32     	; 0x924 <__divsf3x+0x64>
 944:	08 95       	ret

00000946 <__fixsfsi>:
 946:	97 fb       	bst	r25, 7
 948:	80 d0       	rcall	.+256    	; 0xa4a <__fp_split1>
 94a:	9f 37       	cpi	r25, 0x7F	; 127
 94c:	38 f0       	brcs	.+14     	; 0x95c <__fixsfsi+0x16>
 94e:	fe e9       	ldi	r31, 0x9E	; 158
 950:	f9 1b       	sub	r31, r25
 952:	98 2f       	mov	r25, r24
 954:	87 2f       	mov	r24, r23
 956:	76 2f       	mov	r23, r22
 958:	6b 2f       	mov	r22, r27
 95a:	05 c0       	rjmp	.+10     	; 0x966 <__fixsfsi+0x20>
 95c:	93 c0       	rjmp	.+294    	; 0xa84 <__fp_zero>
 95e:	96 95       	lsr	r25
 960:	87 95       	ror	r24
 962:	77 95       	ror	r23
 964:	67 95       	ror	r22
 966:	f1 50       	subi	r31, 0x01	; 1
 968:	d0 f7       	brcc	.-12     	; 0x95e <__fixsfsi+0x18>
 96a:	3e f4       	brtc	.+14     	; 0x97a <__fp_lneg+0xe>

0000096c <__fp_lneg>:
 96c:	90 95       	com	r25
 96e:	80 95       	com	r24
 970:	70 95       	com	r23
 972:	61 95       	neg	r22
 974:	7f 4f       	sbci	r23, 0xFF	; 255
 976:	8f 4f       	sbci	r24, 0xFF	; 255
 978:	9f 4f       	sbci	r25, 0xFF	; 255
 97a:	08 95       	ret

0000097c <floor>:
 97c:	74 d0       	rcall	.+232    	; 0xa66 <__fp_split_a>
 97e:	9f 37       	cpi	r25, 0x7F	; 127
 980:	60 f4       	brcc	.+24     	; 0x99a <floor+0x1e>
 982:	0e f0       	brts	.+2      	; 0x986 <floor+0xa>
 984:	7f c0       	rjmp	.+254    	; 0xa84 <__fp_zero>
 986:	9f eb       	ldi	r25, 0xBF	; 191
 988:	80 e8       	ldi	r24, 0x80	; 128
 98a:	77 27       	eor	r23, r23
 98c:	66 27       	eor	r22, r22
 98e:	08 95       	ret
 990:	86 95       	lsr	r24
 992:	77 95       	ror	r23
 994:	67 95       	ror	r22
 996:	b1 1d       	adc	r27, r1
 998:	93 95       	inc	r25
 99a:	96 39       	cpi	r25, 0x96	; 150
 99c:	c8 f3       	brcs	.-14     	; 0x990 <floor+0x14>
 99e:	2e f4       	brtc	.+10     	; 0x9aa <floor+0x2e>
 9a0:	bb 23       	and	r27, r27
 9a2:	19 f0       	breq	.+6      	; 0x9aa <floor+0x2e>
 9a4:	6f 5f       	subi	r22, 0xFF	; 255
 9a6:	7f 4f       	sbci	r23, 0xFF	; 255
 9a8:	8f 4f       	sbci	r24, 0xFF	; 255
 9aa:	bb 27       	eor	r27, r27
 9ac:	27 c0       	rjmp	.+78     	; 0x9fc <__fp_merge>

000009ae <__eqsf2>:
 9ae:	0e d0       	rcall	.+28     	; 0x9cc <.fp_cmp>
 9b0:	5e f0       	brts	.+22     	; 0x9c8 <__cmpsf2+0xe>
 9b2:	04 c0       	rjmp	.+8      	; 0x9bc <__cmpsf2+0x2>

000009b4 <__gesf2>:
 9b4:	0b d0       	rcall	.+22     	; 0x9cc <.fp_cmp>
 9b6:	26 f0       	brts	.+8      	; 0x9c0 <__cmpsf2+0x6>
 9b8:	01 c0       	rjmp	.+2      	; 0x9bc <__cmpsf2+0x2>

000009ba <__cmpsf2>:
 9ba:	08 d0       	rcall	.+16     	; 0x9cc <.fp_cmp>
 9bc:	19 f0       	breq	.+6      	; 0x9c4 <__cmpsf2+0xa>
 9be:	20 f4       	brcc	.+8      	; 0x9c8 <__cmpsf2+0xe>
 9c0:	8f ef       	ldi	r24, 0xFF	; 255
 9c2:	08 95       	ret
 9c4:	80 e0       	ldi	r24, 0x00	; 0
 9c6:	08 95       	ret
 9c8:	81 e0       	ldi	r24, 0x01	; 1
 9ca:	08 95       	ret

000009cc <.fp_cmp>:
 9cc:	97 fb       	bst	r25, 7
 9ce:	09 2e       	mov	r0, r25
 9d0:	05 26       	eor	r0, r21
 9d2:	00 f8       	bld	r0, 0
 9d4:	68 94       	set
 9d6:	30 d0       	rcall	.+96     	; 0xa38 <__fp_split2>
 9d8:	e8 94       	clt
 9da:	07 fc       	sbrc	r0, 7
 9dc:	07 c0       	rjmp	.+14     	; 0x9ec <.fp_cmp+0x20>
 9de:	62 17       	cp	r22, r18
 9e0:	73 07       	cpc	r23, r19
 9e2:	84 07       	cpc	r24, r20
 9e4:	95 07       	cpc	r25, r21
 9e6:	21 f0       	breq	.+8      	; 0x9f0 <.fp_cmp+0x24>
 9e8:	08 f4       	brcc	.+2      	; 0x9ec <.fp_cmp+0x20>
 9ea:	00 94       	com	r0
 9ec:	07 94       	ror	r0
 9ee:	98 94       	clz
 9f0:	08 95       	ret
 9f2:	9a 95       	dec	r25
 9f4:	bb 0f       	add	r27, r27
 9f6:	66 1f       	adc	r22, r22
 9f8:	77 1f       	adc	r23, r23
 9fa:	88 1f       	adc	r24, r24

000009fc <__fp_merge>:
 9fc:	11 24       	eor	r1, r1
 9fe:	99 23       	and	r25, r25
 a00:	a1 f0       	breq	.+40     	; 0xa2a <__fp_merge+0x2e>
 a02:	88 23       	and	r24, r24
 a04:	b2 f7       	brpl	.-20     	; 0x9f2 <.fp_cmp+0x26>
 a06:	9f 3f       	cpi	r25, 0xFF	; 255
 a08:	59 f0       	breq	.+22     	; 0xa20 <__fp_merge+0x24>
 a0a:	bb 0f       	add	r27, r27
 a0c:	48 f4       	brcc	.+18     	; 0xa20 <__fp_merge+0x24>
 a0e:	21 f4       	brne	.+8      	; 0xa18 <__fp_merge+0x1c>
 a10:	00 20       	and	r0, r0
 a12:	11 f4       	brne	.+4      	; 0xa18 <__fp_merge+0x1c>
 a14:	60 ff       	sbrs	r22, 0
 a16:	04 c0       	rjmp	.+8      	; 0xa20 <__fp_merge+0x24>
 a18:	6f 5f       	subi	r22, 0xFF	; 255
 a1a:	7f 4f       	sbci	r23, 0xFF	; 255
 a1c:	8f 4f       	sbci	r24, 0xFF	; 255
 a1e:	9f 4f       	sbci	r25, 0xFF	; 255
 a20:	88 1f       	adc	r24, r24
 a22:	97 95       	ror	r25
 a24:	87 95       	ror	r24
 a26:	97 f9       	bld	r25, 7
 a28:	08 95       	ret
 a2a:	2c c0       	rjmp	.+88     	; 0xa84 <__fp_zero>

00000a2c <__fp_nan>:
 a2c:	9f ef       	ldi	r25, 0xFF	; 255
 a2e:	80 ec       	ldi	r24, 0xC0	; 192
 a30:	08 95       	ret

00000a32 <__fp_split3>:
 a32:	05 2e       	mov	r0, r21
 a34:	09 26       	eor	r0, r25
 a36:	07 fa       	bst	r0, 7

00000a38 <__fp_split2>:
 a38:	44 0f       	add	r20, r20
 a3a:	55 1f       	adc	r21, r21
 a3c:	5f 3f       	cpi	r21, 0xFF	; 255
 a3e:	79 f0       	breq	.+30     	; 0xa5e <__fp_split1+0x14>
 a40:	aa 27       	eor	r26, r26
 a42:	a5 17       	cp	r26, r21
 a44:	08 f0       	brcs	.+2      	; 0xa48 <__fp_split2+0x10>
 a46:	51 e0       	ldi	r21, 0x01	; 1
 a48:	47 95       	ror	r20

00000a4a <__fp_split1>:
 a4a:	88 0f       	add	r24, r24
 a4c:	99 1f       	adc	r25, r25
 a4e:	9f 3f       	cpi	r25, 0xFF	; 255
 a50:	31 f0       	breq	.+12     	; 0xa5e <__fp_split1+0x14>
 a52:	bb 27       	eor	r27, r27
 a54:	b9 17       	cp	r27, r25
 a56:	08 f0       	brcs	.+2      	; 0xa5a <__fp_split1+0x10>
 a58:	91 e0       	ldi	r25, 0x01	; 1
 a5a:	87 95       	ror	r24
 a5c:	08 95       	ret
 a5e:	9f 91       	pop	r25
 a60:	9f 91       	pop	r25
 a62:	11 24       	eor	r1, r1
 a64:	e3 cf       	rjmp	.-58     	; 0xa2c <__fp_nan>

00000a66 <__fp_split_a>:
 a66:	97 fb       	bst	r25, 7
 a68:	88 0f       	add	r24, r24
 a6a:	99 1f       	adc	r25, r25
 a6c:	9f 3f       	cpi	r25, 0xFF	; 255
 a6e:	31 f0       	breq	.+12     	; 0xa7c <__fp_split_a+0x16>
 a70:	bb 27       	eor	r27, r27
 a72:	b9 17       	cp	r27, r25
 a74:	08 f0       	brcs	.+2      	; 0xa78 <__fp_split_a+0x12>
 a76:	91 e0       	ldi	r25, 0x01	; 1
 a78:	87 95       	ror	r24
 a7a:	08 95       	ret
 a7c:	9f 91       	pop	r25
 a7e:	9f 91       	pop	r25
 a80:	11 24       	eor	r1, r1
 a82:	d4 cf       	rjmp	.-88     	; 0xa2c <__fp_nan>

00000a84 <__fp_zero>:
 a84:	66 27       	eor	r22, r22
 a86:	77 27       	eor	r23, r23
 a88:	88 27       	eor	r24, r24

00000a8a <__fp_zerox>:
 a8a:	99 27       	eor	r25, r25
 a8c:	08 95       	ret

00000a8e <__mulsf3>:
 a8e:	d1 df       	rcall	.-94     	; 0xa32 <__fp_split3>
 a90:	01 d0       	rcall	.+2      	; 0xa94 <__mulsf3x>
 a92:	b4 cf       	rjmp	.-152    	; 0x9fc <__fp_merge>

00000a94 <__mulsf3x>:
 a94:	99 23       	and	r25, r25
 a96:	39 f0       	breq	.+14     	; 0xaa6 <__mulsf3x+0x12>
 a98:	55 23       	and	r21, r21
 a9a:	29 f0       	breq	.+10     	; 0xaa6 <__mulsf3x+0x12>
 a9c:	9f 57       	subi	r25, 0x7F	; 127
 a9e:	5f 57       	subi	r21, 0x7F	; 127
 aa0:	95 0f       	add	r25, r21
 aa2:	13 f4       	brvc	.+4      	; 0xaa8 <__mulsf3x+0x14>
 aa4:	9a f1       	brmi	.+102    	; 0xb0c <__mulsf3x+0x78>
 aa6:	f1 cf       	rjmp	.-30     	; 0xa8a <__fp_zerox>
 aa8:	91 58       	subi	r25, 0x81	; 129
 aaa:	9f 3f       	cpi	r25, 0xFF	; 255
 aac:	e1 f3       	breq	.-8      	; 0xaa6 <__mulsf3x+0x12>
 aae:	62 9f       	mul	r22, r18
 ab0:	a1 2d       	mov	r26, r1
 ab2:	0f 92       	push	r0
 ab4:	bb 27       	eor	r27, r27
 ab6:	63 9f       	mul	r22, r19
 ab8:	a0 0d       	add	r26, r0
 aba:	b1 1d       	adc	r27, r1
 abc:	ee 27       	eor	r30, r30
 abe:	72 9f       	mul	r23, r18
 ac0:	a0 0d       	add	r26, r0
 ac2:	b1 1d       	adc	r27, r1
 ac4:	ee 1f       	adc	r30, r30
 ac6:	af 93       	push	r26
 ac8:	aa 27       	eor	r26, r26
 aca:	64 9f       	mul	r22, r20
 acc:	b0 0d       	add	r27, r0
 ace:	e1 1d       	adc	r30, r1
 ad0:	73 9f       	mul	r23, r19
 ad2:	b0 0d       	add	r27, r0
 ad4:	e1 1d       	adc	r30, r1
 ad6:	aa 1f       	adc	r26, r26
 ad8:	66 27       	eor	r22, r22
 ada:	82 9f       	mul	r24, r18
 adc:	b0 0d       	add	r27, r0
 ade:	e1 1d       	adc	r30, r1
 ae0:	a6 1f       	adc	r26, r22
 ae2:	55 27       	eor	r21, r21
 ae4:	74 9f       	mul	r23, r20
 ae6:	e0 0d       	add	r30, r0
 ae8:	a1 1d       	adc	r26, r1
 aea:	55 1f       	adc	r21, r21
 aec:	83 9f       	mul	r24, r19
 aee:	e0 0d       	add	r30, r0
 af0:	a1 1d       	adc	r26, r1
 af2:	56 1f       	adc	r21, r22
 af4:	84 9f       	mul	r24, r20
 af6:	a0 0d       	add	r26, r0
 af8:	51 1d       	adc	r21, r1
 afa:	85 2f       	mov	r24, r21
 afc:	7a 2f       	mov	r23, r26
 afe:	6e 2f       	mov	r22, r30
 b00:	1f 90       	pop	r1
 b02:	0f 90       	pop	r0
 b04:	88 23       	and	r24, r24
 b06:	1a f4       	brpl	.+6      	; 0xb0e <__mulsf3x+0x7a>
 b08:	93 95       	inc	r25
 b0a:	39 f4       	brne	.+14     	; 0xb1a <__mulsf3x+0x86>
 b0c:	8f cf       	rjmp	.-226    	; 0xa2c <__fp_nan>
 b0e:	00 0c       	add	r0, r0
 b10:	11 1c       	adc	r1, r1
 b12:	bb 1f       	adc	r27, r27
 b14:	66 1f       	adc	r22, r22
 b16:	77 1f       	adc	r23, r23
 b18:	88 1f       	adc	r24, r24
 b1a:	01 28       	or	r0, r1
 b1c:	08 95       	ret
