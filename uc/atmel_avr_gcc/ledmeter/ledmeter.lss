
ledmeter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000019dc  00000000  00000000  00000094  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  000019dc  00001a70  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000016  0080007c  0080007c  00001a8c  2**0
                  ALLOC
  3 .noinit       00000000  00800092  00800092  00001a8c  2**0
                  CONTENTS
  4 .eeprom       00000000  00810000  00810000  00001a8c  2**0
                  CONTENTS
  5 .stab         00001cb0  00000000  00000000  00001a8c  2**2
                  CONTENTS, READONLY, DEBUGGING
  6 .stabstr      00000d58  00000000  00000000  0000373c  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
       0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
       2:	f6 c7       	rjmp	.+4076   	; 0xff0 <__vector_1>
       4:	2c c0       	rjmp	.+88     	; 0x5e <__bad_interrupt>
       6:	2b c0       	rjmp	.+86     	; 0x5e <__bad_interrupt>
       8:	2a c0       	rjmp	.+84     	; 0x5e <__bad_interrupt>
       a:	29 c0       	rjmp	.+82     	; 0x5e <__bad_interrupt>
       c:	28 c0       	rjmp	.+80     	; 0x5e <__bad_interrupt>
       e:	27 c0       	rjmp	.+78     	; 0x5e <__bad_interrupt>
      10:	26 c0       	rjmp	.+76     	; 0x5e <__bad_interrupt>
      12:	25 c0       	rjmp	.+74     	; 0x5e <__bad_interrupt>
      14:	24 c0       	rjmp	.+72     	; 0x5e <__bad_interrupt>
      16:	23 c0       	rjmp	.+70     	; 0x5e <__bad_interrupt>
      18:	22 c0       	rjmp	.+68     	; 0x5e <__bad_interrupt>
      1a:	21 c0       	rjmp	.+66     	; 0x5e <__bad_interrupt>
      1c:	20 c0       	rjmp	.+64     	; 0x5e <__bad_interrupt>
      1e:	1f c0       	rjmp	.+62     	; 0x5e <__bad_interrupt>
      20:	1e c0       	rjmp	.+60     	; 0x5e <__bad_interrupt>
      22:	1d c0       	rjmp	.+58     	; 0x5e <__bad_interrupt>
      24:	1c c0       	rjmp	.+56     	; 0x5e <__bad_interrupt>
      26:	1b c0       	rjmp	.+54     	; 0x5e <__bad_interrupt>
      28:	1a c0       	rjmp	.+52     	; 0x5e <__bad_interrupt>

0000002a <__ctors_end>:
      2a:	11 24       	eor	r1, r1
      2c:	1f be       	out	0x3f, r1	; 63
      2e:	cf e5       	ldi	r28, 0x5F	; 95
      30:	d2 e0       	ldi	r29, 0x02	; 2
      32:	de bf       	out	0x3e, r29	; 62
      34:	cd bf       	out	0x3d, r28	; 61

00000036 <__do_copy_data>:
      36:	10 e0       	ldi	r17, 0x00	; 0
      38:	a0 e6       	ldi	r26, 0x60	; 96
      3a:	b0 e0       	ldi	r27, 0x00	; 0
      3c:	ec ed       	ldi	r30, 0xDC	; 220
      3e:	f9 e1       	ldi	r31, 0x19	; 25
      40:	02 c0       	rjmp	.+4      	; 0x46 <.do_copy_data_start>

00000042 <.do_copy_data_loop>:
      42:	05 90       	lpm	r0, Z+
      44:	0d 92       	st	X+, r0

00000046 <.do_copy_data_start>:
      46:	ac 37       	cpi	r26, 0x7C	; 124
      48:	b1 07       	cpc	r27, r17
      4a:	d9 f7       	brne	.-10     	; 0x42 <.do_copy_data_loop>

0000004c <__do_clear_bss>:
      4c:	10 e0       	ldi	r17, 0x00	; 0
      4e:	ac e7       	ldi	r26, 0x7C	; 124
      50:	b0 e0       	ldi	r27, 0x00	; 0
      52:	01 c0       	rjmp	.+2      	; 0x56 <.do_clear_bss_start>

00000054 <.do_clear_bss_loop>:
      54:	1d 92       	st	X+, r1

00000056 <.do_clear_bss_start>:
      56:	a2 39       	cpi	r26, 0x92	; 146
      58:	b1 07       	cpc	r27, r17
      5a:	e1 f7       	brne	.-8      	; 0x54 <.do_clear_bss_loop>
      5c:	c2 c7       	rjmp	.+3972   	; 0xfe2 <main>

0000005e <__bad_interrupt>:
      5e:	d0 cf       	rjmp	.-96     	; 0x0 <__vectors>

00000060 <init_time>:
time_typ current_time;
time_typ last_time;
time_typ best_time;

void init_time(time_typ * time) {
      60:	cf 93       	push	r28
      62:	df 93       	push	r29
      64:	cd b7       	in	r28, 0x3d	; 61
      66:	de b7       	in	r29, 0x3e	; 62
      68:	22 97       	sbiw	r28, 0x02	; 2
      6a:	0f b6       	in	r0, 0x3f	; 63
      6c:	f8 94       	cli
      6e:	de bf       	out	0x3e, r29	; 62
      70:	0f be       	out	0x3f, r0	; 63
      72:	cd bf       	out	0x3d, r28	; 61
      74:	9a 83       	std	Y+2, r25	; 0x02
      76:	89 83       	std	Y+1, r24	; 0x01
    time->hh = 0;
      78:	e9 81       	ldd	r30, Y+1	; 0x01
      7a:	fa 81       	ldd	r31, Y+2	; 0x02
      7c:	10 82       	st	Z, r1
    time->mm = 0;
      7e:	e9 81       	ldd	r30, Y+1	; 0x01
      80:	fa 81       	ldd	r31, Y+2	; 0x02
      82:	11 82       	std	Z+1, r1	; 0x01
    time->ss = 0;
      84:	e9 81       	ldd	r30, Y+1	; 0x01
      86:	fa 81       	ldd	r31, Y+2	; 0x02
      88:	12 82       	std	Z+2, r1	; 0x02
    time->xx = 0;
      8a:	e9 81       	ldd	r30, Y+1	; 0x01
      8c:	fa 81       	ldd	r31, Y+2	; 0x02
      8e:	14 82       	std	Z+4, r1	; 0x04
      90:	13 82       	std	Z+3, r1	; 0x03
      92:	22 96       	adiw	r28, 0x02	; 2
      94:	0f b6       	in	r0, 0x3f	; 63
      96:	f8 94       	cli
      98:	de bf       	out	0x3e, r29	; 62
      9a:	0f be       	out	0x3f, r0	; 63
      9c:	cd bf       	out	0x3d, r28	; 61
      9e:	df 91       	pop	r29
      a0:	cf 91       	pop	r28
      a2:	08 95       	ret

000000a4 <def_time>:
}

void def_time(time_typ * time, uint8_t _hh, uint8_t _mm, uint8_t _ss, unsigned short int _xx) {
      a4:	0f 93       	push	r16
      a6:	1f 93       	push	r17
      a8:	cf 93       	push	r28
      aa:	df 93       	push	r29
      ac:	cd b7       	in	r28, 0x3d	; 61
      ae:	de b7       	in	r29, 0x3e	; 62
      b0:	27 97       	sbiw	r28, 0x07	; 7
      b2:	0f b6       	in	r0, 0x3f	; 63
      b4:	f8 94       	cli
      b6:	de bf       	out	0x3e, r29	; 62
      b8:	0f be       	out	0x3f, r0	; 63
      ba:	cd bf       	out	0x3d, r28	; 61
      bc:	9a 83       	std	Y+2, r25	; 0x02
      be:	89 83       	std	Y+1, r24	; 0x01
      c0:	6b 83       	std	Y+3, r22	; 0x03
      c2:	4c 83       	std	Y+4, r20	; 0x04
      c4:	2d 83       	std	Y+5, r18	; 0x05
      c6:	1f 83       	std	Y+7, r17	; 0x07
      c8:	0e 83       	std	Y+6, r16	; 0x06
    time->hh = _hh;
      ca:	e9 81       	ldd	r30, Y+1	; 0x01
      cc:	fa 81       	ldd	r31, Y+2	; 0x02
      ce:	8b 81       	ldd	r24, Y+3	; 0x03
      d0:	80 83       	st	Z, r24
    time->mm = _mm;
      d2:	e9 81       	ldd	r30, Y+1	; 0x01
      d4:	fa 81       	ldd	r31, Y+2	; 0x02
      d6:	8c 81       	ldd	r24, Y+4	; 0x04
      d8:	81 83       	std	Z+1, r24	; 0x01
    time->ss = _ss;
      da:	e9 81       	ldd	r30, Y+1	; 0x01
      dc:	fa 81       	ldd	r31, Y+2	; 0x02
      de:	8d 81       	ldd	r24, Y+5	; 0x05
      e0:	82 83       	std	Z+2, r24	; 0x02
    time->xx = _xx;
      e2:	e9 81       	ldd	r30, Y+1	; 0x01
      e4:	fa 81       	ldd	r31, Y+2	; 0x02
      e6:	8e 81       	ldd	r24, Y+6	; 0x06
      e8:	9f 81       	ldd	r25, Y+7	; 0x07
      ea:	94 83       	std	Z+4, r25	; 0x04
      ec:	83 83       	std	Z+3, r24	; 0x03
      ee:	27 96       	adiw	r28, 0x07	; 7
      f0:	0f b6       	in	r0, 0x3f	; 63
      f2:	f8 94       	cli
      f4:	de bf       	out	0x3e, r29	; 62
      f6:	0f be       	out	0x3f, r0	; 63
      f8:	cd bf       	out	0x3d, r28	; 61
      fa:	df 91       	pop	r29
      fc:	cf 91       	pop	r28
      fe:	1f 91       	pop	r17
     100:	0f 91       	pop	r16
     102:	08 95       	ret

00000104 <print_time>:
}

void print_time(time_typ * t) {
     104:	cf 93       	push	r28
     106:	df 93       	push	r29
     108:	cd b7       	in	r28, 0x3d	; 61
     10a:	de b7       	in	r29, 0x3e	; 62
     10c:	22 97       	sbiw	r28, 0x02	; 2
     10e:	0f b6       	in	r0, 0x3f	; 63
     110:	f8 94       	cli
     112:	de bf       	out	0x3e, r29	; 62
     114:	0f be       	out	0x3f, r0	; 63
     116:	cd bf       	out	0x3d, r28	; 61
     118:	9a 83       	std	Y+2, r25	; 0x02
     11a:	89 83       	std	Y+1, r24	; 0x01
    //printf("===%02i:%02i:%02i:%03u===\n",t->hh,t->mm,t->ss,t->xx/10);
    printf("===%02i:%02i:%02i:%03u===\n",t->hh,t->mm,t->ss,t->xx/((int) pow(10,CHR_PRECISION-CHR_DISPLAY)));
     11c:	e9 81       	ldd	r30, Y+1	; 0x01
     11e:	fa 81       	ldd	r31, Y+2	; 0x02
     120:	83 81       	ldd	r24, Z+3	; 0x03
     122:	94 81       	ldd	r25, Z+4	; 0x04
     124:	2a e0       	ldi	r18, 0x0A	; 10
     126:	30 e0       	ldi	r19, 0x00	; 0
     128:	b9 01       	movw	r22, r18
     12a:	eb db       	rcall	.-2090   	; 0xfffff902 <__eeprom_end+0xff7ef902>
     12c:	cb 01       	movw	r24, r22
     12e:	9f 93       	push	r25
     130:	8f 93       	push	r24
     132:	e9 81       	ldd	r30, Y+1	; 0x01
     134:	fa 81       	ldd	r31, Y+2	; 0x02
     136:	82 81       	ldd	r24, Z+2	; 0x02
     138:	99 27       	eor	r25, r25
     13a:	9f 93       	push	r25
     13c:	8f 93       	push	r24
     13e:	e9 81       	ldd	r30, Y+1	; 0x01
     140:	fa 81       	ldd	r31, Y+2	; 0x02
     142:	81 81       	ldd	r24, Z+1	; 0x01
     144:	99 27       	eor	r25, r25
     146:	9f 93       	push	r25
     148:	8f 93       	push	r24
     14a:	e9 81       	ldd	r30, Y+1	; 0x01
     14c:	fa 81       	ldd	r31, Y+2	; 0x02
     14e:	80 81       	ld	r24, Z
     150:	99 27       	eor	r25, r25
     152:	9f 93       	push	r25
     154:	8f 93       	push	r24
     156:	80 e6       	ldi	r24, 0x60	; 96
     158:	90 e0       	ldi	r25, 0x00	; 0
     15a:	9f 93       	push	r25
     15c:	8f 93       	push	r24
     15e:	71 d7       	rcall	.+3810   	; 0x1042 <printf>
     160:	8d b7       	in	r24, 0x3d	; 61
     162:	9e b7       	in	r25, 0x3e	; 62
     164:	0a 96       	adiw	r24, 0x0a	; 10
     166:	0f b6       	in	r0, 0x3f	; 63
     168:	f8 94       	cli
     16a:	9e bf       	out	0x3e, r25	; 62
     16c:	0f be       	out	0x3f, r0	; 63
     16e:	8d bf       	out	0x3d, r24	; 61
     170:	22 96       	adiw	r28, 0x02	; 2
     172:	0f b6       	in	r0, 0x3f	; 63
     174:	f8 94       	cli
     176:	de bf       	out	0x3e, r29	; 62
     178:	0f be       	out	0x3f, r0	; 63
     17a:	cd bf       	out	0x3d, r28	; 61
     17c:	df 91       	pop	r29
     17e:	cf 91       	pop	r28
     180:	08 95       	ret

00000182 <inc_time>:
}

void inc_time(time_typ * time) {
     182:	0f 93       	push	r16
     184:	1f 93       	push	r17
     186:	cf 93       	push	r28
     188:	df 93       	push	r29
     18a:	cd b7       	in	r28, 0x3d	; 61
     18c:	de b7       	in	r29, 0x3e	; 62
     18e:	26 97       	sbiw	r28, 0x06	; 6
     190:	0f b6       	in	r0, 0x3f	; 63
     192:	f8 94       	cli
     194:	de bf       	out	0x3e, r29	; 62
     196:	0f be       	out	0x3f, r0	; 63
     198:	cd bf       	out	0x3d, r28	; 61
     19a:	9a 83       	std	Y+2, r25	; 0x02
     19c:	89 83       	std	Y+1, r24	; 0x01
  if (running_chronometer) {
     19e:	80 91 7c 00 	lds	r24, 0x007C
     1a2:	88 23       	and	r24, r24
     1a4:	09 f4       	brne	.+2      	; 0x1a8 <inc_time+0x26>
     1a6:	6d c0       	rjmp	.+218    	; 0x282 <__stack+0x23>
    time->xx++;
     1a8:	a9 81       	ldd	r26, Y+1	; 0x01
     1aa:	ba 81       	ldd	r27, Y+2	; 0x02
     1ac:	e9 81       	ldd	r30, Y+1	; 0x01
     1ae:	fa 81       	ldd	r31, Y+2	; 0x02
     1b0:	83 81       	ldd	r24, Z+3	; 0x03
     1b2:	94 81       	ldd	r25, Z+4	; 0x04
     1b4:	01 96       	adiw	r24, 0x01	; 1
     1b6:	fd 01       	movw	r30, r26
     1b8:	94 83       	std	Z+4, r25	; 0x04
     1ba:	83 83       	std	Z+3, r24	; 0x03
    if(time->xx >= pow(10,CHR_PRECISION)) {
     1bc:	09 81       	ldd	r16, Y+1	; 0x01
     1be:	1a 81       	ldd	r17, Y+2	; 0x02
     1c0:	f8 01       	movw	r30, r16
     1c2:	83 81       	ldd	r24, Z+3	; 0x03
     1c4:	94 81       	ldd	r25, Z+4	; 0x04
     1c6:	aa 27       	eor	r26, r26
     1c8:	97 fd       	sbrc	r25, 7
     1ca:	a0 95       	com	r26
     1cc:	ba 2f       	mov	r27, r26
     1ce:	bc 01       	movw	r22, r24
     1d0:	cd 01       	movw	r24, r26
     1d2:	bc da       	rcall	.-2696   	; 0xfffff74c <__eeprom_end+0xff7ef74c>
     1d4:	6b 83       	std	Y+3, r22	; 0x03
     1d6:	7c 83       	std	Y+4, r23	; 0x04
     1d8:	8d 83       	std	Y+5, r24	; 0x05
     1da:	9e 83       	std	Y+6, r25	; 0x06
     1dc:	f8 01       	movw	r30, r16
     1de:	83 81       	ldd	r24, Z+3	; 0x03
     1e0:	94 81       	ldd	r25, Z+4	; 0x04
     1e2:	99 23       	and	r25, r25
     1e4:	7c f4       	brge	.+30     	; 0x204 <inc_time+0x82>
     1e6:	20 e0       	ldi	r18, 0x00	; 0
     1e8:	30 e0       	ldi	r19, 0x00	; 0
     1ea:	40 e8       	ldi	r20, 0x80	; 128
     1ec:	57 e4       	ldi	r21, 0x47	; 71
     1ee:	6b 81       	ldd	r22, Y+3	; 0x03
     1f0:	7c 81       	ldd	r23, Y+4	; 0x04
     1f2:	8d 81       	ldd	r24, Y+5	; 0x05
     1f4:	9e 81       	ldd	r25, Y+6	; 0x06
     1f6:	05 da       	rcall	.-3062   	; 0xfffff602 <__eeprom_end+0xff7ef602>
     1f8:	dc 01       	movw	r26, r24
     1fa:	cb 01       	movw	r24, r22
     1fc:	8b 83       	std	Y+3, r24	; 0x03
     1fe:	9c 83       	std	Y+4, r25	; 0x04
     200:	ad 83       	std	Y+5, r26	; 0x05
     202:	be 83       	std	Y+6, r27	; 0x06
     204:	20 e0       	ldi	r18, 0x00	; 0
     206:	30 e4       	ldi	r19, 0x40	; 64
     208:	4c e1       	ldi	r20, 0x1C	; 28
     20a:	56 e4       	ldi	r21, 0x46	; 70
     20c:	6b 81       	ldd	r22, Y+3	; 0x03
     20e:	7c 81       	ldd	r23, Y+4	; 0x04
     210:	8d 81       	ldd	r24, Y+5	; 0x05
     212:	9e 81       	ldd	r25, Y+6	; 0x06
     214:	c1 da       	rcall	.-2686   	; 0xfffff798 <__eeprom_end+0xff7ef798>
     216:	88 23       	and	r24, r24
     218:	0c f4       	brge	.+2      	; 0x21c <inc_time+0x9a>
     21a:	33 c0       	rjmp	.+102    	; 0x282 <__stack+0x23>
        time->xx = 0;
     21c:	e9 81       	ldd	r30, Y+1	; 0x01
     21e:	fa 81       	ldd	r31, Y+2	; 0x02
     220:	14 82       	std	Z+4, r1	; 0x04
     222:	13 82       	std	Z+3, r1	; 0x03
        time->ss++;
     224:	a9 81       	ldd	r26, Y+1	; 0x01
     226:	ba 81       	ldd	r27, Y+2	; 0x02
     228:	e9 81       	ldd	r30, Y+1	; 0x01
     22a:	fa 81       	ldd	r31, Y+2	; 0x02
     22c:	82 81       	ldd	r24, Z+2	; 0x02
     22e:	8f 5f       	subi	r24, 0xFF	; 255
     230:	fd 01       	movw	r30, r26
     232:	82 83       	std	Z+2, r24	; 0x02
        if (time->ss >= 60) {
     234:	e9 81       	ldd	r30, Y+1	; 0x01
     236:	fa 81       	ldd	r31, Y+2	; 0x02
     238:	82 81       	ldd	r24, Z+2	; 0x02
     23a:	8c 33       	cpi	r24, 0x3C	; 60
     23c:	10 f1       	brcs	.+68     	; 0x282 <__stack+0x23>
            time->ss = 0;
     23e:	e9 81       	ldd	r30, Y+1	; 0x01
     240:	fa 81       	ldd	r31, Y+2	; 0x02
     242:	12 82       	std	Z+2, r1	; 0x02
            time->mm++;
     244:	a9 81       	ldd	r26, Y+1	; 0x01
     246:	ba 81       	ldd	r27, Y+2	; 0x02
     248:	e9 81       	ldd	r30, Y+1	; 0x01
     24a:	fa 81       	ldd	r31, Y+2	; 0x02
     24c:	81 81       	ldd	r24, Z+1	; 0x01
     24e:	8f 5f       	subi	r24, 0xFF	; 255
     250:	fd 01       	movw	r30, r26
     252:	81 83       	std	Z+1, r24	; 0x01
            if (time->mm >= 60) {
     254:	e9 81       	ldd	r30, Y+1	; 0x01
     256:	fa 81       	ldd	r31, Y+2	; 0x02
     258:	81 81       	ldd	r24, Z+1	; 0x01
     25a:	8c 33       	cpi	r24, 0x3C	; 60
     25c:	90 f0       	brcs	.+36     	; 0x282 <__stack+0x23>
                time->mm = 0;
     25e:	e9 81       	ldd	r30, Y+1	; 0x01
     260:	fa 81       	ldd	r31, Y+2	; 0x02
     262:	11 82       	std	Z+1, r1	; 0x01
                time->hh++;
     264:	a9 81       	ldd	r26, Y+1	; 0x01
     266:	ba 81       	ldd	r27, Y+2	; 0x02
     268:	e9 81       	ldd	r30, Y+1	; 0x01
     26a:	fa 81       	ldd	r31, Y+2	; 0x02
     26c:	80 81       	ld	r24, Z
     26e:	8f 5f       	subi	r24, 0xFF	; 255
     270:	8c 93       	st	X, r24
                if (time->hh >= 24) {
     272:	e9 81       	ldd	r30, Y+1	; 0x01
     274:	fa 81       	ldd	r31, Y+2	; 0x02
     276:	80 81       	ld	r24, Z
     278:	88 31       	cpi	r24, 0x18	; 24
     27a:	18 f0       	brcs	.+6      	; 0x282 <__stack+0x23>
                    time->hh = 0;
     27c:	e9 81       	ldd	r30, Y+1	; 0x01
     27e:	fa 81       	ldd	r31, Y+2	; 0x02
     280:	10 82       	st	Z, r1
     282:	26 96       	adiw	r28, 0x06	; 6
     284:	0f b6       	in	r0, 0x3f	; 63
     286:	f8 94       	cli
     288:	de bf       	out	0x3e, r29	; 62
     28a:	0f be       	out	0x3f, r0	; 63
     28c:	cd bf       	out	0x3d, r28	; 61
     28e:	df 91       	pop	r29
     290:	cf 91       	pop	r28
     292:	1f 91       	pop	r17
     294:	0f 91       	pop	r16
     296:	08 95       	ret

00000298 <copy_time>:
					 }
            }
        }
    }
    //_delay_ms(1);
  }
}

void copy_time(time_typ * time_source, time_typ * time_dest) { // TO TEST (pointer ?)
     298:	cf 93       	push	r28
     29a:	df 93       	push	r29
     29c:	cd b7       	in	r28, 0x3d	; 61
     29e:	de b7       	in	r29, 0x3e	; 62
     2a0:	24 97       	sbiw	r28, 0x04	; 4
     2a2:	0f b6       	in	r0, 0x3f	; 63
     2a4:	f8 94       	cli
     2a6:	de bf       	out	0x3e, r29	; 62
     2a8:	0f be       	out	0x3f, r0	; 63
     2aa:	cd bf       	out	0x3d, r28	; 61
     2ac:	9a 83       	std	Y+2, r25	; 0x02
     2ae:	89 83       	std	Y+1, r24	; 0x01
     2b0:	7c 83       	std	Y+4, r23	; 0x04
     2b2:	6b 83       	std	Y+3, r22	; 0x03
    time_dest->hh = time_source->hh;
     2b4:	ab 81       	ldd	r26, Y+3	; 0x03
     2b6:	bc 81       	ldd	r27, Y+4	; 0x04
     2b8:	e9 81       	ldd	r30, Y+1	; 0x01
     2ba:	fa 81       	ldd	r31, Y+2	; 0x02
     2bc:	80 81       	ld	r24, Z
     2be:	8c 93       	st	X, r24
    time_dest->mm = time_source->mm;
     2c0:	ab 81       	ldd	r26, Y+3	; 0x03
     2c2:	bc 81       	ldd	r27, Y+4	; 0x04
     2c4:	e9 81       	ldd	r30, Y+1	; 0x01
     2c6:	fa 81       	ldd	r31, Y+2	; 0x02
     2c8:	81 81       	ldd	r24, Z+1	; 0x01
     2ca:	fd 01       	movw	r30, r26
     2cc:	81 83       	std	Z+1, r24	; 0x01
    time_dest->ss = time_source->ss;
     2ce:	ab 81       	ldd	r26, Y+3	; 0x03
     2d0:	bc 81       	ldd	r27, Y+4	; 0x04
     2d2:	e9 81       	ldd	r30, Y+1	; 0x01
     2d4:	fa 81       	ldd	r31, Y+2	; 0x02
     2d6:	82 81       	ldd	r24, Z+2	; 0x02
     2d8:	fd 01       	movw	r30, r26
     2da:	82 83       	std	Z+2, r24	; 0x02
    time_dest->xx = time_source->xx;
     2dc:	ab 81       	ldd	r26, Y+3	; 0x03
     2de:	bc 81       	ldd	r27, Y+4	; 0x04
     2e0:	e9 81       	ldd	r30, Y+1	; 0x01
     2e2:	fa 81       	ldd	r31, Y+2	; 0x02
     2e4:	83 81       	ldd	r24, Z+3	; 0x03
     2e6:	94 81       	ldd	r25, Z+4	; 0x04
     2e8:	fd 01       	movw	r30, r26
     2ea:	94 83       	std	Z+4, r25	; 0x04
     2ec:	83 83       	std	Z+3, r24	; 0x03
     2ee:	24 96       	adiw	r28, 0x04	; 4
     2f0:	0f b6       	in	r0, 0x3f	; 63
     2f2:	f8 94       	cli
     2f4:	de bf       	out	0x3e, r29	; 62
     2f6:	0f be       	out	0x3f, r0	; 63
     2f8:	cd bf       	out	0x3d, r28	; 61
     2fa:	df 91       	pop	r29
     2fc:	cf 91       	pop	r28
     2fe:	08 95       	ret

00000300 <compare_time>:
}

uint8_t compare_time(time_typ * time1, time_typ * time2) {
     300:	cf 93       	push	r28
     302:	df 93       	push	r29
     304:	cd b7       	in	r28, 0x3d	; 61
     306:	de b7       	in	r29, 0x3e	; 62
     308:	25 97       	sbiw	r28, 0x05	; 5
     30a:	0f b6       	in	r0, 0x3f	; 63
     30c:	f8 94       	cli
     30e:	de bf       	out	0x3e, r29	; 62
     310:	0f be       	out	0x3f, r0	; 63
     312:	cd bf       	out	0x3d, r28	; 61
     314:	9a 83       	std	Y+2, r25	; 0x02
     316:	89 83       	std	Y+1, r24	; 0x01
     318:	7c 83       	std	Y+4, r23	; 0x04
     31a:	6b 83       	std	Y+3, r22	; 0x03
    uint8_t result = 0;
     31c:	1d 82       	std	Y+5, r1	; 0x05

    if (time1->hh > time2->hh) {
     31e:	e9 81       	ldd	r30, Y+1	; 0x01
     320:	fa 81       	ldd	r31, Y+2	; 0x02
     322:	ab 81       	ldd	r26, Y+3	; 0x03
     324:	bc 81       	ldd	r27, Y+4	; 0x04
     326:	90 81       	ld	r25, Z
     328:	8c 91       	ld	r24, X
     32a:	89 17       	cp	r24, r25
     32c:	18 f4       	brcc	.+6      	; 0x334 <compare_time+0x34>
        result = 2;
     32e:	82 e0       	ldi	r24, 0x02	; 2
     330:	8d 83       	std	Y+5, r24	; 0x05
     332:	5a c0       	rjmp	.+180    	; 0x3e8 <compare_time+0xe8>
    }
    else if (time1->hh < time2->hh) {
     334:	e9 81       	ldd	r30, Y+1	; 0x01
     336:	fa 81       	ldd	r31, Y+2	; 0x02
     338:	ab 81       	ldd	r26, Y+3	; 0x03
     33a:	bc 81       	ldd	r27, Y+4	; 0x04
     33c:	90 81       	ld	r25, Z
     33e:	8c 91       	ld	r24, X
     340:	98 17       	cp	r25, r24
     342:	18 f4       	brcc	.+6      	; 0x34a <compare_time+0x4a>
        result = 1;
     344:	81 e0       	ldi	r24, 0x01	; 1
     346:	8d 83       	std	Y+5, r24	; 0x05
     348:	4f c0       	rjmp	.+158    	; 0x3e8 <compare_time+0xe8>
    }	
    else {
        if (time1->mm > time2->mm) {
     34a:	e9 81       	ldd	r30, Y+1	; 0x01
     34c:	fa 81       	ldd	r31, Y+2	; 0x02
     34e:	ab 81       	ldd	r26, Y+3	; 0x03
     350:	bc 81       	ldd	r27, Y+4	; 0x04
     352:	91 81       	ldd	r25, Z+1	; 0x01
     354:	fd 01       	movw	r30, r26
     356:	81 81       	ldd	r24, Z+1	; 0x01
     358:	89 17       	cp	r24, r25
     35a:	18 f4       	brcc	.+6      	; 0x362 <compare_time+0x62>
            result = 2;
     35c:	82 e0       	ldi	r24, 0x02	; 2
     35e:	8d 83       	std	Y+5, r24	; 0x05
     360:	43 c0       	rjmp	.+134    	; 0x3e8 <compare_time+0xe8>
        }
        else if (time1->mm < time2->mm) {
     362:	e9 81       	ldd	r30, Y+1	; 0x01
     364:	fa 81       	ldd	r31, Y+2	; 0x02
     366:	ab 81       	ldd	r26, Y+3	; 0x03
     368:	bc 81       	ldd	r27, Y+4	; 0x04
     36a:	91 81       	ldd	r25, Z+1	; 0x01
     36c:	fd 01       	movw	r30, r26
     36e:	81 81       	ldd	r24, Z+1	; 0x01
     370:	98 17       	cp	r25, r24
     372:	18 f4       	brcc	.+6      	; 0x37a <compare_time+0x7a>
            result = 1;
     374:	81 e0       	ldi	r24, 0x01	; 1
     376:	8d 83       	std	Y+5, r24	; 0x05
     378:	37 c0       	rjmp	.+110    	; 0x3e8 <compare_time+0xe8>
        }	
        else {
            if (time1->ss > time2->ss) {
     37a:	e9 81       	ldd	r30, Y+1	; 0x01
     37c:	fa 81       	ldd	r31, Y+2	; 0x02
     37e:	ab 81       	ldd	r26, Y+3	; 0x03
     380:	bc 81       	ldd	r27, Y+4	; 0x04
     382:	92 81       	ldd	r25, Z+2	; 0x02
     384:	fd 01       	movw	r30, r26
     386:	82 81       	ldd	r24, Z+2	; 0x02
     388:	89 17       	cp	r24, r25
     38a:	18 f4       	brcc	.+6      	; 0x392 <compare_time+0x92>
                result = 2;
     38c:	82 e0       	ldi	r24, 0x02	; 2
     38e:	8d 83       	std	Y+5, r24	; 0x05
     390:	2b c0       	rjmp	.+86     	; 0x3e8 <compare_time+0xe8>
            }
            else if (time1->ss < time2->ss) {
     392:	e9 81       	ldd	r30, Y+1	; 0x01
     394:	fa 81       	ldd	r31, Y+2	; 0x02
     396:	ab 81       	ldd	r26, Y+3	; 0x03
     398:	bc 81       	ldd	r27, Y+4	; 0x04
     39a:	92 81       	ldd	r25, Z+2	; 0x02
     39c:	fd 01       	movw	r30, r26
     39e:	82 81       	ldd	r24, Z+2	; 0x02
     3a0:	98 17       	cp	r25, r24
     3a2:	18 f4       	brcc	.+6      	; 0x3aa <compare_time+0xaa>
                result = 1;
     3a4:	81 e0       	ldi	r24, 0x01	; 1
     3a6:	8d 83       	std	Y+5, r24	; 0x05
     3a8:	1f c0       	rjmp	.+62     	; 0x3e8 <compare_time+0xe8>
            }	
            else {
                if (time1->xx > time2->xx) {
     3aa:	e9 81       	ldd	r30, Y+1	; 0x01
     3ac:	fa 81       	ldd	r31, Y+2	; 0x02
     3ae:	ab 81       	ldd	r26, Y+3	; 0x03
     3b0:	bc 81       	ldd	r27, Y+4	; 0x04
     3b2:	23 81       	ldd	r18, Z+3	; 0x03
     3b4:	34 81       	ldd	r19, Z+4	; 0x04
     3b6:	fd 01       	movw	r30, r26
     3b8:	83 81       	ldd	r24, Z+3	; 0x03
     3ba:	94 81       	ldd	r25, Z+4	; 0x04
     3bc:	82 17       	cp	r24, r18
     3be:	93 07       	cpc	r25, r19
     3c0:	18 f4       	brcc	.+6      	; 0x3c8 <compare_time+0xc8>
                    result = 2;
     3c2:	82 e0       	ldi	r24, 0x02	; 2
     3c4:	8d 83       	std	Y+5, r24	; 0x05
     3c6:	10 c0       	rjmp	.+32     	; 0x3e8 <compare_time+0xe8>
                }
                else if (time1->xx < time2->xx) {
     3c8:	e9 81       	ldd	r30, Y+1	; 0x01
     3ca:	fa 81       	ldd	r31, Y+2	; 0x02
     3cc:	ab 81       	ldd	r26, Y+3	; 0x03
     3ce:	bc 81       	ldd	r27, Y+4	; 0x04
     3d0:	23 81       	ldd	r18, Z+3	; 0x03
     3d2:	34 81       	ldd	r19, Z+4	; 0x04
     3d4:	fd 01       	movw	r30, r26
     3d6:	83 81       	ldd	r24, Z+3	; 0x03
     3d8:	94 81       	ldd	r25, Z+4	; 0x04
     3da:	28 17       	cp	r18, r24
     3dc:	39 07       	cpc	r19, r25
     3de:	18 f4       	brcc	.+6      	; 0x3e6 <compare_time+0xe6>
                    result = 1;
     3e0:	81 e0       	ldi	r24, 0x01	; 1
     3e2:	8d 83       	std	Y+5, r24	; 0x05
     3e4:	01 c0       	rjmp	.+2      	; 0x3e8 <compare_time+0xe8>
                }	
                else {
                    result = 0;
     3e6:	1d 82       	std	Y+5, r1	; 0x05
                }
            }
        }
    }
    // return the best time (lower)
    // 0 time1=time2
    // 1 time1>time2
    // 2 time1<time2
    return result;
     3e8:	8d 81       	ldd	r24, Y+5	; 0x05
     3ea:	99 27       	eor	r25, r25
     3ec:	25 96       	adiw	r28, 0x05	; 5
     3ee:	0f b6       	in	r0, 0x3f	; 63
     3f0:	f8 94       	cli
     3f2:	de bf       	out	0x3e, r29	; 62
     3f4:	0f be       	out	0x3f, r0	; 63
     3f6:	cd bf       	out	0x3d, r28	; 61
     3f8:	df 91       	pop	r29
     3fa:	cf 91       	pop	r28
     3fc:	08 95       	ret

000003fe <switch_on_all_leds>:
}



/*
void switch_on_all_leds();
void switch_off_all_leds();
void switch_on_led(uint8_t led);
void switch_off_led(uint8_t led);
void loop(void);
void init(void);
*/

// 1=off
// 0=on

/*
 * switch on all leds
 */
void switch_on_all_leds(void) {
     3fe:	cf 93       	push	r28
     400:	df 93       	push	r29
     402:	cd b7       	in	r28, 0x3d	; 61
     404:	de b7       	in	r29, 0x3e	; 62
    PORTC = 0x00;
     406:	10 92 35 00 	sts	0x0035, r1
     40a:	df 91       	pop	r29
     40c:	cf 91       	pop	r28
     40e:	08 95       	ret

00000410 <switch_off_all_leds>:
}

/*
 * switch off all leds
 */
void switch_off_all_leds(void) {
     410:	cf 93       	push	r28
     412:	df 93       	push	r29
     414:	cd b7       	in	r28, 0x3d	; 61
     416:	de b7       	in	r29, 0x3e	; 62
    PORTC = 0xFF;
     418:	8f ef       	ldi	r24, 0xFF	; 255
     41a:	80 93 35 00 	sts	0x0035, r24
     41e:	df 91       	pop	r29
     420:	cf 91       	pop	r28
     422:	08 95       	ret

00000424 <switch_on_led>:
}

// led from 1 to 8 (LEDSNUM)
// PCx with w from 0 to 7

/*
 * switch on the led with the number called "led"
 */
void switch_on_led(uint8_t led) {
     424:	cf 93       	push	r28
     426:	df 93       	push	r29
     428:	cd b7       	in	r28, 0x3d	; 61
     42a:	de b7       	in	r29, 0x3e	; 62
     42c:	23 97       	sbiw	r28, 0x03	; 3
     42e:	0f b6       	in	r0, 0x3f	; 63
     430:	f8 94       	cli
     432:	de bf       	out	0x3e, r29	; 62
     434:	0f be       	out	0x3f, r0	; 63
     436:	cd bf       	out	0x3d, r28	; 61
     438:	89 83       	std	Y+1, r24	; 0x01
    uint8_t pin = led - 1;
     43a:	89 81       	ldd	r24, Y+1	; 0x01
     43c:	81 50       	subi	r24, 0x01	; 1
     43e:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t mask = ~(1<<pin);
     440:	8a 81       	ldd	r24, Y+2	; 0x02
     442:	28 2f       	mov	r18, r24
     444:	33 27       	eor	r19, r19
     446:	81 e0       	ldi	r24, 0x01	; 1
     448:	90 e0       	ldi	r25, 0x00	; 0
     44a:	02 c0       	rjmp	.+4      	; 0x450 <switch_on_led+0x2c>
     44c:	88 0f       	add	r24, r24
     44e:	99 1f       	adc	r25, r25
     450:	2a 95       	dec	r18
     452:	e2 f7       	brpl	.-8      	; 0x44c <switch_on_led+0x28>
     454:	80 95       	com	r24
     456:	8b 83       	std	Y+3, r24	; 0x03
    PORTC&=mask;
     458:	90 91 35 00 	lds	r25, 0x0035
     45c:	8b 81       	ldd	r24, Y+3	; 0x03
     45e:	89 23       	and	r24, r25
     460:	80 93 35 00 	sts	0x0035, r24
     464:	23 96       	adiw	r28, 0x03	; 3
     466:	0f b6       	in	r0, 0x3f	; 63
     468:	f8 94       	cli
     46a:	de bf       	out	0x3e, r29	; 62
     46c:	0f be       	out	0x3f, r0	; 63
     46e:	cd bf       	out	0x3d, r28	; 61
     470:	df 91       	pop	r29
     472:	cf 91       	pop	r28
     474:	08 95       	ret

00000476 <switch_off_led>:
}

/*
 * switch off the led with the number called "led"
 */
void switch_off_led(uint8_t led) {
     476:	cf 93       	push	r28
     478:	df 93       	push	r29
     47a:	cd b7       	in	r28, 0x3d	; 61
     47c:	de b7       	in	r29, 0x3e	; 62
     47e:	23 97       	sbiw	r28, 0x03	; 3
     480:	0f b6       	in	r0, 0x3f	; 63
     482:	f8 94       	cli
     484:	de bf       	out	0x3e, r29	; 62
     486:	0f be       	out	0x3f, r0	; 63
     488:	cd bf       	out	0x3d, r28	; 61
     48a:	89 83       	std	Y+1, r24	; 0x01
    uint8_t pin = led - 1;
     48c:	89 81       	ldd	r24, Y+1	; 0x01
     48e:	81 50       	subi	r24, 0x01	; 1
     490:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t mask = (1<<pin);
     492:	8a 81       	ldd	r24, Y+2	; 0x02
     494:	28 2f       	mov	r18, r24
     496:	33 27       	eor	r19, r19
     498:	81 e0       	ldi	r24, 0x01	; 1
     49a:	90 e0       	ldi	r25, 0x00	; 0
     49c:	02 c0       	rjmp	.+4      	; 0x4a2 <switch_off_led+0x2c>
     49e:	88 0f       	add	r24, r24
     4a0:	99 1f       	adc	r25, r25
     4a2:	2a 95       	dec	r18
     4a4:	e2 f7       	brpl	.-8      	; 0x49e <switch_off_led+0x28>
     4a6:	8b 83       	std	Y+3, r24	; 0x03
    PORTC|=mask;
     4a8:	90 91 35 00 	lds	r25, 0x0035
     4ac:	8b 81       	ldd	r24, Y+3	; 0x03
     4ae:	89 2b       	or	r24, r25
     4b0:	80 93 35 00 	sts	0x0035, r24
     4b4:	23 96       	adiw	r28, 0x03	; 3
     4b6:	0f b6       	in	r0, 0x3f	; 63
     4b8:	f8 94       	cli
     4ba:	de bf       	out	0x3e, r29	; 62
     4bc:	0f be       	out	0x3f, r0	; 63
     4be:	cd bf       	out	0x3d, r28	; 61
     4c0:	df 91       	pop	r29
     4c2:	cf 91       	pop	r28
     4c4:	08 95       	ret

000004c6 <switch_on_leds_with_delay>:
}

/*
 * switch on every leds one after one with a delay (called "delay")
 */
void switch_on_leds_with_delay(double delay) {
     4c6:	cf 93       	push	r28
     4c8:	df 93       	push	r29
     4ca:	cd b7       	in	r28, 0x3d	; 61
     4cc:	de b7       	in	r29, 0x3e	; 62
     4ce:	61 97       	sbiw	r28, 0x11	; 17
     4d0:	0f b6       	in	r0, 0x3f	; 63
     4d2:	f8 94       	cli
     4d4:	de bf       	out	0x3e, r29	; 62
     4d6:	0f be       	out	0x3f, r0	; 63
     4d8:	cd bf       	out	0x3d, r28	; 61
     4da:	69 83       	std	Y+1, r22	; 0x01
     4dc:	7a 83       	std	Y+2, r23	; 0x02
     4de:	8b 83       	std	Y+3, r24	; 0x03
     4e0:	9c 83       	std	Y+4, r25	; 0x04
    uint8_t i;
    for(i = 1; i<=Nleds; i++) {
     4e2:	81 e0       	ldi	r24, 0x01	; 1
     4e4:	8d 83       	std	Y+5, r24	; 0x05
     4e6:	8d 81       	ldd	r24, Y+5	; 0x05
     4e8:	89 30       	cpi	r24, 0x09	; 9
     4ea:	08 f0       	brcs	.+2      	; 0x4ee <switch_on_leds_with_delay+0x28>
     4ec:	50 c0       	rjmp	.+160    	; 0x58e <switch_on_leds_with_delay+0xc8>
   The maximal possible delay is 262.14 ms / F_CPU in MHz.
 */
void
_delay_ms(double __ms)
{
     4ee:	89 81       	ldd	r24, Y+1	; 0x01
     4f0:	9a 81       	ldd	r25, Y+2	; 0x02
     4f2:	ab 81       	ldd	r26, Y+3	; 0x03
     4f4:	bc 81       	ldd	r27, Y+4	; 0x04
     4f6:	8e 83       	std	Y+6, r24	; 0x06
     4f8:	9f 83       	std	Y+7, r25	; 0x07
     4fa:	a8 87       	std	Y+8, r26	; 0x08
     4fc:	b9 87       	std	Y+9, r27	; 0x09
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     4fe:	20 e0       	ldi	r18, 0x00	; 0
     500:	30 e0       	ldi	r19, 0x00	; 0
     502:	4a e7       	ldi	r20, 0x7A	; 122
     504:	53 e4       	ldi	r21, 0x43	; 67
     506:	6e 81       	ldd	r22, Y+6	; 0x06
     508:	7f 81       	ldd	r23, Y+7	; 0x07
     50a:	88 85       	ldd	r24, Y+8	; 0x08
     50c:	99 85       	ldd	r25, Y+9	; 0x09
     50e:	b1 d9       	rcall	.-3230   	; 0xfffff872 <__eeprom_end+0xff7ef872>
     510:	dc 01       	movw	r26, r24
     512:	cb 01       	movw	r24, r22
     514:	8c 87       	std	Y+12, r24	; 0x0c
     516:	9d 87       	std	Y+13, r25	; 0x0d
     518:	ae 87       	std	Y+14, r26	; 0x0e
     51a:	bf 87       	std	Y+15, r27	; 0x0f
	if (__tmp < 1.0)
     51c:	20 e0       	ldi	r18, 0x00	; 0
     51e:	30 e0       	ldi	r19, 0x00	; 0
     520:	40 e8       	ldi	r20, 0x80	; 128
     522:	5f e3       	ldi	r21, 0x3F	; 63
     524:	6c 85       	ldd	r22, Y+12	; 0x0c
     526:	7d 85       	ldd	r23, Y+13	; 0x0d
     528:	8e 85       	ldd	r24, Y+14	; 0x0e
     52a:	9f 85       	ldd	r25, Y+15	; 0x0f
     52c:	32 d9       	rcall	.-3484   	; 0xfffff792 <__eeprom_end+0xff7ef792>
     52e:	88 23       	and	r24, r24
     530:	0c f0       	brlt	.+2      	; 0x534 <switch_on_leds_with_delay+0x6e>
     532:	05 c0       	rjmp	.+10     	; 0x53e <switch_on_leds_with_delay+0x78>
		__ticks = 1;
     534:	81 e0       	ldi	r24, 0x01	; 1
     536:	90 e0       	ldi	r25, 0x00	; 0
     538:	9b 87       	std	Y+11, r25	; 0x0b
     53a:	8a 87       	std	Y+10, r24	; 0x0a
     53c:	18 c0       	rjmp	.+48     	; 0x56e <switch_on_leds_with_delay+0xa8>
	else if (__tmp > 65535)
     53e:	20 e0       	ldi	r18, 0x00	; 0
     540:	3f ef       	ldi	r19, 0xFF	; 255
     542:	4f e7       	ldi	r20, 0x7F	; 127
     544:	57 e4       	ldi	r21, 0x47	; 71
     546:	6c 85       	ldd	r22, Y+12	; 0x0c
     548:	7d 85       	ldd	r23, Y+13	; 0x0d
     54a:	8e 85       	ldd	r24, Y+14	; 0x0e
     54c:	9f 85       	ldd	r25, Y+15	; 0x0f
     54e:	24 d9       	rcall	.-3512   	; 0xfffff798 <__eeprom_end+0xff7ef798>
     550:	18 16       	cp	r1, r24
     552:	0c f0       	brlt	.+2      	; 0x556 <switch_on_leds_with_delay+0x90>
     554:	03 c0       	rjmp	.+6      	; 0x55c <switch_on_leds_with_delay+0x96>
		__ticks = 0;	/* i.e. 65536 */
     556:	1b 86       	std	Y+11, r1	; 0x0b
     558:	1a 86       	std	Y+10, r1	; 0x0a
     55a:	09 c0       	rjmp	.+18     	; 0x56e <switch_on_leds_with_delay+0xa8>
	else
		__ticks = (uint16_t)__tmp;
     55c:	6c 85       	ldd	r22, Y+12	; 0x0c
     55e:	7d 85       	ldd	r23, Y+13	; 0x0d
     560:	8e 85       	ldd	r24, Y+14	; 0x0e
     562:	9f 85       	ldd	r25, Y+15	; 0x0f
     564:	d6 d8       	rcall	.-3668   	; 0xfffff712 <__eeprom_end+0xff7ef712>
     566:	dc 01       	movw	r26, r24
     568:	cb 01       	movw	r24, r22
     56a:	9b 87       	std	Y+11, r25	; 0x0b
     56c:	8a 87       	std	Y+10, r24	; 0x0a
     56e:	8a 85       	ldd	r24, Y+10	; 0x0a
     570:	9b 85       	ldd	r25, Y+11	; 0x0b
     572:	99 8b       	std	Y+17, r25	; 0x11
     574:	88 8b       	std	Y+16, r24	; 0x10
     576:	88 89       	ldd	r24, Y+16	; 0x10
     578:	99 89       	ldd	r25, Y+17	; 0x11
     57a:	01 97       	sbiw	r24, 0x01	; 1
     57c:	f1 f7       	brne	.-4      	; 0x57a <switch_on_leds_with_delay+0xb4>
     57e:	99 8b       	std	Y+17, r25	; 0x11
     580:	88 8b       	std	Y+16, r24	; 0x10
        _delay_ms(delay);
        switch_on_led(i);
     582:	8d 81       	ldd	r24, Y+5	; 0x05
     584:	4f df       	rcall	.-354    	; 0x424 <switch_on_led>
     586:	8d 81       	ldd	r24, Y+5	; 0x05
     588:	8f 5f       	subi	r24, 0xFF	; 255
     58a:	8d 83       	std	Y+5, r24	; 0x05
     58c:	ac cf       	rjmp	.-168    	; 0x4e6 <switch_on_leds_with_delay+0x20>
     58e:	61 96       	adiw	r28, 0x11	; 17
     590:	0f b6       	in	r0, 0x3f	; 63
     592:	f8 94       	cli
     594:	de bf       	out	0x3e, r29	; 62
     596:	0f be       	out	0x3f, r0	; 63
     598:	cd bf       	out	0x3d, r28	; 61
     59a:	df 91       	pop	r29
     59c:	cf 91       	pop	r28
     59e:	08 95       	ret

000005a0 <switch_off_leds_with_delay>:
    }
}

/*
 * switch off every leds on after one with a delay (called "delay")
 */
void switch_off_leds_with_delay(double delay) {
     5a0:	cf 93       	push	r28
     5a2:	df 93       	push	r29
     5a4:	cd b7       	in	r28, 0x3d	; 61
     5a6:	de b7       	in	r29, 0x3e	; 62
     5a8:	61 97       	sbiw	r28, 0x11	; 17
     5aa:	0f b6       	in	r0, 0x3f	; 63
     5ac:	f8 94       	cli
     5ae:	de bf       	out	0x3e, r29	; 62
     5b0:	0f be       	out	0x3f, r0	; 63
     5b2:	cd bf       	out	0x3d, r28	; 61
     5b4:	69 83       	std	Y+1, r22	; 0x01
     5b6:	7a 83       	std	Y+2, r23	; 0x02
     5b8:	8b 83       	std	Y+3, r24	; 0x03
     5ba:	9c 83       	std	Y+4, r25	; 0x04
    uint8_t i;
    for(i = Nleds; i>=1; i--) {
     5bc:	88 e0       	ldi	r24, 0x08	; 8
     5be:	8d 83       	std	Y+5, r24	; 0x05
     5c0:	8d 81       	ldd	r24, Y+5	; 0x05
     5c2:	88 23       	and	r24, r24
     5c4:	09 f4       	brne	.+2      	; 0x5c8 <switch_off_leds_with_delay+0x28>
     5c6:	50 c0       	rjmp	.+160    	; 0x668 <switch_off_leds_with_delay+0xc8>
   The maximal possible delay is 262.14 ms / F_CPU in MHz.
 */
void
_delay_ms(double __ms)
{
     5c8:	89 81       	ldd	r24, Y+1	; 0x01
     5ca:	9a 81       	ldd	r25, Y+2	; 0x02
     5cc:	ab 81       	ldd	r26, Y+3	; 0x03
     5ce:	bc 81       	ldd	r27, Y+4	; 0x04
     5d0:	8e 83       	std	Y+6, r24	; 0x06
     5d2:	9f 83       	std	Y+7, r25	; 0x07
     5d4:	a8 87       	std	Y+8, r26	; 0x08
     5d6:	b9 87       	std	Y+9, r27	; 0x09
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     5d8:	20 e0       	ldi	r18, 0x00	; 0
     5da:	30 e0       	ldi	r19, 0x00	; 0
     5dc:	4a e7       	ldi	r20, 0x7A	; 122
     5de:	53 e4       	ldi	r21, 0x43	; 67
     5e0:	6e 81       	ldd	r22, Y+6	; 0x06
     5e2:	7f 81       	ldd	r23, Y+7	; 0x07
     5e4:	88 85       	ldd	r24, Y+8	; 0x08
     5e6:	99 85       	ldd	r25, Y+9	; 0x09
     5e8:	44 d9       	rcall	.-3448   	; 0xfffff872 <__eeprom_end+0xff7ef872>
     5ea:	dc 01       	movw	r26, r24
     5ec:	cb 01       	movw	r24, r22
     5ee:	8c 87       	std	Y+12, r24	; 0x0c
     5f0:	9d 87       	std	Y+13, r25	; 0x0d
     5f2:	ae 87       	std	Y+14, r26	; 0x0e
     5f4:	bf 87       	std	Y+15, r27	; 0x0f
	if (__tmp < 1.0)
     5f6:	20 e0       	ldi	r18, 0x00	; 0
     5f8:	30 e0       	ldi	r19, 0x00	; 0
     5fa:	40 e8       	ldi	r20, 0x80	; 128
     5fc:	5f e3       	ldi	r21, 0x3F	; 63
     5fe:	6c 85       	ldd	r22, Y+12	; 0x0c
     600:	7d 85       	ldd	r23, Y+13	; 0x0d
     602:	8e 85       	ldd	r24, Y+14	; 0x0e
     604:	9f 85       	ldd	r25, Y+15	; 0x0f
     606:	c5 d8       	rcall	.-3702   	; 0xfffff792 <__eeprom_end+0xff7ef792>
     608:	88 23       	and	r24, r24
     60a:	0c f0       	brlt	.+2      	; 0x60e <switch_off_leds_with_delay+0x6e>
     60c:	05 c0       	rjmp	.+10     	; 0x618 <switch_off_leds_with_delay+0x78>
		__ticks = 1;
     60e:	81 e0       	ldi	r24, 0x01	; 1
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	9b 87       	std	Y+11, r25	; 0x0b
     614:	8a 87       	std	Y+10, r24	; 0x0a
     616:	18 c0       	rjmp	.+48     	; 0x648 <switch_off_leds_with_delay+0xa8>
	else if (__tmp > 65535)
     618:	20 e0       	ldi	r18, 0x00	; 0
     61a:	3f ef       	ldi	r19, 0xFF	; 255
     61c:	4f e7       	ldi	r20, 0x7F	; 127
     61e:	57 e4       	ldi	r21, 0x47	; 71
     620:	6c 85       	ldd	r22, Y+12	; 0x0c
     622:	7d 85       	ldd	r23, Y+13	; 0x0d
     624:	8e 85       	ldd	r24, Y+14	; 0x0e
     626:	9f 85       	ldd	r25, Y+15	; 0x0f
     628:	b7 d8       	rcall	.-3730   	; 0xfffff798 <__eeprom_end+0xff7ef798>
     62a:	18 16       	cp	r1, r24
     62c:	0c f0       	brlt	.+2      	; 0x630 <switch_off_leds_with_delay+0x90>
     62e:	03 c0       	rjmp	.+6      	; 0x636 <switch_off_leds_with_delay+0x96>
		__ticks = 0;	/* i.e. 65536 */
     630:	1b 86       	std	Y+11, r1	; 0x0b
     632:	1a 86       	std	Y+10, r1	; 0x0a
     634:	09 c0       	rjmp	.+18     	; 0x648 <switch_off_leds_with_delay+0xa8>
	else
		__ticks = (uint16_t)__tmp;
     636:	6c 85       	ldd	r22, Y+12	; 0x0c
     638:	7d 85       	ldd	r23, Y+13	; 0x0d
     63a:	8e 85       	ldd	r24, Y+14	; 0x0e
     63c:	9f 85       	ldd	r25, Y+15	; 0x0f
     63e:	69 d8       	rcall	.-3886   	; 0xfffff712 <__eeprom_end+0xff7ef712>
     640:	dc 01       	movw	r26, r24
     642:	cb 01       	movw	r24, r22
     644:	9b 87       	std	Y+11, r25	; 0x0b
     646:	8a 87       	std	Y+10, r24	; 0x0a
     648:	8a 85       	ldd	r24, Y+10	; 0x0a
     64a:	9b 85       	ldd	r25, Y+11	; 0x0b
     64c:	99 8b       	std	Y+17, r25	; 0x11
     64e:	88 8b       	std	Y+16, r24	; 0x10
     650:	88 89       	ldd	r24, Y+16	; 0x10
     652:	99 89       	ldd	r25, Y+17	; 0x11
     654:	01 97       	sbiw	r24, 0x01	; 1
     656:	f1 f7       	brne	.-4      	; 0x654 <switch_off_leds_with_delay+0xb4>
     658:	99 8b       	std	Y+17, r25	; 0x11
     65a:	88 8b       	std	Y+16, r24	; 0x10
        _delay_ms(delay);
        switch_off_led(i);
     65c:	8d 81       	ldd	r24, Y+5	; 0x05
     65e:	0b df       	rcall	.-490    	; 0x476 <switch_off_led>
     660:	8d 81       	ldd	r24, Y+5	; 0x05
     662:	81 50       	subi	r24, 0x01	; 1
     664:	8d 83       	std	Y+5, r24	; 0x05
     666:	ac cf       	rjmp	.-168    	; 0x5c0 <switch_off_leds_with_delay+0x20>
     668:	61 96       	adiw	r28, 0x11	; 17
     66a:	0f b6       	in	r0, 0x3f	; 63
     66c:	f8 94       	cli
     66e:	de bf       	out	0x3e, r29	; 62
     670:	0f be       	out	0x3f, r0	; 63
     672:	cd bf       	out	0x3d, r28	; 61
     674:	df 91       	pop	r29
     676:	cf 91       	pop	r28
     678:	08 95       	ret

0000067a <test_leds_up_down>:
    }
}

/*
 * a function for testing leds that switch on every leds and switch off every leds (one after one)
 */
void test_leds_up_down(void) {
     67a:	cf 93       	push	r28
     67c:	df 93       	push	r29
     67e:	cd b7       	in	r28, 0x3d	; 61
     680:	de b7       	in	r29, 0x3e	; 62
     682:	2c 97       	sbiw	r28, 0x0c	; 12
     684:	0f b6       	in	r0, 0x3f	; 63
     686:	f8 94       	cli
     688:	de bf       	out	0x3e, r29	; 62
     68a:	0f be       	out	0x3f, r0	; 63
     68c:	cd bf       	out	0x3d, r28	; 61
    switch_on_leds_with_delay(50); //100
     68e:	60 e0       	ldi	r22, 0x00	; 0
     690:	70 e0       	ldi	r23, 0x00	; 0
     692:	88 e4       	ldi	r24, 0x48	; 72
     694:	92 e4       	ldi	r25, 0x42	; 66
     696:	17 df       	rcall	.-466    	; 0x4c6 <switch_on_leds_with_delay>
   The maximal possible delay is 262.14 ms / F_CPU in MHz.
 */
void
_delay_ms(double __ms)
{
     698:	80 e0       	ldi	r24, 0x00	; 0
     69a:	90 e0       	ldi	r25, 0x00	; 0
     69c:	a8 e4       	ldi	r26, 0x48	; 72
     69e:	b2 e4       	ldi	r27, 0x42	; 66
     6a0:	89 83       	std	Y+1, r24	; 0x01
     6a2:	9a 83       	std	Y+2, r25	; 0x02
     6a4:	ab 83       	std	Y+3, r26	; 0x03
     6a6:	bc 83       	std	Y+4, r27	; 0x04
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     6a8:	20 e0       	ldi	r18, 0x00	; 0
     6aa:	30 e0       	ldi	r19, 0x00	; 0
     6ac:	4a e7       	ldi	r20, 0x7A	; 122
     6ae:	53 e4       	ldi	r21, 0x43	; 67
     6b0:	69 81       	ldd	r22, Y+1	; 0x01
     6b2:	7a 81       	ldd	r23, Y+2	; 0x02
     6b4:	8b 81       	ldd	r24, Y+3	; 0x03
     6b6:	9c 81       	ldd	r25, Y+4	; 0x04
     6b8:	dc d8       	rcall	.-3656   	; 0xfffff872 <__eeprom_end+0xff7ef872>
     6ba:	dc 01       	movw	r26, r24
     6bc:	cb 01       	movw	r24, r22
     6be:	8f 83       	std	Y+7, r24	; 0x07
     6c0:	98 87       	std	Y+8, r25	; 0x08
     6c2:	a9 87       	std	Y+9, r26	; 0x09
     6c4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     6c6:	20 e0       	ldi	r18, 0x00	; 0
     6c8:	30 e0       	ldi	r19, 0x00	; 0
     6ca:	40 e8       	ldi	r20, 0x80	; 128
     6cc:	5f e3       	ldi	r21, 0x3F	; 63
     6ce:	6f 81       	ldd	r22, Y+7	; 0x07
     6d0:	78 85       	ldd	r23, Y+8	; 0x08
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	9a 85       	ldd	r25, Y+10	; 0x0a
     6d6:	5d d8       	rcall	.-3910   	; 0xfffff792 <__eeprom_end+0xff7ef792>
     6d8:	88 23       	and	r24, r24
     6da:	0c f0       	brlt	.+2      	; 0x6de <test_leds_up_down+0x64>
     6dc:	05 c0       	rjmp	.+10     	; 0x6e8 <test_leds_up_down+0x6e>
		__ticks = 1;
     6de:	81 e0       	ldi	r24, 0x01	; 1
     6e0:	90 e0       	ldi	r25, 0x00	; 0
     6e2:	9e 83       	std	Y+6, r25	; 0x06
     6e4:	8d 83       	std	Y+5, r24	; 0x05
     6e6:	18 c0       	rjmp	.+48     	; 0x718 <test_leds_up_down+0x9e>
	else if (__tmp > 65535)
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	3f ef       	ldi	r19, 0xFF	; 255
     6ec:	4f e7       	ldi	r20, 0x7F	; 127
     6ee:	57 e4       	ldi	r21, 0x47	; 71
     6f0:	6f 81       	ldd	r22, Y+7	; 0x07
     6f2:	78 85       	ldd	r23, Y+8	; 0x08
     6f4:	89 85       	ldd	r24, Y+9	; 0x09
     6f6:	9a 85       	ldd	r25, Y+10	; 0x0a
     6f8:	4f d8       	rcall	.-3938   	; 0xfffff798 <__eeprom_end+0xff7ef798>
     6fa:	18 16       	cp	r1, r24
     6fc:	0c f0       	brlt	.+2      	; 0x700 <test_leds_up_down+0x86>
     6fe:	03 c0       	rjmp	.+6      	; 0x706 <test_leds_up_down+0x8c>
		__ticks = 0;	/* i.e. 65536 */
     700:	1e 82       	std	Y+6, r1	; 0x06
     702:	1d 82       	std	Y+5, r1	; 0x05
     704:	09 c0       	rjmp	.+18     	; 0x718 <test_leds_up_down+0x9e>
	else
		__ticks = (uint16_t)__tmp;
     706:	6f 81       	ldd	r22, Y+7	; 0x07
     708:	78 85       	ldd	r23, Y+8	; 0x08
     70a:	89 85       	ldd	r24, Y+9	; 0x09
     70c:	9a 85       	ldd	r25, Y+10	; 0x0a
     70e:	01 d8       	rcall	.-4094   	; 0xfffff712 <__eeprom_end+0xff7ef712>
     710:	dc 01       	movw	r26, r24
     712:	cb 01       	movw	r24, r22
     714:	9e 83       	std	Y+6, r25	; 0x06
     716:	8d 83       	std	Y+5, r24	; 0x05
     718:	8d 81       	ldd	r24, Y+5	; 0x05
     71a:	9e 81       	ldd	r25, Y+6	; 0x06
     71c:	9c 87       	std	Y+12, r25	; 0x0c
     71e:	8b 87       	std	Y+11, r24	; 0x0b
     720:	8b 85       	ldd	r24, Y+11	; 0x0b
     722:	9c 85       	ldd	r25, Y+12	; 0x0c
     724:	01 97       	sbiw	r24, 0x01	; 1
     726:	f1 f7       	brne	.-4      	; 0x724 <test_leds_up_down+0xaa>
     728:	9c 87       	std	Y+12, r25	; 0x0c
     72a:	8b 87       	std	Y+11, r24	; 0x0b
    _delay_ms(50); //50
    switch_off_leds_with_delay(50); //100
     72c:	60 e0       	ldi	r22, 0x00	; 0
     72e:	70 e0       	ldi	r23, 0x00	; 0
     730:	88 e4       	ldi	r24, 0x48	; 72
     732:	92 e4       	ldi	r25, 0x42	; 66
     734:	35 df       	rcall	.-406    	; 0x5a0 <switch_off_leds_with_delay>
     736:	2c 96       	adiw	r28, 0x0c	; 12
     738:	0f b6       	in	r0, 0x3f	; 63
     73a:	f8 94       	cli
     73c:	de bf       	out	0x3e, r29	; 62
     73e:	0f be       	out	0x3f, r0	; 63
     740:	cd bf       	out	0x3d, r28	; 61
     742:	df 91       	pop	r29
     744:	cf 91       	pop	r28
     746:	08 95       	ret

00000748 <test_leds_up_off>:
}

void test_leds_up_off(void) {
     748:	cf 93       	push	r28
     74a:	df 93       	push	r29
     74c:	cd b7       	in	r28, 0x3d	; 61
     74e:	de b7       	in	r29, 0x3e	; 62
     750:	2c 97       	sbiw	r28, 0x0c	; 12
     752:	0f b6       	in	r0, 0x3f	; 63
     754:	f8 94       	cli
     756:	de bf       	out	0x3e, r29	; 62
     758:	0f be       	out	0x3f, r0	; 63
     75a:	cd bf       	out	0x3d, r28	; 61
    switch_on_leds_with_delay(50); //100
     75c:	60 e0       	ldi	r22, 0x00	; 0
     75e:	70 e0       	ldi	r23, 0x00	; 0
     760:	88 e4       	ldi	r24, 0x48	; 72
     762:	92 e4       	ldi	r25, 0x42	; 66
     764:	b0 de       	rcall	.-672    	; 0x4c6 <switch_on_leds_with_delay>
   The maximal possible delay is 262.14 ms / F_CPU in MHz.
 */
void
_delay_ms(double __ms)
{
     766:	80 e0       	ldi	r24, 0x00	; 0
     768:	90 e0       	ldi	r25, 0x00	; 0
     76a:	a8 e4       	ldi	r26, 0x48	; 72
     76c:	b2 e4       	ldi	r27, 0x42	; 66
     76e:	89 83       	std	Y+1, r24	; 0x01
     770:	9a 83       	std	Y+2, r25	; 0x02
     772:	ab 83       	std	Y+3, r26	; 0x03
     774:	bc 83       	std	Y+4, r27	; 0x04
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     776:	20 e0       	ldi	r18, 0x00	; 0
     778:	30 e0       	ldi	r19, 0x00	; 0
     77a:	4a e7       	ldi	r20, 0x7A	; 122
     77c:	53 e4       	ldi	r21, 0x43	; 67
     77e:	69 81       	ldd	r22, Y+1	; 0x01
     780:	7a 81       	ldd	r23, Y+2	; 0x02
     782:	8b 81       	ldd	r24, Y+3	; 0x03
     784:	9c 81       	ldd	r25, Y+4	; 0x04
     786:	75 d8       	rcall	.-3862   	; 0xfffff872 <__eeprom_end+0xff7ef872>
     788:	dc 01       	movw	r26, r24
     78a:	cb 01       	movw	r24, r22
     78c:	8f 83       	std	Y+7, r24	; 0x07
     78e:	98 87       	std	Y+8, r25	; 0x08
     790:	a9 87       	std	Y+9, r26	; 0x09
     792:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     794:	20 e0       	ldi	r18, 0x00	; 0
     796:	30 e0       	ldi	r19, 0x00	; 0
     798:	40 e8       	ldi	r20, 0x80	; 128
     79a:	5f e3       	ldi	r21, 0x3F	; 63
     79c:	6f 81       	ldd	r22, Y+7	; 0x07
     79e:	78 85       	ldd	r23, Y+8	; 0x08
     7a0:	89 85       	ldd	r24, Y+9	; 0x09
     7a2:	9a 85       	ldd	r25, Y+10	; 0x0a
     7a4:	f6 d7       	rcall	.+4076   	; 0x1792 <__eqsf2>
     7a6:	88 23       	and	r24, r24
     7a8:	0c f0       	brlt	.+2      	; 0x7ac <test_leds_up_off+0x64>
     7aa:	05 c0       	rjmp	.+10     	; 0x7b6 <test_leds_up_off+0x6e>
		__ticks = 1;
     7ac:	81 e0       	ldi	r24, 0x01	; 1
     7ae:	90 e0       	ldi	r25, 0x00	; 0
     7b0:	9e 83       	std	Y+6, r25	; 0x06
     7b2:	8d 83       	std	Y+5, r24	; 0x05
     7b4:	18 c0       	rjmp	.+48     	; 0x7e6 <test_leds_up_off+0x9e>
	else if (__tmp > 65535)
     7b6:	20 e0       	ldi	r18, 0x00	; 0
     7b8:	3f ef       	ldi	r19, 0xFF	; 255
     7ba:	4f e7       	ldi	r20, 0x7F	; 127
     7bc:	57 e4       	ldi	r21, 0x47	; 71
     7be:	6f 81       	ldd	r22, Y+7	; 0x07
     7c0:	78 85       	ldd	r23, Y+8	; 0x08
     7c2:	89 85       	ldd	r24, Y+9	; 0x09
     7c4:	9a 85       	ldd	r25, Y+10	; 0x0a
     7c6:	e8 d7       	rcall	.+4048   	; 0x1798 <__gesf2>
     7c8:	18 16       	cp	r1, r24
     7ca:	0c f0       	brlt	.+2      	; 0x7ce <test_leds_up_off+0x86>
     7cc:	03 c0       	rjmp	.+6      	; 0x7d4 <test_leds_up_off+0x8c>
		__ticks = 0;	/* i.e. 65536 */
     7ce:	1e 82       	std	Y+6, r1	; 0x06
     7d0:	1d 82       	std	Y+5, r1	; 0x05
     7d2:	09 c0       	rjmp	.+18     	; 0x7e6 <test_leds_up_off+0x9e>
	else
		__ticks = (uint16_t)__tmp;
     7d4:	6f 81       	ldd	r22, Y+7	; 0x07
     7d6:	78 85       	ldd	r23, Y+8	; 0x08
     7d8:	89 85       	ldd	r24, Y+9	; 0x09
     7da:	9a 85       	ldd	r25, Y+10	; 0x0a
     7dc:	9a d7       	rcall	.+3892   	; 0x1712 <__fixsfsi>
     7de:	dc 01       	movw	r26, r24
     7e0:	cb 01       	movw	r24, r22
     7e2:	9e 83       	std	Y+6, r25	; 0x06
     7e4:	8d 83       	std	Y+5, r24	; 0x05
     7e6:	8d 81       	ldd	r24, Y+5	; 0x05
     7e8:	9e 81       	ldd	r25, Y+6	; 0x06
     7ea:	9c 87       	std	Y+12, r25	; 0x0c
     7ec:	8b 87       	std	Y+11, r24	; 0x0b
     7ee:	8b 85       	ldd	r24, Y+11	; 0x0b
     7f0:	9c 85       	ldd	r25, Y+12	; 0x0c
     7f2:	01 97       	sbiw	r24, 0x01	; 1
     7f4:	f1 f7       	brne	.-4      	; 0x7f2 <test_leds_up_off+0xaa>
     7f6:	9c 87       	std	Y+12, r25	; 0x0c
     7f8:	8b 87       	std	Y+11, r24	; 0x0b
    _delay_ms(50); //50
    switch_off_all_leds();
     7fa:	0a de       	rcall	.-1004   	; 0x410 <switch_off_all_leds>
     7fc:	2c 96       	adiw	r28, 0x0c	; 12
     7fe:	0f b6       	in	r0, 0x3f	; 63
     800:	f8 94       	cli
     802:	de bf       	out	0x3e, r29	; 62
     804:	0f be       	out	0x3f, r0	; 63
     806:	cd bf       	out	0x3d, r28	; 61
     808:	df 91       	pop	r29
     80a:	cf 91       	pop	r28
     80c:	08 95       	ret

0000080e <switch_on_min_dels>:
}

/*
 *  switch on every leds (from 0 to n)  (and switch off others)
 */
void switch_on_min_dels(uint8_t n) {
     80e:	cf 93       	push	r28
     810:	df 93       	push	r29
     812:	cd b7       	in	r28, 0x3d	; 61
     814:	de b7       	in	r29, 0x3e	; 62
     816:	22 97       	sbiw	r28, 0x02	; 2
     818:	0f b6       	in	r0, 0x3f	; 63
     81a:	f8 94       	cli
     81c:	de bf       	out	0x3e, r29	; 62
     81e:	0f be       	out	0x3f, r0	; 63
     820:	cd bf       	out	0x3d, r28	; 61
     822:	89 83       	std	Y+1, r24	; 0x01
    uint8_t i;
    for(i = 1; i<=Nleds; i++) {
     824:	81 e0       	ldi	r24, 0x01	; 1
     826:	8a 83       	std	Y+2, r24	; 0x02
     828:	8a 81       	ldd	r24, Y+2	; 0x02
     82a:	89 30       	cpi	r24, 0x09	; 9
     82c:	68 f4       	brcc	.+26     	; 0x848 <switch_on_min_dels+0x3a>
        if (i<=n) {
     82e:	9a 81       	ldd	r25, Y+2	; 0x02
     830:	89 81       	ldd	r24, Y+1	; 0x01
     832:	89 17       	cp	r24, r25
     834:	18 f0       	brcs	.+6      	; 0x83c <switch_on_min_dels+0x2e>
            switch_on_led(i);
     836:	8a 81       	ldd	r24, Y+2	; 0x02
     838:	f5 dd       	rcall	.-1046   	; 0x424 <switch_on_led>
     83a:	02 c0       	rjmp	.+4      	; 0x840 <switch_on_min_dels+0x32>
        } else {
            switch_off_led(i);
     83c:	8a 81       	ldd	r24, Y+2	; 0x02
     83e:	1b de       	rcall	.-970    	; 0x476 <switch_off_led>
     840:	8a 81       	ldd	r24, Y+2	; 0x02
     842:	8f 5f       	subi	r24, 0xFF	; 255
     844:	8a 83       	std	Y+2, r24	; 0x02
     846:	f0 cf       	rjmp	.-32     	; 0x828 <switch_on_min_dels+0x1a>
     848:	22 96       	adiw	r28, 0x02	; 2
     84a:	0f b6       	in	r0, 0x3f	; 63
     84c:	f8 94       	cli
     84e:	de bf       	out	0x3e, r29	; 62
     850:	0f be       	out	0x3f, r0	; 63
     852:	cd bf       	out	0x3d, r28	; 61
     854:	df 91       	pop	r29
     856:	cf 91       	pop	r28
     858:	08 95       	ret

0000085a <switch_on_max_dels>:
        }
    }
}

/*
 *  switch on every leds (from Nleds to n)
 */
void switch_on_max_dels(uint8_t n) {
     85a:	cf 93       	push	r28
     85c:	df 93       	push	r29
     85e:	cd b7       	in	r28, 0x3d	; 61
     860:	de b7       	in	r29, 0x3e	; 62
     862:	22 97       	sbiw	r28, 0x02	; 2
     864:	0f b6       	in	r0, 0x3f	; 63
     866:	f8 94       	cli
     868:	de bf       	out	0x3e, r29	; 62
     86a:	0f be       	out	0x3f, r0	; 63
     86c:	cd bf       	out	0x3d, r28	; 61
     86e:	89 83       	std	Y+1, r24	; 0x01
    uint8_t i;
    for(i = Nleds; i>=1; i--) {
     870:	88 e0       	ldi	r24, 0x08	; 8
     872:	8a 83       	std	Y+2, r24	; 0x02
     874:	8a 81       	ldd	r24, Y+2	; 0x02
     876:	88 23       	and	r24, r24
     878:	b1 f0       	breq	.+44     	; 0x8a6 <switch_on_max_dels+0x4c>
        if (i>=Nleds-n) {
     87a:	8a 81       	ldd	r24, Y+2	; 0x02
     87c:	48 2f       	mov	r20, r24
     87e:	55 27       	eor	r21, r21
     880:	89 81       	ldd	r24, Y+1	; 0x01
     882:	28 2f       	mov	r18, r24
     884:	33 27       	eor	r19, r19
     886:	88 e0       	ldi	r24, 0x08	; 8
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	82 1b       	sub	r24, r18
     88c:	93 0b       	sbc	r25, r19
     88e:	48 17       	cp	r20, r24
     890:	59 07       	cpc	r21, r25
     892:	1c f0       	brlt	.+6      	; 0x89a <switch_on_max_dels+0x40>
            switch_on_led(i);
     894:	8a 81       	ldd	r24, Y+2	; 0x02
     896:	c6 dd       	rcall	.-1140   	; 0x424 <switch_on_led>
     898:	02 c0       	rjmp	.+4      	; 0x89e <switch_on_max_dels+0x44>
        } else {
            switch_off_led(i);
     89a:	8a 81       	ldd	r24, Y+2	; 0x02
     89c:	ec dd       	rcall	.-1064   	; 0x476 <switch_off_led>
     89e:	8a 81       	ldd	r24, Y+2	; 0x02
     8a0:	81 50       	subi	r24, 0x01	; 1
     8a2:	8a 83       	std	Y+2, r24	; 0x02
     8a4:	e7 cf       	rjmp	.-50     	; 0x874 <switch_on_max_dels+0x1a>
     8a6:	22 96       	adiw	r28, 0x02	; 2
     8a8:	0f b6       	in	r0, 0x3f	; 63
     8aa:	f8 94       	cli
     8ac:	de bf       	out	0x3e, r29	; 62
     8ae:	0f be       	out	0x3f, r0	; 63
     8b0:	cd bf       	out	0x3d, r28	; 61
     8b2:	df 91       	pop	r29
     8b4:	cf 91       	pop	r28
     8b6:	08 95       	ret

000008b8 <led_alarm>:
        }
    }
    // TO TEST (switch off)
}

/*
 * switch off every leds, wait and swith them all, n times (a sort of visual alarm)
 */
void led_alarm(uint8_t n, double delay) {
     8b8:	cf 93       	push	r28
     8ba:	df 93       	push	r29
     8bc:	cd b7       	in	r28, 0x3d	; 61
     8be:	de b7       	in	r29, 0x3e	; 62
     8c0:	62 97       	sbiw	r28, 0x12	; 18
     8c2:	0f b6       	in	r0, 0x3f	; 63
     8c4:	f8 94       	cli
     8c6:	de bf       	out	0x3e, r29	; 62
     8c8:	0f be       	out	0x3f, r0	; 63
     8ca:	cd bf       	out	0x3d, r28	; 61
     8cc:	89 83       	std	Y+1, r24	; 0x01
     8ce:	4a 83       	std	Y+2, r20	; 0x02
     8d0:	5b 83       	std	Y+3, r21	; 0x03
     8d2:	6c 83       	std	Y+4, r22	; 0x04
     8d4:	7d 83       	std	Y+5, r23	; 0x05
    uint8_t i;
    for(i = 1; i<=n; i++) {
     8d6:	81 e0       	ldi	r24, 0x01	; 1
     8d8:	8e 83       	std	Y+6, r24	; 0x06
     8da:	9e 81       	ldd	r25, Y+6	; 0x06
     8dc:	89 81       	ldd	r24, Y+1	; 0x01
     8de:	89 17       	cp	r24, r25
     8e0:	08 f4       	brcc	.+2      	; 0x8e4 <led_alarm+0x2c>
     8e2:	9a c0       	rjmp	.+308    	; 0xa18 <led_alarm+0x160>
        switch_off_all_leds();
     8e4:	95 dd       	rcall	.-1238   	; 0x410 <switch_off_all_leds>
   The maximal possible delay is 262.14 ms / F_CPU in MHz.
 */
void
_delay_ms(double __ms)
{
     8e6:	8a 81       	ldd	r24, Y+2	; 0x02
     8e8:	9b 81       	ldd	r25, Y+3	; 0x03
     8ea:	ac 81       	ldd	r26, Y+4	; 0x04
     8ec:	bd 81       	ldd	r27, Y+5	; 0x05
     8ee:	8f 83       	std	Y+7, r24	; 0x07
     8f0:	98 87       	std	Y+8, r25	; 0x08
     8f2:	a9 87       	std	Y+9, r26	; 0x09
     8f4:	ba 87       	std	Y+10, r27	; 0x0a
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     8f6:	20 e0       	ldi	r18, 0x00	; 0
     8f8:	30 e0       	ldi	r19, 0x00	; 0
     8fa:	4a e7       	ldi	r20, 0x7A	; 122
     8fc:	53 e4       	ldi	r21, 0x43	; 67
     8fe:	6f 81       	ldd	r22, Y+7	; 0x07
     900:	78 85       	ldd	r23, Y+8	; 0x08
     902:	89 85       	ldd	r24, Y+9	; 0x09
     904:	9a 85       	ldd	r25, Y+10	; 0x0a
     906:	b5 d7       	rcall	.+3946   	; 0x1872 <__mulsf3>
     908:	dc 01       	movw	r26, r24
     90a:	cb 01       	movw	r24, r22
     90c:	8d 87       	std	Y+13, r24	; 0x0d
     90e:	9e 87       	std	Y+14, r25	; 0x0e
     910:	af 87       	std	Y+15, r26	; 0x0f
     912:	b8 8b       	std	Y+16, r27	; 0x10
	if (__tmp < 1.0)
     914:	20 e0       	ldi	r18, 0x00	; 0
     916:	30 e0       	ldi	r19, 0x00	; 0
     918:	40 e8       	ldi	r20, 0x80	; 128
     91a:	5f e3       	ldi	r21, 0x3F	; 63
     91c:	6d 85       	ldd	r22, Y+13	; 0x0d
     91e:	7e 85       	ldd	r23, Y+14	; 0x0e
     920:	8f 85       	ldd	r24, Y+15	; 0x0f
     922:	98 89       	ldd	r25, Y+16	; 0x10
     924:	36 d7       	rcall	.+3692   	; 0x1792 <__eqsf2>
     926:	88 23       	and	r24, r24
     928:	0c f0       	brlt	.+2      	; 0x92c <led_alarm+0x74>
     92a:	05 c0       	rjmp	.+10     	; 0x936 <led_alarm+0x7e>
		__ticks = 1;
     92c:	81 e0       	ldi	r24, 0x01	; 1
     92e:	90 e0       	ldi	r25, 0x00	; 0
     930:	9c 87       	std	Y+12, r25	; 0x0c
     932:	8b 87       	std	Y+11, r24	; 0x0b
     934:	18 c0       	rjmp	.+48     	; 0x966 <led_alarm+0xae>
	else if (__tmp > 65535)
     936:	20 e0       	ldi	r18, 0x00	; 0
     938:	3f ef       	ldi	r19, 0xFF	; 255
     93a:	4f e7       	ldi	r20, 0x7F	; 127
     93c:	57 e4       	ldi	r21, 0x47	; 71
     93e:	6d 85       	ldd	r22, Y+13	; 0x0d
     940:	7e 85       	ldd	r23, Y+14	; 0x0e
     942:	8f 85       	ldd	r24, Y+15	; 0x0f
     944:	98 89       	ldd	r25, Y+16	; 0x10
     946:	28 d7       	rcall	.+3664   	; 0x1798 <__gesf2>
     948:	18 16       	cp	r1, r24
     94a:	0c f0       	brlt	.+2      	; 0x94e <led_alarm+0x96>
     94c:	03 c0       	rjmp	.+6      	; 0x954 <led_alarm+0x9c>
		__ticks = 0;	/* i.e. 65536 */
     94e:	1c 86       	std	Y+12, r1	; 0x0c
     950:	1b 86       	std	Y+11, r1	; 0x0b
     952:	09 c0       	rjmp	.+18     	; 0x966 <led_alarm+0xae>
	else
		__ticks = (uint16_t)__tmp;
     954:	6d 85       	ldd	r22, Y+13	; 0x0d
     956:	7e 85       	ldd	r23, Y+14	; 0x0e
     958:	8f 85       	ldd	r24, Y+15	; 0x0f
     95a:	98 89       	ldd	r25, Y+16	; 0x10
     95c:	da d6       	rcall	.+3508   	; 0x1712 <__fixsfsi>
     95e:	dc 01       	movw	r26, r24
     960:	cb 01       	movw	r24, r22
     962:	9c 87       	std	Y+12, r25	; 0x0c
     964:	8b 87       	std	Y+11, r24	; 0x0b
     966:	8b 85       	ldd	r24, Y+11	; 0x0b
     968:	9c 85       	ldd	r25, Y+12	; 0x0c
     96a:	9a 8b       	std	Y+18, r25	; 0x12
     96c:	89 8b       	std	Y+17, r24	; 0x11
     96e:	89 89       	ldd	r24, Y+17	; 0x11
     970:	9a 89       	ldd	r25, Y+18	; 0x12
     972:	01 97       	sbiw	r24, 0x01	; 1
     974:	f1 f7       	brne	.-4      	; 0x972 <led_alarm+0xba>
     976:	9a 8b       	std	Y+18, r25	; 0x12
     978:	89 8b       	std	Y+17, r24	; 0x11
        _delay_ms(delay);
        switch_on_all_leds();
     97a:	41 dd       	rcall	.-1406   	; 0x3fe <switch_on_all_leds>
   The maximal possible delay is 262.14 ms / F_CPU in MHz.
 */
void
_delay_ms(double __ms)
{
     97c:	8a 81       	ldd	r24, Y+2	; 0x02
     97e:	9b 81       	ldd	r25, Y+3	; 0x03
     980:	ac 81       	ldd	r26, Y+4	; 0x04
     982:	bd 81       	ldd	r27, Y+5	; 0x05
     984:	8d 87       	std	Y+13, r24	; 0x0d
     986:	9e 87       	std	Y+14, r25	; 0x0e
     988:	af 87       	std	Y+15, r26	; 0x0f
     98a:	b8 8b       	std	Y+16, r27	; 0x10
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     98c:	20 e0       	ldi	r18, 0x00	; 0
     98e:	30 e0       	ldi	r19, 0x00	; 0
     990:	4a e7       	ldi	r20, 0x7A	; 122
     992:	53 e4       	ldi	r21, 0x43	; 67
     994:	6d 85       	ldd	r22, Y+13	; 0x0d
     996:	7e 85       	ldd	r23, Y+14	; 0x0e
     998:	8f 85       	ldd	r24, Y+15	; 0x0f
     99a:	98 89       	ldd	r25, Y+16	; 0x10
     99c:	6a d7       	rcall	.+3796   	; 0x1872 <__mulsf3>
     99e:	dc 01       	movw	r26, r24
     9a0:	cb 01       	movw	r24, r22
     9a2:	8f 83       	std	Y+7, r24	; 0x07
     9a4:	98 87       	std	Y+8, r25	; 0x08
     9a6:	a9 87       	std	Y+9, r26	; 0x09
     9a8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     9aa:	20 e0       	ldi	r18, 0x00	; 0
     9ac:	30 e0       	ldi	r19, 0x00	; 0
     9ae:	40 e8       	ldi	r20, 0x80	; 128
     9b0:	5f e3       	ldi	r21, 0x3F	; 63
     9b2:	6f 81       	ldd	r22, Y+7	; 0x07
     9b4:	78 85       	ldd	r23, Y+8	; 0x08
     9b6:	89 85       	ldd	r24, Y+9	; 0x09
     9b8:	9a 85       	ldd	r25, Y+10	; 0x0a
     9ba:	eb d6       	rcall	.+3542   	; 0x1792 <__eqsf2>
     9bc:	88 23       	and	r24, r24
     9be:	0c f0       	brlt	.+2      	; 0x9c2 <led_alarm+0x10a>
     9c0:	05 c0       	rjmp	.+10     	; 0x9cc <led_alarm+0x114>
		__ticks = 1;
     9c2:	81 e0       	ldi	r24, 0x01	; 1
     9c4:	90 e0       	ldi	r25, 0x00	; 0
     9c6:	9a 8b       	std	Y+18, r25	; 0x12
     9c8:	89 8b       	std	Y+17, r24	; 0x11
     9ca:	18 c0       	rjmp	.+48     	; 0x9fc <led_alarm+0x144>
	else if (__tmp > 65535)
     9cc:	20 e0       	ldi	r18, 0x00	; 0
     9ce:	3f ef       	ldi	r19, 0xFF	; 255
     9d0:	4f e7       	ldi	r20, 0x7F	; 127
     9d2:	57 e4       	ldi	r21, 0x47	; 71
     9d4:	6f 81       	ldd	r22, Y+7	; 0x07
     9d6:	78 85       	ldd	r23, Y+8	; 0x08
     9d8:	89 85       	ldd	r24, Y+9	; 0x09
     9da:	9a 85       	ldd	r25, Y+10	; 0x0a
     9dc:	dd d6       	rcall	.+3514   	; 0x1798 <__gesf2>
     9de:	18 16       	cp	r1, r24
     9e0:	0c f0       	brlt	.+2      	; 0x9e4 <led_alarm+0x12c>
     9e2:	03 c0       	rjmp	.+6      	; 0x9ea <led_alarm+0x132>
		__ticks = 0;	/* i.e. 65536 */
     9e4:	1a 8a       	std	Y+18, r1	; 0x12
     9e6:	19 8a       	std	Y+17, r1	; 0x11
     9e8:	09 c0       	rjmp	.+18     	; 0x9fc <led_alarm+0x144>
	else
		__ticks = (uint16_t)__tmp;
     9ea:	6f 81       	ldd	r22, Y+7	; 0x07
     9ec:	78 85       	ldd	r23, Y+8	; 0x08
     9ee:	89 85       	ldd	r24, Y+9	; 0x09
     9f0:	9a 85       	ldd	r25, Y+10	; 0x0a
     9f2:	8f d6       	rcall	.+3358   	; 0x1712 <__fixsfsi>
     9f4:	dc 01       	movw	r26, r24
     9f6:	cb 01       	movw	r24, r22
     9f8:	9a 8b       	std	Y+18, r25	; 0x12
     9fa:	89 8b       	std	Y+17, r24	; 0x11
     9fc:	89 89       	ldd	r24, Y+17	; 0x11
     9fe:	9a 89       	ldd	r25, Y+18	; 0x12
     a00:	9c 87       	std	Y+12, r25	; 0x0c
     a02:	8b 87       	std	Y+11, r24	; 0x0b
     a04:	8b 85       	ldd	r24, Y+11	; 0x0b
     a06:	9c 85       	ldd	r25, Y+12	; 0x0c
     a08:	01 97       	sbiw	r24, 0x01	; 1
     a0a:	f1 f7       	brne	.-4      	; 0xa08 <led_alarm+0x150>
     a0c:	9c 87       	std	Y+12, r25	; 0x0c
     a0e:	8b 87       	std	Y+11, r24	; 0x0b
     a10:	8e 81       	ldd	r24, Y+6	; 0x06
     a12:	8f 5f       	subi	r24, 0xFF	; 255
     a14:	8e 83       	std	Y+6, r24	; 0x06
     a16:	61 cf       	rjmp	.-318    	; 0x8da <led_alarm+0x22>
        _delay_ms(delay);
    }
    switch_off_all_leds();
     a18:	fb dc       	rcall	.-1546   	; 0x410 <switch_off_all_leds>
     a1a:	62 96       	adiw	r28, 0x12	; 18
     a1c:	0f b6       	in	r0, 0x3f	; 63
     a1e:	f8 94       	cli
     a20:	de bf       	out	0x3e, r29	; 62
     a22:	0f be       	out	0x3f, r0	; 63
     a24:	cd bf       	out	0x3d, r28	; 61
     a26:	df 91       	pop	r29
     a28:	cf 91       	pop	r28
     a2a:	08 95       	ret

00000a2c <roundp>:
}

/*
 * switch on every dels depending of the percentage p
 */
//#define roundp floor
inline uint8_t roundp(double n) {
     a2c:	cf 93       	push	r28
     a2e:	df 93       	push	r29
     a30:	cd b7       	in	r28, 0x3d	; 61
     a32:	de b7       	in	r29, 0x3e	; 62
     a34:	24 97       	sbiw	r28, 0x04	; 4
     a36:	0f b6       	in	r0, 0x3f	; 63
     a38:	f8 94       	cli
     a3a:	de bf       	out	0x3e, r29	; 62
     a3c:	0f be       	out	0x3f, r0	; 63
     a3e:	cd bf       	out	0x3d, r28	; 61
     a40:	69 83       	std	Y+1, r22	; 0x01
     a42:	7a 83       	std	Y+2, r23	; 0x02
     a44:	8b 83       	std	Y+3, r24	; 0x03
     a46:	9c 83       	std	Y+4, r25	; 0x04
    return floor(n+0.5);
     a48:	20 e0       	ldi	r18, 0x00	; 0
     a4a:	30 e0       	ldi	r19, 0x00	; 0
     a4c:	40 e0       	ldi	r20, 0x00	; 0
     a4e:	5f e3       	ldi	r21, 0x3F	; 63
     a50:	69 81       	ldd	r22, Y+1	; 0x01
     a52:	7a 81       	ldd	r23, Y+2	; 0x02
     a54:	8b 81       	ldd	r24, Y+3	; 0x03
     a56:	9c 81       	ldd	r25, Y+4	; 0x04
     a58:	d4 d5       	rcall	.+2984   	; 0x1602 <__addsf3>
     a5a:	dc 01       	movw	r26, r24
     a5c:	cb 01       	movw	r24, r22
     a5e:	bc 01       	movw	r22, r24
     a60:	cd 01       	movw	r24, r26
     a62:	7e d6       	rcall	.+3324   	; 0x1760 <floor>
     a64:	dc 01       	movw	r26, r24
     a66:	cb 01       	movw	r24, r22
     a68:	bc 01       	movw	r22, r24
     a6a:	cd 01       	movw	r24, r26
     a6c:	52 d6       	rcall	.+3236   	; 0x1712 <__fixsfsi>
     a6e:	dc 01       	movw	r26, r24
     a70:	cb 01       	movw	r24, r22
     a72:	99 27       	eor	r25, r25
     a74:	24 96       	adiw	r28, 0x04	; 4
     a76:	0f b6       	in	r0, 0x3f	; 63
     a78:	f8 94       	cli
     a7a:	de bf       	out	0x3e, r29	; 62
     a7c:	0f be       	out	0x3f, r0	; 63
     a7e:	cd bf       	out	0x3d, r28	; 61
     a80:	df 91       	pop	r29
     a82:	cf 91       	pop	r28
     a84:	08 95       	ret

00000a86 <show_percent>:
}

// roundp = round for positive number
void show_percent(double p) {
     a86:	cf 93       	push	r28
     a88:	df 93       	push	r29
     a8a:	cd b7       	in	r28, 0x3d	; 61
     a8c:	de b7       	in	r29, 0x3e	; 62
     a8e:	25 97       	sbiw	r28, 0x05	; 5
     a90:	0f b6       	in	r0, 0x3f	; 63
     a92:	f8 94       	cli
     a94:	de bf       	out	0x3e, r29	; 62
     a96:	0f be       	out	0x3f, r0	; 63
     a98:	cd bf       	out	0x3d, r28	; 61
     a9a:	69 83       	std	Y+1, r22	; 0x01
     a9c:	7a 83       	std	Y+2, r23	; 0x02
     a9e:	8b 83       	std	Y+3, r24	; 0x03
     aa0:	9c 83       	std	Y+4, r25	; 0x04
    // p pourcent
    uint8_t n;
    //n = 4;
    n = roundp(p / 100.0 * Nleds); // TO FIX (math.h ceil floor ... round en Java !)
     aa2:	20 e0       	ldi	r18, 0x00	; 0
     aa4:	30 e0       	ldi	r19, 0x00	; 0
     aa6:	48 ec       	ldi	r20, 0xC8	; 200
     aa8:	52 e4       	ldi	r21, 0x42	; 66
     aaa:	69 81       	ldd	r22, Y+1	; 0x01
     aac:	7a 81       	ldd	r23, Y+2	; 0x02
     aae:	8b 81       	ldd	r24, Y+3	; 0x03
     ab0:	9c 81       	ldd	r25, Y+4	; 0x04
     ab2:	e9 d5       	rcall	.+3026   	; 0x1686 <__divsf3>
     ab4:	dc 01       	movw	r26, r24
     ab6:	cb 01       	movw	r24, r22
     ab8:	20 e0       	ldi	r18, 0x00	; 0
     aba:	30 e0       	ldi	r19, 0x00	; 0
     abc:	40 e0       	ldi	r20, 0x00	; 0
     abe:	51 e4       	ldi	r21, 0x41	; 65
     ac0:	bc 01       	movw	r22, r24
     ac2:	cd 01       	movw	r24, r26
     ac4:	d6 d6       	rcall	.+3500   	; 0x1872 <__mulsf3>
     ac6:	dc 01       	movw	r26, r24
     ac8:	cb 01       	movw	r24, r22
     aca:	bc 01       	movw	r22, r24
     acc:	cd 01       	movw	r24, r26
     ace:	ae df       	rcall	.-164    	; 0xa2c <roundp>
     ad0:	8d 83       	std	Y+5, r24	; 0x05
    // TO FIX : +0.5 is a very dirty hack
    switch_on_min_dels(n);
     ad2:	8d 81       	ldd	r24, Y+5	; 0x05
     ad4:	9c de       	rcall	.-712    	; 0x80e <switch_on_min_dels>
     ad6:	25 96       	adiw	r28, 0x05	; 5
     ad8:	0f b6       	in	r0, 0x3f	; 63
     ada:	f8 94       	cli
     adc:	de bf       	out	0x3e, r29	; 62
     ade:	0f be       	out	0x3f, r0	; 63
     ae0:	cd bf       	out	0x3d, r28	; 61
     ae2:	df 91       	pop	r29
     ae4:	cf 91       	pop	r28
     ae6:	08 95       	ret

00000ae8 <beep>:
}

/*
 * send a sound (on or more beep(s))
 */
void beep(uint8_t n, double delay) {
     ae8:	cf 93       	push	r28
     aea:	df 93       	push	r29
     aec:	cd b7       	in	r28, 0x3d	; 61
     aee:	de b7       	in	r29, 0x3e	; 62
     af0:	62 97       	sbiw	r28, 0x12	; 18
     af2:	0f b6       	in	r0, 0x3f	; 63
     af4:	f8 94       	cli
     af6:	de bf       	out	0x3e, r29	; 62
     af8:	0f be       	out	0x3f, r0	; 63
     afa:	cd bf       	out	0x3d, r28	; 61
     afc:	89 83       	std	Y+1, r24	; 0x01
     afe:	4a 83       	std	Y+2, r20	; 0x02
     b00:	5b 83       	std	Y+3, r21	; 0x03
     b02:	6c 83       	std	Y+4, r22	; 0x04
     b04:	7d 83       	std	Y+5, r23	; 0x05
    // TO DO
    uint8_t i;
    for(i = 1; i<=n; i++) {
     b06:	81 e0       	ldi	r24, 0x01	; 1
     b08:	8e 83       	std	Y+6, r24	; 0x06
     b0a:	9e 81       	ldd	r25, Y+6	; 0x06
     b0c:	89 81       	ldd	r24, Y+1	; 0x01
     b0e:	89 17       	cp	r24, r25
     b10:	08 f4       	brcc	.+2      	; 0xb14 <beep+0x2c>
     b12:	52 c0       	rjmp	.+164    	; 0xbb8 <beep+0xd0>
        //TO DO : send a beep
        if (n>1) {
     b14:	89 81       	ldd	r24, Y+1	; 0x01
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	08 f4       	brcc	.+2      	; 0xb1c <beep+0x34>
     b1a:	4a c0       	rjmp	.+148    	; 0xbb0 <beep+0xc8>
   The maximal possible delay is 262.14 ms / F_CPU in MHz.
 */
void
_delay_ms(double __ms)
{
     b1c:	8a 81       	ldd	r24, Y+2	; 0x02
     b1e:	9b 81       	ldd	r25, Y+3	; 0x03
     b20:	ac 81       	ldd	r26, Y+4	; 0x04
     b22:	bd 81       	ldd	r27, Y+5	; 0x05
     b24:	8f 83       	std	Y+7, r24	; 0x07
     b26:	98 87       	std	Y+8, r25	; 0x08
     b28:	a9 87       	std	Y+9, r26	; 0x09
     b2a:	ba 87       	std	Y+10, r27	; 0x0a
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b2c:	20 e0       	ldi	r18, 0x00	; 0
     b2e:	30 e0       	ldi	r19, 0x00	; 0
     b30:	4a e7       	ldi	r20, 0x7A	; 122
     b32:	53 e4       	ldi	r21, 0x43	; 67
     b34:	6f 81       	ldd	r22, Y+7	; 0x07
     b36:	78 85       	ldd	r23, Y+8	; 0x08
     b38:	89 85       	ldd	r24, Y+9	; 0x09
     b3a:	9a 85       	ldd	r25, Y+10	; 0x0a
     b3c:	9a d6       	rcall	.+3380   	; 0x1872 <__mulsf3>
     b3e:	dc 01       	movw	r26, r24
     b40:	cb 01       	movw	r24, r22
     b42:	8d 87       	std	Y+13, r24	; 0x0d
     b44:	9e 87       	std	Y+14, r25	; 0x0e
     b46:	af 87       	std	Y+15, r26	; 0x0f
     b48:	b8 8b       	std	Y+16, r27	; 0x10
	if (__tmp < 1.0)
     b4a:	20 e0       	ldi	r18, 0x00	; 0
     b4c:	30 e0       	ldi	r19, 0x00	; 0
     b4e:	40 e8       	ldi	r20, 0x80	; 128
     b50:	5f e3       	ldi	r21, 0x3F	; 63
     b52:	6d 85       	ldd	r22, Y+13	; 0x0d
     b54:	7e 85       	ldd	r23, Y+14	; 0x0e
     b56:	8f 85       	ldd	r24, Y+15	; 0x0f
     b58:	98 89       	ldd	r25, Y+16	; 0x10
     b5a:	1b d6       	rcall	.+3126   	; 0x1792 <__eqsf2>
     b5c:	88 23       	and	r24, r24
     b5e:	0c f0       	brlt	.+2      	; 0xb62 <beep+0x7a>
     b60:	05 c0       	rjmp	.+10     	; 0xb6c <beep+0x84>
		__ticks = 1;
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	9c 87       	std	Y+12, r25	; 0x0c
     b68:	8b 87       	std	Y+11, r24	; 0x0b
     b6a:	18 c0       	rjmp	.+48     	; 0xb9c <beep+0xb4>
	else if (__tmp > 65535)
     b6c:	20 e0       	ldi	r18, 0x00	; 0
     b6e:	3f ef       	ldi	r19, 0xFF	; 255
     b70:	4f e7       	ldi	r20, 0x7F	; 127
     b72:	57 e4       	ldi	r21, 0x47	; 71
     b74:	6d 85       	ldd	r22, Y+13	; 0x0d
     b76:	7e 85       	ldd	r23, Y+14	; 0x0e
     b78:	8f 85       	ldd	r24, Y+15	; 0x0f
     b7a:	98 89       	ldd	r25, Y+16	; 0x10
     b7c:	0d d6       	rcall	.+3098   	; 0x1798 <__gesf2>
     b7e:	18 16       	cp	r1, r24
     b80:	0c f0       	brlt	.+2      	; 0xb84 <beep+0x9c>
     b82:	03 c0       	rjmp	.+6      	; 0xb8a <beep+0xa2>
		__ticks = 0;	/* i.e. 65536 */
     b84:	1c 86       	std	Y+12, r1	; 0x0c
     b86:	1b 86       	std	Y+11, r1	; 0x0b
     b88:	09 c0       	rjmp	.+18     	; 0xb9c <beep+0xb4>
	else
		__ticks = (uint16_t)__tmp;
     b8a:	6d 85       	ldd	r22, Y+13	; 0x0d
     b8c:	7e 85       	ldd	r23, Y+14	; 0x0e
     b8e:	8f 85       	ldd	r24, Y+15	; 0x0f
     b90:	98 89       	ldd	r25, Y+16	; 0x10
     b92:	bf d5       	rcall	.+2942   	; 0x1712 <__fixsfsi>
     b94:	dc 01       	movw	r26, r24
     b96:	cb 01       	movw	r24, r22
     b98:	9c 87       	std	Y+12, r25	; 0x0c
     b9a:	8b 87       	std	Y+11, r24	; 0x0b
     b9c:	8b 85       	ldd	r24, Y+11	; 0x0b
     b9e:	9c 85       	ldd	r25, Y+12	; 0x0c
     ba0:	9a 8b       	std	Y+18, r25	; 0x12
     ba2:	89 8b       	std	Y+17, r24	; 0x11
     ba4:	89 89       	ldd	r24, Y+17	; 0x11
     ba6:	9a 89       	ldd	r25, Y+18	; 0x12
     ba8:	01 97       	sbiw	r24, 0x01	; 1
     baa:	f1 f7       	brne	.-4      	; 0xba8 <beep+0xc0>
     bac:	9a 8b       	std	Y+18, r25	; 0x12
     bae:	89 8b       	std	Y+17, r24	; 0x11
     bb0:	8e 81       	ldd	r24, Y+6	; 0x06
     bb2:	8f 5f       	subi	r24, 0xFF	; 255
     bb4:	8e 83       	std	Y+6, r24	; 0x06
     bb6:	a9 cf       	rjmp	.-174    	; 0xb0a <beep+0x22>
     bb8:	62 96       	adiw	r28, 0x12	; 18
     bba:	0f b6       	in	r0, 0x3f	; 63
     bbc:	f8 94       	cli
     bbe:	de bf       	out	0x3e, r29	; 62
     bc0:	0f be       	out	0x3f, r0	; 63
     bc2:	cd bf       	out	0x3d, r28	; 61
     bc4:	df 91       	pop	r29
     bc6:	cf 91       	pop	r28
     bc8:	08 95       	ret

00000bca <StartStopChronometer>:
            _delay_ms(delay);
        }
    }
}

/*
 * start or stop chronometer
 */
inline void StartStopChronometer(void) {
     bca:	cf 93       	push	r28
     bcc:	df 93       	push	r29
     bce:	cd b7       	in	r28, 0x3d	; 61
     bd0:	de b7       	in	r29, 0x3e	; 62
    beep(1,100);
     bd2:	40 e0       	ldi	r20, 0x00	; 0
     bd4:	50 e0       	ldi	r21, 0x00	; 0
     bd6:	68 ec       	ldi	r22, 0xC8	; 200
     bd8:	72 e4       	ldi	r23, 0x42	; 66
     bda:	81 e0       	ldi	r24, 0x01	; 1
     bdc:	85 df       	rcall	.-246    	; 0xae8 <beep>
    led_alarm(3,50);
     bde:	40 e0       	ldi	r20, 0x00	; 0
     be0:	50 e0       	ldi	r21, 0x00	; 0
     be2:	68 e4       	ldi	r22, 0x48	; 72
     be4:	72 e4       	ldi	r23, 0x42	; 66
     be6:	83 e0       	ldi	r24, 0x03	; 3
     be8:	67 de       	rcall	.-818    	; 0x8b8 <led_alarm>
    if (running_chronometer) {
     bea:	80 91 7c 00 	lds	r24, 0x007C
     bee:	88 23       	and	r24, r24
     bf0:	91 f0       	breq	.+36     	; 0xc16 <StartStopChronometer+0x4c>
        //running_chronometer = false; // false = 0
        if (compare_time(&current_time,&best_time) == 1) {
     bf2:	62 e8       	ldi	r22, 0x82	; 130
     bf4:	70 e0       	ldi	r23, 0x00	; 0
     bf6:	8d e7       	ldi	r24, 0x7D	; 125
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	82 db       	rcall	.-2300   	; 0x300 <compare_time>
     bfc:	81 30       	cpi	r24, 0x01	; 1
     bfe:	29 f4       	brne	.+10     	; 0xc0a <StartStopChronometer+0x40>
            copy_time(&current_time,&best_time);
     c00:	62 e8       	ldi	r22, 0x82	; 130
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	8d e7       	ldi	r24, 0x7D	; 125
     c06:	90 e0       	ldi	r25, 0x00	; 0
     c08:	47 db       	rcall	.-2418   	; 0x298 <copy_time>
        }
        copy_time(&current_time,&last_time);
     c0a:	67 e8       	ldi	r22, 0x87	; 135
     c0c:	70 e0       	ldi	r23, 0x00	; 0
     c0e:	8d e7       	ldi	r24, 0x7D	; 125
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	42 db       	rcall	.-2428   	; 0x298 <copy_time>
     c14:	03 c0       	rjmp	.+6      	; 0xc1c <StartStopChronometer+0x52>
    } else {
        // this is before first lap (start from pit)
        running_chronometer = true; // true = -1
     c16:	81 e0       	ldi	r24, 0x01	; 1
     c18:	80 93 7c 00 	sts	0x007C, r24
     c1c:	df 91       	pop	r29
     c1e:	cf 91       	pop	r28
     c20:	08 95       	ret

00000c22 <TestRunningChronometer>:
        // this is after first lap
    }
}

void TestRunningChronometer(void) {
     c22:	cf 93       	push	r28
     c24:	df 93       	push	r29
     c26:	cd b7       	in	r28, 0x3d	; 61
     c28:	de b7       	in	r29, 0x3e	; 62
     c2a:	2c 97       	sbiw	r28, 0x0c	; 12
     c2c:	0f b6       	in	r0, 0x3f	; 63
     c2e:	f8 94       	cli
     c30:	de bf       	out	0x3e, r29	; 62
     c32:	0f be       	out	0x3f, r0	; 63
     c34:	cd bf       	out	0x3d, r28	; 61
    if (running_chronometer) {
     c36:	80 91 7c 00 	lds	r24, 0x007C
     c3a:	88 23       	and	r24, r24
     c3c:	09 f4       	brne	.+2      	; 0xc40 <TestRunningChronometer+0x1e>
     c3e:	98 c0       	rjmp	.+304    	; 0xd70 <TestRunningChronometer+0x14e>
        switch_on_led(8);
     c40:	88 e0       	ldi	r24, 0x08	; 8
     c42:	f0 db       	rcall	.-2080   	; 0x424 <switch_on_led>
   The maximal possible delay is 262.14 ms / F_CPU in MHz.
 */
void
_delay_ms(double __ms)
{
     c44:	80 e0       	ldi	r24, 0x00	; 0
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	a8 ec       	ldi	r26, 0xC8	; 200
     c4a:	b2 e4       	ldi	r27, 0x42	; 66
     c4c:	89 83       	std	Y+1, r24	; 0x01
     c4e:	9a 83       	std	Y+2, r25	; 0x02
     c50:	ab 83       	std	Y+3, r26	; 0x03
     c52:	bc 83       	std	Y+4, r27	; 0x04
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c54:	20 e0       	ldi	r18, 0x00	; 0
     c56:	30 e0       	ldi	r19, 0x00	; 0
     c58:	4a e7       	ldi	r20, 0x7A	; 122
     c5a:	53 e4       	ldi	r21, 0x43	; 67
     c5c:	69 81       	ldd	r22, Y+1	; 0x01
     c5e:	7a 81       	ldd	r23, Y+2	; 0x02
     c60:	8b 81       	ldd	r24, Y+3	; 0x03
     c62:	9c 81       	ldd	r25, Y+4	; 0x04
     c64:	06 d6       	rcall	.+3084   	; 0x1872 <__mulsf3>
     c66:	dc 01       	movw	r26, r24
     c68:	cb 01       	movw	r24, r22
     c6a:	8f 83       	std	Y+7, r24	; 0x07
     c6c:	98 87       	std	Y+8, r25	; 0x08
     c6e:	a9 87       	std	Y+9, r26	; 0x09
     c70:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     c72:	20 e0       	ldi	r18, 0x00	; 0
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	40 e8       	ldi	r20, 0x80	; 128
     c78:	5f e3       	ldi	r21, 0x3F	; 63
     c7a:	6f 81       	ldd	r22, Y+7	; 0x07
     c7c:	78 85       	ldd	r23, Y+8	; 0x08
     c7e:	89 85       	ldd	r24, Y+9	; 0x09
     c80:	9a 85       	ldd	r25, Y+10	; 0x0a
     c82:	87 d5       	rcall	.+2830   	; 0x1792 <__eqsf2>
     c84:	88 23       	and	r24, r24
     c86:	0c f0       	brlt	.+2      	; 0xc8a <TestRunningChronometer+0x68>
     c88:	05 c0       	rjmp	.+10     	; 0xc94 <TestRunningChronometer+0x72>
		__ticks = 1;
     c8a:	81 e0       	ldi	r24, 0x01	; 1
     c8c:	90 e0       	ldi	r25, 0x00	; 0
     c8e:	9e 83       	std	Y+6, r25	; 0x06
     c90:	8d 83       	std	Y+5, r24	; 0x05
     c92:	18 c0       	rjmp	.+48     	; 0xcc4 <TestRunningChronometer+0xa2>
	else if (__tmp > 65535)
     c94:	20 e0       	ldi	r18, 0x00	; 0
     c96:	3f ef       	ldi	r19, 0xFF	; 255
     c98:	4f e7       	ldi	r20, 0x7F	; 127
     c9a:	57 e4       	ldi	r21, 0x47	; 71
     c9c:	6f 81       	ldd	r22, Y+7	; 0x07
     c9e:	78 85       	ldd	r23, Y+8	; 0x08
     ca0:	89 85       	ldd	r24, Y+9	; 0x09
     ca2:	9a 85       	ldd	r25, Y+10	; 0x0a
     ca4:	79 d5       	rcall	.+2802   	; 0x1798 <__gesf2>
     ca6:	18 16       	cp	r1, r24
     ca8:	0c f0       	brlt	.+2      	; 0xcac <TestRunningChronometer+0x8a>
     caa:	03 c0       	rjmp	.+6      	; 0xcb2 <TestRunningChronometer+0x90>
		__ticks = 0;	/* i.e. 65536 */
     cac:	1e 82       	std	Y+6, r1	; 0x06
     cae:	1d 82       	std	Y+5, r1	; 0x05
     cb0:	09 c0       	rjmp	.+18     	; 0xcc4 <TestRunningChronometer+0xa2>
	else
		__ticks = (uint16_t)__tmp;
     cb2:	6f 81       	ldd	r22, Y+7	; 0x07
     cb4:	78 85       	ldd	r23, Y+8	; 0x08
     cb6:	89 85       	ldd	r24, Y+9	; 0x09
     cb8:	9a 85       	ldd	r25, Y+10	; 0x0a
     cba:	2b d5       	rcall	.+2646   	; 0x1712 <__fixsfsi>
     cbc:	dc 01       	movw	r26, r24
     cbe:	cb 01       	movw	r24, r22
     cc0:	9e 83       	std	Y+6, r25	; 0x06
     cc2:	8d 83       	std	Y+5, r24	; 0x05
     cc4:	8d 81       	ldd	r24, Y+5	; 0x05
     cc6:	9e 81       	ldd	r25, Y+6	; 0x06
     cc8:	9c 87       	std	Y+12, r25	; 0x0c
     cca:	8b 87       	std	Y+11, r24	; 0x0b
     ccc:	8b 85       	ldd	r24, Y+11	; 0x0b
     cce:	9c 85       	ldd	r25, Y+12	; 0x0c
     cd0:	01 97       	sbiw	r24, 0x01	; 1
     cd2:	f1 f7       	brne	.-4      	; 0xcd0 <TestRunningChronometer+0xae>
     cd4:	9c 87       	std	Y+12, r25	; 0x0c
     cd6:	8b 87       	std	Y+11, r24	; 0x0b
        _delay_ms(100);
        switch_off_led(8);
     cd8:	88 e0       	ldi	r24, 0x08	; 8
     cda:	cd db       	rcall	.-2150   	; 0x476 <switch_off_led>
   The maximal possible delay is 262.14 ms / F_CPU in MHz.
 */
void
_delay_ms(double __ms)
{
     cdc:	80 e0       	ldi	r24, 0x00	; 0
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	a8 ec       	ldi	r26, 0xC8	; 200
     ce2:	b2 e4       	ldi	r27, 0x42	; 66
     ce4:	8f 83       	std	Y+7, r24	; 0x07
     ce6:	98 87       	std	Y+8, r25	; 0x08
     ce8:	a9 87       	std	Y+9, r26	; 0x09
     cea:	ba 87       	std	Y+10, r27	; 0x0a
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cec:	20 e0       	ldi	r18, 0x00	; 0
     cee:	30 e0       	ldi	r19, 0x00	; 0
     cf0:	4a e7       	ldi	r20, 0x7A	; 122
     cf2:	53 e4       	ldi	r21, 0x43	; 67
     cf4:	6f 81       	ldd	r22, Y+7	; 0x07
     cf6:	78 85       	ldd	r23, Y+8	; 0x08
     cf8:	89 85       	ldd	r24, Y+9	; 0x09
     cfa:	9a 85       	ldd	r25, Y+10	; 0x0a
     cfc:	ba d5       	rcall	.+2932   	; 0x1872 <__mulsf3>
     cfe:	dc 01       	movw	r26, r24
     d00:	cb 01       	movw	r24, r22
     d02:	89 83       	std	Y+1, r24	; 0x01
     d04:	9a 83       	std	Y+2, r25	; 0x02
     d06:	ab 83       	std	Y+3, r26	; 0x03
     d08:	bc 83       	std	Y+4, r27	; 0x04
	if (__tmp < 1.0)
     d0a:	20 e0       	ldi	r18, 0x00	; 0
     d0c:	30 e0       	ldi	r19, 0x00	; 0
     d0e:	40 e8       	ldi	r20, 0x80	; 128
     d10:	5f e3       	ldi	r21, 0x3F	; 63
     d12:	69 81       	ldd	r22, Y+1	; 0x01
     d14:	7a 81       	ldd	r23, Y+2	; 0x02
     d16:	8b 81       	ldd	r24, Y+3	; 0x03
     d18:	9c 81       	ldd	r25, Y+4	; 0x04
     d1a:	3b d5       	rcall	.+2678   	; 0x1792 <__eqsf2>
     d1c:	88 23       	and	r24, r24
     d1e:	0c f0       	brlt	.+2      	; 0xd22 <TestRunningChronometer+0x100>
     d20:	05 c0       	rjmp	.+10     	; 0xd2c <TestRunningChronometer+0x10a>
		__ticks = 1;
     d22:	81 e0       	ldi	r24, 0x01	; 1
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	9c 87       	std	Y+12, r25	; 0x0c
     d28:	8b 87       	std	Y+11, r24	; 0x0b
     d2a:	18 c0       	rjmp	.+48     	; 0xd5c <TestRunningChronometer+0x13a>
	else if (__tmp > 65535)
     d2c:	20 e0       	ldi	r18, 0x00	; 0
     d2e:	3f ef       	ldi	r19, 0xFF	; 255
     d30:	4f e7       	ldi	r20, 0x7F	; 127
     d32:	57 e4       	ldi	r21, 0x47	; 71
     d34:	69 81       	ldd	r22, Y+1	; 0x01
     d36:	7a 81       	ldd	r23, Y+2	; 0x02
     d38:	8b 81       	ldd	r24, Y+3	; 0x03
     d3a:	9c 81       	ldd	r25, Y+4	; 0x04
     d3c:	2d d5       	rcall	.+2650   	; 0x1798 <__gesf2>
     d3e:	18 16       	cp	r1, r24
     d40:	0c f0       	brlt	.+2      	; 0xd44 <TestRunningChronometer+0x122>
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <TestRunningChronometer+0x128>
		__ticks = 0;	/* i.e. 65536 */
     d44:	1c 86       	std	Y+12, r1	; 0x0c
     d46:	1b 86       	std	Y+11, r1	; 0x0b
     d48:	09 c0       	rjmp	.+18     	; 0xd5c <TestRunningChronometer+0x13a>
	else
		__ticks = (uint16_t)__tmp;
     d4a:	69 81       	ldd	r22, Y+1	; 0x01
     d4c:	7a 81       	ldd	r23, Y+2	; 0x02
     d4e:	8b 81       	ldd	r24, Y+3	; 0x03
     d50:	9c 81       	ldd	r25, Y+4	; 0x04
     d52:	df d4       	rcall	.+2494   	; 0x1712 <__fixsfsi>
     d54:	dc 01       	movw	r26, r24
     d56:	cb 01       	movw	r24, r22
     d58:	9c 87       	std	Y+12, r25	; 0x0c
     d5a:	8b 87       	std	Y+11, r24	; 0x0b
     d5c:	8b 85       	ldd	r24, Y+11	; 0x0b
     d5e:	9c 85       	ldd	r25, Y+12	; 0x0c
     d60:	9e 83       	std	Y+6, r25	; 0x06
     d62:	8d 83       	std	Y+5, r24	; 0x05
     d64:	8d 81       	ldd	r24, Y+5	; 0x05
     d66:	9e 81       	ldd	r25, Y+6	; 0x06
     d68:	01 97       	sbiw	r24, 0x01	; 1
     d6a:	f1 f7       	brne	.-4      	; 0xd68 <TestRunningChronometer+0x146>
     d6c:	9e 83       	std	Y+6, r25	; 0x06
     d6e:	8d 83       	std	Y+5, r24	; 0x05
     d70:	2c 96       	adiw	r28, 0x0c	; 12
     d72:	0f b6       	in	r0, 0x3f	; 63
     d74:	f8 94       	cli
     d76:	de bf       	out	0x3e, r29	; 62
     d78:	0f be       	out	0x3f, r0	; 63
     d7a:	cd bf       	out	0x3d, r28	; 61
     d7c:	df 91       	pop	r29
     d7e:	cf 91       	pop	r28
     d80:	08 95       	ret

00000d82 <sf_init>:
        _delay_ms(100);
    }
}

/*
 * software init function
 */
void sf_init(void) {
     d82:	cf 93       	push	r28
     d84:	df 93       	push	r29
     d86:	cd b7       	in	r28, 0x3d	; 61
     d88:	de b7       	in	r29, 0x3e	; 62
    // Leds
    //test_leds_up_off(); // uncomment for release or comment for debug

    // Sound
    //beep(3,100); // uncomment for release or comment for debug

    // Time
    running_chronometer = false;
     d8a:	10 92 7c 00 	sts	0x007C, r1
    init_time(&current_time);
     d8e:	8d e7       	ldi	r24, 0x7D	; 125
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	66 d9       	rcall	.-3380   	; 0x60 <init_time>
    init_time(&last_time);
     d94:	87 e8       	ldi	r24, 0x87	; 135
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	63 d9       	rcall	.-3386   	; 0x60 <init_time>
    init_time(&best_time);
     d9a:	82 e8       	ldi	r24, 0x82	; 130
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	60 d9       	rcall	.-3392   	; 0x60 <init_time>
     da0:	df 91       	pop	r29
     da2:	cf 91       	pop	r28
     da4:	08 95       	ret

00000da6 <hw_init>:
}

/*
 *  hardware init function
 */
void hw_init(void) {
     da6:	cf 93       	push	r28
     da8:	df 93       	push	r29
     daa:	cd b7       	in	r28, 0x3d	; 61
     dac:	de b7       	in	r29, 0x3e	; 62
     dae:	21 97       	sbiw	r28, 0x01	; 1
     db0:	0f b6       	in	r0, 0x3f	; 63
     db2:	f8 94       	cli
     db4:	de bf       	out	0x3e, r29	; 62
     db6:	0f be       	out	0x3f, r0	; 63
     db8:	cd bf       	out	0x3d, r28	; 61
   // ******************
   // * WatchDog Timer *
   // ******************
   // disable by default

   // ********
   // * LEDs *
   // ********
   DDRC=0xFF; // set up PORTD pins 0 to 7 as output
     dba:	8f ef       	ldi	r24, 0xFF	; 255
     dbc:	80 93 34 00 	sts	0x0034, r24
   //switch_on_all_leds();
   switch_off_all_leds();
     dc0:	27 db       	rcall	.-2482   	; 0x410 <switch_off_all_leds>

   // *********************************
   // * Start/Stop chronometer (INT0) *
   // *********************************
   // Set Pin 6 (PD2) as the pin to use for this example
   //PCMSK |= (1<<PIND2); // TO FIX
   //PIND |= (1<<PIND2); // try scls:Error : read-only !!!

   // interrupt on INT0 pin falling edge (sensor triggered)
   MCUCR = (1<<ISC01) | (1<<ISC00);
     dc2:	83 e0       	ldi	r24, 0x03	; 3
     dc4:	80 93 55 00 	sts	0x0055, r24

   // turn on interrupts!

   GICR |= (1<<INT0); //INT0
     dc8:	80 91 5b 00 	lds	r24, 0x005B
     dcc:	80 64       	ori	r24, 0x40	; 64
     dce:	80 93 5b 00 	sts	0x005B, r24

   sei(); // enable interrupts
     dd2:	78 94       	sei

   // *************************************************
   // * Conv Analog to Digital (CAN for RPM and Temp) *
   // *************************************************

   //volatile static int analog_result;
   //volatile static unsigned char analog_busy;

   //analog_busy=1; // busy mark the ADC function
   uint8_t channel = 0; // measure ADC0
     dd4:	19 82       	std	Y+1, r1	; 0x01

   // use internal 2.56V ref  REFS1=1 & REFS0=1 (11)
   // use external ref (01)
   ADMUX=(0<<REFS1)|(1<<REFS0)|(channel & 0x07); // channel & 0x07
     dd6:	89 81       	ldd	r24, Y+1	; 0x01
     dd8:	87 70       	andi	r24, 0x07	; 7
     dda:	80 64       	ori	r24, 0x40	; 64
     ddc:	80 93 27 00 	sts	0x0027, r24

   //ADCSRA=(1<<ADEN)|(1<<ADIE)|(1<<ADIF)|(1<<ADPS2); // interrupt ADIE=1
   ADCSRA=(1<<ADEN)|(0<<ADIE)|(1<<ADIF)|(1<<ADPS2); // no interrupt ADIE=0
     de0:	84 e9       	ldi	r24, 0x94	; 148
     de2:	80 93 26 00 	sts	0x0026, r24

   ADCSRA |= (1 << (ADSC)); // start conversion
     de6:	80 91 26 00 	lds	r24, 0x0026
     dea:	80 64       	ori	r24, 0x40	; 64
     dec:	80 93 26 00 	sts	0x0026, r24

   DDRA=0x00;
     df0:	10 92 3a 00 	sts	0x003A, r1
	// make sure pull-up resistors are turned off
	PORTA = 0x00;
     df4:	10 92 3b 00 	sts	0x003B, r1
	

   // **********
   // * Keypad *
   // **********
   // 1 joystick button (4 directions, up, down, left, right)
   // 2 push buttons (ok, cancel)
   DDRB=0x00;
     df8:	10 92 37 00 	sts	0x0037, r1
   PORTB=0xFF;
     dfc:	8f ef       	ldi	r24, 0xFF	; 255
     dfe:	80 93 38 00 	sts	0x0038, r24
     e02:	21 96       	adiw	r28, 0x01	; 1
     e04:	0f b6       	in	r0, 0x3f	; 63
     e06:	f8 94       	cli
     e08:	de bf       	out	0x3e, r29	; 62
     e0a:	0f be       	out	0x3f, r0	; 63
     e0c:	cd bf       	out	0x3d, r28	; 61
     e0e:	df 91       	pop	r29
     e10:	cf 91       	pop	r28
     e12:	08 95       	ret

00000e14 <init>:

   // ***************
   // * Graphic LCD *
   // ***************

   // Sound

   // Time
}

/*
 * init function
 */
void init(void) {
     e14:	cf 93       	push	r28
     e16:	df 93       	push	r29
     e18:	cd b7       	in	r28, 0x3d	; 61
     e1a:	de b7       	in	r29, 0x3e	; 62
    hw_init();
     e1c:	c4 df       	rcall	.-120    	; 0xda6 <hw_init>
    sf_init();
     e1e:	b1 df       	rcall	.-158    	; 0xd82 <sf_init>
     e20:	df 91       	pop	r29
     e22:	cf 91       	pop	r28
     e24:	08 95       	ret

00000e26 <adcConvert10bit>:
}

/*
 * convert from analog to digital (10 bits)
 */
unsigned short adcConvert10bit(uint8_t ch)
{
     e26:	cf 93       	push	r28
     e28:	df 93       	push	r29
     e2a:	cd b7       	in	r28, 0x3d	; 61
     e2c:	de b7       	in	r29, 0x3e	; 62
     e2e:	21 97       	sbiw	r28, 0x01	; 1
     e30:	0f b6       	in	r0, 0x3f	; 63
     e32:	f8 94       	cli
     e34:	de bf       	out	0x3e, r29	; 62
     e36:	0f be       	out	0x3f, r0	; 63
     e38:	cd bf       	out	0x3d, r28	; 61
     e3a:	89 83       	std	Y+1, r24	; 0x01
	//a2dCompleteFlag = 0;				// clear conversion complete flag
	ADMUX = ((ADMUX) & ~0x1F) | (ch & 0x1F);	// set channel ADC_MUX_MASK=0x1F
     e3c:	80 91 27 00 	lds	r24, 0x0027
     e40:	98 2f       	mov	r25, r24
     e42:	90 7e       	andi	r25, 0xE0	; 224
     e44:	89 81       	ldd	r24, Y+1	; 0x01
     e46:	8f 71       	andi	r24, 0x1F	; 31
     e48:	89 2b       	or	r24, r25
     e4a:	80 93 27 00 	sts	0x0027, r24
	ADCSRA |= (_BV(ADIF)); // clear hardware "conversion complete" flag
     e4e:	80 91 26 00 	lds	r24, 0x0026
     e52:	80 61       	ori	r24, 0x10	; 16
     e54:	80 93 26 00 	sts	0x0026, r24
	ADCSRA |= (_BV(ADSC)); // start conversion
     e58:	80 91 26 00 	lds	r24, 0x0026
     e5c:	80 64       	ori	r24, 0x40	; 64
     e5e:	80 93 26 00 	sts	0x0026, r24
							
	//while(!a2dCompleteFlag);				// wait until conversion complete
	//while( bit_is_clear(ADCSR, ADIF) );		// wait until conversion complete
	while( bit_is_set(ADCSRA, ADSC) );		// wait until conversion complete
     e62:	80 91 26 00 	lds	r24, 0x0026
     e66:	99 27       	eor	r25, r25
     e68:	80 74       	andi	r24, 0x40	; 64
     e6a:	90 70       	andi	r25, 0x00	; 0
     e6c:	00 97       	sbiw	r24, 0x00	; 0
     e6e:	09 f0       	breq	.+2      	; 0xe72 <adcConvert10bit+0x4c>
     e70:	f8 cf       	rjmp	.-16     	; 0xe62 <adcConvert10bit+0x3c>

	// CAUTION: MUST READ ADCL BEFORE ADCH!!!
	return ((ADCL) | ((ADCH)<<8));	// read ADC (full 10 bits);
     e72:	80 91 24 00 	lds	r24, 0x0024
     e76:	28 2f       	mov	r18, r24
     e78:	33 27       	eor	r19, r19
     e7a:	80 91 25 00 	lds	r24, 0x0025
     e7e:	99 27       	eor	r25, r25
     e80:	98 2f       	mov	r25, r24
     e82:	88 27       	eor	r24, r24
     e84:	28 2b       	or	r18, r24
     e86:	39 2b       	or	r19, r25
     e88:	c9 01       	movw	r24, r18
     e8a:	21 96       	adiw	r28, 0x01	; 1
     e8c:	0f b6       	in	r0, 0x3f	; 63
     e8e:	f8 94       	cli
     e90:	de bf       	out	0x3e, r29	; 62
     e92:	0f be       	out	0x3f, r0	; 63
     e94:	cd bf       	out	0x3d, r28	; 61
     e96:	df 91       	pop	r29
     e98:	cf 91       	pop	r28
     e9a:	08 95       	ret

00000e9c <adcConvert8bit>:
}

/*
 * convert from analog to digital (8 bits)
 * starts conversion, waits until conversion is done, and returns result
 */
unsigned char adcConvert8bit(unsigned char ch)
{
     e9c:	cf 93       	push	r28
     e9e:	df 93       	push	r29
     ea0:	cd b7       	in	r28, 0x3d	; 61
     ea2:	de b7       	in	r29, 0x3e	; 62
     ea4:	21 97       	sbiw	r28, 0x01	; 1
     ea6:	0f b6       	in	r0, 0x3f	; 63
     ea8:	f8 94       	cli
     eaa:	de bf       	out	0x3e, r29	; 62
     eac:	0f be       	out	0x3f, r0	; 63
     eae:	cd bf       	out	0x3d, r28	; 61
     eb0:	89 83       	std	Y+1, r24	; 0x01
	// do 10-bit conversion and return highest 8 bits
	return adcConvert10bit(ch)>>2;			// return ADC MSB byte
     eb2:	89 81       	ldd	r24, Y+1	; 0x01
     eb4:	b8 df       	rcall	.-144    	; 0xe26 <adcConvert10bit>
     eb6:	96 95       	lsr	r25
     eb8:	87 95       	ror	r24
     eba:	96 95       	lsr	r25
     ebc:	87 95       	ror	r24
     ebe:	99 27       	eor	r25, r25
     ec0:	21 96       	adiw	r28, 0x01	; 1
     ec2:	0f b6       	in	r0, 0x3f	; 63
     ec4:	f8 94       	cli
     ec6:	de bf       	out	0x3e, r29	; 62
     ec8:	0f be       	out	0x3f, r0	; 63
     eca:	cd bf       	out	0x3d, r28	; 61
     ecc:	df 91       	pop	r29
     ece:	cf 91       	pop	r28
     ed0:	08 95       	ret

00000ed2 <SeekButtons>:
}

#define Nbuts 6
#define B_LEFT 0
#define B_RIGHT 1
#define B_UP 2
#define B_DOWN 3
#define B_OK 4
#define B_CANCEL 5

void SeekButtons(void) {
     ed2:	cf 93       	push	r28
     ed4:	df 93       	push	r29
     ed6:	cd b7       	in	r28, 0x3d	; 61
     ed8:	de b7       	in	r29, 0x3e	; 62
     eda:	22 97       	sbiw	r28, 0x02	; 2
     edc:	0f b6       	in	r0, 0x3f	; 63
     ede:	f8 94       	cli
     ee0:	de bf       	out	0x3e, r29	; 62
     ee2:	0f be       	out	0x3f, r0	; 63
     ee4:	cd bf       	out	0x3d, r28	; 61
    uint8_t bstate = false;
     ee6:	19 82       	std	Y+1, r1	; 0x01
    uint8_t i;
	 for (i=0; i<=Nbuts-1; i++) {
     ee8:	1a 82       	std	Y+2, r1	; 0x02
     eea:	8a 81       	ldd	r24, Y+2	; 0x02
     eec:	86 30       	cpi	r24, 0x06	; 6
     eee:	e8 f4       	brcc	.+58     	; 0xf2a <SeekButtons+0x58>
	     if (PINB>>i) {
     ef0:	80 91 36 00 	lds	r24, 0x0036
     ef4:	28 2f       	mov	r18, r24
     ef6:	33 27       	eor	r19, r19
     ef8:	8a 81       	ldd	r24, Y+2	; 0x02
     efa:	99 27       	eor	r25, r25
     efc:	02 c0       	rjmp	.+4      	; 0xf02 <SeekButtons+0x30>
     efe:	35 95       	asr	r19
     f00:	27 95       	ror	r18
     f02:	8a 95       	dec	r24
     f04:	e2 f7       	brpl	.-8      	; 0xefe <SeekButtons+0x2c>
     f06:	c9 01       	movw	r24, r18
     f08:	00 97       	sbiw	r24, 0x00	; 0
     f0a:	11 f0       	breq	.+4      	; 0xf10 <SeekButtons+0x3e>
	         bstate = false;
     f0c:	19 82       	std	Y+1, r1	; 0x01
     f0e:	02 c0       	rjmp	.+4      	; 0xf14 <SeekButtons+0x42>
	     } else {
	         bstate = true;
     f10:	81 e0       	ldi	r24, 0x01	; 1
     f12:	89 83       	std	Y+1, r24	; 0x01
	     }
		
	     if ( i==B_LEFT && bstate ) { // LEFT

	     }
	     if ( i==B_RIGHT && bstate ) { // RIGHT

	     }
	     if ( i==B_UP && bstate ) { // UP

	     }
	     if ( i==B_DOWN && bstate ) { // DOWN

	     }
	     if ( i==B_OK && bstate ) { // OK
     f14:	8a 81       	ldd	r24, Y+2	; 0x02
     f16:	84 30       	cpi	r24, 0x04	; 4
     f18:	21 f4       	brne	.+8      	; 0xf22 <SeekButtons+0x50>
     f1a:	89 81       	ldd	r24, Y+1	; 0x01
     f1c:	88 23       	and	r24, r24
     f1e:	09 f0       	breq	.+2      	; 0xf22 <SeekButtons+0x50>
            StartStopChronometer();
     f20:	54 de       	rcall	.-856    	; 0xbca <StartStopChronometer>
     f22:	8a 81       	ldd	r24, Y+2	; 0x02
     f24:	8f 5f       	subi	r24, 0xFF	; 255
     f26:	8a 83       	std	Y+2, r24	; 0x02
     f28:	e0 cf       	rjmp	.-64     	; 0xeea <SeekButtons+0x18>
     f2a:	22 96       	adiw	r28, 0x02	; 2
     f2c:	0f b6       	in	r0, 0x3f	; 63
     f2e:	f8 94       	cli
     f30:	de bf       	out	0x3e, r29	; 62
     f32:	0f be       	out	0x3f, r0	; 63
     f34:	cd bf       	out	0x3d, r28	; 61
     f36:	df 91       	pop	r29
     f38:	cf 91       	pop	r28
     f3a:	08 95       	ret

00000f3c <loop>:
	     }
	     if ( i==B_CANCEL && bstate ) { // CANCEL

	     }	     	     	     	
	}
}

/*
 *  this is the main loop
 */
void loop(void) {
     f3c:	0f 93       	push	r16
     f3e:	1f 93       	push	r17
     f40:	cf 93       	push	r28
     f42:	df 93       	push	r29
     f44:	cd b7       	in	r28, 0x3d	; 61
     f46:	de b7       	in	r29, 0x3e	; 62
     f48:	28 97       	sbiw	r28, 0x08	; 8
     f4a:	0f b6       	in	r0, 0x3f	; 63
     f4c:	f8 94       	cli
     f4e:	de bf       	out	0x3e, r29	; 62
     f50:	0f be       	out	0x3f, r0	; 63
     f52:	cd bf       	out	0x3d, r28	; 61
    //SeekButtons(); // use INT1 instead

    volatile double ch0 = adcConvert10bit(0);
     f54:	80 e0       	ldi	r24, 0x00	; 0
     f56:	67 df       	rcall	.-306    	; 0xe26 <adcConvert10bit>
     f58:	8c 01       	movw	r16, r24
     f5a:	c8 01       	movw	r24, r16
     f5c:	aa 27       	eor	r26, r26
     f5e:	97 fd       	sbrc	r25, 7
     f60:	a0 95       	com	r26
     f62:	ba 2f       	mov	r27, r26
     f64:	bc 01       	movw	r22, r24
     f66:	cd 01       	movw	r24, r26
     f68:	f1 d3       	rcall	.+2018   	; 0x174c <__floatsisf>
     f6a:	6d 83       	std	Y+5, r22	; 0x05
     f6c:	7e 83       	std	Y+6, r23	; 0x06
     f6e:	8f 83       	std	Y+7, r24	; 0x07
     f70:	98 87       	std	Y+8, r25	; 0x08
     f72:	11 23       	and	r17, r17
     f74:	7c f4       	brge	.+30     	; 0xf94 <loop+0x58>
     f76:	20 e0       	ldi	r18, 0x00	; 0
     f78:	30 e0       	ldi	r19, 0x00	; 0
     f7a:	40 e8       	ldi	r20, 0x80	; 128
     f7c:	57 e4       	ldi	r21, 0x47	; 71
     f7e:	6d 81       	ldd	r22, Y+5	; 0x05
     f80:	7e 81       	ldd	r23, Y+6	; 0x06
     f82:	8f 81       	ldd	r24, Y+7	; 0x07
     f84:	98 85       	ldd	r25, Y+8	; 0x08
     f86:	3d d3       	rcall	.+1658   	; 0x1602 <__addsf3>
     f88:	dc 01       	movw	r26, r24
     f8a:	cb 01       	movw	r24, r22
     f8c:	8d 83       	std	Y+5, r24	; 0x05
     f8e:	9e 83       	std	Y+6, r25	; 0x06
     f90:	af 83       	std	Y+7, r26	; 0x07
     f92:	b8 87       	std	Y+8, r27	; 0x08
     f94:	8d 81       	ldd	r24, Y+5	; 0x05
     f96:	9e 81       	ldd	r25, Y+6	; 0x06
     f98:	af 81       	ldd	r26, Y+7	; 0x07
     f9a:	b8 85       	ldd	r27, Y+8	; 0x08
     f9c:	89 83       	std	Y+1, r24	; 0x01
     f9e:	9a 83       	std	Y+2, r25	; 0x02
     fa0:	ab 83       	std	Y+3, r26	; 0x03
     fa2:	bc 83       	std	Y+4, r27	; 0x04
    ch0 *= 0.09765625; // 0.09765625 = 100 / 2^10
     fa4:	20 e0       	ldi	r18, 0x00	; 0
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	48 ec       	ldi	r20, 0xC8	; 200
     faa:	5d e3       	ldi	r21, 0x3D	; 61
     fac:	69 81       	ldd	r22, Y+1	; 0x01
     fae:	7a 81       	ldd	r23, Y+2	; 0x02
     fb0:	8b 81       	ldd	r24, Y+3	; 0x03
     fb2:	9c 81       	ldd	r25, Y+4	; 0x04
     fb4:	5e d4       	rcall	.+2236   	; 0x1872 <__mulsf3>
     fb6:	dc 01       	movw	r26, r24
     fb8:	cb 01       	movw	r24, r22
     fba:	89 83       	std	Y+1, r24	; 0x01
     fbc:	9a 83       	std	Y+2, r25	; 0x02
     fbe:	ab 83       	std	Y+3, r26	; 0x03
     fc0:	bc 83       	std	Y+4, r27	; 0x04
    show_percent(ch0);
     fc2:	69 81       	ldd	r22, Y+1	; 0x01
     fc4:	7a 81       	ldd	r23, Y+2	; 0x02
     fc6:	8b 81       	ldd	r24, Y+3	; 0x03
     fc8:	9c 81       	ldd	r25, Y+4	; 0x04
     fca:	5d dd       	rcall	.-1350   	; 0xa86 <show_percent>
     fcc:	28 96       	adiw	r28, 0x08	; 8
     fce:	0f b6       	in	r0, 0x3f	; 63
     fd0:	f8 94       	cli
     fd2:	de bf       	out	0x3e, r29	; 62
     fd4:	0f be       	out	0x3f, r0	; 63
     fd6:	cd bf       	out	0x3d, r28	; 61
     fd8:	df 91       	pop	r29
     fda:	cf 91       	pop	r28
     fdc:	1f 91       	pop	r17
     fde:	0f 91       	pop	r16
     fe0:	08 95       	ret

00000fe2 <main>:

/*
    _delay_ms(500);

    double ch1 = adcConvert10bit(1);
    ch1 *= 0.09765625; // 0.09765625 = 100 / 2^10
    show_percent(ch1);

    _delay_ms(500);
*/

    //TestRunningChronometer();

    //inc_time(&current_time);
}


/*
 * main program
 */
int main(void) {
     fe2:	cf e5       	ldi	r28, 0x5F	; 95
     fe4:	d2 e0       	ldi	r29, 0x02	; 2
     fe6:	de bf       	out	0x3e, r29	; 62
     fe8:	cd bf       	out	0x3d, r28	; 61
    init();
     fea:	14 df       	rcall	.-472    	; 0xe14 <init>
    while(1) { // Infinite loop; define here the
        loop(); // system behaviour
     fec:	a7 df       	rcall	.-178    	; 0xf3c <loop>
     fee:	fe cf       	rjmp	.-4      	; 0xfec <main+0xa>

00000ff0 <__vector_1>:
    }
    return 0;
}

/*
 * interrupt handler for INT0
 */
SIGNAL(SIG_INTERRUPT0) {
     ff0:	1f 92       	push	r1
     ff2:	0f 92       	push	r0
     ff4:	0f b6       	in	r0, 0x3f	; 63
     ff6:	0f 92       	push	r0
     ff8:	11 24       	eor	r1, r1
     ffa:	2f 93       	push	r18
     ffc:	3f 93       	push	r19
     ffe:	4f 93       	push	r20
    1000:	5f 93       	push	r21
    1002:	6f 93       	push	r22
    1004:	7f 93       	push	r23
    1006:	8f 93       	push	r24
    1008:	9f 93       	push	r25
    100a:	af 93       	push	r26
    100c:	bf 93       	push	r27
    100e:	ef 93       	push	r30
    1010:	ff 93       	push	r31
    1012:	cf 93       	push	r28
    1014:	df 93       	push	r29
    1016:	cd b7       	in	r28, 0x3d	; 61
    1018:	de b7       	in	r29, 0x3e	; 62
    StartStopChronometer();
    101a:	d7 dd       	rcall	.-1106   	; 0xbca <StartStopChronometer>
    101c:	df 91       	pop	r29
    101e:	cf 91       	pop	r28
    1020:	ff 91       	pop	r31
    1022:	ef 91       	pop	r30
    1024:	bf 91       	pop	r27
    1026:	af 91       	pop	r26
    1028:	9f 91       	pop	r25
    102a:	8f 91       	pop	r24
    102c:	7f 91       	pop	r23
    102e:	6f 91       	pop	r22
    1030:	5f 91       	pop	r21
    1032:	4f 91       	pop	r20
    1034:	3f 91       	pop	r19
    1036:	2f 91       	pop	r18
    1038:	0f 90       	pop	r0
    103a:	0f be       	out	0x3f, r0	; 63
    103c:	0f 90       	pop	r0
    103e:	1f 90       	pop	r1
    1040:	18 95       	reti

00001042 <printf>:
    1042:	a0 e0       	ldi	r26, 0x00	; 0
    1044:	b0 e0       	ldi	r27, 0x00	; 0
    1046:	e6 e2       	ldi	r30, 0x26	; 38
    1048:	f8 e0       	ldi	r31, 0x08	; 8
    104a:	a1 c4       	rjmp	.+2370   	; 0x198e <__prologue_saves__+0x20>
    104c:	e5 e0       	ldi	r30, 0x05	; 5
    104e:	f0 e0       	ldi	r31, 0x00	; 0
    1050:	ec 0f       	add	r30, r28
    1052:	fd 1f       	adc	r31, r29
    1054:	81 91       	ld	r24, Z+
    1056:	91 91       	ld	r25, Z+
    1058:	af 01       	movw	r20, r30
    105a:	bc 01       	movw	r22, r24
    105c:	80 91 8e 00 	lds	r24, 0x008E
    1060:	90 91 8f 00 	lds	r25, 0x008F
    1064:	02 d0       	rcall	.+4      	; 0x106a <vfprintf>
    1066:	e2 e0       	ldi	r30, 0x02	; 2
    1068:	ae c4       	rjmp	.+2396   	; 0x19c6 <__epilogue_restores__+0x20>

0000106a <vfprintf>:
    106a:	a2 e1       	ldi	r26, 0x12	; 18
    106c:	b0 e0       	ldi	r27, 0x00	; 0
    106e:	ea e3       	ldi	r30, 0x3A	; 58
    1070:	f8 e0       	ldi	r31, 0x08	; 8
    1072:	7d c4       	rjmp	.+2298   	; 0x196e <__prologue_saves__>
    1074:	ee 24       	eor	r14, r14
    1076:	ff 24       	eor	r15, r15
    1078:	87 01       	movw	r16, r14
    107a:	1c 01       	movw	r2, r24
    107c:	7e 87       	std	Y+14, r23	; 0x0e
    107e:	6d 87       	std	Y+13, r22	; 0x0d
    1080:	2a 01       	movw	r4, r20
    1082:	cc 24       	eor	r12, r12
    1084:	dd 24       	eor	r13, r13
    1086:	fc 01       	movw	r30, r24
    1088:	d7 82       	std	Z+7, r13	; 0x07
    108a:	c6 82       	std	Z+6, r12	; 0x06
    108c:	83 81       	ldd	r24, Z+3	; 0x03
    108e:	81 fd       	sbrc	r24, 1
    1090:	55 c2       	rjmp	.+1194   	; 0x153c <vfprintf+0x4d2>
    1092:	8f ef       	ldi	r24, 0xFF	; 255
    1094:	9f ef       	ldi	r25, 0xFF	; 255
    1096:	65 c2       	rjmp	.+1226   	; 0x1562 <vfprintf+0x4f8>
    1098:	8d 85       	ldd	r24, Y+13	; 0x0d
    109a:	9e 85       	ldd	r25, Y+14	; 0x0e
    109c:	01 96       	adiw	r24, 0x01	; 1
    109e:	9e 87       	std	Y+14, r25	; 0x0e
    10a0:	8d 87       	std	Y+13, r24	; 0x0d
    10a2:	c0 fe       	sbrs	r12, 0
    10a4:	39 c2       	rjmp	.+1138   	; 0x1518 <vfprintf+0x4ae>
    10a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    10a8:	80 53       	subi	r24, 0x30	; 48
    10aa:	8a 30       	cpi	r24, 0x0A	; 10
    10ac:	d0 f4       	brcc	.+52     	; 0x10e2 <vfprintf+0x78>
    10ae:	9f 85       	ldd	r25, Y+15	; 0x0f
    10b0:	90 33       	cpi	r25, 0x30	; 48
    10b2:	39 f4       	brne	.+14     	; 0x10c2 <vfprintf+0x58>
    10b4:	66 20       	and	r6, r6
    10b6:	29 f4       	brne	.+10     	; 0x10c2 <vfprintf+0x58>
    10b8:	c3 fc       	sbrc	r12, 3
    10ba:	03 c0       	rjmp	.+6      	; 0x10c2 <vfprintf+0x58>
    10bc:	e0 e0       	ldi	r30, 0x00	; 0
    10be:	f1 e0       	ldi	r31, 0x01	; 1
    10c0:	8d c0       	rjmp	.+282    	; 0x11dc <vfprintf+0x172>
    10c2:	8a e0       	ldi	r24, 0x0A	; 10
    10c4:	68 9e       	mul	r6, r24
    10c6:	60 2c       	mov	r6, r0
    10c8:	11 24       	eor	r1, r1
    10ca:	ff 85       	ldd	r31, Y+15	; 0x0f
    10cc:	6f 0e       	add	r6, r31
    10ce:	20 ed       	ldi	r18, 0xD0	; 208
    10d0:	62 0e       	add	r6, r18
    10d2:	67 fe       	sbrs	r6, 7
    10d4:	02 c0       	rjmp	.+4      	; 0x10da <vfprintf+0x70>
    10d6:	5f e7       	ldi	r21, 0x7F	; 127
    10d8:	65 2e       	mov	r6, r21
    10da:	c3 fc       	sbrc	r12, 3
    10dc:	2f c2       	rjmp	.+1118   	; 0x153c <vfprintf+0x4d2>
    10de:	76 2c       	mov	r7, r6
    10e0:	2d c2       	rjmp	.+1114   	; 0x153c <vfprintf+0x4d2>
    10e2:	c3 fe       	sbrs	r12, 3
    10e4:	04 c0       	rjmp	.+8      	; 0x10ee <vfprintf+0x84>
    10e6:	66 20       	and	r6, r6
    10e8:	11 f4       	brne	.+4      	; 0x10ee <vfprintf+0x84>
    10ea:	41 e0       	ldi	r20, 0x01	; 1
    10ec:	64 2e       	mov	r6, r20
    10ee:	ef 85       	ldd	r30, Y+15	; 0x0f
    10f0:	8e 2f       	mov	r24, r30
    10f2:	99 27       	eor	r25, r25
    10f4:	87 fd       	sbrc	r24, 7
    10f6:	90 95       	com	r25
    10f8:	88 36       	cpi	r24, 0x68	; 104
    10fa:	91 05       	cpc	r25, r1
    10fc:	8c f5       	brge	.+98     	; 0x1160 <vfprintf+0xf6>
    10fe:	85 36       	cpi	r24, 0x65	; 101
    1100:	91 05       	cpc	r25, r1
    1102:	0c f0       	brlt	.+2      	; 0x1106 <vfprintf+0x9c>
    1104:	6e c0       	rjmp	.+220    	; 0x11e2 <vfprintf+0x178>
    1106:	83 35       	cpi	r24, 0x53	; 83
    1108:	91 05       	cpc	r25, r1
    110a:	09 f4       	brne	.+2      	; 0x110e <vfprintf+0xa4>
    110c:	92 c0       	rjmp	.+292    	; 0x1232 <vfprintf+0x1c8>
    110e:	84 35       	cpi	r24, 0x54	; 84
    1110:	91 05       	cpc	r25, r1
    1112:	cc f4       	brge	.+50     	; 0x1146 <vfprintf+0xdc>
    1114:	8b 32       	cpi	r24, 0x2B	; 43
    1116:	91 05       	cpc	r25, r1
    1118:	09 f4       	brne	.+2      	; 0x111c <vfprintf+0xb2>
    111a:	49 c0       	rjmp	.+146    	; 0x11ae <vfprintf+0x144>
    111c:	8c 32       	cpi	r24, 0x2C	; 44
    111e:	91 05       	cpc	r25, r1
    1120:	4c f4       	brge	.+18     	; 0x1134 <vfprintf+0xca>
    1122:	80 32       	cpi	r24, 0x20	; 32
    1124:	91 05       	cpc	r25, r1
    1126:	09 f4       	brne	.+2      	; 0x112a <vfprintf+0xc0>
    1128:	46 c0       	rjmp	.+140    	; 0x11b6 <vfprintf+0x14c>
    112a:	83 32       	cpi	r24, 0x23	; 35
    112c:	91 05       	cpc	r25, r1
    112e:	09 f4       	brne	.+2      	; 0x1132 <vfprintf+0xc8>
    1130:	4a c0       	rjmp	.+148    	; 0x11c6 <vfprintf+0x15c>
    1132:	ed c1       	rjmp	.+986    	; 0x150e <vfprintf+0x4a4>
    1134:	8d 32       	cpi	r24, 0x2D	; 45
    1136:	91 05       	cpc	r25, r1
    1138:	09 f4       	brne	.+2      	; 0x113c <vfprintf+0xd2>
    113a:	40 c0       	rjmp	.+128    	; 0x11bc <vfprintf+0x152>
    113c:	8e 32       	cpi	r24, 0x2E	; 46
    113e:	91 05       	cpc	r25, r1
    1140:	09 f4       	brne	.+2      	; 0x1144 <vfprintf+0xda>
    1142:	44 c0       	rjmp	.+136    	; 0x11cc <vfprintf+0x162>
    1144:	e4 c1       	rjmp	.+968    	; 0x150e <vfprintf+0x4a4>
    1146:	83 36       	cpi	r24, 0x63	; 99
    1148:	91 05       	cpc	r25, r1
    114a:	09 f4       	brne	.+2      	; 0x114e <vfprintf+0xe4>
    114c:	50 c0       	rjmp	.+160    	; 0x11ee <vfprintf+0x184>
    114e:	84 36       	cpi	r24, 0x64	; 100
    1150:	91 05       	cpc	r25, r1
    1152:	0c f0       	brlt	.+2      	; 0x1156 <vfprintf+0xec>
    1154:	87 c0       	rjmp	.+270    	; 0x1264 <vfprintf+0x1fa>
    1156:	88 35       	cpi	r24, 0x58	; 88
    1158:	91 05       	cpc	r25, r1
    115a:	09 f4       	brne	.+2      	; 0x115e <vfprintf+0xf4>
    115c:	b9 c0       	rjmp	.+370    	; 0x12d0 <vfprintf+0x266>
    115e:	d7 c1       	rjmp	.+942    	; 0x150e <vfprintf+0x4a4>
    1160:	80 37       	cpi	r24, 0x70	; 112
    1162:	91 05       	cpc	r25, r1
    1164:	09 f4       	brne	.+2      	; 0x1168 <vfprintf+0xfe>
    1166:	ae c0       	rjmp	.+348    	; 0x12c4 <vfprintf+0x25a>
    1168:	81 37       	cpi	r24, 0x71	; 113
    116a:	91 05       	cpc	r25, r1
    116c:	84 f4       	brge	.+32     	; 0x118e <vfprintf+0x124>
    116e:	8c 36       	cpi	r24, 0x6C	; 108
    1170:	91 05       	cpc	r25, r1
    1172:	91 f1       	breq	.+100    	; 0x11d8 <vfprintf+0x16e>
    1174:	8d 36       	cpi	r24, 0x6D	; 109
    1176:	91 05       	cpc	r25, r1
    1178:	2c f4       	brge	.+10     	; 0x1184 <vfprintf+0x11a>
    117a:	89 36       	cpi	r24, 0x69	; 105
    117c:	91 05       	cpc	r25, r1
    117e:	09 f4       	brne	.+2      	; 0x1182 <vfprintf+0x118>
    1180:	71 c0       	rjmp	.+226    	; 0x1264 <vfprintf+0x1fa>
    1182:	c5 c1       	rjmp	.+906    	; 0x150e <vfprintf+0x4a4>
    1184:	8f 36       	cpi	r24, 0x6F	; 111
    1186:	91 05       	cpc	r25, r1
    1188:	09 f4       	brne	.+2      	; 0x118c <vfprintf+0x122>
    118a:	99 c0       	rjmp	.+306    	; 0x12be <vfprintf+0x254>
    118c:	c0 c1       	rjmp	.+896    	; 0x150e <vfprintf+0x4a4>
    118e:	85 37       	cpi	r24, 0x75	; 117
    1190:	91 05       	cpc	r25, r1
    1192:	09 f4       	brne	.+2      	; 0x1196 <vfprintf+0x12c>
    1194:	9f c0       	rjmp	.+318    	; 0x12d4 <vfprintf+0x26a>
    1196:	86 37       	cpi	r24, 0x76	; 118
    1198:	91 05       	cpc	r25, r1
    119a:	24 f4       	brge	.+8      	; 0x11a4 <vfprintf+0x13a>
    119c:	83 37       	cpi	r24, 0x73	; 115
    119e:	91 05       	cpc	r25, r1
    11a0:	71 f1       	breq	.+92     	; 0x11fe <vfprintf+0x194>
    11a2:	b5 c1       	rjmp	.+874    	; 0x150e <vfprintf+0x4a4>
    11a4:	88 37       	cpi	r24, 0x78	; 120
    11a6:	91 05       	cpc	r25, r1
    11a8:	09 f4       	brne	.+2      	; 0x11ac <vfprintf+0x142>
    11aa:	92 c0       	rjmp	.+292    	; 0x12d0 <vfprintf+0x266>
    11ac:	b0 c1       	rjmp	.+864    	; 0x150e <vfprintf+0x4a4>
    11ae:	80 e1       	ldi	r24, 0x10	; 16
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	c8 2a       	or	r12, r24
    11b4:	d9 2a       	or	r13, r25
    11b6:	e0 e2       	ldi	r30, 0x20	; 32
    11b8:	f0 e0       	ldi	r31, 0x00	; 0
    11ba:	10 c0       	rjmp	.+32     	; 0x11dc <vfprintf+0x172>
    11bc:	80 e8       	ldi	r24, 0x80	; 128
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	c8 2a       	or	r12, r24
    11c2:	d9 2a       	or	r13, r25
    11c4:	bb c1       	rjmp	.+886    	; 0x153c <vfprintf+0x4d2>
    11c6:	e0 e4       	ldi	r30, 0x40	; 64
    11c8:	f0 e0       	ldi	r31, 0x00	; 0
    11ca:	08 c0       	rjmp	.+16     	; 0x11dc <vfprintf+0x172>
    11cc:	88 e0       	ldi	r24, 0x08	; 8
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	c8 2a       	or	r12, r24
    11d2:	d9 2a       	or	r13, r25
    11d4:	66 24       	eor	r6, r6
    11d6:	b2 c1       	rjmp	.+868    	; 0x153c <vfprintf+0x4d2>
    11d8:	e4 e0       	ldi	r30, 0x04	; 4
    11da:	f0 e0       	ldi	r31, 0x00	; 0
    11dc:	ce 2a       	or	r12, r30
    11de:	df 2a       	or	r13, r31
    11e0:	ad c1       	rjmp	.+858    	; 0x153c <vfprintf+0x4d2>
    11e2:	3f e3       	ldi	r19, 0x3F	; 63
    11e4:	e3 2e       	mov	r14, r19
    11e6:	7a 94       	dec	r7
    11e8:	f3 e6       	ldi	r31, 0x63	; 99
    11ea:	ff 87       	std	Y+15, r31	; 0x0f
    11ec:	31 c1       	rjmp	.+610    	; 0x1450 <vfprintf+0x3e6>
    11ee:	f2 01       	movw	r30, r4
    11f0:	82 e0       	ldi	r24, 0x02	; 2
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	48 0e       	add	r4, r24
    11f6:	59 1e       	adc	r5, r25
    11f8:	e0 80       	ld	r14, Z
    11fa:	7a 94       	dec	r7
    11fc:	29 c1       	rjmp	.+594    	; 0x1450 <vfprintf+0x3e6>
    11fe:	f2 01       	movw	r30, r4
    1200:	82 e0       	ldi	r24, 0x02	; 2
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	48 0e       	add	r4, r24
    1206:	59 1e       	adc	r5, r25
    1208:	a0 81       	ld	r26, Z
    120a:	b1 81       	ldd	r27, Z+1	; 0x01
    120c:	7d 01       	movw	r14, r26
    120e:	c3 fe       	sbrs	r12, 3
    1210:	08 c0       	rjmp	.+16     	; 0x1222 <vfprintf+0x1b8>
    1212:	86 2d       	mov	r24, r6
    1214:	99 27       	eor	r25, r25
    1216:	87 fd       	sbrc	r24, 7
    1218:	90 95       	com	r25
    121a:	bc 01       	movw	r22, r24
    121c:	cd 01       	movw	r24, r26
    121e:	b8 d1       	rcall	.+880    	; 0x1590 <strnlen>
    1220:	1d c0       	rjmp	.+58     	; 0x125c <vfprintf+0x1f2>
    1222:	fd 01       	movw	r30, r26
    1224:	01 90       	ld	r0, Z+
    1226:	00 20       	and	r0, r0
    1228:	e9 f7       	brne	.-6      	; 0x1224 <vfprintf+0x1ba>
    122a:	31 97       	sbiw	r30, 0x01	; 1
    122c:	ea 1b       	sub	r30, r26
    122e:	e8 8b       	std	Y+16, r30	; 0x10
    1230:	16 c0       	rjmp	.+44     	; 0x125e <vfprintf+0x1f4>
    1232:	f2 01       	movw	r30, r4
    1234:	82 e0       	ldi	r24, 0x02	; 2
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	48 0e       	add	r4, r24
    123a:	59 1e       	adc	r5, r25
    123c:	01 90       	ld	r0, Z+
    123e:	f0 81       	ld	r31, Z
    1240:	e0 2d       	mov	r30, r0
    1242:	7f 01       	movw	r14, r30
    1244:	c3 fe       	sbrs	r12, 3
    1246:	08 c0       	rjmp	.+16     	; 0x1258 <vfprintf+0x1ee>
    1248:	86 2d       	mov	r24, r6
    124a:	99 27       	eor	r25, r25
    124c:	87 fd       	sbrc	r24, 7
    124e:	90 95       	com	r25
    1250:	bc 01       	movw	r22, r24
    1252:	cf 01       	movw	r24, r30
    1254:	92 d1       	rcall	.+804    	; 0x157a <strnlen_P>
    1256:	02 c0       	rjmp	.+4      	; 0x125c <vfprintf+0x1f2>
    1258:	cf 01       	movw	r24, r30
    125a:	86 d1       	rcall	.+780    	; 0x1568 <strlen_P>
    125c:	88 8b       	std	Y+16, r24	; 0x10
    125e:	98 89       	ldd	r25, Y+16	; 0x10
    1260:	79 1a       	sub	r7, r25
    1262:	f6 c0       	rjmp	.+492    	; 0x1450 <vfprintf+0x3e6>
    1264:	c2 fe       	sbrs	r12, 2
    1266:	0a c0       	rjmp	.+20     	; 0x127c <vfprintf+0x212>
    1268:	f2 01       	movw	r30, r4
    126a:	84 e0       	ldi	r24, 0x04	; 4
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	48 0e       	add	r4, r24
    1270:	59 1e       	adc	r5, r25
    1272:	20 81       	ld	r18, Z
    1274:	31 81       	ldd	r19, Z+1	; 0x01
    1276:	42 81       	ldd	r20, Z+2	; 0x02
    1278:	53 81       	ldd	r21, Z+3	; 0x03
    127a:	0c c0       	rjmp	.+24     	; 0x1294 <vfprintf+0x22a>
    127c:	f2 01       	movw	r30, r4
    127e:	82 e0       	ldi	r24, 0x02	; 2
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	48 0e       	add	r4, r24
    1284:	59 1e       	adc	r5, r25
    1286:	80 81       	ld	r24, Z
    1288:	91 81       	ldd	r25, Z+1	; 0x01
    128a:	9c 01       	movw	r18, r24
    128c:	44 27       	eor	r20, r20
    128e:	37 fd       	sbrc	r19, 7
    1290:	40 95       	com	r20
    1292:	54 2f       	mov	r21, r20
    1294:	79 01       	movw	r14, r18
    1296:	8a 01       	movw	r16, r20
    1298:	57 ff       	sbrs	r21, 7
    129a:	0c c0       	rjmp	.+24     	; 0x12b4 <vfprintf+0x24a>
    129c:	e2 e0       	ldi	r30, 0x02	; 2
    129e:	f0 e0       	ldi	r31, 0x00	; 0
    12a0:	ce 2a       	or	r12, r30
    12a2:	df 2a       	or	r13, r31
    12a4:	10 95       	com	r17
    12a6:	00 95       	com	r16
    12a8:	f0 94       	com	r15
    12aa:	e0 94       	com	r14
    12ac:	e1 1c       	adc	r14, r1
    12ae:	f1 1c       	adc	r15, r1
    12b0:	01 1d       	adc	r16, r1
    12b2:	11 1d       	adc	r17, r1
    12b4:	8f eb       	ldi	r24, 0xBF	; 191
    12b6:	9f ef       	ldi	r25, 0xFF	; 255
    12b8:	c8 22       	and	r12, r24
    12ba:	d9 22       	and	r13, r25
    12bc:	27 c0       	rjmp	.+78     	; 0x130c <vfprintf+0x2a2>
    12be:	98 e0       	ldi	r25, 0x08	; 8
    12c0:	98 8b       	std	Y+16, r25	; 0x10
    12c2:	08 c0       	rjmp	.+16     	; 0x12d4 <vfprintf+0x26a>
    12c4:	e0 e4       	ldi	r30, 0x40	; 64
    12c6:	f0 e0       	ldi	r31, 0x00	; 0
    12c8:	ce 2a       	or	r12, r30
    12ca:	df 2a       	or	r13, r31
    12cc:	f8 e7       	ldi	r31, 0x78	; 120
    12ce:	ff 87       	std	Y+15, r31	; 0x0f
    12d0:	20 e1       	ldi	r18, 0x10	; 16
    12d2:	28 8b       	std	Y+16, r18	; 0x10
    12d4:	c2 fe       	sbrs	r12, 2
    12d6:	0a c0       	rjmp	.+20     	; 0x12ec <vfprintf+0x282>
    12d8:	f2 01       	movw	r30, r4
    12da:	84 e0       	ldi	r24, 0x04	; 4
    12dc:	90 e0       	ldi	r25, 0x00	; 0
    12de:	48 0e       	add	r4, r24
    12e0:	59 1e       	adc	r5, r25
    12e2:	20 81       	ld	r18, Z
    12e4:	31 81       	ldd	r19, Z+1	; 0x01
    12e6:	42 81       	ldd	r20, Z+2	; 0x02
    12e8:	53 81       	ldd	r21, Z+3	; 0x03
    12ea:	0a c0       	rjmp	.+20     	; 0x1300 <vfprintf+0x296>
    12ec:	f2 01       	movw	r30, r4
    12ee:	82 e0       	ldi	r24, 0x02	; 2
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	48 0e       	add	r4, r24
    12f4:	59 1e       	adc	r5, r25
    12f6:	80 81       	ld	r24, Z
    12f8:	91 81       	ldd	r25, Z+1	; 0x01
    12fa:	9c 01       	movw	r18, r24
    12fc:	44 27       	eor	r20, r20
    12fe:	55 27       	eor	r21, r21
    1300:	79 01       	movw	r14, r18
    1302:	8a 01       	movw	r16, r20
    1304:	ef ec       	ldi	r30, 0xCF	; 207
    1306:	ff ef       	ldi	r31, 0xFF	; 255
    1308:	ce 22       	and	r12, r30
    130a:	df 22       	and	r13, r31
    130c:	ce 01       	movw	r24, r28
    130e:	01 96       	adiw	r24, 0x01	; 1
    1310:	9a 8b       	std	Y+18, r25	; 0x12
    1312:	89 8b       	std	Y+17, r24	; 0x11
    1314:	98 89       	ldd	r25, Y+16	; 0x10
    1316:	89 2e       	mov	r8, r25
    1318:	99 24       	eor	r9, r9
    131a:	aa 24       	eor	r10, r10
    131c:	bb 24       	eor	r11, r11
    131e:	c8 01       	movw	r24, r16
    1320:	b7 01       	movw	r22, r14
    1322:	a5 01       	movw	r20, r10
    1324:	94 01       	movw	r18, r8
    1326:	01 d3       	rcall	.+1538   	; 0x192a <__udivmodsi4>
    1328:	dc 01       	movw	r26, r24
    132a:	cb 01       	movw	r24, r22
    132c:	e9 89       	ldd	r30, Y+17	; 0x11
    132e:	fa 89       	ldd	r31, Y+18	; 0x12
    1330:	80 83       	st	Z, r24
    1332:	8a 30       	cpi	r24, 0x0A	; 10
    1334:	24 f0       	brlt	.+8      	; 0x133e <vfprintf+0x2d4>
    1336:	ff 85       	ldd	r31, Y+15	; 0x0f
    1338:	8f 0f       	add	r24, r31
    133a:	81 52       	subi	r24, 0x21	; 33
    133c:	01 c0       	rjmp	.+2      	; 0x1340 <vfprintf+0x2d6>
    133e:	80 5d       	subi	r24, 0xD0	; 208
    1340:	e9 89       	ldd	r30, Y+17	; 0x11
    1342:	fa 89       	ldd	r31, Y+18	; 0x12
    1344:	81 93       	st	Z+, r24
    1346:	fa 8b       	std	Y+18, r31	; 0x12
    1348:	e9 8b       	std	Y+17, r30	; 0x11
    134a:	c8 01       	movw	r24, r16
    134c:	b7 01       	movw	r22, r14
    134e:	a5 01       	movw	r20, r10
    1350:	94 01       	movw	r18, r8
    1352:	eb d2       	rcall	.+1494   	; 0x192a <__udivmodsi4>
    1354:	79 01       	movw	r14, r18
    1356:	8a 01       	movw	r16, r20
    1358:	21 15       	cp	r18, r1
    135a:	31 05       	cpc	r19, r1
    135c:	41 05       	cpc	r20, r1
    135e:	51 05       	cpc	r21, r1
    1360:	f1 f6       	brne	.-68     	; 0x131e <vfprintf+0x2b4>
    1362:	e9 88       	ldd	r14, Y+17	; 0x11
    1364:	81 e0       	ldi	r24, 0x01	; 1
    1366:	90 e0       	ldi	r25, 0x00	; 0
    1368:	8c 0f       	add	r24, r28
    136a:	9d 1f       	adc	r25, r29
    136c:	e8 1a       	sub	r14, r24
    136e:	c6 01       	movw	r24, r12
    1370:	82 73       	andi	r24, 0x32	; 50
    1372:	90 70       	andi	r25, 0x00	; 0
    1374:	89 2b       	or	r24, r25
    1376:	09 f0       	breq	.+2      	; 0x137a <vfprintf+0x310>
    1378:	7a 94       	dec	r7
    137a:	c6 fe       	sbrs	r12, 6
    137c:	0d c0       	rjmp	.+26     	; 0x1398 <vfprintf+0x32e>
    137e:	87 2d       	mov	r24, r7
    1380:	99 27       	eor	r25, r25
    1382:	87 fd       	sbrc	r24, 7
    1384:	90 95       	com	r25
    1386:	e8 89       	ldd	r30, Y+16	; 0x10
    1388:	e0 31       	cpi	r30, 0x10	; 16
    138a:	21 f4       	brne	.+8      	; 0x1394 <vfprintf+0x32a>
    138c:	2e ef       	ldi	r18, 0xFE	; 254
    138e:	72 2e       	mov	r7, r18
    1390:	78 0e       	add	r7, r24
    1392:	02 c0       	rjmp	.+4      	; 0x1398 <vfprintf+0x32e>
    1394:	78 2e       	mov	r7, r24
    1396:	7a 94       	dec	r7
    1398:	c3 fe       	sbrs	r12, 3
    139a:	0f c0       	rjmp	.+30     	; 0x13ba <vfprintf+0x350>
    139c:	26 2d       	mov	r18, r6
    139e:	33 27       	eor	r19, r19
    13a0:	27 fd       	sbrc	r18, 7
    13a2:	30 95       	com	r19
    13a4:	8e 2d       	mov	r24, r14
    13a6:	99 27       	eor	r25, r25
    13a8:	82 17       	cp	r24, r18
    13aa:	93 07       	cpc	r25, r19
    13ac:	2c f0       	brlt	.+10     	; 0x13b8 <vfprintf+0x34e>
    13ae:	87 ef       	ldi	r24, 0xF7	; 247
    13b0:	9f ef       	ldi	r25, 0xFF	; 255
    13b2:	c8 22       	and	r12, r24
    13b4:	d9 22       	and	r13, r25
    13b6:	01 c0       	rjmp	.+2      	; 0x13ba <vfprintf+0x350>
    13b8:	6e 18       	sub	r6, r14
    13ba:	c3 fe       	sbrs	r12, 3
    13bc:	02 c0       	rjmp	.+4      	; 0x13c2 <vfprintf+0x358>
    13be:	76 18       	sub	r7, r6
    13c0:	01 c0       	rjmp	.+2      	; 0x13c4 <vfprintf+0x35a>
    13c2:	7e 18       	sub	r7, r14
    13c4:	c6 01       	movw	r24, r12
    13c6:	80 78       	andi	r24, 0x80	; 128
    13c8:	91 70       	andi	r25, 0x01	; 1
    13ca:	89 2b       	or	r24, r25
    13cc:	49 f4       	brne	.+18     	; 0x13e0 <vfprintf+0x376>
    13ce:	87 2d       	mov	r24, r7
    13d0:	7a 94       	dec	r7
    13d2:	18 16       	cp	r1, r24
    13d4:	2c f4       	brge	.+10     	; 0x13e0 <vfprintf+0x376>
    13d6:	b1 01       	movw	r22, r2
    13d8:	80 e2       	ldi	r24, 0x20	; 32
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	e4 d0       	rcall	.+456    	; 0x15a6 <fputc>
    13de:	f7 cf       	rjmp	.-18     	; 0x13ce <vfprintf+0x364>
    13e0:	c1 fe       	sbrs	r12, 1
    13e2:	04 c0       	rjmp	.+8      	; 0x13ec <vfprintf+0x382>
    13e4:	b1 01       	movw	r22, r2
    13e6:	8d e2       	ldi	r24, 0x2D	; 45
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	0b c0       	rjmp	.+22     	; 0x1402 <vfprintf+0x398>
    13ec:	c4 fe       	sbrs	r12, 4
    13ee:	04 c0       	rjmp	.+8      	; 0x13f8 <vfprintf+0x38e>
    13f0:	b1 01       	movw	r22, r2
    13f2:	8b e2       	ldi	r24, 0x2B	; 43
    13f4:	90 e0       	ldi	r25, 0x00	; 0
    13f6:	05 c0       	rjmp	.+10     	; 0x1402 <vfprintf+0x398>
    13f8:	c5 fe       	sbrs	r12, 5
    13fa:	04 c0       	rjmp	.+8      	; 0x1404 <vfprintf+0x39a>
    13fc:	b1 01       	movw	r22, r2
    13fe:	80 e2       	ldi	r24, 0x20	; 32
    1400:	90 e0       	ldi	r25, 0x00	; 0
    1402:	d1 d0       	rcall	.+418    	; 0x15a6 <fputc>
    1404:	c6 fe       	sbrs	r12, 6
    1406:	0e c0       	rjmp	.+28     	; 0x1424 <vfprintf+0x3ba>
    1408:	b1 01       	movw	r22, r2
    140a:	80 e3       	ldi	r24, 0x30	; 48
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	cb d0       	rcall	.+406    	; 0x15a6 <fputc>
    1410:	98 89       	ldd	r25, Y+16	; 0x10
    1412:	90 31       	cpi	r25, 0x10	; 16
    1414:	39 f4       	brne	.+14     	; 0x1424 <vfprintf+0x3ba>
    1416:	b1 01       	movw	r22, r2
    1418:	ef 85       	ldd	r30, Y+15	; 0x0f
    141a:	8e 2f       	mov	r24, r30
    141c:	99 27       	eor	r25, r25
    141e:	87 fd       	sbrc	r24, 7
    1420:	90 95       	com	r25
    1422:	c1 d0       	rcall	.+386    	; 0x15a6 <fputc>
    1424:	d0 fe       	sbrs	r13, 0
    1426:	09 c0       	rjmp	.+18     	; 0x143a <vfprintf+0x3d0>
    1428:	87 2d       	mov	r24, r7
    142a:	7a 94       	dec	r7
    142c:	18 16       	cp	r1, r24
    142e:	2c f4       	brge	.+10     	; 0x143a <vfprintf+0x3d0>
    1430:	b1 01       	movw	r22, r2
    1432:	80 e3       	ldi	r24, 0x30	; 48
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	b7 d0       	rcall	.+366    	; 0x15a6 <fputc>
    1438:	f7 cf       	rjmp	.-18     	; 0x1428 <vfprintf+0x3be>
    143a:	c3 fe       	sbrs	r12, 3
    143c:	09 c0       	rjmp	.+18     	; 0x1450 <vfprintf+0x3e6>
    143e:	86 2d       	mov	r24, r6
    1440:	6a 94       	dec	r6
    1442:	18 16       	cp	r1, r24
    1444:	2c f4       	brge	.+10     	; 0x1450 <vfprintf+0x3e6>
    1446:	b1 01       	movw	r22, r2
    1448:	80 e3       	ldi	r24, 0x30	; 48
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	ac d0       	rcall	.+344    	; 0x15a6 <fputc>
    144e:	f7 cf       	rjmp	.-18     	; 0x143e <vfprintf+0x3d4>
    1450:	90 e8       	ldi	r25, 0x80	; 128
    1452:	b9 2e       	mov	r11, r25
    1454:	bc 20       	and	r11, r12
    1456:	49 f4       	brne	.+18     	; 0x146a <vfprintf+0x400>
    1458:	87 2d       	mov	r24, r7
    145a:	7a 94       	dec	r7
    145c:	18 16       	cp	r1, r24
    145e:	2c f4       	brge	.+10     	; 0x146a <vfprintf+0x400>
    1460:	b1 01       	movw	r22, r2
    1462:	80 e2       	ldi	r24, 0x20	; 32
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	9f d0       	rcall	.+318    	; 0x15a6 <fputc>
    1468:	f7 cf       	rjmp	.-18     	; 0x1458 <vfprintf+0x3ee>
    146a:	ff 85       	ldd	r31, Y+15	; 0x0f
    146c:	f3 36       	cpi	r31, 0x63	; 99
    146e:	39 f4       	brne	.+14     	; 0x147e <vfprintf+0x414>
    1470:	8e 2d       	mov	r24, r14
    1472:	b1 01       	movw	r22, r2
    1474:	99 27       	eor	r25, r25
    1476:	87 fd       	sbrc	r24, 7
    1478:	90 95       	com	r25
    147a:	95 d0       	rcall	.+298    	; 0x15a6 <fputc>
    147c:	3d c0       	rjmp	.+122    	; 0x14f8 <vfprintf+0x48e>
    147e:	2f 85       	ldd	r18, Y+15	; 0x0f
    1480:	23 37       	cpi	r18, 0x73	; 115
    1482:	a9 f4       	brne	.+42     	; 0x14ae <vfprintf+0x444>
    1484:	88 89       	ldd	r24, Y+16	; 0x10
    1486:	81 50       	subi	r24, 0x01	; 1
    1488:	88 8b       	std	Y+16, r24	; 0x10
    148a:	8f 3f       	cpi	r24, 0xFF	; 255
    148c:	a9 f1       	breq	.+106    	; 0x14f8 <vfprintf+0x48e>
    148e:	f7 01       	movw	r30, r14
    1490:	80 81       	ld	r24, Z
    1492:	08 94       	sec
    1494:	e1 1c       	adc	r14, r1
    1496:	f1 1c       	adc	r15, r1
    1498:	b1 01       	movw	r22, r2
    149a:	99 27       	eor	r25, r25
    149c:	87 fd       	sbrc	r24, 7
    149e:	90 95       	com	r25
    14a0:	82 d0       	rcall	.+260    	; 0x15a6 <fputc>
    14a2:	98 89       	ldd	r25, Y+16	; 0x10
    14a4:	91 50       	subi	r25, 0x01	; 1
    14a6:	98 8b       	std	Y+16, r25	; 0x10
    14a8:	9f 3f       	cpi	r25, 0xFF	; 255
    14aa:	89 f7       	brne	.-30     	; 0x148e <vfprintf+0x424>
    14ac:	25 c0       	rjmp	.+74     	; 0x14f8 <vfprintf+0x48e>
    14ae:	ef 85       	ldd	r30, Y+15	; 0x0f
    14b0:	e3 35       	cpi	r30, 0x53	; 83
    14b2:	71 f4       	brne	.+28     	; 0x14d0 <vfprintf+0x466>
    14b4:	f8 89       	ldd	r31, Y+16	; 0x10
    14b6:	f1 50       	subi	r31, 0x01	; 1
    14b8:	f8 8b       	std	Y+16, r31	; 0x10
    14ba:	ff 3f       	cpi	r31, 0xFF	; 255
    14bc:	e9 f0       	breq	.+58     	; 0x14f8 <vfprintf+0x48e>
    14be:	f7 01       	movw	r30, r14
    14c0:	84 91       	lpm	r24, Z
    14c2:	b1 01       	movw	r22, r2
    14c4:	99 27       	eor	r25, r25
    14c6:	6f d0       	rcall	.+222    	; 0x15a6 <fputc>
    14c8:	08 94       	sec
    14ca:	e1 1c       	adc	r14, r1
    14cc:	f1 1c       	adc	r15, r1
    14ce:	f2 cf       	rjmp	.-28     	; 0x14b4 <vfprintf+0x44a>
    14d0:	6e 01       	movw	r12, r28
    14d2:	08 94       	sec
    14d4:	c1 1c       	adc	r12, r1
    14d6:	d1 1c       	adc	r13, r1
    14d8:	89 89       	ldd	r24, Y+17	; 0x11
    14da:	9a 89       	ldd	r25, Y+18	; 0x12
    14dc:	8c 15       	cp	r24, r12
    14de:	9d 05       	cpc	r25, r13
    14e0:	59 f0       	breq	.+22     	; 0x14f8 <vfprintf+0x48e>
    14e2:	e9 89       	ldd	r30, Y+17	; 0x11
    14e4:	fa 89       	ldd	r31, Y+18	; 0x12
    14e6:	82 91       	ld	r24, -Z
    14e8:	fa 8b       	std	Y+18, r31	; 0x12
    14ea:	e9 8b       	std	Y+17, r30	; 0x11
    14ec:	b1 01       	movw	r22, r2
    14ee:	99 27       	eor	r25, r25
    14f0:	87 fd       	sbrc	r24, 7
    14f2:	90 95       	com	r25
    14f4:	58 d0       	rcall	.+176    	; 0x15a6 <fputc>
    14f6:	f0 cf       	rjmp	.-32     	; 0x14d8 <vfprintf+0x46e>
    14f8:	bb 20       	and	r11, r11
    14fa:	59 f0       	breq	.+22     	; 0x1512 <vfprintf+0x4a8>
    14fc:	87 2d       	mov	r24, r7
    14fe:	7a 94       	dec	r7
    1500:	18 16       	cp	r1, r24
    1502:	3c f4       	brge	.+14     	; 0x1512 <vfprintf+0x4a8>
    1504:	b1 01       	movw	r22, r2
    1506:	80 e2       	ldi	r24, 0x20	; 32
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	4d d0       	rcall	.+154    	; 0x15a6 <fputc>
    150c:	f7 cf       	rjmp	.-18     	; 0x14fc <vfprintf+0x492>
    150e:	b1 01       	movw	r22, r2
    1510:	4a d0       	rcall	.+148    	; 0x15a6 <fputc>
    1512:	cc 24       	eor	r12, r12
    1514:	dd 24       	eor	r13, r13
    1516:	12 c0       	rjmp	.+36     	; 0x153c <vfprintf+0x4d2>
    1518:	9f 85       	ldd	r25, Y+15	; 0x0f
    151a:	95 32       	cpi	r25, 0x25	; 37
    151c:	41 f4       	brne	.+16     	; 0x152e <vfprintf+0x4c4>
    151e:	81 e0       	ldi	r24, 0x01	; 1
    1520:	c8 2e       	mov	r12, r24
    1522:	d1 2c       	mov	r13, r1
    1524:	66 24       	eor	r6, r6
    1526:	76 2c       	mov	r7, r6
    1528:	ea e0       	ldi	r30, 0x0A	; 10
    152a:	e8 8b       	std	Y+16, r30	; 0x10
    152c:	07 c0       	rjmp	.+14     	; 0x153c <vfprintf+0x4d2>
    152e:	b1 01       	movw	r22, r2
    1530:	ff 85       	ldd	r31, Y+15	; 0x0f
    1532:	8f 2f       	mov	r24, r31
    1534:	99 27       	eor	r25, r25
    1536:	87 fd       	sbrc	r24, 7
    1538:	90 95       	com	r25
    153a:	35 d0       	rcall	.+106    	; 0x15a6 <fputc>
    153c:	f1 01       	movw	r30, r2
    153e:	83 81       	ldd	r24, Z+3	; 0x03
    1540:	83 ff       	sbrs	r24, 3
    1542:	04 c0       	rjmp	.+8      	; 0x154c <vfprintf+0x4e2>
    1544:	ed 85       	ldd	r30, Y+13	; 0x0d
    1546:	fe 85       	ldd	r31, Y+14	; 0x0e
    1548:	f4 91       	lpm	r31, Z
    154a:	03 c0       	rjmp	.+6      	; 0x1552 <vfprintf+0x4e8>
    154c:	ed 85       	ldd	r30, Y+13	; 0x0d
    154e:	fe 85       	ldd	r31, Y+14	; 0x0e
    1550:	f0 81       	ld	r31, Z
    1552:	ff 87       	std	Y+15, r31	; 0x0f
    1554:	2f 85       	ldd	r18, Y+15	; 0x0f
    1556:	22 23       	and	r18, r18
    1558:	09 f0       	breq	.+2      	; 0x155c <vfprintf+0x4f2>
    155a:	9e cd       	rjmp	.-1220   	; 0x1098 <vfprintf+0x2e>
    155c:	f1 01       	movw	r30, r2
    155e:	86 81       	ldd	r24, Z+6	; 0x06
    1560:	97 81       	ldd	r25, Z+7	; 0x07
    1562:	e2 e1       	ldi	r30, 0x12	; 18
    1564:	62 96       	adiw	r28, 0x12	; 18
    1566:	1f c2       	rjmp	.+1086   	; 0x19a6 <__epilogue_restores__>

00001568 <strlen_P>:
    1568:	fc 01       	movw	r30, r24
    156a:	05 90       	lpm	r0, Z+
    156c:	00 20       	and	r0, r0
    156e:	e9 f7       	brne	.-6      	; 0x156a <strlen_P+0x2>
    1570:	80 95       	com	r24
    1572:	90 95       	com	r25
    1574:	8e 0f       	add	r24, r30
    1576:	9f 1f       	adc	r25, r31
    1578:	08 95       	ret

0000157a <strnlen_P>:
    157a:	fc 01       	movw	r30, r24
    157c:	05 90       	lpm	r0, Z+
    157e:	61 50       	subi	r22, 0x01	; 1
    1580:	70 40       	sbci	r23, 0x00	; 0
    1582:	01 10       	cpse	r0, r1
    1584:	d8 f7       	brcc	.-10     	; 0x157c <strnlen_P+0x2>
    1586:	80 95       	com	r24
    1588:	90 95       	com	r25
    158a:	8e 0f       	add	r24, r30
    158c:	9f 1f       	adc	r25, r31
    158e:	08 95       	ret

00001590 <strnlen>:
    1590:	fc 01       	movw	r30, r24
    1592:	61 50       	subi	r22, 0x01	; 1
    1594:	70 40       	sbci	r23, 0x00	; 0
    1596:	01 90       	ld	r0, Z+
    1598:	01 10       	cpse	r0, r1
    159a:	d8 f7       	brcc	.-10     	; 0x1592 <strnlen+0x2>
    159c:	80 95       	com	r24
    159e:	90 95       	com	r25
    15a0:	8e 0f       	add	r24, r30
    15a2:	9f 1f       	adc	r25, r31
    15a4:	08 95       	ret

000015a6 <fputc>:
    15a6:	0f 93       	push	r16
    15a8:	1f 93       	push	r17
    15aa:	cf 93       	push	r28
    15ac:	df 93       	push	r29
    15ae:	8c 01       	movw	r16, r24
    15b0:	eb 01       	movw	r28, r22
    15b2:	8b 81       	ldd	r24, Y+3	; 0x03
    15b4:	99 27       	eor	r25, r25
    15b6:	81 ff       	sbrs	r24, 1
    15b8:	1c c0       	rjmp	.+56     	; 0x15f2 <fputc+0x4c>
    15ba:	82 ff       	sbrs	r24, 2
    15bc:	0d c0       	rjmp	.+26     	; 0x15d8 <fputc+0x32>
    15be:	2e 81       	ldd	r18, Y+6	; 0x06
    15c0:	3f 81       	ldd	r19, Y+7	; 0x07
    15c2:	8c 81       	ldd	r24, Y+4	; 0x04
    15c4:	9d 81       	ldd	r25, Y+5	; 0x05
    15c6:	28 17       	cp	r18, r24
    15c8:	39 07       	cpc	r19, r25
    15ca:	64 f4       	brge	.+24     	; 0x15e4 <fputc+0x3e>
    15cc:	e8 81       	ld	r30, Y
    15ce:	f9 81       	ldd	r31, Y+1	; 0x01
    15d0:	01 93       	st	Z+, r16
    15d2:	f9 83       	std	Y+1, r31	; 0x01
    15d4:	e8 83       	st	Y, r30
    15d6:	06 c0       	rjmp	.+12     	; 0x15e4 <fputc+0x3e>
    15d8:	e8 85       	ldd	r30, Y+8	; 0x08
    15da:	f9 85       	ldd	r31, Y+9	; 0x09
    15dc:	80 2f       	mov	r24, r16
    15de:	09 95       	icall
    15e0:	89 2b       	or	r24, r25
    15e2:	39 f4       	brne	.+14     	; 0x15f2 <fputc+0x4c>
    15e4:	8e 81       	ldd	r24, Y+6	; 0x06
    15e6:	9f 81       	ldd	r25, Y+7	; 0x07
    15e8:	01 96       	adiw	r24, 0x01	; 1
    15ea:	9f 83       	std	Y+7, r25	; 0x07
    15ec:	8e 83       	std	Y+6, r24	; 0x06
    15ee:	c8 01       	movw	r24, r16
    15f0:	02 c0       	rjmp	.+4      	; 0x15f6 <fputc+0x50>
    15f2:	8f ef       	ldi	r24, 0xFF	; 255
    15f4:	9f ef       	ldi	r25, 0xFF	; 255
    15f6:	df 91       	pop	r29
    15f8:	cf 91       	pop	r28
    15fa:	1f 91       	pop	r17
    15fc:	0f 91       	pop	r16
    15fe:	08 95       	ret

00001600 <__subsf3>:
    1600:	50 58       	subi	r21, 0x80	; 128

00001602 <__addsf3>:
    1602:	19 2e       	mov	r1, r25
    1604:	08 d1       	rcall	.+528    	; 0x1816 <__fp_split3>
    1606:	01 d0       	rcall	.+2      	; 0x160a <__addsf3x>
    1608:	eb c0       	rjmp	.+470    	; 0x17e0 <__fp_merge>

0000160a <__addsf3x>:
    160a:	ba 17       	cp	r27, r26
    160c:	62 07       	cpc	r22, r18
    160e:	73 07       	cpc	r23, r19
    1610:	84 07       	cpc	r24, r20
    1612:	95 07       	cpc	r25, r21
    1614:	b1 f1       	breq	.+108    	; 0x1682 <__addsf3x+0x78>
    1616:	88 f4       	brcc	.+34     	; 0x163a <__addsf3x+0x30>
    1618:	0e f4       	brtc	.+2      	; 0x161c <__addsf3x+0x12>
    161a:	10 94       	com	r1
    161c:	0b 2e       	mov	r0, r27
    161e:	ba 2f       	mov	r27, r26
    1620:	a0 2d       	mov	r26, r0
    1622:	06 2e       	mov	r0, r22
    1624:	62 2f       	mov	r22, r18
    1626:	20 2d       	mov	r18, r0
    1628:	07 2e       	mov	r0, r23
    162a:	73 2f       	mov	r23, r19
    162c:	30 2d       	mov	r19, r0
    162e:	08 2e       	mov	r0, r24
    1630:	84 2f       	mov	r24, r20
    1632:	40 2d       	mov	r20, r0
    1634:	09 2e       	mov	r0, r25
    1636:	95 2f       	mov	r25, r21
    1638:	50 2d       	mov	r21, r0
    163a:	ff 27       	eor	r31, r31
    163c:	55 23       	and	r21, r21
    163e:	b9 f0       	breq	.+46     	; 0x166e <__addsf3x+0x64>
    1640:	59 1b       	sub	r21, r25
    1642:	49 f0       	breq	.+18     	; 0x1656 <__addsf3x+0x4c>
    1644:	57 3e       	cpi	r21, 0xE7	; 231
    1646:	98 f0       	brcs	.+38     	; 0x166e <__addsf3x+0x64>
    1648:	46 95       	lsr	r20
    164a:	37 95       	ror	r19
    164c:	27 95       	ror	r18
    164e:	a7 95       	ror	r26
    1650:	f0 40       	sbci	r31, 0x00	; 0
    1652:	53 95       	inc	r21
    1654:	c9 f7       	brne	.-14     	; 0x1648 <__addsf3x+0x3e>
    1656:	76 f0       	brts	.+28     	; 0x1674 <__addsf3x+0x6a>
    1658:	ba 0f       	add	r27, r26
    165a:	62 1f       	adc	r22, r18
    165c:	73 1f       	adc	r23, r19
    165e:	84 1f       	adc	r24, r20
    1660:	30 f4       	brcc	.+12     	; 0x166e <__addsf3x+0x64>
    1662:	87 95       	ror	r24
    1664:	77 95       	ror	r23
    1666:	67 95       	ror	r22
    1668:	b7 95       	ror	r27
    166a:	f0 40       	sbci	r31, 0x00	; 0
    166c:	93 95       	inc	r25
    166e:	17 fa       	bst	r1, 7
    1670:	0f 2e       	mov	r0, r31
    1672:	08 95       	ret
    1674:	bf 1b       	sub	r27, r31
    1676:	bb 27       	eor	r27, r27
    1678:	ba 0b       	sbc	r27, r26
    167a:	62 0b       	sbc	r22, r18
    167c:	73 0b       	sbc	r23, r19
    167e:	84 0b       	sbc	r24, r20
    1680:	f6 cf       	rjmp	.-20     	; 0x166e <__addsf3x+0x64>
    1682:	de f6       	brtc	.-74     	; 0x163a <__addsf3x+0x30>
    1684:	f4 c0       	rjmp	.+488    	; 0x186e <__fp_zerox>

00001686 <__divsf3>:
    1686:	c7 d0       	rcall	.+398    	; 0x1816 <__fp_split3>
    1688:	01 d0       	rcall	.+2      	; 0x168c <__divsf3x>
    168a:	aa c0       	rjmp	.+340    	; 0x17e0 <__fp_merge>

0000168c <__divsf3x>:
    168c:	55 23       	and	r21, r21
    168e:	59 f0       	breq	.+22     	; 0x16a6 <__divsf3x+0x1a>
    1690:	99 23       	and	r25, r25
    1692:	69 f0       	breq	.+26     	; 0x16ae <__divsf3x+0x22>
    1694:	9f 57       	subi	r25, 0x7F	; 127
    1696:	5f 57       	subi	r21, 0x7F	; 127
    1698:	95 1b       	sub	r25, r21
    169a:	33 f4       	brvc	.+12     	; 0x16a8 <__divsf3x+0x1c>
    169c:	42 f4       	brpl	.+16     	; 0x16ae <__divsf3x+0x22>
    169e:	90 38       	cpi	r25, 0x80	; 128
    16a0:	11 f4       	brne	.+4      	; 0x16a6 <__divsf3x+0x1a>
    16a2:	91 58       	subi	r25, 0x81	; 129
    16a4:	05 c0       	rjmp	.+10     	; 0x16b0 <__divsf3x+0x24>
    16a6:	b4 c0       	rjmp	.+360    	; 0x1810 <__fp_nan>
    16a8:	91 58       	subi	r25, 0x81	; 129
    16aa:	9f 3f       	cpi	r25, 0xFF	; 255
    16ac:	09 f4       	brne	.+2      	; 0x16b0 <__divsf3x+0x24>
    16ae:	df c0       	rjmp	.+446    	; 0x186e <__fp_zerox>
    16b0:	bb 27       	eor	r27, r27
    16b2:	11 24       	eor	r1, r1
    16b4:	62 17       	cp	r22, r18
    16b6:	73 07       	cpc	r23, r19
    16b8:	84 07       	cpc	r24, r20
    16ba:	30 f4       	brcc	.+12     	; 0x16c8 <__divsf3x+0x3c>
    16bc:	66 0f       	add	r22, r22
    16be:	77 1f       	adc	r23, r23
    16c0:	88 1f       	adc	r24, r24
    16c2:	bb 1f       	adc	r27, r27
    16c4:	91 50       	subi	r25, 0x01	; 1
    16c6:	98 f3       	brcs	.-26     	; 0x16ae <__divsf3x+0x22>
    16c8:	11 d0       	rcall	.+34     	; 0x16ec <__divsf3x+0x60>
    16ca:	0f 92       	push	r0
    16cc:	0f d0       	rcall	.+30     	; 0x16ec <__divsf3x+0x60>
    16ce:	0f 92       	push	r0
    16d0:	0d d0       	rcall	.+26     	; 0x16ec <__divsf3x+0x60>
    16d2:	a0 e8       	ldi	r26, 0x80	; 128
    16d4:	26 17       	cp	r18, r22
    16d6:	37 07       	cpc	r19, r23
    16d8:	48 07       	cpc	r20, r24
    16da:	1b 06       	cpc	r1, r27
    16dc:	09 f0       	breq	.+2      	; 0x16e0 <__divsf3x+0x54>
    16de:	a0 48       	sbci	r26, 0x80	; 128
    16e0:	ba 2f       	mov	r27, r26
    16e2:	60 2d       	mov	r22, r0
    16e4:	7f 91       	pop	r23
    16e6:	8f 91       	pop	r24
    16e8:	00 24       	eor	r0, r0
    16ea:	08 95       	ret
    16ec:	a0 e8       	ldi	r26, 0x80	; 128
    16ee:	00 24       	eor	r0, r0
    16f0:	62 17       	cp	r22, r18
    16f2:	73 07       	cpc	r23, r19
    16f4:	84 07       	cpc	r24, r20
    16f6:	b1 05       	cpc	r27, r1
    16f8:	28 f0       	brcs	.+10     	; 0x1704 <__divsf3x+0x78>
    16fa:	62 1b       	sub	r22, r18
    16fc:	73 0b       	sbc	r23, r19
    16fe:	84 0b       	sbc	r24, r20
    1700:	b1 09       	sbc	r27, r1
    1702:	0a 2a       	or	r0, r26
    1704:	66 0f       	add	r22, r22
    1706:	77 1f       	adc	r23, r23
    1708:	88 1f       	adc	r24, r24
    170a:	bb 1f       	adc	r27, r27
    170c:	a6 95       	lsr	r26
    170e:	81 f7       	brne	.-32     	; 0x16f0 <__divsf3x+0x64>
    1710:	08 95       	ret

00001712 <__fixsfsi>:
    1712:	97 fb       	bst	r25, 7
    1714:	8c d0       	rcall	.+280    	; 0x182e <__fp_split1>
    1716:	9f 37       	cpi	r25, 0x7F	; 127
    1718:	38 f0       	brcs	.+14     	; 0x1728 <__fixsfsi+0x16>
    171a:	fe e9       	ldi	r31, 0x9E	; 158
    171c:	f9 1b       	sub	r31, r25
    171e:	98 2f       	mov	r25, r24
    1720:	87 2f       	mov	r24, r23
    1722:	76 2f       	mov	r23, r22
    1724:	6b 2f       	mov	r22, r27
    1726:	05 c0       	rjmp	.+10     	; 0x1732 <__fixsfsi+0x20>
    1728:	9f c0       	rjmp	.+318    	; 0x1868 <__fp_zero>
    172a:	96 95       	lsr	r25
    172c:	87 95       	ror	r24
    172e:	77 95       	ror	r23
    1730:	67 95       	ror	r22
    1732:	f1 50       	subi	r31, 0x01	; 1
    1734:	d0 f7       	brcc	.-12     	; 0x172a <__fixsfsi+0x18>
    1736:	3e f4       	brtc	.+14     	; 0x1746 <__fp_lneg+0xe>

00001738 <__fp_lneg>:
    1738:	90 95       	com	r25
    173a:	80 95       	com	r24
    173c:	70 95       	com	r23
    173e:	61 95       	neg	r22
    1740:	7f 4f       	sbci	r23, 0xFF	; 255
    1742:	8f 4f       	sbci	r24, 0xFF	; 255
    1744:	9f 4f       	sbci	r25, 0xFF	; 255
    1746:	08 95       	ret

00001748 <__floatunssisf>:
    1748:	e8 94       	clt
    174a:	03 c0       	rjmp	.+6      	; 0x1752 <__floatsisf+0x6>

0000174c <__floatsisf>:
    174c:	97 fb       	bst	r25, 7
    174e:	0e f4       	brtc	.+2      	; 0x1752 <__floatsisf+0x6>
    1750:	f3 df       	rcall	.-26     	; 0x1738 <__fp_lneg>
    1752:	b6 2f       	mov	r27, r22
    1754:	67 2f       	mov	r22, r23
    1756:	78 2f       	mov	r23, r24
    1758:	89 2f       	mov	r24, r25
    175a:	9e e9       	ldi	r25, 0x9E	; 158
    175c:	00 24       	eor	r0, r0
    175e:	40 c0       	rjmp	.+128    	; 0x17e0 <__fp_merge>

00001760 <floor>:
    1760:	74 d0       	rcall	.+232    	; 0x184a <__fp_split_a>
    1762:	9f 37       	cpi	r25, 0x7F	; 127
    1764:	60 f4       	brcc	.+24     	; 0x177e <floor+0x1e>
    1766:	0e f0       	brts	.+2      	; 0x176a <floor+0xa>
    1768:	7f c0       	rjmp	.+254    	; 0x1868 <__fp_zero>
    176a:	9f eb       	ldi	r25, 0xBF	; 191
    176c:	80 e8       	ldi	r24, 0x80	; 128
    176e:	77 27       	eor	r23, r23
    1770:	66 27       	eor	r22, r22
    1772:	08 95       	ret
    1774:	86 95       	lsr	r24
    1776:	77 95       	ror	r23
    1778:	67 95       	ror	r22
    177a:	b1 1d       	adc	r27, r1
    177c:	93 95       	inc	r25
    177e:	96 39       	cpi	r25, 0x96	; 150
    1780:	c8 f3       	brcs	.-14     	; 0x1774 <floor+0x14>
    1782:	2e f4       	brtc	.+10     	; 0x178e <floor+0x2e>
    1784:	bb 23       	and	r27, r27
    1786:	19 f0       	breq	.+6      	; 0x178e <floor+0x2e>
    1788:	6f 5f       	subi	r22, 0xFF	; 255
    178a:	7f 4f       	sbci	r23, 0xFF	; 255
    178c:	8f 4f       	sbci	r24, 0xFF	; 255
    178e:	bb 27       	eor	r27, r27
    1790:	27 c0       	rjmp	.+78     	; 0x17e0 <__fp_merge>

00001792 <__eqsf2>:
    1792:	0e d0       	rcall	.+28     	; 0x17b0 <.fp_cmp>
    1794:	5e f0       	brts	.+22     	; 0x17ac <__cmpsf2+0xe>
    1796:	04 c0       	rjmp	.+8      	; 0x17a0 <__cmpsf2+0x2>

00001798 <__gesf2>:
    1798:	0b d0       	rcall	.+22     	; 0x17b0 <.fp_cmp>
    179a:	26 f0       	brts	.+8      	; 0x17a4 <__cmpsf2+0x6>
    179c:	01 c0       	rjmp	.+2      	; 0x17a0 <__cmpsf2+0x2>

0000179e <__cmpsf2>:
    179e:	08 d0       	rcall	.+16     	; 0x17b0 <.fp_cmp>
    17a0:	19 f0       	breq	.+6      	; 0x17a8 <__cmpsf2+0xa>
    17a2:	20 f4       	brcc	.+8      	; 0x17ac <__cmpsf2+0xe>
    17a4:	8f ef       	ldi	r24, 0xFF	; 255
    17a6:	08 95       	ret
    17a8:	80 e0       	ldi	r24, 0x00	; 0
    17aa:	08 95       	ret
    17ac:	81 e0       	ldi	r24, 0x01	; 1
    17ae:	08 95       	ret

000017b0 <.fp_cmp>:
    17b0:	97 fb       	bst	r25, 7
    17b2:	09 2e       	mov	r0, r25
    17b4:	05 26       	eor	r0, r21
    17b6:	00 f8       	bld	r0, 0
    17b8:	68 94       	set
    17ba:	30 d0       	rcall	.+96     	; 0x181c <__fp_split2>
    17bc:	e8 94       	clt
    17be:	07 fc       	sbrc	r0, 7
    17c0:	07 c0       	rjmp	.+14     	; 0x17d0 <.fp_cmp+0x20>
    17c2:	62 17       	cp	r22, r18
    17c4:	73 07       	cpc	r23, r19
    17c6:	84 07       	cpc	r24, r20
    17c8:	95 07       	cpc	r25, r21
    17ca:	21 f0       	breq	.+8      	; 0x17d4 <.fp_cmp+0x24>
    17cc:	08 f4       	brcc	.+2      	; 0x17d0 <.fp_cmp+0x20>
    17ce:	00 94       	com	r0
    17d0:	07 94       	ror	r0
    17d2:	98 94       	clz
    17d4:	08 95       	ret
    17d6:	9a 95       	dec	r25
    17d8:	bb 0f       	add	r27, r27
    17da:	66 1f       	adc	r22, r22
    17dc:	77 1f       	adc	r23, r23
    17de:	88 1f       	adc	r24, r24

000017e0 <__fp_merge>:
    17e0:	11 24       	eor	r1, r1
    17e2:	99 23       	and	r25, r25
    17e4:	a1 f0       	breq	.+40     	; 0x180e <__fp_merge+0x2e>
    17e6:	88 23       	and	r24, r24
    17e8:	b2 f7       	brpl	.-20     	; 0x17d6 <.fp_cmp+0x26>
    17ea:	9f 3f       	cpi	r25, 0xFF	; 255
    17ec:	59 f0       	breq	.+22     	; 0x1804 <__fp_merge+0x24>
    17ee:	bb 0f       	add	r27, r27
    17f0:	48 f4       	brcc	.+18     	; 0x1804 <__fp_merge+0x24>
    17f2:	21 f4       	brne	.+8      	; 0x17fc <__fp_merge+0x1c>
    17f4:	00 20       	and	r0, r0
    17f6:	11 f4       	brne	.+4      	; 0x17fc <__fp_merge+0x1c>
    17f8:	60 ff       	sbrs	r22, 0
    17fa:	04 c0       	rjmp	.+8      	; 0x1804 <__fp_merge+0x24>
    17fc:	6f 5f       	subi	r22, 0xFF	; 255
    17fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1800:	8f 4f       	sbci	r24, 0xFF	; 255
    1802:	9f 4f       	sbci	r25, 0xFF	; 255
    1804:	88 1f       	adc	r24, r24
    1806:	97 95       	ror	r25
    1808:	87 95       	ror	r24
    180a:	97 f9       	bld	r25, 7
    180c:	08 95       	ret
    180e:	2c c0       	rjmp	.+88     	; 0x1868 <__fp_zero>

00001810 <__fp_nan>:
    1810:	9f ef       	ldi	r25, 0xFF	; 255
    1812:	80 ec       	ldi	r24, 0xC0	; 192
    1814:	08 95       	ret

00001816 <__fp_split3>:
    1816:	05 2e       	mov	r0, r21
    1818:	09 26       	eor	r0, r25
    181a:	07 fa       	bst	r0, 7

0000181c <__fp_split2>:
    181c:	44 0f       	add	r20, r20
    181e:	55 1f       	adc	r21, r21
    1820:	5f 3f       	cpi	r21, 0xFF	; 255
    1822:	79 f0       	breq	.+30     	; 0x1842 <__fp_split1+0x14>
    1824:	aa 27       	eor	r26, r26
    1826:	a5 17       	cp	r26, r21
    1828:	08 f0       	brcs	.+2      	; 0x182c <__fp_split2+0x10>
    182a:	51 e0       	ldi	r21, 0x01	; 1
    182c:	47 95       	ror	r20

0000182e <__fp_split1>:
    182e:	88 0f       	add	r24, r24
    1830:	99 1f       	adc	r25, r25
    1832:	9f 3f       	cpi	r25, 0xFF	; 255
    1834:	31 f0       	breq	.+12     	; 0x1842 <__fp_split1+0x14>
    1836:	bb 27       	eor	r27, r27
    1838:	b9 17       	cp	r27, r25
    183a:	08 f0       	brcs	.+2      	; 0x183e <__fp_split1+0x10>
    183c:	91 e0       	ldi	r25, 0x01	; 1
    183e:	87 95       	ror	r24
    1840:	08 95       	ret
    1842:	9f 91       	pop	r25
    1844:	9f 91       	pop	r25
    1846:	11 24       	eor	r1, r1
    1848:	e3 cf       	rjmp	.-58     	; 0x1810 <__fp_nan>

0000184a <__fp_split_a>:
    184a:	97 fb       	bst	r25, 7
    184c:	88 0f       	add	r24, r24
    184e:	99 1f       	adc	r25, r25
    1850:	9f 3f       	cpi	r25, 0xFF	; 255
    1852:	31 f0       	breq	.+12     	; 0x1860 <__fp_split_a+0x16>
    1854:	bb 27       	eor	r27, r27
    1856:	b9 17       	cp	r27, r25
    1858:	08 f0       	brcs	.+2      	; 0x185c <__fp_split_a+0x12>
    185a:	91 e0       	ldi	r25, 0x01	; 1
    185c:	87 95       	ror	r24
    185e:	08 95       	ret
    1860:	9f 91       	pop	r25
    1862:	9f 91       	pop	r25
    1864:	11 24       	eor	r1, r1
    1866:	d4 cf       	rjmp	.-88     	; 0x1810 <__fp_nan>

00001868 <__fp_zero>:
    1868:	66 27       	eor	r22, r22
    186a:	77 27       	eor	r23, r23
    186c:	88 27       	eor	r24, r24

0000186e <__fp_zerox>:
    186e:	99 27       	eor	r25, r25
    1870:	08 95       	ret

00001872 <__mulsf3>:
    1872:	d1 df       	rcall	.-94     	; 0x1816 <__fp_split3>
    1874:	01 d0       	rcall	.+2      	; 0x1878 <__mulsf3x>
    1876:	b4 cf       	rjmp	.-152    	; 0x17e0 <__fp_merge>

00001878 <__mulsf3x>:
    1878:	99 23       	and	r25, r25
    187a:	39 f0       	breq	.+14     	; 0x188a <__mulsf3x+0x12>
    187c:	55 23       	and	r21, r21
    187e:	29 f0       	breq	.+10     	; 0x188a <__mulsf3x+0x12>
    1880:	9f 57       	subi	r25, 0x7F	; 127
    1882:	5f 57       	subi	r21, 0x7F	; 127
    1884:	95 0f       	add	r25, r21
    1886:	13 f4       	brvc	.+4      	; 0x188c <__mulsf3x+0x14>
    1888:	9a f1       	brmi	.+102    	; 0x18f0 <__mulsf3x+0x78>
    188a:	f1 cf       	rjmp	.-30     	; 0x186e <__fp_zerox>
    188c:	91 58       	subi	r25, 0x81	; 129
    188e:	9f 3f       	cpi	r25, 0xFF	; 255
    1890:	e1 f3       	breq	.-8      	; 0x188a <__mulsf3x+0x12>
    1892:	62 9f       	mul	r22, r18
    1894:	a1 2d       	mov	r26, r1
    1896:	0f 92       	push	r0
    1898:	bb 27       	eor	r27, r27
    189a:	63 9f       	mul	r22, r19
    189c:	a0 0d       	add	r26, r0
    189e:	b1 1d       	adc	r27, r1
    18a0:	ee 27       	eor	r30, r30
    18a2:	72 9f       	mul	r23, r18
    18a4:	a0 0d       	add	r26, r0
    18a6:	b1 1d       	adc	r27, r1
    18a8:	ee 1f       	adc	r30, r30
    18aa:	af 93       	push	r26
    18ac:	aa 27       	eor	r26, r26
    18ae:	64 9f       	mul	r22, r20
    18b0:	b0 0d       	add	r27, r0
    18b2:	e1 1d       	adc	r30, r1
    18b4:	73 9f       	mul	r23, r19
    18b6:	b0 0d       	add	r27, r0
    18b8:	e1 1d       	adc	r30, r1
    18ba:	aa 1f       	adc	r26, r26
    18bc:	66 27       	eor	r22, r22
    18be:	82 9f       	mul	r24, r18
    18c0:	b0 0d       	add	r27, r0
    18c2:	e1 1d       	adc	r30, r1
    18c4:	a6 1f       	adc	r26, r22
    18c6:	55 27       	eor	r21, r21
    18c8:	74 9f       	mul	r23, r20
    18ca:	e0 0d       	add	r30, r0
    18cc:	a1 1d       	adc	r26, r1
    18ce:	55 1f       	adc	r21, r21
    18d0:	83 9f       	mul	r24, r19
    18d2:	e0 0d       	add	r30, r0
    18d4:	a1 1d       	adc	r26, r1
    18d6:	56 1f       	adc	r21, r22
    18d8:	84 9f       	mul	r24, r20
    18da:	a0 0d       	add	r26, r0
    18dc:	51 1d       	adc	r21, r1
    18de:	85 2f       	mov	r24, r21
    18e0:	7a 2f       	mov	r23, r26
    18e2:	6e 2f       	mov	r22, r30
    18e4:	1f 90       	pop	r1
    18e6:	0f 90       	pop	r0
    18e8:	88 23       	and	r24, r24
    18ea:	1a f4       	brpl	.+6      	; 0x18f2 <__mulsf3x+0x7a>
    18ec:	93 95       	inc	r25
    18ee:	39 f4       	brne	.+14     	; 0x18fe <__mulsf3x+0x86>
    18f0:	8f cf       	rjmp	.-226    	; 0x1810 <__fp_nan>
    18f2:	00 0c       	add	r0, r0
    18f4:	11 1c       	adc	r1, r1
    18f6:	bb 1f       	adc	r27, r27
    18f8:	66 1f       	adc	r22, r22
    18fa:	77 1f       	adc	r23, r23
    18fc:	88 1f       	adc	r24, r24
    18fe:	01 28       	or	r0, r1
    1900:	08 95       	ret

00001902 <__udivmodhi4>:
    1902:	aa 1b       	sub	r26, r26
    1904:	bb 1b       	sub	r27, r27
    1906:	51 e1       	ldi	r21, 0x11	; 17
    1908:	07 c0       	rjmp	.+14     	; 0x1918 <__udivmodhi4_ep>

0000190a <__udivmodhi4_loop>:
    190a:	aa 1f       	adc	r26, r26
    190c:	bb 1f       	adc	r27, r27
    190e:	a6 17       	cp	r26, r22
    1910:	b7 07       	cpc	r27, r23
    1912:	10 f0       	brcs	.+4      	; 0x1918 <__udivmodhi4_ep>
    1914:	a6 1b       	sub	r26, r22
    1916:	b7 0b       	sbc	r27, r23

00001918 <__udivmodhi4_ep>:
    1918:	88 1f       	adc	r24, r24
    191a:	99 1f       	adc	r25, r25
    191c:	5a 95       	dec	r21
    191e:	a9 f7       	brne	.-22     	; 0x190a <__udivmodhi4_loop>
    1920:	80 95       	com	r24
    1922:	90 95       	com	r25
    1924:	bc 01       	movw	r22, r24
    1926:	cd 01       	movw	r24, r26
    1928:	08 95       	ret

0000192a <__udivmodsi4>:
    192a:	a1 e2       	ldi	r26, 0x21	; 33
    192c:	1a 2e       	mov	r1, r26
    192e:	aa 1b       	sub	r26, r26
    1930:	bb 1b       	sub	r27, r27
    1932:	fd 01       	movw	r30, r26
    1934:	0d c0       	rjmp	.+26     	; 0x1950 <__udivmodsi4_ep>

00001936 <__udivmodsi4_loop>:
    1936:	aa 1f       	adc	r26, r26
    1938:	bb 1f       	adc	r27, r27
    193a:	ee 1f       	adc	r30, r30
    193c:	ff 1f       	adc	r31, r31
    193e:	a2 17       	cp	r26, r18
    1940:	b3 07       	cpc	r27, r19
    1942:	e4 07       	cpc	r30, r20
    1944:	f5 07       	cpc	r31, r21
    1946:	20 f0       	brcs	.+8      	; 0x1950 <__udivmodsi4_ep>
    1948:	a2 1b       	sub	r26, r18
    194a:	b3 0b       	sbc	r27, r19
    194c:	e4 0b       	sbc	r30, r20
    194e:	f5 0b       	sbc	r31, r21

00001950 <__udivmodsi4_ep>:
    1950:	66 1f       	adc	r22, r22
    1952:	77 1f       	adc	r23, r23
    1954:	88 1f       	adc	r24, r24
    1956:	99 1f       	adc	r25, r25
    1958:	1a 94       	dec	r1
    195a:	69 f7       	brne	.-38     	; 0x1936 <__udivmodsi4_loop>
    195c:	60 95       	com	r22
    195e:	70 95       	com	r23
    1960:	80 95       	com	r24
    1962:	90 95       	com	r25
    1964:	9b 01       	movw	r18, r22
    1966:	ac 01       	movw	r20, r24
    1968:	bd 01       	movw	r22, r26
    196a:	cf 01       	movw	r24, r30
    196c:	08 95       	ret

0000196e <__prologue_saves__>:
    196e:	2f 92       	push	r2
    1970:	3f 92       	push	r3
    1972:	4f 92       	push	r4
    1974:	5f 92       	push	r5
    1976:	6f 92       	push	r6
    1978:	7f 92       	push	r7
    197a:	8f 92       	push	r8
    197c:	9f 92       	push	r9
    197e:	af 92       	push	r10
    1980:	bf 92       	push	r11
    1982:	cf 92       	push	r12
    1984:	df 92       	push	r13
    1986:	ef 92       	push	r14
    1988:	ff 92       	push	r15
    198a:	0f 93       	push	r16
    198c:	1f 93       	push	r17
    198e:	cf 93       	push	r28
    1990:	df 93       	push	r29
    1992:	cd b7       	in	r28, 0x3d	; 61
    1994:	de b7       	in	r29, 0x3e	; 62
    1996:	ca 1b       	sub	r28, r26
    1998:	db 0b       	sbc	r29, r27
    199a:	0f b6       	in	r0, 0x3f	; 63
    199c:	f8 94       	cli
    199e:	de bf       	out	0x3e, r29	; 62
    19a0:	0f be       	out	0x3f, r0	; 63
    19a2:	cd bf       	out	0x3d, r28	; 61
    19a4:	09 94       	ijmp

000019a6 <__epilogue_restores__>:
    19a6:	2a 88       	ldd	r2, Y+18	; 0x12
    19a8:	39 88       	ldd	r3, Y+17	; 0x11
    19aa:	48 88       	ldd	r4, Y+16	; 0x10
    19ac:	5f 84       	ldd	r5, Y+15	; 0x0f
    19ae:	6e 84       	ldd	r6, Y+14	; 0x0e
    19b0:	7d 84       	ldd	r7, Y+13	; 0x0d
    19b2:	8c 84       	ldd	r8, Y+12	; 0x0c
    19b4:	9b 84       	ldd	r9, Y+11	; 0x0b
    19b6:	aa 84       	ldd	r10, Y+10	; 0x0a
    19b8:	b9 84       	ldd	r11, Y+9	; 0x09
    19ba:	c8 84       	ldd	r12, Y+8	; 0x08
    19bc:	df 80       	ldd	r13, Y+7	; 0x07
    19be:	ee 80       	ldd	r14, Y+6	; 0x06
    19c0:	fd 80       	ldd	r15, Y+5	; 0x05
    19c2:	0c 81       	ldd	r16, Y+4	; 0x04
    19c4:	1b 81       	ldd	r17, Y+3	; 0x03
    19c6:	aa 81       	ldd	r26, Y+2	; 0x02
    19c8:	b9 81       	ldd	r27, Y+1	; 0x01
    19ca:	ce 0f       	add	r28, r30
    19cc:	d1 1d       	adc	r29, r1
    19ce:	0f b6       	in	r0, 0x3f	; 63
    19d0:	f8 94       	cli
    19d2:	de bf       	out	0x3e, r29	; 62
    19d4:	0f be       	out	0x3f, r0	; 63
    19d6:	cd bf       	out	0x3d, r28	; 61
    19d8:	ed 01       	movw	r28, r26
    19da:	08 95       	ret
