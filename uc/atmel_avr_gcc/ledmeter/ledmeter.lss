
ledmeter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001238  00000000  00000000  00000094  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00001238  000012cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001a  00800060  00800060  000012cc  2**0
                  ALLOC
  3 .noinit       00000000  0080007a  0080007a  000012cc  2**0
                  CONTENTS
  4 .eeprom       00000000  00810000  00810000  000012cc  2**0
                  CONTENTS
  5 .stab         00001a10  00000000  00000000  000012cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  6 .stabstr      00000b0d  00000000  00000000  00002cdc  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
       0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
       2:	70 c7       	rjmp	.+3808   	; 0xee4 <__vector_1>
       4:	2c c0       	rjmp	.+88     	; 0x5e <__bad_interrupt>
       6:	2b c0       	rjmp	.+86     	; 0x5e <__bad_interrupt>
       8:	2a c0       	rjmp	.+84     	; 0x5e <__bad_interrupt>
       a:	29 c0       	rjmp	.+82     	; 0x5e <__bad_interrupt>
       c:	28 c0       	rjmp	.+80     	; 0x5e <__bad_interrupt>
       e:	27 c0       	rjmp	.+78     	; 0x5e <__bad_interrupt>
      10:	26 c0       	rjmp	.+76     	; 0x5e <__bad_interrupt>
      12:	25 c0       	rjmp	.+74     	; 0x5e <__bad_interrupt>
      14:	24 c0       	rjmp	.+72     	; 0x5e <__bad_interrupt>
      16:	23 c0       	rjmp	.+70     	; 0x5e <__bad_interrupt>
      18:	22 c0       	rjmp	.+68     	; 0x5e <__bad_interrupt>
      1a:	21 c0       	rjmp	.+66     	; 0x5e <__bad_interrupt>
      1c:	20 c0       	rjmp	.+64     	; 0x5e <__bad_interrupt>
      1e:	1f c0       	rjmp	.+62     	; 0x5e <__bad_interrupt>
      20:	1e c0       	rjmp	.+60     	; 0x5e <__bad_interrupt>
      22:	1d c0       	rjmp	.+58     	; 0x5e <__bad_interrupt>
      24:	1c c0       	rjmp	.+56     	; 0x5e <__bad_interrupt>
      26:	1b c0       	rjmp	.+54     	; 0x5e <__bad_interrupt>
      28:	1a c0       	rjmp	.+52     	; 0x5e <__bad_interrupt>

0000002a <__ctors_end>:
      2a:	11 24       	eor	r1, r1
      2c:	1f be       	out	0x3f, r1	; 63
      2e:	cf e5       	ldi	r28, 0x5F	; 95
      30:	d2 e0       	ldi	r29, 0x02	; 2
      32:	de bf       	out	0x3e, r29	; 62
      34:	cd bf       	out	0x3d, r28	; 61

00000036 <__do_copy_data>:
      36:	10 e0       	ldi	r17, 0x00	; 0
      38:	a0 e6       	ldi	r26, 0x60	; 96
      3a:	b0 e0       	ldi	r27, 0x00	; 0
      3c:	e8 e3       	ldi	r30, 0x38	; 56
      3e:	f2 e1       	ldi	r31, 0x12	; 18
      40:	02 c0       	rjmp	.+4      	; 0x46 <.do_copy_data_start>

00000042 <.do_copy_data_loop>:
      42:	05 90       	lpm	r0, Z+
      44:	0d 92       	st	X+, r0

00000046 <.do_copy_data_start>:
      46:	a0 36       	cpi	r26, 0x60	; 96
      48:	b1 07       	cpc	r27, r17
      4a:	d9 f7       	brne	.-10     	; 0x42 <.do_copy_data_loop>

0000004c <__do_clear_bss>:
      4c:	10 e0       	ldi	r17, 0x00	; 0
      4e:	a0 e6       	ldi	r26, 0x60	; 96
      50:	b0 e0       	ldi	r27, 0x00	; 0
      52:	01 c0       	rjmp	.+2      	; 0x56 <.do_clear_bss_start>

00000054 <.do_clear_bss_loop>:
      54:	1d 92       	st	X+, r1

00000056 <.do_clear_bss_start>:
      56:	aa 37       	cpi	r26, 0x7A	; 122
      58:	b1 07       	cpc	r27, r17
      5a:	e1 f7       	brne	.-8      	; 0x54 <.do_clear_bss_loop>
      5c:	3c c7       	rjmp	.+3704   	; 0xed6 <main>

0000005e <__bad_interrupt>:
      5e:	d0 cf       	rjmp	.-96     	; 0x0 <__vectors>

00000060 <init_time>:
time_typ best_time;

int running_chronometer = FALSE; // 0 false ; -1 true

void init_time(time_typ time) {
      60:	cf 93       	push	r28
      62:	df 93       	push	r29
      64:	cd b7       	in	r28, 0x3d	; 61
      66:	de b7       	in	r29, 0x3e	; 62
      68:	28 97       	sbiw	r28, 0x08	; 8
      6a:	0f b6       	in	r0, 0x3f	; 63
      6c:	f8 94       	cli
      6e:	de bf       	out	0x3e, r29	; 62
      70:	0f be       	out	0x3f, r0	; 63
      72:	cd bf       	out	0x3d, r28	; 61
      74:	29 83       	std	Y+1, r18	; 0x01
      76:	3a 83       	std	Y+2, r19	; 0x02
      78:	4b 83       	std	Y+3, r20	; 0x03
      7a:	5c 83       	std	Y+4, r21	; 0x04
      7c:	6d 83       	std	Y+5, r22	; 0x05
      7e:	7e 83       	std	Y+6, r23	; 0x06
      80:	8f 83       	std	Y+7, r24	; 0x07
      82:	98 87       	std	Y+8, r25	; 0x08
    time.hh = 0;
      84:	1a 82       	std	Y+2, r1	; 0x02
      86:	19 82       	std	Y+1, r1	; 0x01
    time.mm = 0;
      88:	1c 82       	std	Y+4, r1	; 0x04
      8a:	1b 82       	std	Y+3, r1	; 0x03
    time.ss = 0;
      8c:	1e 82       	std	Y+6, r1	; 0x06
      8e:	1d 82       	std	Y+5, r1	; 0x05
    time.xx = 0;
      90:	18 86       	std	Y+8, r1	; 0x08
      92:	1f 82       	std	Y+7, r1	; 0x07
      94:	28 96       	adiw	r28, 0x08	; 8
      96:	0f b6       	in	r0, 0x3f	; 63
      98:	f8 94       	cli
      9a:	de bf       	out	0x3e, r29	; 62
      9c:	0f be       	out	0x3f, r0	; 63
      9e:	cd bf       	out	0x3d, r28	; 61
      a0:	df 91       	pop	r29
      a2:	cf 91       	pop	r28
      a4:	08 95       	ret

000000a6 <copy_time>:
}

void copy_time(time_typ time_source, time_typ time_dest) { // TO TEST (pointer ?)
      a6:	af 92       	push	r10
      a8:	bf 92       	push	r11
      aa:	cf 92       	push	r12
      ac:	df 92       	push	r13
      ae:	ef 92       	push	r14
      b0:	ff 92       	push	r15
      b2:	0f 93       	push	r16
      b4:	1f 93       	push	r17
      b6:	cf 93       	push	r28
      b8:	df 93       	push	r29
      ba:	cd b7       	in	r28, 0x3d	; 61
      bc:	de b7       	in	r29, 0x3e	; 62
      be:	60 97       	sbiw	r28, 0x10	; 16
      c0:	0f b6       	in	r0, 0x3f	; 63
      c2:	f8 94       	cli
      c4:	de bf       	out	0x3e, r29	; 62
      c6:	0f be       	out	0x3f, r0	; 63
      c8:	cd bf       	out	0x3d, r28	; 61
      ca:	29 83       	std	Y+1, r18	; 0x01
      cc:	3a 83       	std	Y+2, r19	; 0x02
      ce:	4b 83       	std	Y+3, r20	; 0x03
      d0:	5c 83       	std	Y+4, r21	; 0x04
      d2:	6d 83       	std	Y+5, r22	; 0x05
      d4:	7e 83       	std	Y+6, r23	; 0x06
      d6:	8f 83       	std	Y+7, r24	; 0x07
      d8:	98 87       	std	Y+8, r25	; 0x08
      da:	a9 86       	std	Y+9, r10	; 0x09
      dc:	ba 86       	std	Y+10, r11	; 0x0a
      de:	cb 86       	std	Y+11, r12	; 0x0b
      e0:	dc 86       	std	Y+12, r13	; 0x0c
      e2:	ed 86       	std	Y+13, r14	; 0x0d
      e4:	fe 86       	std	Y+14, r15	; 0x0e
      e6:	0f 87       	std	Y+15, r16	; 0x0f
      e8:	18 8b       	std	Y+16, r17	; 0x10
    time_dest.hh = time_source.hh;
      ea:	89 81       	ldd	r24, Y+1	; 0x01
      ec:	9a 81       	ldd	r25, Y+2	; 0x02
      ee:	9a 87       	std	Y+10, r25	; 0x0a
      f0:	89 87       	std	Y+9, r24	; 0x09
    time_dest.mm = time_source.mm;
      f2:	8b 81       	ldd	r24, Y+3	; 0x03
      f4:	9c 81       	ldd	r25, Y+4	; 0x04
      f6:	9c 87       	std	Y+12, r25	; 0x0c
      f8:	8b 87       	std	Y+11, r24	; 0x0b
    time_dest.ss = time_source.ss;
      fa:	8d 81       	ldd	r24, Y+5	; 0x05
      fc:	9e 81       	ldd	r25, Y+6	; 0x06
      fe:	9e 87       	std	Y+14, r25	; 0x0e
     100:	8d 87       	std	Y+13, r24	; 0x0d
    time_dest.xx = time_source.xx;
     102:	8f 81       	ldd	r24, Y+7	; 0x07
     104:	98 85       	ldd	r25, Y+8	; 0x08
     106:	98 8b       	std	Y+16, r25	; 0x10
     108:	8f 87       	std	Y+15, r24	; 0x0f
     10a:	60 96       	adiw	r28, 0x10	; 16
     10c:	0f b6       	in	r0, 0x3f	; 63
     10e:	f8 94       	cli
     110:	de bf       	out	0x3e, r29	; 62
     112:	0f be       	out	0x3f, r0	; 63
     114:	cd bf       	out	0x3d, r28	; 61
     116:	df 91       	pop	r29
     118:	cf 91       	pop	r28
     11a:	1f 91       	pop	r17
     11c:	0f 91       	pop	r16
     11e:	ff 90       	pop	r15
     120:	ef 90       	pop	r14
     122:	df 90       	pop	r13
     124:	cf 90       	pop	r12
     126:	bf 90       	pop	r11
     128:	af 90       	pop	r10
     12a:	08 95       	ret

0000012c <compare_time>:
}

int compare_time(time_typ time1, time_typ time2) {
     12c:	af 92       	push	r10
     12e:	bf 92       	push	r11
     130:	cf 92       	push	r12
     132:	df 92       	push	r13
     134:	ef 92       	push	r14
     136:	ff 92       	push	r15
     138:	0f 93       	push	r16
     13a:	1f 93       	push	r17
     13c:	cf 93       	push	r28
     13e:	df 93       	push	r29
     140:	cd b7       	in	r28, 0x3d	; 61
     142:	de b7       	in	r29, 0x3e	; 62
     144:	60 97       	sbiw	r28, 0x10	; 16
     146:	0f b6       	in	r0, 0x3f	; 63
     148:	f8 94       	cli
     14a:	de bf       	out	0x3e, r29	; 62
     14c:	0f be       	out	0x3f, r0	; 63
     14e:	cd bf       	out	0x3d, r28	; 61
     150:	29 83       	std	Y+1, r18	; 0x01
     152:	3a 83       	std	Y+2, r19	; 0x02
     154:	4b 83       	std	Y+3, r20	; 0x03
     156:	5c 83       	std	Y+4, r21	; 0x04
     158:	6d 83       	std	Y+5, r22	; 0x05
     15a:	7e 83       	std	Y+6, r23	; 0x06
     15c:	8f 83       	std	Y+7, r24	; 0x07
     15e:	98 87       	std	Y+8, r25	; 0x08
     160:	a9 86       	std	Y+9, r10	; 0x09
     162:	ba 86       	std	Y+10, r11	; 0x0a
     164:	cb 86       	std	Y+11, r12	; 0x0b
     166:	dc 86       	std	Y+12, r13	; 0x0c
     168:	ed 86       	std	Y+13, r14	; 0x0d
     16a:	fe 86       	std	Y+14, r15	; 0x0e
     16c:	0f 87       	std	Y+15, r16	; 0x0f
     16e:	18 8b       	std	Y+16, r17	; 0x10
    //  0 time1=time2
    // -1 time1<time2
    //  1 time1>time2
    return 0;
     170:	80 e0       	ldi	r24, 0x00	; 0
     172:	90 e0       	ldi	r25, 0x00	; 0
     174:	60 96       	adiw	r28, 0x10	; 16
     176:	0f b6       	in	r0, 0x3f	; 63
     178:	f8 94       	cli
     17a:	de bf       	out	0x3e, r29	; 62
     17c:	0f be       	out	0x3f, r0	; 63
     17e:	cd bf       	out	0x3d, r28	; 61
     180:	df 91       	pop	r29
     182:	cf 91       	pop	r28
     184:	1f 91       	pop	r17
     186:	0f 91       	pop	r16
     188:	ff 90       	pop	r15
     18a:	ef 90       	pop	r14
     18c:	df 90       	pop	r13
     18e:	cf 90       	pop	r12
     190:	bf 90       	pop	r11
     192:	af 90       	pop	r10
     194:	08 95       	ret

00000196 <inc_time>:
}

void inc_time(time_typ time) {
     196:	cf 93       	push	r28
     198:	df 93       	push	r29
     19a:	cd b7       	in	r28, 0x3d	; 61
     19c:	de b7       	in	r29, 0x3e	; 62
     19e:	64 97       	sbiw	r28, 0x14	; 20
     1a0:	0f b6       	in	r0, 0x3f	; 63
     1a2:	f8 94       	cli
     1a4:	de bf       	out	0x3e, r29	; 62
     1a6:	0f be       	out	0x3f, r0	; 63
     1a8:	cd bf       	out	0x3d, r28	; 61
     1aa:	29 83       	std	Y+1, r18	; 0x01
     1ac:	3a 83       	std	Y+2, r19	; 0x02
     1ae:	4b 83       	std	Y+3, r20	; 0x03
     1b0:	5c 83       	std	Y+4, r21	; 0x04
     1b2:	6d 83       	std	Y+5, r22	; 0x05
     1b4:	7e 83       	std	Y+6, r23	; 0x06
     1b6:	8f 83       	std	Y+7, r24	; 0x07
     1b8:	98 87       	std	Y+8, r25	; 0x08
  if (running_chronometer) {
     1ba:	80 91 60 00 	lds	r24, 0x0060
     1be:	90 91 61 00 	lds	r25, 0x0061
     1c2:	00 97       	sbiw	r24, 0x00	; 0
     1c4:	09 f4       	brne	.+2      	; 0x1c8 <inc_time+0x32>
     1c6:	7b c0       	rjmp	.+246    	; 0x2be <__stack+0x5f>
    time.xx++;
     1c8:	8f 81       	ldd	r24, Y+7	; 0x07
     1ca:	98 85       	ldd	r25, Y+8	; 0x08
     1cc:	01 96       	adiw	r24, 0x01	; 1
     1ce:	98 87       	std	Y+8, r25	; 0x08
     1d0:	8f 83       	std	Y+7, r24	; 0x07
    if(time.xx >= 1000) {
     1d2:	8f 81       	ldd	r24, Y+7	; 0x07
     1d4:	98 85       	ldd	r25, Y+8	; 0x08
     1d6:	23 e0       	ldi	r18, 0x03	; 3
     1d8:	88 3e       	cpi	r24, 0xE8	; 232
     1da:	92 07       	cpc	r25, r18
     1dc:	30 f1       	brcs	.+76     	; 0x22a <inc_time+0x94>
        time.xx = 0;
     1de:	18 86       	std	Y+8, r1	; 0x08
     1e0:	1f 82       	std	Y+7, r1	; 0x07
        time.ss++;
     1e2:	8d 81       	ldd	r24, Y+5	; 0x05
     1e4:	9e 81       	ldd	r25, Y+6	; 0x06
     1e6:	01 96       	adiw	r24, 0x01	; 1
     1e8:	9e 83       	std	Y+6, r25	; 0x06
     1ea:	8d 83       	std	Y+5, r24	; 0x05
        if (time.ss >= 60) {
     1ec:	8d 81       	ldd	r24, Y+5	; 0x05
     1ee:	9e 81       	ldd	r25, Y+6	; 0x06
     1f0:	8c 33       	cpi	r24, 0x3C	; 60
     1f2:	91 05       	cpc	r25, r1
     1f4:	d4 f0       	brlt	.+52     	; 0x22a <inc_time+0x94>
            time.ss = 0;
     1f6:	1e 82       	std	Y+6, r1	; 0x06
     1f8:	1d 82       	std	Y+5, r1	; 0x05
            time.mm++;
     1fa:	8b 81       	ldd	r24, Y+3	; 0x03
     1fc:	9c 81       	ldd	r25, Y+4	; 0x04
     1fe:	01 96       	adiw	r24, 0x01	; 1
     200:	9c 83       	std	Y+4, r25	; 0x04
     202:	8b 83       	std	Y+3, r24	; 0x03
            if (time.mm >= 60) {
     204:	8b 81       	ldd	r24, Y+3	; 0x03
     206:	9c 81       	ldd	r25, Y+4	; 0x04
     208:	8c 33       	cpi	r24, 0x3C	; 60
     20a:	91 05       	cpc	r25, r1
     20c:	74 f0       	brlt	.+28     	; 0x22a <inc_time+0x94>
                time.mm = 0;
     20e:	1c 82       	std	Y+4, r1	; 0x04
     210:	1b 82       	std	Y+3, r1	; 0x03
                time.hh++;
     212:	89 81       	ldd	r24, Y+1	; 0x01
     214:	9a 81       	ldd	r25, Y+2	; 0x02
     216:	01 96       	adiw	r24, 0x01	; 1
     218:	9a 83       	std	Y+2, r25	; 0x02
     21a:	89 83       	std	Y+1, r24	; 0x01
                if (time.hh >= 24) {
     21c:	89 81       	ldd	r24, Y+1	; 0x01
     21e:	9a 81       	ldd	r25, Y+2	; 0x02
     220:	88 31       	cpi	r24, 0x18	; 24
     222:	91 05       	cpc	r25, r1
     224:	14 f0       	brlt	.+4      	; 0x22a <inc_time+0x94>
                    time.hh = 0;
     226:	1a 82       	std	Y+2, r1	; 0x02
     228:	19 82       	std	Y+1, r1	; 0x01
   The maximal possible delay is 262.14 ms / F_CPU in MHz.
 */
void
_delay_ms(double __ms)
{
     22a:	80 e0       	ldi	r24, 0x00	; 0
     22c:	90 e0       	ldi	r25, 0x00	; 0
     22e:	a0 e8       	ldi	r26, 0x80	; 128
     230:	bf e3       	ldi	r27, 0x3F	; 63
     232:	89 87       	std	Y+9, r24	; 0x09
     234:	9a 87       	std	Y+10, r25	; 0x0a
     236:	ab 87       	std	Y+11, r26	; 0x0b
     238:	bc 87       	std	Y+12, r27	; 0x0c
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     23a:	20 e0       	ldi	r18, 0x00	; 0
     23c:	30 e0       	ldi	r19, 0x00	; 0
     23e:	4a e7       	ldi	r20, 0x7A	; 122
     240:	53 e4       	ldi	r21, 0x43	; 67
     242:	69 85       	ldd	r22, Y+9	; 0x09
     244:	7a 85       	ldd	r23, Y+10	; 0x0a
     246:	8b 85       	ldd	r24, Y+11	; 0x0b
     248:	9c 85       	ldd	r25, Y+12	; 0x0c
     24a:	ae d7       	rcall	.+3932   	; 0x11a8 <__mulsf3>
     24c:	dc 01       	movw	r26, r24
     24e:	cb 01       	movw	r24, r22
     250:	8f 87       	std	Y+15, r24	; 0x0f
     252:	98 8b       	std	Y+16, r25	; 0x10
     254:	a9 8b       	std	Y+17, r26	; 0x11
     256:	ba 8b       	std	Y+18, r27	; 0x12
	if (__tmp < 1.0)
     258:	20 e0       	ldi	r18, 0x00	; 0
     25a:	30 e0       	ldi	r19, 0x00	; 0
     25c:	40 e8       	ldi	r20, 0x80	; 128
     25e:	5f e3       	ldi	r21, 0x3F	; 63
     260:	6f 85       	ldd	r22, Y+15	; 0x0f
     262:	78 89       	ldd	r23, Y+16	; 0x10
     264:	89 89       	ldd	r24, Y+17	; 0x11
     266:	9a 89       	ldd	r25, Y+18	; 0x12
     268:	2f d7       	rcall	.+3678   	; 0x10c8 <__eqsf2>
     26a:	88 23       	and	r24, r24
     26c:	0c f0       	brlt	.+2      	; 0x270 <__stack+0x11>
     26e:	05 c0       	rjmp	.+10     	; 0x27a <__stack+0x1b>
		__ticks = 1;
     270:	81 e0       	ldi	r24, 0x01	; 1
     272:	90 e0       	ldi	r25, 0x00	; 0
     274:	9e 87       	std	Y+14, r25	; 0x0e
     276:	8d 87       	std	Y+13, r24	; 0x0d
     278:	18 c0       	rjmp	.+48     	; 0x2aa <__stack+0x4b>
	else if (__tmp > 65535)
     27a:	20 e0       	ldi	r18, 0x00	; 0
     27c:	3f ef       	ldi	r19, 0xFF	; 255
     27e:	4f e7       	ldi	r20, 0x7F	; 127
     280:	57 e4       	ldi	r21, 0x47	; 71
     282:	6f 85       	ldd	r22, Y+15	; 0x0f
     284:	78 89       	ldd	r23, Y+16	; 0x10
     286:	89 89       	ldd	r24, Y+17	; 0x11
     288:	9a 89       	ldd	r25, Y+18	; 0x12
     28a:	21 d7       	rcall	.+3650   	; 0x10ce <__gesf2>
     28c:	18 16       	cp	r1, r24
     28e:	0c f0       	brlt	.+2      	; 0x292 <__stack+0x33>
     290:	03 c0       	rjmp	.+6      	; 0x298 <__stack+0x39>
		__ticks = 0;	/* i.e. 65536 */
     292:	1e 86       	std	Y+14, r1	; 0x0e
     294:	1d 86       	std	Y+13, r1	; 0x0d
     296:	09 c0       	rjmp	.+18     	; 0x2aa <__stack+0x4b>
	else
		__ticks = (uint16_t)__tmp;
     298:	6f 85       	ldd	r22, Y+15	; 0x0f
     29a:	78 89       	ldd	r23, Y+16	; 0x10
     29c:	89 89       	ldd	r24, Y+17	; 0x11
     29e:	9a 89       	ldd	r25, Y+18	; 0x12
     2a0:	d3 d6       	rcall	.+3494   	; 0x1048 <__fixsfsi>
     2a2:	dc 01       	movw	r26, r24
     2a4:	cb 01       	movw	r24, r22
     2a6:	9e 87       	std	Y+14, r25	; 0x0e
     2a8:	8d 87       	std	Y+13, r24	; 0x0d
     2aa:	8d 85       	ldd	r24, Y+13	; 0x0d
     2ac:	9e 85       	ldd	r25, Y+14	; 0x0e
     2ae:	9c 8b       	std	Y+20, r25	; 0x14
     2b0:	8b 8b       	std	Y+19, r24	; 0x13
     2b2:	8b 89       	ldd	r24, Y+19	; 0x13
     2b4:	9c 89       	ldd	r25, Y+20	; 0x14
     2b6:	01 97       	sbiw	r24, 0x01	; 1
     2b8:	f1 f7       	brne	.-4      	; 0x2b6 <__stack+0x57>
     2ba:	9c 8b       	std	Y+20, r25	; 0x14
     2bc:	8b 8b       	std	Y+19, r24	; 0x13
     2be:	64 96       	adiw	r28, 0x14	; 20
     2c0:	0f b6       	in	r0, 0x3f	; 63
     2c2:	f8 94       	cli
     2c4:	de bf       	out	0x3e, r29	; 62
     2c6:	0f be       	out	0x3f, r0	; 63
     2c8:	cd bf       	out	0x3d, r28	; 61
     2ca:	df 91       	pop	r29
     2cc:	cf 91       	pop	r28
     2ce:	08 95       	ret

000002d0 <switch_on_all_leds>:
					 }
            }
        }
    }
    _delay_ms(1);
  }
}



/*
void switch_on_all_leds();
void switch_off_all_leds();
void switch_on_led(int led);
void switch_off_led(int led);
void loop(void);
void init(void);
*/

// 1=off
// 0=on

/*
 * switch on all leds
 */
void switch_on_all_leds() {
     2d0:	cf 93       	push	r28
     2d2:	df 93       	push	r29
     2d4:	cd b7       	in	r28, 0x3d	; 61
     2d6:	de b7       	in	r29, 0x3e	; 62
    PORTC = 0x00;
     2d8:	10 92 35 00 	sts	0x0035, r1
     2dc:	df 91       	pop	r29
     2de:	cf 91       	pop	r28
     2e0:	08 95       	ret

000002e2 <switch_off_all_leds>:
}

/*
 * switch off all leds
 */
void switch_off_all_leds() {
     2e2:	cf 93       	push	r28
     2e4:	df 93       	push	r29
     2e6:	cd b7       	in	r28, 0x3d	; 61
     2e8:	de b7       	in	r29, 0x3e	; 62
    PORTC = 0xFF;
     2ea:	8f ef       	ldi	r24, 0xFF	; 255
     2ec:	80 93 35 00 	sts	0x0035, r24
     2f0:	df 91       	pop	r29
     2f2:	cf 91       	pop	r28
     2f4:	08 95       	ret

000002f6 <switch_on_led>:
}

// led from 1 to 8 (LEDSNUM)
// PCx with w from 0 to 7

/*
 * switch on the led with the number called "led"
 */
void switch_on_led(int led) {
     2f6:	cf 93       	push	r28
     2f8:	df 93       	push	r29
     2fa:	cd b7       	in	r28, 0x3d	; 61
     2fc:	de b7       	in	r29, 0x3e	; 62
     2fe:	26 97       	sbiw	r28, 0x06	; 6
     300:	0f b6       	in	r0, 0x3f	; 63
     302:	f8 94       	cli
     304:	de bf       	out	0x3e, r29	; 62
     306:	0f be       	out	0x3f, r0	; 63
     308:	cd bf       	out	0x3d, r28	; 61
     30a:	9a 83       	std	Y+2, r25	; 0x02
     30c:	89 83       	std	Y+1, r24	; 0x01
    int pin = led - 1;
     30e:	89 81       	ldd	r24, Y+1	; 0x01
     310:	9a 81       	ldd	r25, Y+2	; 0x02
     312:	01 97       	sbiw	r24, 0x01	; 1
     314:	9c 83       	std	Y+4, r25	; 0x04
     316:	8b 83       	std	Y+3, r24	; 0x03
    int mask = ~(1<<pin);
     318:	81 e0       	ldi	r24, 0x01	; 1
     31a:	90 e0       	ldi	r25, 0x00	; 0
     31c:	0b 80       	ldd	r0, Y+3	; 0x03
     31e:	02 c0       	rjmp	.+4      	; 0x324 <switch_on_led+0x2e>
     320:	88 0f       	add	r24, r24
     322:	99 1f       	adc	r25, r25
     324:	0a 94       	dec	r0
     326:	e2 f7       	brpl	.-8      	; 0x320 <switch_on_led+0x2a>
     328:	80 95       	com	r24
     32a:	90 95       	com	r25
     32c:	9e 83       	std	Y+6, r25	; 0x06
     32e:	8d 83       	std	Y+5, r24	; 0x05
    PORTC&=mask;
     330:	90 91 35 00 	lds	r25, 0x0035
     334:	8d 81       	ldd	r24, Y+5	; 0x05
     336:	89 23       	and	r24, r25
     338:	80 93 35 00 	sts	0x0035, r24
     33c:	26 96       	adiw	r28, 0x06	; 6
     33e:	0f b6       	in	r0, 0x3f	; 63
     340:	f8 94       	cli
     342:	de bf       	out	0x3e, r29	; 62
     344:	0f be       	out	0x3f, r0	; 63
     346:	cd bf       	out	0x3d, r28	; 61
     348:	df 91       	pop	r29
     34a:	cf 91       	pop	r28
     34c:	08 95       	ret

0000034e <switch_off_led>:
}

/*
 * switch off the led with the number called "led"
 */
void switch_off_led(int led) {
     34e:	cf 93       	push	r28
     350:	df 93       	push	r29
     352:	cd b7       	in	r28, 0x3d	; 61
     354:	de b7       	in	r29, 0x3e	; 62
     356:	26 97       	sbiw	r28, 0x06	; 6
     358:	0f b6       	in	r0, 0x3f	; 63
     35a:	f8 94       	cli
     35c:	de bf       	out	0x3e, r29	; 62
     35e:	0f be       	out	0x3f, r0	; 63
     360:	cd bf       	out	0x3d, r28	; 61
     362:	9a 83       	std	Y+2, r25	; 0x02
     364:	89 83       	std	Y+1, r24	; 0x01
    int pin = led - 1;
     366:	89 81       	ldd	r24, Y+1	; 0x01
     368:	9a 81       	ldd	r25, Y+2	; 0x02
     36a:	01 97       	sbiw	r24, 0x01	; 1
     36c:	9c 83       	std	Y+4, r25	; 0x04
     36e:	8b 83       	std	Y+3, r24	; 0x03
    int mask = (1<<pin);
     370:	81 e0       	ldi	r24, 0x01	; 1
     372:	90 e0       	ldi	r25, 0x00	; 0
     374:	0b 80       	ldd	r0, Y+3	; 0x03
     376:	02 c0       	rjmp	.+4      	; 0x37c <switch_off_led+0x2e>
     378:	88 0f       	add	r24, r24
     37a:	99 1f       	adc	r25, r25
     37c:	0a 94       	dec	r0
     37e:	e2 f7       	brpl	.-8      	; 0x378 <switch_off_led+0x2a>
     380:	9e 83       	std	Y+6, r25	; 0x06
     382:	8d 83       	std	Y+5, r24	; 0x05
    PORTC|=mask;
     384:	90 91 35 00 	lds	r25, 0x0035
     388:	8d 81       	ldd	r24, Y+5	; 0x05
     38a:	89 2b       	or	r24, r25
     38c:	80 93 35 00 	sts	0x0035, r24
     390:	26 96       	adiw	r28, 0x06	; 6
     392:	0f b6       	in	r0, 0x3f	; 63
     394:	f8 94       	cli
     396:	de bf       	out	0x3e, r29	; 62
     398:	0f be       	out	0x3f, r0	; 63
     39a:	cd bf       	out	0x3d, r28	; 61
     39c:	df 91       	pop	r29
     39e:	cf 91       	pop	r28
     3a0:	08 95       	ret

000003a2 <switch_on_leds_with_delay>:
}

/*
 * switch on every leds one after one with a delay (called "delay")
 */
void switch_on_leds_with_delay(double delay) {
     3a2:	cf 93       	push	r28
     3a4:	df 93       	push	r29
     3a6:	cd b7       	in	r28, 0x3d	; 61
     3a8:	de b7       	in	r29, 0x3e	; 62
     3aa:	62 97       	sbiw	r28, 0x12	; 18
     3ac:	0f b6       	in	r0, 0x3f	; 63
     3ae:	f8 94       	cli
     3b0:	de bf       	out	0x3e, r29	; 62
     3b2:	0f be       	out	0x3f, r0	; 63
     3b4:	cd bf       	out	0x3d, r28	; 61
     3b6:	69 83       	std	Y+1, r22	; 0x01
     3b8:	7a 83       	std	Y+2, r23	; 0x02
     3ba:	8b 83       	std	Y+3, r24	; 0x03
     3bc:	9c 83       	std	Y+4, r25	; 0x04
    int i;
    for(i = 1; i<=Nleds; i++) {
     3be:	81 e0       	ldi	r24, 0x01	; 1
     3c0:	90 e0       	ldi	r25, 0x00	; 0
     3c2:	9e 83       	std	Y+6, r25	; 0x06
     3c4:	8d 83       	std	Y+5, r24	; 0x05
     3c6:	8d 81       	ldd	r24, Y+5	; 0x05
     3c8:	9e 81       	ldd	r25, Y+6	; 0x06
     3ca:	89 30       	cpi	r24, 0x09	; 9
     3cc:	91 05       	cpc	r25, r1
     3ce:	0c f0       	brlt	.+2      	; 0x3d2 <switch_on_leds_with_delay+0x30>
     3d0:	53 c0       	rjmp	.+166    	; 0x478 <switch_on_leds_with_delay+0xd6>
   The maximal possible delay is 262.14 ms / F_CPU in MHz.
 */
void
_delay_ms(double __ms)
{
     3d2:	89 81       	ldd	r24, Y+1	; 0x01
     3d4:	9a 81       	ldd	r25, Y+2	; 0x02
     3d6:	ab 81       	ldd	r26, Y+3	; 0x03
     3d8:	bc 81       	ldd	r27, Y+4	; 0x04
     3da:	8f 83       	std	Y+7, r24	; 0x07
     3dc:	98 87       	std	Y+8, r25	; 0x08
     3de:	a9 87       	std	Y+9, r26	; 0x09
     3e0:	ba 87       	std	Y+10, r27	; 0x0a
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     3e2:	20 e0       	ldi	r18, 0x00	; 0
     3e4:	30 e0       	ldi	r19, 0x00	; 0
     3e6:	4a e7       	ldi	r20, 0x7A	; 122
     3e8:	53 e4       	ldi	r21, 0x43	; 67
     3ea:	6f 81       	ldd	r22, Y+7	; 0x07
     3ec:	78 85       	ldd	r23, Y+8	; 0x08
     3ee:	89 85       	ldd	r24, Y+9	; 0x09
     3f0:	9a 85       	ldd	r25, Y+10	; 0x0a
     3f2:	da d6       	rcall	.+3508   	; 0x11a8 <__mulsf3>
     3f4:	dc 01       	movw	r26, r24
     3f6:	cb 01       	movw	r24, r22
     3f8:	8d 87       	std	Y+13, r24	; 0x0d
     3fa:	9e 87       	std	Y+14, r25	; 0x0e
     3fc:	af 87       	std	Y+15, r26	; 0x0f
     3fe:	b8 8b       	std	Y+16, r27	; 0x10
	if (__tmp < 1.0)
     400:	20 e0       	ldi	r18, 0x00	; 0
     402:	30 e0       	ldi	r19, 0x00	; 0
     404:	40 e8       	ldi	r20, 0x80	; 128
     406:	5f e3       	ldi	r21, 0x3F	; 63
     408:	6d 85       	ldd	r22, Y+13	; 0x0d
     40a:	7e 85       	ldd	r23, Y+14	; 0x0e
     40c:	8f 85       	ldd	r24, Y+15	; 0x0f
     40e:	98 89       	ldd	r25, Y+16	; 0x10
     410:	5b d6       	rcall	.+3254   	; 0x10c8 <__eqsf2>
     412:	88 23       	and	r24, r24
     414:	0c f0       	brlt	.+2      	; 0x418 <switch_on_leds_with_delay+0x76>
     416:	05 c0       	rjmp	.+10     	; 0x422 <switch_on_leds_with_delay+0x80>
		__ticks = 1;
     418:	81 e0       	ldi	r24, 0x01	; 1
     41a:	90 e0       	ldi	r25, 0x00	; 0
     41c:	9c 87       	std	Y+12, r25	; 0x0c
     41e:	8b 87       	std	Y+11, r24	; 0x0b
     420:	18 c0       	rjmp	.+48     	; 0x452 <switch_on_leds_with_delay+0xb0>
	else if (__tmp > 65535)
     422:	20 e0       	ldi	r18, 0x00	; 0
     424:	3f ef       	ldi	r19, 0xFF	; 255
     426:	4f e7       	ldi	r20, 0x7F	; 127
     428:	57 e4       	ldi	r21, 0x47	; 71
     42a:	6d 85       	ldd	r22, Y+13	; 0x0d
     42c:	7e 85       	ldd	r23, Y+14	; 0x0e
     42e:	8f 85       	ldd	r24, Y+15	; 0x0f
     430:	98 89       	ldd	r25, Y+16	; 0x10
     432:	4d d6       	rcall	.+3226   	; 0x10ce <__gesf2>
     434:	18 16       	cp	r1, r24
     436:	0c f0       	brlt	.+2      	; 0x43a <switch_on_leds_with_delay+0x98>
     438:	03 c0       	rjmp	.+6      	; 0x440 <switch_on_leds_with_delay+0x9e>
		__ticks = 0;	/* i.e. 65536 */
     43a:	1c 86       	std	Y+12, r1	; 0x0c
     43c:	1b 86       	std	Y+11, r1	; 0x0b
     43e:	09 c0       	rjmp	.+18     	; 0x452 <switch_on_leds_with_delay+0xb0>
	else
		__ticks = (uint16_t)__tmp;
     440:	6d 85       	ldd	r22, Y+13	; 0x0d
     442:	7e 85       	ldd	r23, Y+14	; 0x0e
     444:	8f 85       	ldd	r24, Y+15	; 0x0f
     446:	98 89       	ldd	r25, Y+16	; 0x10
     448:	ff d5       	rcall	.+3070   	; 0x1048 <__fixsfsi>
     44a:	dc 01       	movw	r26, r24
     44c:	cb 01       	movw	r24, r22
     44e:	9c 87       	std	Y+12, r25	; 0x0c
     450:	8b 87       	std	Y+11, r24	; 0x0b
     452:	8b 85       	ldd	r24, Y+11	; 0x0b
     454:	9c 85       	ldd	r25, Y+12	; 0x0c
     456:	9a 8b       	std	Y+18, r25	; 0x12
     458:	89 8b       	std	Y+17, r24	; 0x11
     45a:	89 89       	ldd	r24, Y+17	; 0x11
     45c:	9a 89       	ldd	r25, Y+18	; 0x12
     45e:	01 97       	sbiw	r24, 0x01	; 1
     460:	f1 f7       	brne	.-4      	; 0x45e <switch_on_leds_with_delay+0xbc>
     462:	9a 8b       	std	Y+18, r25	; 0x12
     464:	89 8b       	std	Y+17, r24	; 0x11
        _delay_ms(delay);
        switch_on_led(i);
     466:	8d 81       	ldd	r24, Y+5	; 0x05
     468:	9e 81       	ldd	r25, Y+6	; 0x06
     46a:	45 df       	rcall	.-374    	; 0x2f6 <switch_on_led>
     46c:	8d 81       	ldd	r24, Y+5	; 0x05
     46e:	9e 81       	ldd	r25, Y+6	; 0x06
     470:	01 96       	adiw	r24, 0x01	; 1
     472:	9e 83       	std	Y+6, r25	; 0x06
     474:	8d 83       	std	Y+5, r24	; 0x05
     476:	a7 cf       	rjmp	.-178    	; 0x3c6 <switch_on_leds_with_delay+0x24>
     478:	62 96       	adiw	r28, 0x12	; 18
     47a:	0f b6       	in	r0, 0x3f	; 63
     47c:	f8 94       	cli
     47e:	de bf       	out	0x3e, r29	; 62
     480:	0f be       	out	0x3f, r0	; 63
     482:	cd bf       	out	0x3d, r28	; 61
     484:	df 91       	pop	r29
     486:	cf 91       	pop	r28
     488:	08 95       	ret

0000048a <switch_off_leds_with_delay>:
    }
}

/*
 * switch off every leds on after one with a delay (called "delay")
 */
void switch_off_leds_with_delay(double delay) {
     48a:	cf 93       	push	r28
     48c:	df 93       	push	r29
     48e:	cd b7       	in	r28, 0x3d	; 61
     490:	de b7       	in	r29, 0x3e	; 62
     492:	62 97       	sbiw	r28, 0x12	; 18
     494:	0f b6       	in	r0, 0x3f	; 63
     496:	f8 94       	cli
     498:	de bf       	out	0x3e, r29	; 62
     49a:	0f be       	out	0x3f, r0	; 63
     49c:	cd bf       	out	0x3d, r28	; 61
     49e:	69 83       	std	Y+1, r22	; 0x01
     4a0:	7a 83       	std	Y+2, r23	; 0x02
     4a2:	8b 83       	std	Y+3, r24	; 0x03
     4a4:	9c 83       	std	Y+4, r25	; 0x04
    int i;
    for(i = Nleds; i>=0; i--) {
     4a6:	88 e0       	ldi	r24, 0x08	; 8
     4a8:	90 e0       	ldi	r25, 0x00	; 0
     4aa:	9e 83       	std	Y+6, r25	; 0x06
     4ac:	8d 83       	std	Y+5, r24	; 0x05
     4ae:	8d 81       	ldd	r24, Y+5	; 0x05
     4b0:	9e 81       	ldd	r25, Y+6	; 0x06
     4b2:	99 23       	and	r25, r25
     4b4:	0c f4       	brge	.+2      	; 0x4b8 <switch_off_leds_with_delay+0x2e>
     4b6:	53 c0       	rjmp	.+166    	; 0x55e <switch_off_leds_with_delay+0xd4>
   The maximal possible delay is 262.14 ms / F_CPU in MHz.
 */
void
_delay_ms(double __ms)
{
     4b8:	89 81       	ldd	r24, Y+1	; 0x01
     4ba:	9a 81       	ldd	r25, Y+2	; 0x02
     4bc:	ab 81       	ldd	r26, Y+3	; 0x03
     4be:	bc 81       	ldd	r27, Y+4	; 0x04
     4c0:	8f 83       	std	Y+7, r24	; 0x07
     4c2:	98 87       	std	Y+8, r25	; 0x08
     4c4:	a9 87       	std	Y+9, r26	; 0x09
     4c6:	ba 87       	std	Y+10, r27	; 0x0a
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     4c8:	20 e0       	ldi	r18, 0x00	; 0
     4ca:	30 e0       	ldi	r19, 0x00	; 0
     4cc:	4a e7       	ldi	r20, 0x7A	; 122
     4ce:	53 e4       	ldi	r21, 0x43	; 67
     4d0:	6f 81       	ldd	r22, Y+7	; 0x07
     4d2:	78 85       	ldd	r23, Y+8	; 0x08
     4d4:	89 85       	ldd	r24, Y+9	; 0x09
     4d6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4d8:	67 d6       	rcall	.+3278   	; 0x11a8 <__mulsf3>
     4da:	dc 01       	movw	r26, r24
     4dc:	cb 01       	movw	r24, r22
     4de:	8d 87       	std	Y+13, r24	; 0x0d
     4e0:	9e 87       	std	Y+14, r25	; 0x0e
     4e2:	af 87       	std	Y+15, r26	; 0x0f
     4e4:	b8 8b       	std	Y+16, r27	; 0x10
	if (__tmp < 1.0)
     4e6:	20 e0       	ldi	r18, 0x00	; 0
     4e8:	30 e0       	ldi	r19, 0x00	; 0
     4ea:	40 e8       	ldi	r20, 0x80	; 128
     4ec:	5f e3       	ldi	r21, 0x3F	; 63
     4ee:	6d 85       	ldd	r22, Y+13	; 0x0d
     4f0:	7e 85       	ldd	r23, Y+14	; 0x0e
     4f2:	8f 85       	ldd	r24, Y+15	; 0x0f
     4f4:	98 89       	ldd	r25, Y+16	; 0x10
     4f6:	e8 d5       	rcall	.+3024   	; 0x10c8 <__eqsf2>
     4f8:	88 23       	and	r24, r24
     4fa:	0c f0       	brlt	.+2      	; 0x4fe <switch_off_leds_with_delay+0x74>
     4fc:	05 c0       	rjmp	.+10     	; 0x508 <switch_off_leds_with_delay+0x7e>
		__ticks = 1;
     4fe:	81 e0       	ldi	r24, 0x01	; 1
     500:	90 e0       	ldi	r25, 0x00	; 0
     502:	9c 87       	std	Y+12, r25	; 0x0c
     504:	8b 87       	std	Y+11, r24	; 0x0b
     506:	18 c0       	rjmp	.+48     	; 0x538 <switch_off_leds_with_delay+0xae>
	else if (__tmp > 65535)
     508:	20 e0       	ldi	r18, 0x00	; 0
     50a:	3f ef       	ldi	r19, 0xFF	; 255
     50c:	4f e7       	ldi	r20, 0x7F	; 127
     50e:	57 e4       	ldi	r21, 0x47	; 71
     510:	6d 85       	ldd	r22, Y+13	; 0x0d
     512:	7e 85       	ldd	r23, Y+14	; 0x0e
     514:	8f 85       	ldd	r24, Y+15	; 0x0f
     516:	98 89       	ldd	r25, Y+16	; 0x10
     518:	da d5       	rcall	.+2996   	; 0x10ce <__gesf2>
     51a:	18 16       	cp	r1, r24
     51c:	0c f0       	brlt	.+2      	; 0x520 <switch_off_leds_with_delay+0x96>
     51e:	03 c0       	rjmp	.+6      	; 0x526 <switch_off_leds_with_delay+0x9c>
		__ticks = 0;	/* i.e. 65536 */
     520:	1c 86       	std	Y+12, r1	; 0x0c
     522:	1b 86       	std	Y+11, r1	; 0x0b
     524:	09 c0       	rjmp	.+18     	; 0x538 <switch_off_leds_with_delay+0xae>
	else
		__ticks = (uint16_t)__tmp;
     526:	6d 85       	ldd	r22, Y+13	; 0x0d
     528:	7e 85       	ldd	r23, Y+14	; 0x0e
     52a:	8f 85       	ldd	r24, Y+15	; 0x0f
     52c:	98 89       	ldd	r25, Y+16	; 0x10
     52e:	8c d5       	rcall	.+2840   	; 0x1048 <__fixsfsi>
     530:	dc 01       	movw	r26, r24
     532:	cb 01       	movw	r24, r22
     534:	9c 87       	std	Y+12, r25	; 0x0c
     536:	8b 87       	std	Y+11, r24	; 0x0b
     538:	8b 85       	ldd	r24, Y+11	; 0x0b
     53a:	9c 85       	ldd	r25, Y+12	; 0x0c
     53c:	9a 8b       	std	Y+18, r25	; 0x12
     53e:	89 8b       	std	Y+17, r24	; 0x11
     540:	89 89       	ldd	r24, Y+17	; 0x11
     542:	9a 89       	ldd	r25, Y+18	; 0x12
     544:	01 97       	sbiw	r24, 0x01	; 1
     546:	f1 f7       	brne	.-4      	; 0x544 <switch_off_leds_with_delay+0xba>
     548:	9a 8b       	std	Y+18, r25	; 0x12
     54a:	89 8b       	std	Y+17, r24	; 0x11
        _delay_ms(delay);
        switch_off_led(i);
     54c:	8d 81       	ldd	r24, Y+5	; 0x05
     54e:	9e 81       	ldd	r25, Y+6	; 0x06
     550:	fe de       	rcall	.-516    	; 0x34e <switch_off_led>
     552:	8d 81       	ldd	r24, Y+5	; 0x05
     554:	9e 81       	ldd	r25, Y+6	; 0x06
     556:	01 97       	sbiw	r24, 0x01	; 1
     558:	9e 83       	std	Y+6, r25	; 0x06
     55a:	8d 83       	std	Y+5, r24	; 0x05
     55c:	a8 cf       	rjmp	.-176    	; 0x4ae <switch_off_leds_with_delay+0x24>
     55e:	62 96       	adiw	r28, 0x12	; 18
     560:	0f b6       	in	r0, 0x3f	; 63
     562:	f8 94       	cli
     564:	de bf       	out	0x3e, r29	; 62
     566:	0f be       	out	0x3f, r0	; 63
     568:	cd bf       	out	0x3d, r28	; 61
     56a:	df 91       	pop	r29
     56c:	cf 91       	pop	r28
     56e:	08 95       	ret

00000570 <test_leds>:
    }
}

/*
 * a function for testing leds that switch on every leds and switch off every leds (one after one)
 */
void test_leds() {
     570:	cf 93       	push	r28
     572:	df 93       	push	r29
     574:	cd b7       	in	r28, 0x3d	; 61
     576:	de b7       	in	r29, 0x3e	; 62
     578:	2c 97       	sbiw	r28, 0x0c	; 12
     57a:	0f b6       	in	r0, 0x3f	; 63
     57c:	f8 94       	cli
     57e:	de bf       	out	0x3e, r29	; 62
     580:	0f be       	out	0x3f, r0	; 63
     582:	cd bf       	out	0x3d, r28	; 61
    switch_on_leds_with_delay(100);
     584:	60 e0       	ldi	r22, 0x00	; 0
     586:	70 e0       	ldi	r23, 0x00	; 0
     588:	88 ec       	ldi	r24, 0xC8	; 200
     58a:	92 e4       	ldi	r25, 0x42	; 66
     58c:	0a df       	rcall	.-492    	; 0x3a2 <switch_on_leds_with_delay>
   The maximal possible delay is 262.14 ms / F_CPU in MHz.
 */
void
_delay_ms(double __ms)
{
     58e:	80 e0       	ldi	r24, 0x00	; 0
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	a8 e4       	ldi	r26, 0x48	; 72
     594:	b2 e4       	ldi	r27, 0x42	; 66
     596:	89 83       	std	Y+1, r24	; 0x01
     598:	9a 83       	std	Y+2, r25	; 0x02
     59a:	ab 83       	std	Y+3, r26	; 0x03
     59c:	bc 83       	std	Y+4, r27	; 0x04
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     59e:	20 e0       	ldi	r18, 0x00	; 0
     5a0:	30 e0       	ldi	r19, 0x00	; 0
     5a2:	4a e7       	ldi	r20, 0x7A	; 122
     5a4:	53 e4       	ldi	r21, 0x43	; 67
     5a6:	69 81       	ldd	r22, Y+1	; 0x01
     5a8:	7a 81       	ldd	r23, Y+2	; 0x02
     5aa:	8b 81       	ldd	r24, Y+3	; 0x03
     5ac:	9c 81       	ldd	r25, Y+4	; 0x04
     5ae:	fc d5       	rcall	.+3064   	; 0x11a8 <__mulsf3>
     5b0:	dc 01       	movw	r26, r24
     5b2:	cb 01       	movw	r24, r22
     5b4:	8f 83       	std	Y+7, r24	; 0x07
     5b6:	98 87       	std	Y+8, r25	; 0x08
     5b8:	a9 87       	std	Y+9, r26	; 0x09
     5ba:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     5bc:	20 e0       	ldi	r18, 0x00	; 0
     5be:	30 e0       	ldi	r19, 0x00	; 0
     5c0:	40 e8       	ldi	r20, 0x80	; 128
     5c2:	5f e3       	ldi	r21, 0x3F	; 63
     5c4:	6f 81       	ldd	r22, Y+7	; 0x07
     5c6:	78 85       	ldd	r23, Y+8	; 0x08
     5c8:	89 85       	ldd	r24, Y+9	; 0x09
     5ca:	9a 85       	ldd	r25, Y+10	; 0x0a
     5cc:	7d d5       	rcall	.+2810   	; 0x10c8 <__eqsf2>
     5ce:	88 23       	and	r24, r24
     5d0:	0c f0       	brlt	.+2      	; 0x5d4 <test_leds+0x64>
     5d2:	05 c0       	rjmp	.+10     	; 0x5de <test_leds+0x6e>
		__ticks = 1;
     5d4:	81 e0       	ldi	r24, 0x01	; 1
     5d6:	90 e0       	ldi	r25, 0x00	; 0
     5d8:	9e 83       	std	Y+6, r25	; 0x06
     5da:	8d 83       	std	Y+5, r24	; 0x05
     5dc:	18 c0       	rjmp	.+48     	; 0x60e <test_leds+0x9e>
	else if (__tmp > 65535)
     5de:	20 e0       	ldi	r18, 0x00	; 0
     5e0:	3f ef       	ldi	r19, 0xFF	; 255
     5e2:	4f e7       	ldi	r20, 0x7F	; 127
     5e4:	57 e4       	ldi	r21, 0x47	; 71
     5e6:	6f 81       	ldd	r22, Y+7	; 0x07
     5e8:	78 85       	ldd	r23, Y+8	; 0x08
     5ea:	89 85       	ldd	r24, Y+9	; 0x09
     5ec:	9a 85       	ldd	r25, Y+10	; 0x0a
     5ee:	6f d5       	rcall	.+2782   	; 0x10ce <__gesf2>
     5f0:	18 16       	cp	r1, r24
     5f2:	0c f0       	brlt	.+2      	; 0x5f6 <test_leds+0x86>
     5f4:	03 c0       	rjmp	.+6      	; 0x5fc <test_leds+0x8c>
		__ticks = 0;	/* i.e. 65536 */
     5f6:	1e 82       	std	Y+6, r1	; 0x06
     5f8:	1d 82       	std	Y+5, r1	; 0x05
     5fa:	09 c0       	rjmp	.+18     	; 0x60e <test_leds+0x9e>
	else
		__ticks = (uint16_t)__tmp;
     5fc:	6f 81       	ldd	r22, Y+7	; 0x07
     5fe:	78 85       	ldd	r23, Y+8	; 0x08
     600:	89 85       	ldd	r24, Y+9	; 0x09
     602:	9a 85       	ldd	r25, Y+10	; 0x0a
     604:	21 d5       	rcall	.+2626   	; 0x1048 <__fixsfsi>
     606:	dc 01       	movw	r26, r24
     608:	cb 01       	movw	r24, r22
     60a:	9e 83       	std	Y+6, r25	; 0x06
     60c:	8d 83       	std	Y+5, r24	; 0x05
     60e:	8d 81       	ldd	r24, Y+5	; 0x05
     610:	9e 81       	ldd	r25, Y+6	; 0x06
     612:	9c 87       	std	Y+12, r25	; 0x0c
     614:	8b 87       	std	Y+11, r24	; 0x0b
     616:	8b 85       	ldd	r24, Y+11	; 0x0b
     618:	9c 85       	ldd	r25, Y+12	; 0x0c
     61a:	01 97       	sbiw	r24, 0x01	; 1
     61c:	f1 f7       	brne	.-4      	; 0x61a <test_leds+0xaa>
     61e:	9c 87       	std	Y+12, r25	; 0x0c
     620:	8b 87       	std	Y+11, r24	; 0x0b
    _delay_ms(50);
    switch_off_leds_with_delay(100);
     622:	60 e0       	ldi	r22, 0x00	; 0
     624:	70 e0       	ldi	r23, 0x00	; 0
     626:	88 ec       	ldi	r24, 0xC8	; 200
     628:	92 e4       	ldi	r25, 0x42	; 66
     62a:	2f df       	rcall	.-418    	; 0x48a <switch_off_leds_with_delay>
     62c:	2c 96       	adiw	r28, 0x0c	; 12
     62e:	0f b6       	in	r0, 0x3f	; 63
     630:	f8 94       	cli
     632:	de bf       	out	0x3e, r29	; 62
     634:	0f be       	out	0x3f, r0	; 63
     636:	cd bf       	out	0x3d, r28	; 61
     638:	df 91       	pop	r29
     63a:	cf 91       	pop	r28
     63c:	08 95       	ret

0000063e <switch_on_min_dels>:
}

/*
 *  switch on every leds (from 0 to n)  (and switch off others)
 */
void switch_on_min_dels(int n) {
     63e:	cf 93       	push	r28
     640:	df 93       	push	r29
     642:	cd b7       	in	r28, 0x3d	; 61
     644:	de b7       	in	r29, 0x3e	; 62
     646:	24 97       	sbiw	r28, 0x04	; 4
     648:	0f b6       	in	r0, 0x3f	; 63
     64a:	f8 94       	cli
     64c:	de bf       	out	0x3e, r29	; 62
     64e:	0f be       	out	0x3f, r0	; 63
     650:	cd bf       	out	0x3d, r28	; 61
     652:	9a 83       	std	Y+2, r25	; 0x02
     654:	89 83       	std	Y+1, r24	; 0x01
    int i;
    for(i = 1; i<=Nleds; i++) {
     656:	81 e0       	ldi	r24, 0x01	; 1
     658:	90 e0       	ldi	r25, 0x00	; 0
     65a:	9c 83       	std	Y+4, r25	; 0x04
     65c:	8b 83       	std	Y+3, r24	; 0x03
     65e:	8b 81       	ldd	r24, Y+3	; 0x03
     660:	9c 81       	ldd	r25, Y+4	; 0x04
     662:	89 30       	cpi	r24, 0x09	; 9
     664:	91 05       	cpc	r25, r1
     666:	a4 f4       	brge	.+40     	; 0x690 <switch_on_min_dels+0x52>
        if (i<=n) {
     668:	2b 81       	ldd	r18, Y+3	; 0x03
     66a:	3c 81       	ldd	r19, Y+4	; 0x04
     66c:	89 81       	ldd	r24, Y+1	; 0x01
     66e:	9a 81       	ldd	r25, Y+2	; 0x02
     670:	82 17       	cp	r24, r18
     672:	93 07       	cpc	r25, r19
     674:	24 f0       	brlt	.+8      	; 0x67e <switch_on_min_dels+0x40>
            switch_on_led(i);
     676:	8b 81       	ldd	r24, Y+3	; 0x03
     678:	9c 81       	ldd	r25, Y+4	; 0x04
     67a:	3d de       	rcall	.-902    	; 0x2f6 <switch_on_led>
     67c:	03 c0       	rjmp	.+6      	; 0x684 <switch_on_min_dels+0x46>
        } else {
            switch_off_led(i);
     67e:	8b 81       	ldd	r24, Y+3	; 0x03
     680:	9c 81       	ldd	r25, Y+4	; 0x04
     682:	65 de       	rcall	.-822    	; 0x34e <switch_off_led>
     684:	8b 81       	ldd	r24, Y+3	; 0x03
     686:	9c 81       	ldd	r25, Y+4	; 0x04
     688:	01 96       	adiw	r24, 0x01	; 1
     68a:	9c 83       	std	Y+4, r25	; 0x04
     68c:	8b 83       	std	Y+3, r24	; 0x03
     68e:	e7 cf       	rjmp	.-50     	; 0x65e <switch_on_min_dels+0x20>
     690:	24 96       	adiw	r28, 0x04	; 4
     692:	0f b6       	in	r0, 0x3f	; 63
     694:	f8 94       	cli
     696:	de bf       	out	0x3e, r29	; 62
     698:	0f be       	out	0x3f, r0	; 63
     69a:	cd bf       	out	0x3d, r28	; 61
     69c:	df 91       	pop	r29
     69e:	cf 91       	pop	r28
     6a0:	08 95       	ret

000006a2 <switch_on_max_dels>:
        }
    }
}

/*
 *  switch on every leds (from Nleds to n)
 */
void switch_on_max_dels(int n) {
     6a2:	cf 93       	push	r28
     6a4:	df 93       	push	r29
     6a6:	cd b7       	in	r28, 0x3d	; 61
     6a8:	de b7       	in	r29, 0x3e	; 62
     6aa:	24 97       	sbiw	r28, 0x04	; 4
     6ac:	0f b6       	in	r0, 0x3f	; 63
     6ae:	f8 94       	cli
     6b0:	de bf       	out	0x3e, r29	; 62
     6b2:	0f be       	out	0x3f, r0	; 63
     6b4:	cd bf       	out	0x3d, r28	; 61
     6b6:	9a 83       	std	Y+2, r25	; 0x02
     6b8:	89 83       	std	Y+1, r24	; 0x01
    int i;
    for(i = Nleds; i>=0; i--) {
     6ba:	88 e0       	ldi	r24, 0x08	; 8
     6bc:	90 e0       	ldi	r25, 0x00	; 0
     6be:	9c 83       	std	Y+4, r25	; 0x04
     6c0:	8b 83       	std	Y+3, r24	; 0x03
     6c2:	8b 81       	ldd	r24, Y+3	; 0x03
     6c4:	9c 81       	ldd	r25, Y+4	; 0x04
     6c6:	99 23       	and	r25, r25
     6c8:	c4 f0       	brlt	.+48     	; 0x6fa <switch_on_max_dels+0x58>
        if (i>=Nleds-n) {
     6ca:	28 e0       	ldi	r18, 0x08	; 8
     6cc:	30 e0       	ldi	r19, 0x00	; 0
     6ce:	89 81       	ldd	r24, Y+1	; 0x01
     6d0:	9a 81       	ldd	r25, Y+2	; 0x02
     6d2:	28 1b       	sub	r18, r24
     6d4:	39 0b       	sbc	r19, r25
     6d6:	8b 81       	ldd	r24, Y+3	; 0x03
     6d8:	9c 81       	ldd	r25, Y+4	; 0x04
     6da:	82 17       	cp	r24, r18
     6dc:	93 07       	cpc	r25, r19
     6de:	24 f0       	brlt	.+8      	; 0x6e8 <switch_on_max_dels+0x46>
            switch_on_led(i);
     6e0:	8b 81       	ldd	r24, Y+3	; 0x03
     6e2:	9c 81       	ldd	r25, Y+4	; 0x04
     6e4:	08 de       	rcall	.-1008   	; 0x2f6 <switch_on_led>
     6e6:	03 c0       	rjmp	.+6      	; 0x6ee <switch_on_max_dels+0x4c>
        } else {
            switch_off_led(i);
     6e8:	8b 81       	ldd	r24, Y+3	; 0x03
     6ea:	9c 81       	ldd	r25, Y+4	; 0x04
     6ec:	30 de       	rcall	.-928    	; 0x34e <switch_off_led>
     6ee:	8b 81       	ldd	r24, Y+3	; 0x03
     6f0:	9c 81       	ldd	r25, Y+4	; 0x04
     6f2:	01 97       	sbiw	r24, 0x01	; 1
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	8b 83       	std	Y+3, r24	; 0x03
     6f8:	e4 cf       	rjmp	.-56     	; 0x6c2 <switch_on_max_dels+0x20>
     6fa:	24 96       	adiw	r28, 0x04	; 4
     6fc:	0f b6       	in	r0, 0x3f	; 63
     6fe:	f8 94       	cli
     700:	de bf       	out	0x3e, r29	; 62
     702:	0f be       	out	0x3f, r0	; 63
     704:	cd bf       	out	0x3d, r28	; 61
     706:	df 91       	pop	r29
     708:	cf 91       	pop	r28
     70a:	08 95       	ret

0000070c <led_alarm>:
        }
    }
    // TO TEST (switch off)
}

/*
 * switch off every leds, wait and swith them all, n times (a sort of visual alarm)
 */
void led_alarm(int n, double delay) {
     70c:	cf 93       	push	r28
     70e:	df 93       	push	r29
     710:	cd b7       	in	r28, 0x3d	; 61
     712:	de b7       	in	r29, 0x3e	; 62
     714:	64 97       	sbiw	r28, 0x14	; 20
     716:	0f b6       	in	r0, 0x3f	; 63
     718:	f8 94       	cli
     71a:	de bf       	out	0x3e, r29	; 62
     71c:	0f be       	out	0x3f, r0	; 63
     71e:	cd bf       	out	0x3d, r28	; 61
     720:	9a 83       	std	Y+2, r25	; 0x02
     722:	89 83       	std	Y+1, r24	; 0x01
     724:	4b 83       	std	Y+3, r20	; 0x03
     726:	5c 83       	std	Y+4, r21	; 0x04
     728:	6d 83       	std	Y+5, r22	; 0x05
     72a:	7e 83       	std	Y+6, r23	; 0x06
    int i;
    for(i = 1; i<=n; i++) {
     72c:	81 e0       	ldi	r24, 0x01	; 1
     72e:	90 e0       	ldi	r25, 0x00	; 0
     730:	98 87       	std	Y+8, r25	; 0x08
     732:	8f 83       	std	Y+7, r24	; 0x07
     734:	2f 81       	ldd	r18, Y+7	; 0x07
     736:	38 85       	ldd	r19, Y+8	; 0x08
     738:	89 81       	ldd	r24, Y+1	; 0x01
     73a:	9a 81       	ldd	r25, Y+2	; 0x02
     73c:	82 17       	cp	r24, r18
     73e:	93 07       	cpc	r25, r19
     740:	0c f4       	brge	.+2      	; 0x744 <led_alarm+0x38>
     742:	9c c0       	rjmp	.+312    	; 0x87c <led_alarm+0x170>
        switch_off_all_leds();
     744:	ce dd       	rcall	.-1124   	; 0x2e2 <switch_off_all_leds>
   The maximal possible delay is 262.14 ms / F_CPU in MHz.
 */
void
_delay_ms(double __ms)
{
     746:	8b 81       	ldd	r24, Y+3	; 0x03
     748:	9c 81       	ldd	r25, Y+4	; 0x04
     74a:	ad 81       	ldd	r26, Y+5	; 0x05
     74c:	be 81       	ldd	r27, Y+6	; 0x06
     74e:	89 87       	std	Y+9, r24	; 0x09
     750:	9a 87       	std	Y+10, r25	; 0x0a
     752:	ab 87       	std	Y+11, r26	; 0x0b
     754:	bc 87       	std	Y+12, r27	; 0x0c
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     756:	20 e0       	ldi	r18, 0x00	; 0
     758:	30 e0       	ldi	r19, 0x00	; 0
     75a:	4a e7       	ldi	r20, 0x7A	; 122
     75c:	53 e4       	ldi	r21, 0x43	; 67
     75e:	69 85       	ldd	r22, Y+9	; 0x09
     760:	7a 85       	ldd	r23, Y+10	; 0x0a
     762:	8b 85       	ldd	r24, Y+11	; 0x0b
     764:	9c 85       	ldd	r25, Y+12	; 0x0c
     766:	20 d5       	rcall	.+2624   	; 0x11a8 <__mulsf3>
     768:	dc 01       	movw	r26, r24
     76a:	cb 01       	movw	r24, r22
     76c:	8f 87       	std	Y+15, r24	; 0x0f
     76e:	98 8b       	std	Y+16, r25	; 0x10
     770:	a9 8b       	std	Y+17, r26	; 0x11
     772:	ba 8b       	std	Y+18, r27	; 0x12
	if (__tmp < 1.0)
     774:	20 e0       	ldi	r18, 0x00	; 0
     776:	30 e0       	ldi	r19, 0x00	; 0
     778:	40 e8       	ldi	r20, 0x80	; 128
     77a:	5f e3       	ldi	r21, 0x3F	; 63
     77c:	6f 85       	ldd	r22, Y+15	; 0x0f
     77e:	78 89       	ldd	r23, Y+16	; 0x10
     780:	89 89       	ldd	r24, Y+17	; 0x11
     782:	9a 89       	ldd	r25, Y+18	; 0x12
     784:	a1 d4       	rcall	.+2370   	; 0x10c8 <__eqsf2>
     786:	88 23       	and	r24, r24
     788:	0c f0       	brlt	.+2      	; 0x78c <led_alarm+0x80>
     78a:	05 c0       	rjmp	.+10     	; 0x796 <led_alarm+0x8a>
		__ticks = 1;
     78c:	81 e0       	ldi	r24, 0x01	; 1
     78e:	90 e0       	ldi	r25, 0x00	; 0
     790:	9e 87       	std	Y+14, r25	; 0x0e
     792:	8d 87       	std	Y+13, r24	; 0x0d
     794:	18 c0       	rjmp	.+48     	; 0x7c6 <led_alarm+0xba>
	else if (__tmp > 65535)
     796:	20 e0       	ldi	r18, 0x00	; 0
     798:	3f ef       	ldi	r19, 0xFF	; 255
     79a:	4f e7       	ldi	r20, 0x7F	; 127
     79c:	57 e4       	ldi	r21, 0x47	; 71
     79e:	6f 85       	ldd	r22, Y+15	; 0x0f
     7a0:	78 89       	ldd	r23, Y+16	; 0x10
     7a2:	89 89       	ldd	r24, Y+17	; 0x11
     7a4:	9a 89       	ldd	r25, Y+18	; 0x12
     7a6:	93 d4       	rcall	.+2342   	; 0x10ce <__gesf2>
     7a8:	18 16       	cp	r1, r24
     7aa:	0c f0       	brlt	.+2      	; 0x7ae <led_alarm+0xa2>
     7ac:	03 c0       	rjmp	.+6      	; 0x7b4 <led_alarm+0xa8>
		__ticks = 0;	/* i.e. 65536 */
     7ae:	1e 86       	std	Y+14, r1	; 0x0e
     7b0:	1d 86       	std	Y+13, r1	; 0x0d
     7b2:	09 c0       	rjmp	.+18     	; 0x7c6 <led_alarm+0xba>
	else
		__ticks = (uint16_t)__tmp;
     7b4:	6f 85       	ldd	r22, Y+15	; 0x0f
     7b6:	78 89       	ldd	r23, Y+16	; 0x10
     7b8:	89 89       	ldd	r24, Y+17	; 0x11
     7ba:	9a 89       	ldd	r25, Y+18	; 0x12
     7bc:	45 d4       	rcall	.+2186   	; 0x1048 <__fixsfsi>
     7be:	dc 01       	movw	r26, r24
     7c0:	cb 01       	movw	r24, r22
     7c2:	9e 87       	std	Y+14, r25	; 0x0e
     7c4:	8d 87       	std	Y+13, r24	; 0x0d
     7c6:	8d 85       	ldd	r24, Y+13	; 0x0d
     7c8:	9e 85       	ldd	r25, Y+14	; 0x0e
     7ca:	9c 8b       	std	Y+20, r25	; 0x14
     7cc:	8b 8b       	std	Y+19, r24	; 0x13
     7ce:	8b 89       	ldd	r24, Y+19	; 0x13
     7d0:	9c 89       	ldd	r25, Y+20	; 0x14
     7d2:	01 97       	sbiw	r24, 0x01	; 1
     7d4:	f1 f7       	brne	.-4      	; 0x7d2 <led_alarm+0xc6>
     7d6:	9c 8b       	std	Y+20, r25	; 0x14
     7d8:	8b 8b       	std	Y+19, r24	; 0x13
        _delay_ms(delay);
        switch_on_all_leds();
     7da:	7a dd       	rcall	.-1292   	; 0x2d0 <switch_on_all_leds>
   The maximal possible delay is 262.14 ms / F_CPU in MHz.
 */
void
_delay_ms(double __ms)
{
     7dc:	8b 81       	ldd	r24, Y+3	; 0x03
     7de:	9c 81       	ldd	r25, Y+4	; 0x04
     7e0:	ad 81       	ldd	r26, Y+5	; 0x05
     7e2:	be 81       	ldd	r27, Y+6	; 0x06
     7e4:	8f 87       	std	Y+15, r24	; 0x0f
     7e6:	98 8b       	std	Y+16, r25	; 0x10
     7e8:	a9 8b       	std	Y+17, r26	; 0x11
     7ea:	ba 8b       	std	Y+18, r27	; 0x12
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     7ec:	20 e0       	ldi	r18, 0x00	; 0
     7ee:	30 e0       	ldi	r19, 0x00	; 0
     7f0:	4a e7       	ldi	r20, 0x7A	; 122
     7f2:	53 e4       	ldi	r21, 0x43	; 67
     7f4:	6f 85       	ldd	r22, Y+15	; 0x0f
     7f6:	78 89       	ldd	r23, Y+16	; 0x10
     7f8:	89 89       	ldd	r24, Y+17	; 0x11
     7fa:	9a 89       	ldd	r25, Y+18	; 0x12
     7fc:	d5 d4       	rcall	.+2474   	; 0x11a8 <__mulsf3>
     7fe:	dc 01       	movw	r26, r24
     800:	cb 01       	movw	r24, r22
     802:	89 87       	std	Y+9, r24	; 0x09
     804:	9a 87       	std	Y+10, r25	; 0x0a
     806:	ab 87       	std	Y+11, r26	; 0x0b
     808:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
     80a:	20 e0       	ldi	r18, 0x00	; 0
     80c:	30 e0       	ldi	r19, 0x00	; 0
     80e:	40 e8       	ldi	r20, 0x80	; 128
     810:	5f e3       	ldi	r21, 0x3F	; 63
     812:	69 85       	ldd	r22, Y+9	; 0x09
     814:	7a 85       	ldd	r23, Y+10	; 0x0a
     816:	8b 85       	ldd	r24, Y+11	; 0x0b
     818:	9c 85       	ldd	r25, Y+12	; 0x0c
     81a:	56 d4       	rcall	.+2220   	; 0x10c8 <__eqsf2>
     81c:	88 23       	and	r24, r24
     81e:	0c f0       	brlt	.+2      	; 0x822 <led_alarm+0x116>
     820:	05 c0       	rjmp	.+10     	; 0x82c <led_alarm+0x120>
		__ticks = 1;
     822:	81 e0       	ldi	r24, 0x01	; 1
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	9c 8b       	std	Y+20, r25	; 0x14
     828:	8b 8b       	std	Y+19, r24	; 0x13
     82a:	18 c0       	rjmp	.+48     	; 0x85c <led_alarm+0x150>
	else if (__tmp > 65535)
     82c:	20 e0       	ldi	r18, 0x00	; 0
     82e:	3f ef       	ldi	r19, 0xFF	; 255
     830:	4f e7       	ldi	r20, 0x7F	; 127
     832:	57 e4       	ldi	r21, 0x47	; 71
     834:	69 85       	ldd	r22, Y+9	; 0x09
     836:	7a 85       	ldd	r23, Y+10	; 0x0a
     838:	8b 85       	ldd	r24, Y+11	; 0x0b
     83a:	9c 85       	ldd	r25, Y+12	; 0x0c
     83c:	48 d4       	rcall	.+2192   	; 0x10ce <__gesf2>
     83e:	18 16       	cp	r1, r24
     840:	0c f0       	brlt	.+2      	; 0x844 <led_alarm+0x138>
     842:	03 c0       	rjmp	.+6      	; 0x84a <led_alarm+0x13e>
		__ticks = 0;	/* i.e. 65536 */
     844:	1c 8a       	std	Y+20, r1	; 0x14
     846:	1b 8a       	std	Y+19, r1	; 0x13
     848:	09 c0       	rjmp	.+18     	; 0x85c <led_alarm+0x150>
	else
		__ticks = (uint16_t)__tmp;
     84a:	69 85       	ldd	r22, Y+9	; 0x09
     84c:	7a 85       	ldd	r23, Y+10	; 0x0a
     84e:	8b 85       	ldd	r24, Y+11	; 0x0b
     850:	9c 85       	ldd	r25, Y+12	; 0x0c
     852:	fa d3       	rcall	.+2036   	; 0x1048 <__fixsfsi>
     854:	dc 01       	movw	r26, r24
     856:	cb 01       	movw	r24, r22
     858:	9c 8b       	std	Y+20, r25	; 0x14
     85a:	8b 8b       	std	Y+19, r24	; 0x13
     85c:	8b 89       	ldd	r24, Y+19	; 0x13
     85e:	9c 89       	ldd	r25, Y+20	; 0x14
     860:	9e 87       	std	Y+14, r25	; 0x0e
     862:	8d 87       	std	Y+13, r24	; 0x0d
     864:	8d 85       	ldd	r24, Y+13	; 0x0d
     866:	9e 85       	ldd	r25, Y+14	; 0x0e
     868:	01 97       	sbiw	r24, 0x01	; 1
     86a:	f1 f7       	brne	.-4      	; 0x868 <led_alarm+0x15c>
     86c:	9e 87       	std	Y+14, r25	; 0x0e
     86e:	8d 87       	std	Y+13, r24	; 0x0d
     870:	8f 81       	ldd	r24, Y+7	; 0x07
     872:	98 85       	ldd	r25, Y+8	; 0x08
     874:	01 96       	adiw	r24, 0x01	; 1
     876:	98 87       	std	Y+8, r25	; 0x08
     878:	8f 83       	std	Y+7, r24	; 0x07
     87a:	5c cf       	rjmp	.-328    	; 0x734 <led_alarm+0x28>
     87c:	64 96       	adiw	r28, 0x14	; 20
     87e:	0f b6       	in	r0, 0x3f	; 63
     880:	f8 94       	cli
     882:	de bf       	out	0x3e, r29	; 62
     884:	0f be       	out	0x3f, r0	; 63
     886:	cd bf       	out	0x3d, r28	; 61
     888:	df 91       	pop	r29
     88a:	cf 91       	pop	r28
     88c:	08 95       	ret

0000088e <roundp>:
        _delay_ms(delay);
    }
}

/*
 * switch on every dels depending of the percentage p
 */
//#define roundp floor
inline int roundp(double n) {
     88e:	cf 93       	push	r28
     890:	df 93       	push	r29
     892:	cd b7       	in	r28, 0x3d	; 61
     894:	de b7       	in	r29, 0x3e	; 62
     896:	24 97       	sbiw	r28, 0x04	; 4
     898:	0f b6       	in	r0, 0x3f	; 63
     89a:	f8 94       	cli
     89c:	de bf       	out	0x3e, r29	; 62
     89e:	0f be       	out	0x3f, r0	; 63
     8a0:	cd bf       	out	0x3d, r28	; 61
     8a2:	69 83       	std	Y+1, r22	; 0x01
     8a4:	7a 83       	std	Y+2, r23	; 0x02
     8a6:	8b 83       	std	Y+3, r24	; 0x03
     8a8:	9c 83       	std	Y+4, r25	; 0x04
    return floor(n+0.5);
     8aa:	20 e0       	ldi	r18, 0x00	; 0
     8ac:	30 e0       	ldi	r19, 0x00	; 0
     8ae:	40 e0       	ldi	r20, 0x00	; 0
     8b0:	5f e3       	ldi	r21, 0x3F	; 63
     8b2:	69 81       	ldd	r22, Y+1	; 0x01
     8b4:	7a 81       	ldd	r23, Y+2	; 0x02
     8b6:	8b 81       	ldd	r24, Y+3	; 0x03
     8b8:	9c 81       	ldd	r25, Y+4	; 0x04
     8ba:	3e d3       	rcall	.+1660   	; 0xf38 <__addsf3>
     8bc:	dc 01       	movw	r26, r24
     8be:	cb 01       	movw	r24, r22
     8c0:	bc 01       	movw	r22, r24
     8c2:	cd 01       	movw	r24, r26
     8c4:	e8 d3       	rcall	.+2000   	; 0x1096 <floor>
     8c6:	dc 01       	movw	r26, r24
     8c8:	cb 01       	movw	r24, r22
     8ca:	bc 01       	movw	r22, r24
     8cc:	cd 01       	movw	r24, r26
     8ce:	bc d3       	rcall	.+1912   	; 0x1048 <__fixsfsi>
     8d0:	dc 01       	movw	r26, r24
     8d2:	cb 01       	movw	r24, r22
     8d4:	24 96       	adiw	r28, 0x04	; 4
     8d6:	0f b6       	in	r0, 0x3f	; 63
     8d8:	f8 94       	cli
     8da:	de bf       	out	0x3e, r29	; 62
     8dc:	0f be       	out	0x3f, r0	; 63
     8de:	cd bf       	out	0x3d, r28	; 61
     8e0:	df 91       	pop	r29
     8e2:	cf 91       	pop	r28
     8e4:	08 95       	ret

000008e6 <show_percent>:
}

// roundp = round for positive number
void show_percent(double p) {
     8e6:	cf 93       	push	r28
     8e8:	df 93       	push	r29
     8ea:	cd b7       	in	r28, 0x3d	; 61
     8ec:	de b7       	in	r29, 0x3e	; 62
     8ee:	26 97       	sbiw	r28, 0x06	; 6
     8f0:	0f b6       	in	r0, 0x3f	; 63
     8f2:	f8 94       	cli
     8f4:	de bf       	out	0x3e, r29	; 62
     8f6:	0f be       	out	0x3f, r0	; 63
     8f8:	cd bf       	out	0x3d, r28	; 61
     8fa:	69 83       	std	Y+1, r22	; 0x01
     8fc:	7a 83       	std	Y+2, r23	; 0x02
     8fe:	8b 83       	std	Y+3, r24	; 0x03
     900:	9c 83       	std	Y+4, r25	; 0x04
    // p pourcent
    int n;
    //n = 4;
    n = roundp(p / 100.0 * Nleds); // TO FIX (math.h ceil floor ... round en Java !)
     902:	20 e0       	ldi	r18, 0x00	; 0
     904:	30 e0       	ldi	r19, 0x00	; 0
     906:	48 ec       	ldi	r20, 0xC8	; 200
     908:	52 e4       	ldi	r21, 0x42	; 66
     90a:	69 81       	ldd	r22, Y+1	; 0x01
     90c:	7a 81       	ldd	r23, Y+2	; 0x02
     90e:	8b 81       	ldd	r24, Y+3	; 0x03
     910:	9c 81       	ldd	r25, Y+4	; 0x04
     912:	54 d3       	rcall	.+1704   	; 0xfbc <__divsf3>
     914:	dc 01       	movw	r26, r24
     916:	cb 01       	movw	r24, r22
     918:	20 e0       	ldi	r18, 0x00	; 0
     91a:	30 e0       	ldi	r19, 0x00	; 0
     91c:	40 e0       	ldi	r20, 0x00	; 0
     91e:	51 e4       	ldi	r21, 0x41	; 65
     920:	bc 01       	movw	r22, r24
     922:	cd 01       	movw	r24, r26
     924:	41 d4       	rcall	.+2178   	; 0x11a8 <__mulsf3>
     926:	dc 01       	movw	r26, r24
     928:	cb 01       	movw	r24, r22
     92a:	bc 01       	movw	r22, r24
     92c:	cd 01       	movw	r24, r26
     92e:	af df       	rcall	.-162    	; 0x88e <roundp>
     930:	9e 83       	std	Y+6, r25	; 0x06
     932:	8d 83       	std	Y+5, r24	; 0x05
    // TO FIX : +0.5 is a very dirty hack
    switch_on_min_dels(n);
     934:	8d 81       	ldd	r24, Y+5	; 0x05
     936:	9e 81       	ldd	r25, Y+6	; 0x06
     938:	82 de       	rcall	.-764    	; 0x63e <switch_on_min_dels>
     93a:	26 96       	adiw	r28, 0x06	; 6
     93c:	0f b6       	in	r0, 0x3f	; 63
     93e:	f8 94       	cli
     940:	de bf       	out	0x3e, r29	; 62
     942:	0f be       	out	0x3f, r0	; 63
     944:	cd bf       	out	0x3d, r28	; 61
     946:	df 91       	pop	r29
     948:	cf 91       	pop	r28
     94a:	08 95       	ret

0000094c <beep>:
}

/*
 * send a sound (on or more beep(s))
 */
void beep(int n, double delay) {
     94c:	cf 93       	push	r28
     94e:	df 93       	push	r29
     950:	cd b7       	in	r28, 0x3d	; 61
     952:	de b7       	in	r29, 0x3e	; 62
     954:	64 97       	sbiw	r28, 0x14	; 20
     956:	0f b6       	in	r0, 0x3f	; 63
     958:	f8 94       	cli
     95a:	de bf       	out	0x3e, r29	; 62
     95c:	0f be       	out	0x3f, r0	; 63
     95e:	cd bf       	out	0x3d, r28	; 61
     960:	9a 83       	std	Y+2, r25	; 0x02
     962:	89 83       	std	Y+1, r24	; 0x01
     964:	4b 83       	std	Y+3, r20	; 0x03
     966:	5c 83       	std	Y+4, r21	; 0x04
     968:	6d 83       	std	Y+5, r22	; 0x05
     96a:	7e 83       	std	Y+6, r23	; 0x06
    // TO DO
    int i;
    for(i = 1; i<=n; i++) {
     96c:	81 e0       	ldi	r24, 0x01	; 1
     96e:	90 e0       	ldi	r25, 0x00	; 0
     970:	98 87       	std	Y+8, r25	; 0x08
     972:	8f 83       	std	Y+7, r24	; 0x07
     974:	2f 81       	ldd	r18, Y+7	; 0x07
     976:	38 85       	ldd	r19, Y+8	; 0x08
     978:	89 81       	ldd	r24, Y+1	; 0x01
     97a:	9a 81       	ldd	r25, Y+2	; 0x02
     97c:	82 17       	cp	r24, r18
     97e:	93 07       	cpc	r25, r19
     980:	0c f4       	brge	.+2      	; 0x984 <beep+0x38>
     982:	56 c0       	rjmp	.+172    	; 0xa30 <beep+0xe4>
        //TO DO : send a beep
        if (n>1) {
     984:	89 81       	ldd	r24, Y+1	; 0x01
     986:	9a 81       	ldd	r25, Y+2	; 0x02
     988:	82 30       	cpi	r24, 0x02	; 2
     98a:	91 05       	cpc	r25, r1
     98c:	0c f4       	brge	.+2      	; 0x990 <beep+0x44>
     98e:	4a c0       	rjmp	.+148    	; 0xa24 <beep+0xd8>
   The maximal possible delay is 262.14 ms / F_CPU in MHz.
 */
void
_delay_ms(double __ms)
{
     990:	8b 81       	ldd	r24, Y+3	; 0x03
     992:	9c 81       	ldd	r25, Y+4	; 0x04
     994:	ad 81       	ldd	r26, Y+5	; 0x05
     996:	be 81       	ldd	r27, Y+6	; 0x06
     998:	89 87       	std	Y+9, r24	; 0x09
     99a:	9a 87       	std	Y+10, r25	; 0x0a
     99c:	ab 87       	std	Y+11, r26	; 0x0b
     99e:	bc 87       	std	Y+12, r27	; 0x0c
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     9a0:	20 e0       	ldi	r18, 0x00	; 0
     9a2:	30 e0       	ldi	r19, 0x00	; 0
     9a4:	4a e7       	ldi	r20, 0x7A	; 122
     9a6:	53 e4       	ldi	r21, 0x43	; 67
     9a8:	69 85       	ldd	r22, Y+9	; 0x09
     9aa:	7a 85       	ldd	r23, Y+10	; 0x0a
     9ac:	8b 85       	ldd	r24, Y+11	; 0x0b
     9ae:	9c 85       	ldd	r25, Y+12	; 0x0c
     9b0:	fb d3       	rcall	.+2038   	; 0x11a8 <__mulsf3>
     9b2:	dc 01       	movw	r26, r24
     9b4:	cb 01       	movw	r24, r22
     9b6:	8f 87       	std	Y+15, r24	; 0x0f
     9b8:	98 8b       	std	Y+16, r25	; 0x10
     9ba:	a9 8b       	std	Y+17, r26	; 0x11
     9bc:	ba 8b       	std	Y+18, r27	; 0x12
	if (__tmp < 1.0)
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e8       	ldi	r20, 0x80	; 128
     9c4:	5f e3       	ldi	r21, 0x3F	; 63
     9c6:	6f 85       	ldd	r22, Y+15	; 0x0f
     9c8:	78 89       	ldd	r23, Y+16	; 0x10
     9ca:	89 89       	ldd	r24, Y+17	; 0x11
     9cc:	9a 89       	ldd	r25, Y+18	; 0x12
     9ce:	7c d3       	rcall	.+1784   	; 0x10c8 <__eqsf2>
     9d0:	88 23       	and	r24, r24
     9d2:	0c f0       	brlt	.+2      	; 0x9d6 <beep+0x8a>
     9d4:	05 c0       	rjmp	.+10     	; 0x9e0 <beep+0x94>
		__ticks = 1;
     9d6:	81 e0       	ldi	r24, 0x01	; 1
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	9e 87       	std	Y+14, r25	; 0x0e
     9dc:	8d 87       	std	Y+13, r24	; 0x0d
     9de:	18 c0       	rjmp	.+48     	; 0xa10 <beep+0xc4>
	else if (__tmp > 65535)
     9e0:	20 e0       	ldi	r18, 0x00	; 0
     9e2:	3f ef       	ldi	r19, 0xFF	; 255
     9e4:	4f e7       	ldi	r20, 0x7F	; 127
     9e6:	57 e4       	ldi	r21, 0x47	; 71
     9e8:	6f 85       	ldd	r22, Y+15	; 0x0f
     9ea:	78 89       	ldd	r23, Y+16	; 0x10
     9ec:	89 89       	ldd	r24, Y+17	; 0x11
     9ee:	9a 89       	ldd	r25, Y+18	; 0x12
     9f0:	6e d3       	rcall	.+1756   	; 0x10ce <__gesf2>
     9f2:	18 16       	cp	r1, r24
     9f4:	0c f0       	brlt	.+2      	; 0x9f8 <beep+0xac>
     9f6:	03 c0       	rjmp	.+6      	; 0x9fe <beep+0xb2>
		__ticks = 0;	/* i.e. 65536 */
     9f8:	1e 86       	std	Y+14, r1	; 0x0e
     9fa:	1d 86       	std	Y+13, r1	; 0x0d
     9fc:	09 c0       	rjmp	.+18     	; 0xa10 <beep+0xc4>
	else
		__ticks = (uint16_t)__tmp;
     9fe:	6f 85       	ldd	r22, Y+15	; 0x0f
     a00:	78 89       	ldd	r23, Y+16	; 0x10
     a02:	89 89       	ldd	r24, Y+17	; 0x11
     a04:	9a 89       	ldd	r25, Y+18	; 0x12
     a06:	20 d3       	rcall	.+1600   	; 0x1048 <__fixsfsi>
     a08:	dc 01       	movw	r26, r24
     a0a:	cb 01       	movw	r24, r22
     a0c:	9e 87       	std	Y+14, r25	; 0x0e
     a0e:	8d 87       	std	Y+13, r24	; 0x0d
     a10:	8d 85       	ldd	r24, Y+13	; 0x0d
     a12:	9e 85       	ldd	r25, Y+14	; 0x0e
     a14:	9c 8b       	std	Y+20, r25	; 0x14
     a16:	8b 8b       	std	Y+19, r24	; 0x13
     a18:	8b 89       	ldd	r24, Y+19	; 0x13
     a1a:	9c 89       	ldd	r25, Y+20	; 0x14
     a1c:	01 97       	sbiw	r24, 0x01	; 1
     a1e:	f1 f7       	brne	.-4      	; 0xa1c <beep+0xd0>
     a20:	9c 8b       	std	Y+20, r25	; 0x14
     a22:	8b 8b       	std	Y+19, r24	; 0x13
     a24:	8f 81       	ldd	r24, Y+7	; 0x07
     a26:	98 85       	ldd	r25, Y+8	; 0x08
     a28:	01 96       	adiw	r24, 0x01	; 1
     a2a:	98 87       	std	Y+8, r25	; 0x08
     a2c:	8f 83       	std	Y+7, r24	; 0x07
     a2e:	a2 cf       	rjmp	.-188    	; 0x974 <beep+0x28>
     a30:	64 96       	adiw	r28, 0x14	; 20
     a32:	0f b6       	in	r0, 0x3f	; 63
     a34:	f8 94       	cli
     a36:	de bf       	out	0x3e, r29	; 62
     a38:	0f be       	out	0x3f, r0	; 63
     a3a:	cd bf       	out	0x3d, r28	; 61
     a3c:	df 91       	pop	r29
     a3e:	cf 91       	pop	r28
     a40:	08 95       	ret

00000a42 <StartStopChronometer>:
            _delay_ms(delay);
        }
    }
}

/*
 * start or stop chronometer
 */
inline void StartStopChronometer() {
     a42:	cf 93       	push	r28
     a44:	df 93       	push	r29
     a46:	cd b7       	in	r28, 0x3d	; 61
     a48:	de b7       	in	r29, 0x3e	; 62
    beep(1,100);
     a4a:	40 e0       	ldi	r20, 0x00	; 0
     a4c:	50 e0       	ldi	r21, 0x00	; 0
     a4e:	68 ec       	ldi	r22, 0xC8	; 200
     a50:	72 e4       	ldi	r23, 0x42	; 66
     a52:	81 e0       	ldi	r24, 0x01	; 1
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	7a df       	rcall	.-268    	; 0x94c <beep>
    led_alarm(3,50);
     a58:	40 e0       	ldi	r20, 0x00	; 0
     a5a:	50 e0       	ldi	r21, 0x00	; 0
     a5c:	68 e4       	ldi	r22, 0x48	; 72
     a5e:	72 e4       	ldi	r23, 0x42	; 66
     a60:	83 e0       	ldi	r24, 0x03	; 3
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	53 de       	rcall	.-858    	; 0x70c <led_alarm>
    if (running_chronometer) {
     a66:	80 91 60 00 	lds	r24, 0x0060
     a6a:	90 91 61 00 	lds	r25, 0x0061
     a6e:	00 97       	sbiw	r24, 0x00	; 0
     a70:	29 f0       	breq	.+10     	; 0xa7c <StartStopChronometer+0x3a>
       running_chronometer = FALSE; // false = 0
     a72:	10 92 61 00 	sts	0x0061, r1
     a76:	10 92 60 00 	sts	0x0060, r1
     a7a:	06 c0       	rjmp	.+12     	; 0xa88 <StartStopChronometer+0x46>
    } else {
       running_chronometer = TRUE; // true = -1
     a7c:	8f ef       	ldi	r24, 0xFF	; 255
     a7e:	9f ef       	ldi	r25, 0xFF	; 255
     a80:	90 93 61 00 	sts	0x0061, r25
     a84:	80 93 60 00 	sts	0x0060, r24
     a88:	df 91       	pop	r29
     a8a:	cf 91       	pop	r28
     a8c:	08 95       	ret

00000a8e <TestRunningChronometer>:
    }
}

void TestRunningChronometer() {
     a8e:	cf 93       	push	r28
     a90:	df 93       	push	r29
     a92:	cd b7       	in	r28, 0x3d	; 61
     a94:	de b7       	in	r29, 0x3e	; 62
     a96:	2c 97       	sbiw	r28, 0x0c	; 12
     a98:	0f b6       	in	r0, 0x3f	; 63
     a9a:	f8 94       	cli
     a9c:	de bf       	out	0x3e, r29	; 62
     a9e:	0f be       	out	0x3f, r0	; 63
     aa0:	cd bf       	out	0x3d, r28	; 61
    if (running_chronometer) {
     aa2:	80 91 60 00 	lds	r24, 0x0060
     aa6:	90 91 61 00 	lds	r25, 0x0061
     aaa:	00 97       	sbiw	r24, 0x00	; 0
     aac:	09 f4       	brne	.+2      	; 0xab0 <TestRunningChronometer+0x22>
     aae:	9a c0       	rjmp	.+308    	; 0xbe4 <TestRunningChronometer+0x156>
        switch_on_led(8);
     ab0:	88 e0       	ldi	r24, 0x08	; 8
     ab2:	90 e0       	ldi	r25, 0x00	; 0
     ab4:	20 dc       	rcall	.-1984   	; 0x2f6 <switch_on_led>
   The maximal possible delay is 262.14 ms / F_CPU in MHz.
 */
void
_delay_ms(double __ms)
{
     ab6:	80 e0       	ldi	r24, 0x00	; 0
     ab8:	90 e0       	ldi	r25, 0x00	; 0
     aba:	a8 ec       	ldi	r26, 0xC8	; 200
     abc:	b2 e4       	ldi	r27, 0x42	; 66
     abe:	89 83       	std	Y+1, r24	; 0x01
     ac0:	9a 83       	std	Y+2, r25	; 0x02
     ac2:	ab 83       	std	Y+3, r26	; 0x03
     ac4:	bc 83       	std	Y+4, r27	; 0x04
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ac6:	20 e0       	ldi	r18, 0x00	; 0
     ac8:	30 e0       	ldi	r19, 0x00	; 0
     aca:	4a e7       	ldi	r20, 0x7A	; 122
     acc:	53 e4       	ldi	r21, 0x43	; 67
     ace:	69 81       	ldd	r22, Y+1	; 0x01
     ad0:	7a 81       	ldd	r23, Y+2	; 0x02
     ad2:	8b 81       	ldd	r24, Y+3	; 0x03
     ad4:	9c 81       	ldd	r25, Y+4	; 0x04
     ad6:	68 d3       	rcall	.+1744   	; 0x11a8 <__mulsf3>
     ad8:	dc 01       	movw	r26, r24
     ada:	cb 01       	movw	r24, r22
     adc:	8f 83       	std	Y+7, r24	; 0x07
     ade:	98 87       	std	Y+8, r25	; 0x08
     ae0:	a9 87       	std	Y+9, r26	; 0x09
     ae2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     ae4:	20 e0       	ldi	r18, 0x00	; 0
     ae6:	30 e0       	ldi	r19, 0x00	; 0
     ae8:	40 e8       	ldi	r20, 0x80	; 128
     aea:	5f e3       	ldi	r21, 0x3F	; 63
     aec:	6f 81       	ldd	r22, Y+7	; 0x07
     aee:	78 85       	ldd	r23, Y+8	; 0x08
     af0:	89 85       	ldd	r24, Y+9	; 0x09
     af2:	9a 85       	ldd	r25, Y+10	; 0x0a
     af4:	e9 d2       	rcall	.+1490   	; 0x10c8 <__eqsf2>
     af6:	88 23       	and	r24, r24
     af8:	0c f0       	brlt	.+2      	; 0xafc <TestRunningChronometer+0x6e>
     afa:	05 c0       	rjmp	.+10     	; 0xb06 <TestRunningChronometer+0x78>
		__ticks = 1;
     afc:	81 e0       	ldi	r24, 0x01	; 1
     afe:	90 e0       	ldi	r25, 0x00	; 0
     b00:	9e 83       	std	Y+6, r25	; 0x06
     b02:	8d 83       	std	Y+5, r24	; 0x05
     b04:	18 c0       	rjmp	.+48     	; 0xb36 <TestRunningChronometer+0xa8>
	else if (__tmp > 65535)
     b06:	20 e0       	ldi	r18, 0x00	; 0
     b08:	3f ef       	ldi	r19, 0xFF	; 255
     b0a:	4f e7       	ldi	r20, 0x7F	; 127
     b0c:	57 e4       	ldi	r21, 0x47	; 71
     b0e:	6f 81       	ldd	r22, Y+7	; 0x07
     b10:	78 85       	ldd	r23, Y+8	; 0x08
     b12:	89 85       	ldd	r24, Y+9	; 0x09
     b14:	9a 85       	ldd	r25, Y+10	; 0x0a
     b16:	db d2       	rcall	.+1462   	; 0x10ce <__gesf2>
     b18:	18 16       	cp	r1, r24
     b1a:	0c f0       	brlt	.+2      	; 0xb1e <TestRunningChronometer+0x90>
     b1c:	03 c0       	rjmp	.+6      	; 0xb24 <TestRunningChronometer+0x96>
		__ticks = 0;	/* i.e. 65536 */
     b1e:	1e 82       	std	Y+6, r1	; 0x06
     b20:	1d 82       	std	Y+5, r1	; 0x05
     b22:	09 c0       	rjmp	.+18     	; 0xb36 <TestRunningChronometer+0xa8>
	else
		__ticks = (uint16_t)__tmp;
     b24:	6f 81       	ldd	r22, Y+7	; 0x07
     b26:	78 85       	ldd	r23, Y+8	; 0x08
     b28:	89 85       	ldd	r24, Y+9	; 0x09
     b2a:	9a 85       	ldd	r25, Y+10	; 0x0a
     b2c:	8d d2       	rcall	.+1306   	; 0x1048 <__fixsfsi>
     b2e:	dc 01       	movw	r26, r24
     b30:	cb 01       	movw	r24, r22
     b32:	9e 83       	std	Y+6, r25	; 0x06
     b34:	8d 83       	std	Y+5, r24	; 0x05
     b36:	8d 81       	ldd	r24, Y+5	; 0x05
     b38:	9e 81       	ldd	r25, Y+6	; 0x06
     b3a:	9c 87       	std	Y+12, r25	; 0x0c
     b3c:	8b 87       	std	Y+11, r24	; 0x0b
     b3e:	8b 85       	ldd	r24, Y+11	; 0x0b
     b40:	9c 85       	ldd	r25, Y+12	; 0x0c
     b42:	01 97       	sbiw	r24, 0x01	; 1
     b44:	f1 f7       	brne	.-4      	; 0xb42 <TestRunningChronometer+0xb4>
     b46:	9c 87       	std	Y+12, r25	; 0x0c
     b48:	8b 87       	std	Y+11, r24	; 0x0b
        _delay_ms(100);
        switch_off_led(8);
     b4a:	88 e0       	ldi	r24, 0x08	; 8
     b4c:	90 e0       	ldi	r25, 0x00	; 0
     b4e:	ff db       	rcall	.-2050   	; 0x34e <switch_off_led>
   The maximal possible delay is 262.14 ms / F_CPU in MHz.
 */
void
_delay_ms(double __ms)
{
     b50:	80 e0       	ldi	r24, 0x00	; 0
     b52:	90 e0       	ldi	r25, 0x00	; 0
     b54:	a8 ec       	ldi	r26, 0xC8	; 200
     b56:	b2 e4       	ldi	r27, 0x42	; 66
     b58:	8f 83       	std	Y+7, r24	; 0x07
     b5a:	98 87       	std	Y+8, r25	; 0x08
     b5c:	a9 87       	std	Y+9, r26	; 0x09
     b5e:	ba 87       	std	Y+10, r27	; 0x0a
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b60:	20 e0       	ldi	r18, 0x00	; 0
     b62:	30 e0       	ldi	r19, 0x00	; 0
     b64:	4a e7       	ldi	r20, 0x7A	; 122
     b66:	53 e4       	ldi	r21, 0x43	; 67
     b68:	6f 81       	ldd	r22, Y+7	; 0x07
     b6a:	78 85       	ldd	r23, Y+8	; 0x08
     b6c:	89 85       	ldd	r24, Y+9	; 0x09
     b6e:	9a 85       	ldd	r25, Y+10	; 0x0a
     b70:	1b d3       	rcall	.+1590   	; 0x11a8 <__mulsf3>
     b72:	dc 01       	movw	r26, r24
     b74:	cb 01       	movw	r24, r22
     b76:	89 83       	std	Y+1, r24	; 0x01
     b78:	9a 83       	std	Y+2, r25	; 0x02
     b7a:	ab 83       	std	Y+3, r26	; 0x03
     b7c:	bc 83       	std	Y+4, r27	; 0x04
	if (__tmp < 1.0)
     b7e:	20 e0       	ldi	r18, 0x00	; 0
     b80:	30 e0       	ldi	r19, 0x00	; 0
     b82:	40 e8       	ldi	r20, 0x80	; 128
     b84:	5f e3       	ldi	r21, 0x3F	; 63
     b86:	69 81       	ldd	r22, Y+1	; 0x01
     b88:	7a 81       	ldd	r23, Y+2	; 0x02
     b8a:	8b 81       	ldd	r24, Y+3	; 0x03
     b8c:	9c 81       	ldd	r25, Y+4	; 0x04
     b8e:	9c d2       	rcall	.+1336   	; 0x10c8 <__eqsf2>
     b90:	88 23       	and	r24, r24
     b92:	0c f0       	brlt	.+2      	; 0xb96 <TestRunningChronometer+0x108>
     b94:	05 c0       	rjmp	.+10     	; 0xba0 <TestRunningChronometer+0x112>
		__ticks = 1;
     b96:	81 e0       	ldi	r24, 0x01	; 1
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	9c 87       	std	Y+12, r25	; 0x0c
     b9c:	8b 87       	std	Y+11, r24	; 0x0b
     b9e:	18 c0       	rjmp	.+48     	; 0xbd0 <TestRunningChronometer+0x142>
	else if (__tmp > 65535)
     ba0:	20 e0       	ldi	r18, 0x00	; 0
     ba2:	3f ef       	ldi	r19, 0xFF	; 255
     ba4:	4f e7       	ldi	r20, 0x7F	; 127
     ba6:	57 e4       	ldi	r21, 0x47	; 71
     ba8:	69 81       	ldd	r22, Y+1	; 0x01
     baa:	7a 81       	ldd	r23, Y+2	; 0x02
     bac:	8b 81       	ldd	r24, Y+3	; 0x03
     bae:	9c 81       	ldd	r25, Y+4	; 0x04
     bb0:	8e d2       	rcall	.+1308   	; 0x10ce <__gesf2>
     bb2:	18 16       	cp	r1, r24
     bb4:	0c f0       	brlt	.+2      	; 0xbb8 <TestRunningChronometer+0x12a>
     bb6:	03 c0       	rjmp	.+6      	; 0xbbe <TestRunningChronometer+0x130>
		__ticks = 0;	/* i.e. 65536 */
     bb8:	1c 86       	std	Y+12, r1	; 0x0c
     bba:	1b 86       	std	Y+11, r1	; 0x0b
     bbc:	09 c0       	rjmp	.+18     	; 0xbd0 <TestRunningChronometer+0x142>
	else
		__ticks = (uint16_t)__tmp;
     bbe:	69 81       	ldd	r22, Y+1	; 0x01
     bc0:	7a 81       	ldd	r23, Y+2	; 0x02
     bc2:	8b 81       	ldd	r24, Y+3	; 0x03
     bc4:	9c 81       	ldd	r25, Y+4	; 0x04
     bc6:	40 d2       	rcall	.+1152   	; 0x1048 <__fixsfsi>
     bc8:	dc 01       	movw	r26, r24
     bca:	cb 01       	movw	r24, r22
     bcc:	9c 87       	std	Y+12, r25	; 0x0c
     bce:	8b 87       	std	Y+11, r24	; 0x0b
     bd0:	8b 85       	ldd	r24, Y+11	; 0x0b
     bd2:	9c 85       	ldd	r25, Y+12	; 0x0c
     bd4:	9e 83       	std	Y+6, r25	; 0x06
     bd6:	8d 83       	std	Y+5, r24	; 0x05
     bd8:	8d 81       	ldd	r24, Y+5	; 0x05
     bda:	9e 81       	ldd	r25, Y+6	; 0x06
     bdc:	01 97       	sbiw	r24, 0x01	; 1
     bde:	f1 f7       	brne	.-4      	; 0xbdc <TestRunningChronometer+0x14e>
     be0:	9e 83       	std	Y+6, r25	; 0x06
     be2:	8d 83       	std	Y+5, r24	; 0x05
     be4:	2c 96       	adiw	r28, 0x0c	; 12
     be6:	0f b6       	in	r0, 0x3f	; 63
     be8:	f8 94       	cli
     bea:	de bf       	out	0x3e, r29	; 62
     bec:	0f be       	out	0x3f, r0	; 63
     bee:	cd bf       	out	0x3d, r28	; 61
     bf0:	df 91       	pop	r29
     bf2:	cf 91       	pop	r28
     bf4:	08 95       	ret

00000bf6 <init>:
        _delay_ms(100);
    }
}


/*
 *  init function
 */
void init() {
     bf6:	cf 93       	push	r28
     bf8:	df 93       	push	r29
     bfa:	cd b7       	in	r28, 0x3d	; 61
     bfc:	de b7       	in	r29, 0x3e	; 62
     bfe:	22 97       	sbiw	r28, 0x02	; 2
     c00:	0f b6       	in	r0, 0x3f	; 63
     c02:	f8 94       	cli
     c04:	de bf       	out	0x3e, r29	; 62
     c06:	0f be       	out	0x3f, r0	; 63
     c08:	cd bf       	out	0x3d, r28	; 61
   // ******************
   // * WatchDog Timer *
   // ******************


   // ********
   // * LEDs *
   // ********
   DDRC=0xFF; // set up PORTD pins 0 to 7 as output
     c0a:	8f ef       	ldi	r24, 0xFF	; 255
     c0c:	80 93 34 00 	sts	0x0034, r24
   //switch_on_all_leds();
   switch_off_all_leds();
     c10:	68 db       	rcall	.-2352   	; 0x2e2 <switch_off_all_leds>

   // *********************************
   // * Start/Stop chronometer (INT0) *
   // *********************************
   // Set Pin 6 (PD2) as the pin to use for this example
   //PCMSK |= (1<<PIND2); // TO FIX
   //PIND |= (1<<PIND2); // try scls:Error : read-only !!!

   // interrupt on INT0 pin falling edge (sensor triggered)
   MCUCR = (1<<ISC01) | (1<<ISC00);
     c12:	83 e0       	ldi	r24, 0x03	; 3
     c14:	80 93 55 00 	sts	0x0055, r24

   // turn on interrupts!

   GICR |= (1<<INT0); //INT0
     c18:	80 91 5b 00 	lds	r24, 0x005B
     c1c:	80 64       	ori	r24, 0x40	; 64
     c1e:	80 93 5b 00 	sts	0x005B, r24

   sei(); // enable interrupts
     c22:	78 94       	sei

   // *************************************************
   // * Conv Analog to Digital (CAN for RPM and Temp) *
   // *************************************************

   //volatile static int analog_result;
   //volatile static unsigned char analog_busy;

   //analog_busy=1; // busy mark the ADC function
   int channel = 0; // measure ADC0
     c24:	1a 82       	std	Y+2, r1	; 0x02
     c26:	19 82       	std	Y+1, r1	; 0x01

   // use internal 2.56V ref  REFS1=1 & REFS0=1 (11)
   // use external ref (01)
   ADMUX=(0<<REFS1)|(1<<REFS0)|(channel & 0x07); // channel & 0x07
     c28:	89 81       	ldd	r24, Y+1	; 0x01
     c2a:	87 70       	andi	r24, 0x07	; 7
     c2c:	80 64       	ori	r24, 0x40	; 64
     c2e:	80 93 27 00 	sts	0x0027, r24

   //ADCSRA=(1<<ADEN)|(1<<ADIE)|(1<<ADIF)|(1<<ADPS2); // interrupt ADIE=1
   ADCSRA=(1<<ADEN)|(0<<ADIE)|(1<<ADIF)|(1<<ADPS2); // no interrupt ADIE=0
     c32:	84 e9       	ldi	r24, 0x94	; 148
     c34:	80 93 26 00 	sts	0x0026, r24

   ADCSRA |= (1 << (ADSC)); // start conversion
     c38:	80 91 26 00 	lds	r24, 0x0026
     c3c:	80 64       	ori	r24, 0x40	; 64
     c3e:	80 93 26 00 	sts	0x0026, r24

   DDRA=0x00;
     c42:	10 92 3a 00 	sts	0x003A, r1
	// make sure pull-up resistors are turned off
	PORTA = 0x00;
     c46:	10 92 3b 00 	sts	0x003B, r1
	

   // **********
   // * Keypad *
   // **********
   // 1 joystick button (4 directions, up, down, left, right)
   // 2 push buttons (ok, cancel)
   DDRB=0x00;
     c4a:	10 92 37 00 	sts	0x0037, r1
   PORTB=0xFF;
     c4e:	8f ef       	ldi	r24, 0xFF	; 255
     c50:	80 93 38 00 	sts	0x0038, r24

   // ***************
   // * Graphic LCD *
   // ***************

   // Sound
   beep(3,300);
     c54:	40 e0       	ldi	r20, 0x00	; 0
     c56:	50 e0       	ldi	r21, 0x00	; 0
     c58:	66 e9       	ldi	r22, 0x96	; 150
     c5a:	73 e4       	ldi	r23, 0x43	; 67
     c5c:	83 e0       	ldi	r24, 0x03	; 3
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	75 de       	rcall	.-790    	; 0x94c <beep>

   // Time
   running_chronometer = FALSE;
     c62:	10 92 61 00 	sts	0x0061, r1
     c66:	10 92 60 00 	sts	0x0060, r1
   init_time(current_time);
     c6a:	20 91 62 00 	lds	r18, 0x0062
     c6e:	30 91 63 00 	lds	r19, 0x0063
     c72:	40 91 64 00 	lds	r20, 0x0064
     c76:	50 91 65 00 	lds	r21, 0x0065
     c7a:	60 91 66 00 	lds	r22, 0x0066
     c7e:	70 91 67 00 	lds	r23, 0x0067
     c82:	80 91 68 00 	lds	r24, 0x0068
     c86:	90 91 69 00 	lds	r25, 0x0069
     c8a:	ea d9       	rcall	.-3116   	; 0x60 <init_time>
   init_time(last_time);
     c8c:	20 91 72 00 	lds	r18, 0x0072
     c90:	30 91 73 00 	lds	r19, 0x0073
     c94:	40 91 74 00 	lds	r20, 0x0074
     c98:	50 91 75 00 	lds	r21, 0x0075
     c9c:	60 91 76 00 	lds	r22, 0x0076
     ca0:	70 91 77 00 	lds	r23, 0x0077
     ca4:	80 91 78 00 	lds	r24, 0x0078
     ca8:	90 91 79 00 	lds	r25, 0x0079
     cac:	d9 d9       	rcall	.-3150   	; 0x60 <init_time>
   init_time(best_time);
     cae:	20 91 6a 00 	lds	r18, 0x006A
     cb2:	30 91 6b 00 	lds	r19, 0x006B
     cb6:	40 91 6c 00 	lds	r20, 0x006C
     cba:	50 91 6d 00 	lds	r21, 0x006D
     cbe:	60 91 6e 00 	lds	r22, 0x006E
     cc2:	70 91 6f 00 	lds	r23, 0x006F
     cc6:	80 91 70 00 	lds	r24, 0x0070
     cca:	90 91 71 00 	lds	r25, 0x0071
     cce:	c8 d9       	rcall	.-3184   	; 0x60 <init_time>
     cd0:	22 96       	adiw	r28, 0x02	; 2
     cd2:	0f b6       	in	r0, 0x3f	; 63
     cd4:	f8 94       	cli
     cd6:	de bf       	out	0x3e, r29	; 62
     cd8:	0f be       	out	0x3f, r0	; 63
     cda:	cd bf       	out	0x3d, r28	; 61
     cdc:	df 91       	pop	r29
     cde:	cf 91       	pop	r28
     ce0:	08 95       	ret

00000ce2 <adcConvert10bit>:

}

/*
 * convert from analog to digital (10 bits)
 */
unsigned short adcConvert10bit(unsigned char ch)
{
     ce2:	cf 93       	push	r28
     ce4:	df 93       	push	r29
     ce6:	cd b7       	in	r28, 0x3d	; 61
     ce8:	de b7       	in	r29, 0x3e	; 62
     cea:	21 97       	sbiw	r28, 0x01	; 1
     cec:	0f b6       	in	r0, 0x3f	; 63
     cee:	f8 94       	cli
     cf0:	de bf       	out	0x3e, r29	; 62
     cf2:	0f be       	out	0x3f, r0	; 63
     cf4:	cd bf       	out	0x3d, r28	; 61
     cf6:	89 83       	std	Y+1, r24	; 0x01
	//a2dCompleteFlag = 0;				// clear conversion complete flag
	ADMUX = ((ADMUX) & ~0x1F) | (ch & 0x1F);	// set channel ADC_MUX_MASK=0x1F
     cf8:	80 91 27 00 	lds	r24, 0x0027
     cfc:	98 2f       	mov	r25, r24
     cfe:	90 7e       	andi	r25, 0xE0	; 224
     d00:	89 81       	ldd	r24, Y+1	; 0x01
     d02:	8f 71       	andi	r24, 0x1F	; 31
     d04:	89 2b       	or	r24, r25
     d06:	80 93 27 00 	sts	0x0027, r24
	ADCSRA |= (_BV(ADIF)); // clear hardware "conversion complete" flag
     d0a:	80 91 26 00 	lds	r24, 0x0026
     d0e:	80 61       	ori	r24, 0x10	; 16
     d10:	80 93 26 00 	sts	0x0026, r24
	ADCSRA |= (_BV(ADSC)); // start conversion
     d14:	80 91 26 00 	lds	r24, 0x0026
     d18:	80 64       	ori	r24, 0x40	; 64
     d1a:	80 93 26 00 	sts	0x0026, r24
							
	//while(!a2dCompleteFlag);				// wait until conversion complete
	//while( bit_is_clear(ADCSR, ADIF) );		// wait until conversion complete
	while( bit_is_set(ADCSRA, ADSC) );		// wait until conversion complete
     d1e:	80 91 26 00 	lds	r24, 0x0026
     d22:	99 27       	eor	r25, r25
     d24:	80 74       	andi	r24, 0x40	; 64
     d26:	90 70       	andi	r25, 0x00	; 0
     d28:	00 97       	sbiw	r24, 0x00	; 0
     d2a:	09 f0       	breq	.+2      	; 0xd2e <adcConvert10bit+0x4c>
     d2c:	f8 cf       	rjmp	.-16     	; 0xd1e <adcConvert10bit+0x3c>

	// CAUTION: MUST READ ADCL BEFORE ADCH!!!
	return ((ADCL) | ((ADCH)<<8));	// read ADC (full 10 bits);
     d2e:	80 91 24 00 	lds	r24, 0x0024
     d32:	28 2f       	mov	r18, r24
     d34:	33 27       	eor	r19, r19
     d36:	80 91 25 00 	lds	r24, 0x0025
     d3a:	99 27       	eor	r25, r25
     d3c:	98 2f       	mov	r25, r24
     d3e:	88 27       	eor	r24, r24
     d40:	28 2b       	or	r18, r24
     d42:	39 2b       	or	r19, r25
     d44:	c9 01       	movw	r24, r18
     d46:	21 96       	adiw	r28, 0x01	; 1
     d48:	0f b6       	in	r0, 0x3f	; 63
     d4a:	f8 94       	cli
     d4c:	de bf       	out	0x3e, r29	; 62
     d4e:	0f be       	out	0x3f, r0	; 63
     d50:	cd bf       	out	0x3d, r28	; 61
     d52:	df 91       	pop	r29
     d54:	cf 91       	pop	r28
     d56:	08 95       	ret

00000d58 <adcConvert8bit>:
}

/*
 * convert from analog to digital (8 bits)
 * starts conversion, waits until conversion is done, and returns result
 */
unsigned char adcConvert8bit(unsigned char ch)
{
     d58:	cf 93       	push	r28
     d5a:	df 93       	push	r29
     d5c:	cd b7       	in	r28, 0x3d	; 61
     d5e:	de b7       	in	r29, 0x3e	; 62
     d60:	21 97       	sbiw	r28, 0x01	; 1
     d62:	0f b6       	in	r0, 0x3f	; 63
     d64:	f8 94       	cli
     d66:	de bf       	out	0x3e, r29	; 62
     d68:	0f be       	out	0x3f, r0	; 63
     d6a:	cd bf       	out	0x3d, r28	; 61
     d6c:	89 83       	std	Y+1, r24	; 0x01
	// do 10-bit conversion and return highest 8 bits
	return adcConvert10bit(ch)>>2;			// return ADC MSB byte
     d6e:	89 81       	ldd	r24, Y+1	; 0x01
     d70:	b8 df       	rcall	.-144    	; 0xce2 <adcConvert10bit>
     d72:	96 95       	lsr	r25
     d74:	87 95       	ror	r24
     d76:	96 95       	lsr	r25
     d78:	87 95       	ror	r24
     d7a:	99 27       	eor	r25, r25
     d7c:	21 96       	adiw	r28, 0x01	; 1
     d7e:	0f b6       	in	r0, 0x3f	; 63
     d80:	f8 94       	cli
     d82:	de bf       	out	0x3e, r29	; 62
     d84:	0f be       	out	0x3f, r0	; 63
     d86:	cd bf       	out	0x3d, r28	; 61
     d88:	df 91       	pop	r29
     d8a:	cf 91       	pop	r28
     d8c:	08 95       	ret

00000d8e <SeekButtons>:
}

#define Nbuts 6
#define B_LEFT 0
#define B_RIGHT 1
#define B_UP 2
#define B_DOWN 3
#define B_OK 4
#define B_CANCEL 5

void SeekButtons(void) {
     d8e:	cf 93       	push	r28
     d90:	df 93       	push	r29
     d92:	cd b7       	in	r28, 0x3d	; 61
     d94:	de b7       	in	r29, 0x3e	; 62
     d96:	24 97       	sbiw	r28, 0x04	; 4
     d98:	0f b6       	in	r0, 0x3f	; 63
     d9a:	f8 94       	cli
     d9c:	de bf       	out	0x3e, r29	; 62
     d9e:	0f be       	out	0x3f, r0	; 63
     da0:	cd bf       	out	0x3d, r28	; 61
    int bstate = 0;
     da2:	1a 82       	std	Y+2, r1	; 0x02
     da4:	19 82       	std	Y+1, r1	; 0x01
    int i;
	 for (i=0; i<=Nbuts-1; i++) {
     da6:	1c 82       	std	Y+4, r1	; 0x04
     da8:	1b 82       	std	Y+3, r1	; 0x03
     daa:	8b 81       	ldd	r24, Y+3	; 0x03
     dac:	9c 81       	ldd	r25, Y+4	; 0x04
     dae:	86 30       	cpi	r24, 0x06	; 6
     db0:	91 05       	cpc	r25, r1
     db2:	14 f5       	brge	.+68     	; 0xdf8 <SeekButtons+0x6a>
	     if ( (PINB>>i) == 0 ) {
     db4:	80 91 36 00 	lds	r24, 0x0036
     db8:	99 27       	eor	r25, r25
     dba:	0b 80       	ldd	r0, Y+3	; 0x03
     dbc:	02 c0       	rjmp	.+4      	; 0xdc2 <SeekButtons+0x34>
     dbe:	95 95       	asr	r25
     dc0:	87 95       	ror	r24
     dc2:	0a 94       	dec	r0
     dc4:	e2 f7       	brpl	.-8      	; 0xdbe <SeekButtons+0x30>
     dc6:	00 97       	sbiw	r24, 0x00	; 0
     dc8:	29 f4       	brne	.+10     	; 0xdd4 <SeekButtons+0x46>
	         bstate = TRUE;
     dca:	8f ef       	ldi	r24, 0xFF	; 255
     dcc:	9f ef       	ldi	r25, 0xFF	; 255
     dce:	9a 83       	std	Y+2, r25	; 0x02
     dd0:	89 83       	std	Y+1, r24	; 0x01
     dd2:	02 c0       	rjmp	.+4      	; 0xdd8 <SeekButtons+0x4a>
	     } else {
	         bstate = FALSE;
     dd4:	1a 82       	std	Y+2, r1	; 0x02
     dd6:	19 82       	std	Y+1, r1	; 0x01
	     }
		
	     if ( i==0 && bstate ) { // LEFT

	     }
	     if ( i==1 && bstate ) { // RIGHT

	     }
	     if ( i==2 && bstate ) { // UP

	     }
	     if ( i==3 && bstate ) { // DOWN

	     }
	     if ( i==4 && bstate ) { // OK
     dd8:	8b 81       	ldd	r24, Y+3	; 0x03
     dda:	9c 81       	ldd	r25, Y+4	; 0x04
     ddc:	84 30       	cpi	r24, 0x04	; 4
     dde:	91 05       	cpc	r25, r1
     de0:	29 f4       	brne	.+10     	; 0xdec <SeekButtons+0x5e>
     de2:	89 81       	ldd	r24, Y+1	; 0x01
     de4:	9a 81       	ldd	r25, Y+2	; 0x02
     de6:	00 97       	sbiw	r24, 0x00	; 0
     de8:	09 f0       	breq	.+2      	; 0xdec <SeekButtons+0x5e>
            StartStopChronometer();
     dea:	2b de       	rcall	.-938    	; 0xa42 <StartStopChronometer>
     dec:	8b 81       	ldd	r24, Y+3	; 0x03
     dee:	9c 81       	ldd	r25, Y+4	; 0x04
     df0:	01 96       	adiw	r24, 0x01	; 1
     df2:	9c 83       	std	Y+4, r25	; 0x04
     df4:	8b 83       	std	Y+3, r24	; 0x03
     df6:	d9 cf       	rjmp	.-78     	; 0xdaa <SeekButtons+0x1c>
     df8:	24 96       	adiw	r28, 0x04	; 4
     dfa:	0f b6       	in	r0, 0x3f	; 63
     dfc:	f8 94       	cli
     dfe:	de bf       	out	0x3e, r29	; 62
     e00:	0f be       	out	0x3f, r0	; 63
     e02:	cd bf       	out	0x3d, r28	; 61
     e04:	df 91       	pop	r29
     e06:	cf 91       	pop	r28
     e08:	08 95       	ret

00000e0a <loop>:
	     }
	     if ( i==5 && bstate ) { // CANCEL

	     }	     	     	     	
	}
}

/*
 *  this is the main loop
 */
void loop(void) {
     e0a:	0f 93       	push	r16
     e0c:	1f 93       	push	r17
     e0e:	cf 93       	push	r28
     e10:	df 93       	push	r29
     e12:	cd b7       	in	r28, 0x3d	; 61
     e14:	de b7       	in	r29, 0x3e	; 62
     e16:	28 97       	sbiw	r28, 0x08	; 8
     e18:	0f b6       	in	r0, 0x3f	; 63
     e1a:	f8 94       	cli
     e1c:	de bf       	out	0x3e, r29	; 62
     e1e:	0f be       	out	0x3f, r0	; 63
     e20:	cd bf       	out	0x3d, r28	; 61
    SeekButtons();
     e22:	b5 df       	rcall	.-150    	; 0xd8e <SeekButtons>

    double ch0 = adcConvert10bit(0);
     e24:	80 e0       	ldi	r24, 0x00	; 0
     e26:	5d df       	rcall	.-326    	; 0xce2 <adcConvert10bit>
     e28:	8c 01       	movw	r16, r24
     e2a:	c8 01       	movw	r24, r16
     e2c:	aa 27       	eor	r26, r26
     e2e:	97 fd       	sbrc	r25, 7
     e30:	a0 95       	com	r26
     e32:	ba 2f       	mov	r27, r26
     e34:	bc 01       	movw	r22, r24
     e36:	cd 01       	movw	r24, r26
     e38:	24 d1       	rcall	.+584    	; 0x1082 <__floatsisf>
     e3a:	6d 83       	std	Y+5, r22	; 0x05
     e3c:	7e 83       	std	Y+6, r23	; 0x06
     e3e:	8f 83       	std	Y+7, r24	; 0x07
     e40:	98 87       	std	Y+8, r25	; 0x08
     e42:	11 23       	and	r17, r17
     e44:	7c f4       	brge	.+30     	; 0xe64 <loop+0x5a>
     e46:	20 e0       	ldi	r18, 0x00	; 0
     e48:	30 e0       	ldi	r19, 0x00	; 0
     e4a:	40 e8       	ldi	r20, 0x80	; 128
     e4c:	57 e4       	ldi	r21, 0x47	; 71
     e4e:	6d 81       	ldd	r22, Y+5	; 0x05
     e50:	7e 81       	ldd	r23, Y+6	; 0x06
     e52:	8f 81       	ldd	r24, Y+7	; 0x07
     e54:	98 85       	ldd	r25, Y+8	; 0x08
     e56:	70 d0       	rcall	.+224    	; 0xf38 <__addsf3>
     e58:	dc 01       	movw	r26, r24
     e5a:	cb 01       	movw	r24, r22
     e5c:	8d 83       	std	Y+5, r24	; 0x05
     e5e:	9e 83       	std	Y+6, r25	; 0x06
     e60:	af 83       	std	Y+7, r26	; 0x07
     e62:	b8 87       	std	Y+8, r27	; 0x08
     e64:	8d 81       	ldd	r24, Y+5	; 0x05
     e66:	9e 81       	ldd	r25, Y+6	; 0x06
     e68:	af 81       	ldd	r26, Y+7	; 0x07
     e6a:	b8 85       	ldd	r27, Y+8	; 0x08
     e6c:	89 83       	std	Y+1, r24	; 0x01
     e6e:	9a 83       	std	Y+2, r25	; 0x02
     e70:	ab 83       	std	Y+3, r26	; 0x03
     e72:	bc 83       	std	Y+4, r27	; 0x04
    ch0 *= 0.09765625; // 0.09765625 = 100 / 2^10
     e74:	20 e0       	ldi	r18, 0x00	; 0
     e76:	30 e0       	ldi	r19, 0x00	; 0
     e78:	48 ec       	ldi	r20, 0xC8	; 200
     e7a:	5d e3       	ldi	r21, 0x3D	; 61
     e7c:	69 81       	ldd	r22, Y+1	; 0x01
     e7e:	7a 81       	ldd	r23, Y+2	; 0x02
     e80:	8b 81       	ldd	r24, Y+3	; 0x03
     e82:	9c 81       	ldd	r25, Y+4	; 0x04
     e84:	91 d1       	rcall	.+802    	; 0x11a8 <__mulsf3>
     e86:	dc 01       	movw	r26, r24
     e88:	cb 01       	movw	r24, r22
     e8a:	89 83       	std	Y+1, r24	; 0x01
     e8c:	9a 83       	std	Y+2, r25	; 0x02
     e8e:	ab 83       	std	Y+3, r26	; 0x03
     e90:	bc 83       	std	Y+4, r27	; 0x04
    show_percent(ch0);
     e92:	69 81       	ldd	r22, Y+1	; 0x01
     e94:	7a 81       	ldd	r23, Y+2	; 0x02
     e96:	8b 81       	ldd	r24, Y+3	; 0x03
     e98:	9c 81       	ldd	r25, Y+4	; 0x04
     e9a:	25 dd       	rcall	.-1462   	; 0x8e6 <show_percent>

/*
    _delay_ms(500);

    double ch1 = adcConvert10bit(1);
    ch1 *= 0.09765625; // 0.09765625 = 100 / 2^10
    show_percent(ch1);

    _delay_ms(500);
*/

    TestRunningChronometer();
     e9c:	f8 dd       	rcall	.-1040   	; 0xa8e <TestRunningChronometer>

    inc_time(current_time);
     e9e:	20 91 62 00 	lds	r18, 0x0062
     ea2:	30 91 63 00 	lds	r19, 0x0063
     ea6:	40 91 64 00 	lds	r20, 0x0064
     eaa:	50 91 65 00 	lds	r21, 0x0065
     eae:	60 91 66 00 	lds	r22, 0x0066
     eb2:	70 91 67 00 	lds	r23, 0x0067
     eb6:	80 91 68 00 	lds	r24, 0x0068
     eba:	90 91 69 00 	lds	r25, 0x0069
     ebe:	6b d9       	rcall	.-3370   	; 0x196 <inc_time>
     ec0:	28 96       	adiw	r28, 0x08	; 8
     ec2:	0f b6       	in	r0, 0x3f	; 63
     ec4:	f8 94       	cli
     ec6:	de bf       	out	0x3e, r29	; 62
     ec8:	0f be       	out	0x3f, r0	; 63
     eca:	cd bf       	out	0x3d, r28	; 61
     ecc:	df 91       	pop	r29
     ece:	cf 91       	pop	r28
     ed0:	1f 91       	pop	r17
     ed2:	0f 91       	pop	r16
     ed4:	08 95       	ret

00000ed6 <main>:
}


/*
 * main program
 */
int main(void) {
     ed6:	cf e5       	ldi	r28, 0x5F	; 95
     ed8:	d2 e0       	ldi	r29, 0x02	; 2
     eda:	de bf       	out	0x3e, r29	; 62
     edc:	cd bf       	out	0x3d, r28	; 61
    init();
     ede:	8b de       	rcall	.-746    	; 0xbf6 <init>
    while(1) { // Infinite loop; define here the
        loop(); // system behaviour
     ee0:	94 df       	rcall	.-216    	; 0xe0a <loop>
     ee2:	fe cf       	rjmp	.-4      	; 0xee0 <main+0xa>

00000ee4 <__vector_1>:
    }
    return 0;
}

/*
 * interrupt handler for INT0
 */
SIGNAL(SIG_INTERRUPT0) {
     ee4:	1f 92       	push	r1
     ee6:	0f 92       	push	r0
     ee8:	0f b6       	in	r0, 0x3f	; 63
     eea:	0f 92       	push	r0
     eec:	11 24       	eor	r1, r1
     eee:	2f 93       	push	r18
     ef0:	3f 93       	push	r19
     ef2:	4f 93       	push	r20
     ef4:	5f 93       	push	r21
     ef6:	6f 93       	push	r22
     ef8:	7f 93       	push	r23
     efa:	8f 93       	push	r24
     efc:	9f 93       	push	r25
     efe:	af 93       	push	r26
     f00:	bf 93       	push	r27
     f02:	ef 93       	push	r30
     f04:	ff 93       	push	r31
     f06:	cf 93       	push	r28
     f08:	df 93       	push	r29
     f0a:	cd b7       	in	r28, 0x3d	; 61
     f0c:	de b7       	in	r29, 0x3e	; 62
    StartStopChronometer();
     f0e:	99 dd       	rcall	.-1230   	; 0xa42 <StartStopChronometer>
     f10:	df 91       	pop	r29
     f12:	cf 91       	pop	r28
     f14:	ff 91       	pop	r31
     f16:	ef 91       	pop	r30
     f18:	bf 91       	pop	r27
     f1a:	af 91       	pop	r26
     f1c:	9f 91       	pop	r25
     f1e:	8f 91       	pop	r24
     f20:	7f 91       	pop	r23
     f22:	6f 91       	pop	r22
     f24:	5f 91       	pop	r21
     f26:	4f 91       	pop	r20
     f28:	3f 91       	pop	r19
     f2a:	2f 91       	pop	r18
     f2c:	0f 90       	pop	r0
     f2e:	0f be       	out	0x3f, r0	; 63
     f30:	0f 90       	pop	r0
     f32:	1f 90       	pop	r1
     f34:	18 95       	reti

00000f36 <__subsf3>:
     f36:	50 58       	subi	r21, 0x80	; 128

00000f38 <__addsf3>:
     f38:	19 2e       	mov	r1, r25
     f3a:	08 d1       	rcall	.+528    	; 0x114c <__fp_split3>
     f3c:	01 d0       	rcall	.+2      	; 0xf40 <__addsf3x>
     f3e:	eb c0       	rjmp	.+470    	; 0x1116 <__fp_merge>

00000f40 <__addsf3x>:
     f40:	ba 17       	cp	r27, r26
     f42:	62 07       	cpc	r22, r18
     f44:	73 07       	cpc	r23, r19
     f46:	84 07       	cpc	r24, r20
     f48:	95 07       	cpc	r25, r21
     f4a:	b1 f1       	breq	.+108    	; 0xfb8 <__addsf3x+0x78>
     f4c:	88 f4       	brcc	.+34     	; 0xf70 <__addsf3x+0x30>
     f4e:	0e f4       	brtc	.+2      	; 0xf52 <__addsf3x+0x12>
     f50:	10 94       	com	r1
     f52:	0b 2e       	mov	r0, r27
     f54:	ba 2f       	mov	r27, r26
     f56:	a0 2d       	mov	r26, r0
     f58:	06 2e       	mov	r0, r22
     f5a:	62 2f       	mov	r22, r18
     f5c:	20 2d       	mov	r18, r0
     f5e:	07 2e       	mov	r0, r23
     f60:	73 2f       	mov	r23, r19
     f62:	30 2d       	mov	r19, r0
     f64:	08 2e       	mov	r0, r24
     f66:	84 2f       	mov	r24, r20
     f68:	40 2d       	mov	r20, r0
     f6a:	09 2e       	mov	r0, r25
     f6c:	95 2f       	mov	r25, r21
     f6e:	50 2d       	mov	r21, r0
     f70:	ff 27       	eor	r31, r31
     f72:	55 23       	and	r21, r21
     f74:	b9 f0       	breq	.+46     	; 0xfa4 <__addsf3x+0x64>
     f76:	59 1b       	sub	r21, r25
     f78:	49 f0       	breq	.+18     	; 0xf8c <__addsf3x+0x4c>
     f7a:	57 3e       	cpi	r21, 0xE7	; 231
     f7c:	98 f0       	brcs	.+38     	; 0xfa4 <__addsf3x+0x64>
     f7e:	46 95       	lsr	r20
     f80:	37 95       	ror	r19
     f82:	27 95       	ror	r18
     f84:	a7 95       	ror	r26
     f86:	f0 40       	sbci	r31, 0x00	; 0
     f88:	53 95       	inc	r21
     f8a:	c9 f7       	brne	.-14     	; 0xf7e <__addsf3x+0x3e>
     f8c:	76 f0       	brts	.+28     	; 0xfaa <__addsf3x+0x6a>
     f8e:	ba 0f       	add	r27, r26
     f90:	62 1f       	adc	r22, r18
     f92:	73 1f       	adc	r23, r19
     f94:	84 1f       	adc	r24, r20
     f96:	30 f4       	brcc	.+12     	; 0xfa4 <__addsf3x+0x64>
     f98:	87 95       	ror	r24
     f9a:	77 95       	ror	r23
     f9c:	67 95       	ror	r22
     f9e:	b7 95       	ror	r27
     fa0:	f0 40       	sbci	r31, 0x00	; 0
     fa2:	93 95       	inc	r25
     fa4:	17 fa       	bst	r1, 7
     fa6:	0f 2e       	mov	r0, r31
     fa8:	08 95       	ret
     faa:	bf 1b       	sub	r27, r31
     fac:	bb 27       	eor	r27, r27
     fae:	ba 0b       	sbc	r27, r26
     fb0:	62 0b       	sbc	r22, r18
     fb2:	73 0b       	sbc	r23, r19
     fb4:	84 0b       	sbc	r24, r20
     fb6:	f6 cf       	rjmp	.-20     	; 0xfa4 <__addsf3x+0x64>
     fb8:	de f6       	brtc	.-74     	; 0xf70 <__addsf3x+0x30>
     fba:	f4 c0       	rjmp	.+488    	; 0x11a4 <__fp_zerox>

00000fbc <__divsf3>:
     fbc:	c7 d0       	rcall	.+398    	; 0x114c <__fp_split3>
     fbe:	01 d0       	rcall	.+2      	; 0xfc2 <__divsf3x>
     fc0:	aa c0       	rjmp	.+340    	; 0x1116 <__fp_merge>

00000fc2 <__divsf3x>:
     fc2:	55 23       	and	r21, r21
     fc4:	59 f0       	breq	.+22     	; 0xfdc <__divsf3x+0x1a>
     fc6:	99 23       	and	r25, r25
     fc8:	69 f0       	breq	.+26     	; 0xfe4 <__divsf3x+0x22>
     fca:	9f 57       	subi	r25, 0x7F	; 127
     fcc:	5f 57       	subi	r21, 0x7F	; 127
     fce:	95 1b       	sub	r25, r21
     fd0:	33 f4       	brvc	.+12     	; 0xfde <__divsf3x+0x1c>
     fd2:	42 f4       	brpl	.+16     	; 0xfe4 <__divsf3x+0x22>
     fd4:	90 38       	cpi	r25, 0x80	; 128
     fd6:	11 f4       	brne	.+4      	; 0xfdc <__divsf3x+0x1a>
     fd8:	91 58       	subi	r25, 0x81	; 129
     fda:	05 c0       	rjmp	.+10     	; 0xfe6 <__divsf3x+0x24>
     fdc:	b4 c0       	rjmp	.+360    	; 0x1146 <__fp_nan>
     fde:	91 58       	subi	r25, 0x81	; 129
     fe0:	9f 3f       	cpi	r25, 0xFF	; 255
     fe2:	09 f4       	brne	.+2      	; 0xfe6 <__divsf3x+0x24>
     fe4:	df c0       	rjmp	.+446    	; 0x11a4 <__fp_zerox>
     fe6:	bb 27       	eor	r27, r27
     fe8:	11 24       	eor	r1, r1
     fea:	62 17       	cp	r22, r18
     fec:	73 07       	cpc	r23, r19
     fee:	84 07       	cpc	r24, r20
     ff0:	30 f4       	brcc	.+12     	; 0xffe <__divsf3x+0x3c>
     ff2:	66 0f       	add	r22, r22
     ff4:	77 1f       	adc	r23, r23
     ff6:	88 1f       	adc	r24, r24
     ff8:	bb 1f       	adc	r27, r27
     ffa:	91 50       	subi	r25, 0x01	; 1
     ffc:	98 f3       	brcs	.-26     	; 0xfe4 <__divsf3x+0x22>
     ffe:	11 d0       	rcall	.+34     	; 0x1022 <__divsf3x+0x60>
    1000:	0f 92       	push	r0
    1002:	0f d0       	rcall	.+30     	; 0x1022 <__divsf3x+0x60>
    1004:	0f 92       	push	r0
    1006:	0d d0       	rcall	.+26     	; 0x1022 <__divsf3x+0x60>
    1008:	a0 e8       	ldi	r26, 0x80	; 128
    100a:	26 17       	cp	r18, r22
    100c:	37 07       	cpc	r19, r23
    100e:	48 07       	cpc	r20, r24
    1010:	1b 06       	cpc	r1, r27
    1012:	09 f0       	breq	.+2      	; 0x1016 <__divsf3x+0x54>
    1014:	a0 48       	sbci	r26, 0x80	; 128
    1016:	ba 2f       	mov	r27, r26
    1018:	60 2d       	mov	r22, r0
    101a:	7f 91       	pop	r23
    101c:	8f 91       	pop	r24
    101e:	00 24       	eor	r0, r0
    1020:	08 95       	ret
    1022:	a0 e8       	ldi	r26, 0x80	; 128
    1024:	00 24       	eor	r0, r0
    1026:	62 17       	cp	r22, r18
    1028:	73 07       	cpc	r23, r19
    102a:	84 07       	cpc	r24, r20
    102c:	b1 05       	cpc	r27, r1
    102e:	28 f0       	brcs	.+10     	; 0x103a <__divsf3x+0x78>
    1030:	62 1b       	sub	r22, r18
    1032:	73 0b       	sbc	r23, r19
    1034:	84 0b       	sbc	r24, r20
    1036:	b1 09       	sbc	r27, r1
    1038:	0a 2a       	or	r0, r26
    103a:	66 0f       	add	r22, r22
    103c:	77 1f       	adc	r23, r23
    103e:	88 1f       	adc	r24, r24
    1040:	bb 1f       	adc	r27, r27
    1042:	a6 95       	lsr	r26
    1044:	81 f7       	brne	.-32     	; 0x1026 <__divsf3x+0x64>
    1046:	08 95       	ret

00001048 <__fixsfsi>:
    1048:	97 fb       	bst	r25, 7
    104a:	8c d0       	rcall	.+280    	; 0x1164 <__fp_split1>
    104c:	9f 37       	cpi	r25, 0x7F	; 127
    104e:	38 f0       	brcs	.+14     	; 0x105e <__fixsfsi+0x16>
    1050:	fe e9       	ldi	r31, 0x9E	; 158
    1052:	f9 1b       	sub	r31, r25
    1054:	98 2f       	mov	r25, r24
    1056:	87 2f       	mov	r24, r23
    1058:	76 2f       	mov	r23, r22
    105a:	6b 2f       	mov	r22, r27
    105c:	05 c0       	rjmp	.+10     	; 0x1068 <__fixsfsi+0x20>
    105e:	9f c0       	rjmp	.+318    	; 0x119e <__fp_zero>
    1060:	96 95       	lsr	r25
    1062:	87 95       	ror	r24
    1064:	77 95       	ror	r23
    1066:	67 95       	ror	r22
    1068:	f1 50       	subi	r31, 0x01	; 1
    106a:	d0 f7       	brcc	.-12     	; 0x1060 <__fixsfsi+0x18>
    106c:	3e f4       	brtc	.+14     	; 0x107c <__fp_lneg+0xe>

0000106e <__fp_lneg>:
    106e:	90 95       	com	r25
    1070:	80 95       	com	r24
    1072:	70 95       	com	r23
    1074:	61 95       	neg	r22
    1076:	7f 4f       	sbci	r23, 0xFF	; 255
    1078:	8f 4f       	sbci	r24, 0xFF	; 255
    107a:	9f 4f       	sbci	r25, 0xFF	; 255
    107c:	08 95       	ret

0000107e <__floatunssisf>:
    107e:	e8 94       	clt
    1080:	03 c0       	rjmp	.+6      	; 0x1088 <__floatsisf+0x6>

00001082 <__floatsisf>:
    1082:	97 fb       	bst	r25, 7
    1084:	0e f4       	brtc	.+2      	; 0x1088 <__floatsisf+0x6>
    1086:	f3 df       	rcall	.-26     	; 0x106e <__fp_lneg>
    1088:	b6 2f       	mov	r27, r22
    108a:	67 2f       	mov	r22, r23
    108c:	78 2f       	mov	r23, r24
    108e:	89 2f       	mov	r24, r25
    1090:	9e e9       	ldi	r25, 0x9E	; 158
    1092:	00 24       	eor	r0, r0
    1094:	40 c0       	rjmp	.+128    	; 0x1116 <__fp_merge>

00001096 <floor>:
    1096:	74 d0       	rcall	.+232    	; 0x1180 <__fp_split_a>
    1098:	9f 37       	cpi	r25, 0x7F	; 127
    109a:	60 f4       	brcc	.+24     	; 0x10b4 <floor+0x1e>
    109c:	0e f0       	brts	.+2      	; 0x10a0 <floor+0xa>
    109e:	7f c0       	rjmp	.+254    	; 0x119e <__fp_zero>
    10a0:	9f eb       	ldi	r25, 0xBF	; 191
    10a2:	80 e8       	ldi	r24, 0x80	; 128
    10a4:	77 27       	eor	r23, r23
    10a6:	66 27       	eor	r22, r22
    10a8:	08 95       	ret
    10aa:	86 95       	lsr	r24
    10ac:	77 95       	ror	r23
    10ae:	67 95       	ror	r22
    10b0:	b1 1d       	adc	r27, r1
    10b2:	93 95       	inc	r25
    10b4:	96 39       	cpi	r25, 0x96	; 150
    10b6:	c8 f3       	brcs	.-14     	; 0x10aa <floor+0x14>
    10b8:	2e f4       	brtc	.+10     	; 0x10c4 <floor+0x2e>
    10ba:	bb 23       	and	r27, r27
    10bc:	19 f0       	breq	.+6      	; 0x10c4 <floor+0x2e>
    10be:	6f 5f       	subi	r22, 0xFF	; 255
    10c0:	7f 4f       	sbci	r23, 0xFF	; 255
    10c2:	8f 4f       	sbci	r24, 0xFF	; 255
    10c4:	bb 27       	eor	r27, r27
    10c6:	27 c0       	rjmp	.+78     	; 0x1116 <__fp_merge>

000010c8 <__eqsf2>:
    10c8:	0e d0       	rcall	.+28     	; 0x10e6 <.fp_cmp>
    10ca:	5e f0       	brts	.+22     	; 0x10e2 <__cmpsf2+0xe>
    10cc:	04 c0       	rjmp	.+8      	; 0x10d6 <__cmpsf2+0x2>

000010ce <__gesf2>:
    10ce:	0b d0       	rcall	.+22     	; 0x10e6 <.fp_cmp>
    10d0:	26 f0       	brts	.+8      	; 0x10da <__cmpsf2+0x6>
    10d2:	01 c0       	rjmp	.+2      	; 0x10d6 <__cmpsf2+0x2>

000010d4 <__cmpsf2>:
    10d4:	08 d0       	rcall	.+16     	; 0x10e6 <.fp_cmp>
    10d6:	19 f0       	breq	.+6      	; 0x10de <__cmpsf2+0xa>
    10d8:	20 f4       	brcc	.+8      	; 0x10e2 <__cmpsf2+0xe>
    10da:	8f ef       	ldi	r24, 0xFF	; 255
    10dc:	08 95       	ret
    10de:	80 e0       	ldi	r24, 0x00	; 0
    10e0:	08 95       	ret
    10e2:	81 e0       	ldi	r24, 0x01	; 1
    10e4:	08 95       	ret

000010e6 <.fp_cmp>:
    10e6:	97 fb       	bst	r25, 7
    10e8:	09 2e       	mov	r0, r25
    10ea:	05 26       	eor	r0, r21
    10ec:	00 f8       	bld	r0, 0
    10ee:	68 94       	set
    10f0:	30 d0       	rcall	.+96     	; 0x1152 <__fp_split2>
    10f2:	e8 94       	clt
    10f4:	07 fc       	sbrc	r0, 7
    10f6:	07 c0       	rjmp	.+14     	; 0x1106 <.fp_cmp+0x20>
    10f8:	62 17       	cp	r22, r18
    10fa:	73 07       	cpc	r23, r19
    10fc:	84 07       	cpc	r24, r20
    10fe:	95 07       	cpc	r25, r21
    1100:	21 f0       	breq	.+8      	; 0x110a <.fp_cmp+0x24>
    1102:	08 f4       	brcc	.+2      	; 0x1106 <.fp_cmp+0x20>
    1104:	00 94       	com	r0
    1106:	07 94       	ror	r0
    1108:	98 94       	clz
    110a:	08 95       	ret
    110c:	9a 95       	dec	r25
    110e:	bb 0f       	add	r27, r27
    1110:	66 1f       	adc	r22, r22
    1112:	77 1f       	adc	r23, r23
    1114:	88 1f       	adc	r24, r24

00001116 <__fp_merge>:
    1116:	11 24       	eor	r1, r1
    1118:	99 23       	and	r25, r25
    111a:	a1 f0       	breq	.+40     	; 0x1144 <__fp_merge+0x2e>
    111c:	88 23       	and	r24, r24
    111e:	b2 f7       	brpl	.-20     	; 0x110c <.fp_cmp+0x26>
    1120:	9f 3f       	cpi	r25, 0xFF	; 255
    1122:	59 f0       	breq	.+22     	; 0x113a <__fp_merge+0x24>
    1124:	bb 0f       	add	r27, r27
    1126:	48 f4       	brcc	.+18     	; 0x113a <__fp_merge+0x24>
    1128:	21 f4       	brne	.+8      	; 0x1132 <__fp_merge+0x1c>
    112a:	00 20       	and	r0, r0
    112c:	11 f4       	brne	.+4      	; 0x1132 <__fp_merge+0x1c>
    112e:	60 ff       	sbrs	r22, 0
    1130:	04 c0       	rjmp	.+8      	; 0x113a <__fp_merge+0x24>
    1132:	6f 5f       	subi	r22, 0xFF	; 255
    1134:	7f 4f       	sbci	r23, 0xFF	; 255
    1136:	8f 4f       	sbci	r24, 0xFF	; 255
    1138:	9f 4f       	sbci	r25, 0xFF	; 255
    113a:	88 1f       	adc	r24, r24
    113c:	97 95       	ror	r25
    113e:	87 95       	ror	r24
    1140:	97 f9       	bld	r25, 7
    1142:	08 95       	ret
    1144:	2c c0       	rjmp	.+88     	; 0x119e <__fp_zero>

00001146 <__fp_nan>:
    1146:	9f ef       	ldi	r25, 0xFF	; 255
    1148:	80 ec       	ldi	r24, 0xC0	; 192
    114a:	08 95       	ret

0000114c <__fp_split3>:
    114c:	05 2e       	mov	r0, r21
    114e:	09 26       	eor	r0, r25
    1150:	07 fa       	bst	r0, 7

00001152 <__fp_split2>:
    1152:	44 0f       	add	r20, r20
    1154:	55 1f       	adc	r21, r21
    1156:	5f 3f       	cpi	r21, 0xFF	; 255
    1158:	79 f0       	breq	.+30     	; 0x1178 <__fp_split1+0x14>
    115a:	aa 27       	eor	r26, r26
    115c:	a5 17       	cp	r26, r21
    115e:	08 f0       	brcs	.+2      	; 0x1162 <__fp_split2+0x10>
    1160:	51 e0       	ldi	r21, 0x01	; 1
    1162:	47 95       	ror	r20

00001164 <__fp_split1>:
    1164:	88 0f       	add	r24, r24
    1166:	99 1f       	adc	r25, r25
    1168:	9f 3f       	cpi	r25, 0xFF	; 255
    116a:	31 f0       	breq	.+12     	; 0x1178 <__fp_split1+0x14>
    116c:	bb 27       	eor	r27, r27
    116e:	b9 17       	cp	r27, r25
    1170:	08 f0       	brcs	.+2      	; 0x1174 <__fp_split1+0x10>
    1172:	91 e0       	ldi	r25, 0x01	; 1
    1174:	87 95       	ror	r24
    1176:	08 95       	ret
    1178:	9f 91       	pop	r25
    117a:	9f 91       	pop	r25
    117c:	11 24       	eor	r1, r1
    117e:	e3 cf       	rjmp	.-58     	; 0x1146 <__fp_nan>

00001180 <__fp_split_a>:
    1180:	97 fb       	bst	r25, 7
    1182:	88 0f       	add	r24, r24
    1184:	99 1f       	adc	r25, r25
    1186:	9f 3f       	cpi	r25, 0xFF	; 255
    1188:	31 f0       	breq	.+12     	; 0x1196 <__fp_split_a+0x16>
    118a:	bb 27       	eor	r27, r27
    118c:	b9 17       	cp	r27, r25
    118e:	08 f0       	brcs	.+2      	; 0x1192 <__fp_split_a+0x12>
    1190:	91 e0       	ldi	r25, 0x01	; 1
    1192:	87 95       	ror	r24
    1194:	08 95       	ret
    1196:	9f 91       	pop	r25
    1198:	9f 91       	pop	r25
    119a:	11 24       	eor	r1, r1
    119c:	d4 cf       	rjmp	.-88     	; 0x1146 <__fp_nan>

0000119e <__fp_zero>:
    119e:	66 27       	eor	r22, r22
    11a0:	77 27       	eor	r23, r23
    11a2:	88 27       	eor	r24, r24

000011a4 <__fp_zerox>:
    11a4:	99 27       	eor	r25, r25
    11a6:	08 95       	ret

000011a8 <__mulsf3>:
    11a8:	d1 df       	rcall	.-94     	; 0x114c <__fp_split3>
    11aa:	01 d0       	rcall	.+2      	; 0x11ae <__mulsf3x>
    11ac:	b4 cf       	rjmp	.-152    	; 0x1116 <__fp_merge>

000011ae <__mulsf3x>:
    11ae:	99 23       	and	r25, r25
    11b0:	39 f0       	breq	.+14     	; 0x11c0 <__mulsf3x+0x12>
    11b2:	55 23       	and	r21, r21
    11b4:	29 f0       	breq	.+10     	; 0x11c0 <__mulsf3x+0x12>
    11b6:	9f 57       	subi	r25, 0x7F	; 127
    11b8:	5f 57       	subi	r21, 0x7F	; 127
    11ba:	95 0f       	add	r25, r21
    11bc:	13 f4       	brvc	.+4      	; 0x11c2 <__mulsf3x+0x14>
    11be:	9a f1       	brmi	.+102    	; 0x1226 <__mulsf3x+0x78>
    11c0:	f1 cf       	rjmp	.-30     	; 0x11a4 <__fp_zerox>
    11c2:	91 58       	subi	r25, 0x81	; 129
    11c4:	9f 3f       	cpi	r25, 0xFF	; 255
    11c6:	e1 f3       	breq	.-8      	; 0x11c0 <__mulsf3x+0x12>
    11c8:	62 9f       	mul	r22, r18
    11ca:	a1 2d       	mov	r26, r1
    11cc:	0f 92       	push	r0
    11ce:	bb 27       	eor	r27, r27
    11d0:	63 9f       	mul	r22, r19
    11d2:	a0 0d       	add	r26, r0
    11d4:	b1 1d       	adc	r27, r1
    11d6:	ee 27       	eor	r30, r30
    11d8:	72 9f       	mul	r23, r18
    11da:	a0 0d       	add	r26, r0
    11dc:	b1 1d       	adc	r27, r1
    11de:	ee 1f       	adc	r30, r30
    11e0:	af 93       	push	r26
    11e2:	aa 27       	eor	r26, r26
    11e4:	64 9f       	mul	r22, r20
    11e6:	b0 0d       	add	r27, r0
    11e8:	e1 1d       	adc	r30, r1
    11ea:	73 9f       	mul	r23, r19
    11ec:	b0 0d       	add	r27, r0
    11ee:	e1 1d       	adc	r30, r1
    11f0:	aa 1f       	adc	r26, r26
    11f2:	66 27       	eor	r22, r22
    11f4:	82 9f       	mul	r24, r18
    11f6:	b0 0d       	add	r27, r0
    11f8:	e1 1d       	adc	r30, r1
    11fa:	a6 1f       	adc	r26, r22
    11fc:	55 27       	eor	r21, r21
    11fe:	74 9f       	mul	r23, r20
    1200:	e0 0d       	add	r30, r0
    1202:	a1 1d       	adc	r26, r1
    1204:	55 1f       	adc	r21, r21
    1206:	83 9f       	mul	r24, r19
    1208:	e0 0d       	add	r30, r0
    120a:	a1 1d       	adc	r26, r1
    120c:	56 1f       	adc	r21, r22
    120e:	84 9f       	mul	r24, r20
    1210:	a0 0d       	add	r26, r0
    1212:	51 1d       	adc	r21, r1
    1214:	85 2f       	mov	r24, r21
    1216:	7a 2f       	mov	r23, r26
    1218:	6e 2f       	mov	r22, r30
    121a:	1f 90       	pop	r1
    121c:	0f 90       	pop	r0
    121e:	88 23       	and	r24, r24
    1220:	1a f4       	brpl	.+6      	; 0x1228 <__mulsf3x+0x7a>
    1222:	93 95       	inc	r25
    1224:	39 f4       	brne	.+14     	; 0x1234 <__mulsf3x+0x86>
    1226:	8f cf       	rjmp	.-226    	; 0x1146 <__fp_nan>
    1228:	00 0c       	add	r0, r0
    122a:	11 1c       	adc	r1, r1
    122c:	bb 1f       	adc	r27, r27
    122e:	66 1f       	adc	r22, r22
    1230:	77 1f       	adc	r23, r23
    1232:	88 1f       	adc	r24, r24
    1234:	01 28       	or	r0, r1
    1236:	08 95       	ret
