
ledmeter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000018a6  00000000  00000000  00000094  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  000018a6  0000193a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000016  0080007c  0080007c  00001956  2**0
                  ALLOC
  3 .noinit       00000000  00800092  00800092  00001956  2**0
                  CONTENTS
  4 .eeprom       00000000  00810000  00810000  00001956  2**0
                  CONTENTS
  5 .stab         00001c38  00000000  00000000  00001958  2**2
                  CONTENTS, READONLY, DEBUGGING
  6 .stabstr      00000d0e  00000000  00000000  00003590  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
       0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
       2:	6f c7       	rjmp	.+3806   	; 0xee2 <__vector_1>
       4:	2c c0       	rjmp	.+88     	; 0x5e <__bad_interrupt>
       6:	2b c0       	rjmp	.+86     	; 0x5e <__bad_interrupt>
       8:	2a c0       	rjmp	.+84     	; 0x5e <__bad_interrupt>
       a:	29 c0       	rjmp	.+82     	; 0x5e <__bad_interrupt>
       c:	28 c0       	rjmp	.+80     	; 0x5e <__bad_interrupt>
       e:	27 c0       	rjmp	.+78     	; 0x5e <__bad_interrupt>
      10:	26 c0       	rjmp	.+76     	; 0x5e <__bad_interrupt>
      12:	25 c0       	rjmp	.+74     	; 0x5e <__bad_interrupt>
      14:	24 c0       	rjmp	.+72     	; 0x5e <__bad_interrupt>
      16:	23 c0       	rjmp	.+70     	; 0x5e <__bad_interrupt>
      18:	22 c0       	rjmp	.+68     	; 0x5e <__bad_interrupt>
      1a:	21 c0       	rjmp	.+66     	; 0x5e <__bad_interrupt>
      1c:	20 c0       	rjmp	.+64     	; 0x5e <__bad_interrupt>
      1e:	1f c0       	rjmp	.+62     	; 0x5e <__bad_interrupt>
      20:	1e c0       	rjmp	.+60     	; 0x5e <__bad_interrupt>
      22:	1d c0       	rjmp	.+58     	; 0x5e <__bad_interrupt>
      24:	1c c0       	rjmp	.+56     	; 0x5e <__bad_interrupt>
      26:	1b c0       	rjmp	.+54     	; 0x5e <__bad_interrupt>
      28:	1a c0       	rjmp	.+52     	; 0x5e <__bad_interrupt>

0000002a <__ctors_end>:
      2a:	11 24       	eor	r1, r1
      2c:	1f be       	out	0x3f, r1	; 63
      2e:	cf e5       	ldi	r28, 0x5F	; 95
      30:	d2 e0       	ldi	r29, 0x02	; 2
      32:	de bf       	out	0x3e, r29	; 62
      34:	cd bf       	out	0x3d, r28	; 61

00000036 <__do_copy_data>:
      36:	10 e0       	ldi	r17, 0x00	; 0
      38:	a0 e6       	ldi	r26, 0x60	; 96
      3a:	b0 e0       	ldi	r27, 0x00	; 0
      3c:	e6 ea       	ldi	r30, 0xA6	; 166
      3e:	f8 e1       	ldi	r31, 0x18	; 24
      40:	02 c0       	rjmp	.+4      	; 0x46 <.do_copy_data_start>

00000042 <.do_copy_data_loop>:
      42:	05 90       	lpm	r0, Z+
      44:	0d 92       	st	X+, r0

00000046 <.do_copy_data_start>:
      46:	ac 37       	cpi	r26, 0x7C	; 124
      48:	b1 07       	cpc	r27, r17
      4a:	d9 f7       	brne	.-10     	; 0x42 <.do_copy_data_loop>

0000004c <__do_clear_bss>:
      4c:	10 e0       	ldi	r17, 0x00	; 0
      4e:	ac e7       	ldi	r26, 0x7C	; 124
      50:	b0 e0       	ldi	r27, 0x00	; 0
      52:	01 c0       	rjmp	.+2      	; 0x56 <.do_clear_bss_start>

00000054 <.do_clear_bss_loop>:
      54:	1d 92       	st	X+, r1

00000056 <.do_clear_bss_start>:
      56:	a2 39       	cpi	r26, 0x92	; 146
      58:	b1 07       	cpc	r27, r17
      5a:	e1 f7       	brne	.-8      	; 0x54 <.do_clear_bss_loop>
      5c:	3b c7       	rjmp	.+3702   	; 0xed4 <main>

0000005e <__bad_interrupt>:
      5e:	d0 cf       	rjmp	.-96     	; 0x0 <__vectors>

00000060 <init_time>:
time_typ current_time;
time_typ last_time;
time_typ best_time;

void init_time(time_typ * time) {
      60:	cf 93       	push	r28
      62:	df 93       	push	r29
      64:	cd b7       	in	r28, 0x3d	; 61
      66:	de b7       	in	r29, 0x3e	; 62
      68:	22 97       	sbiw	r28, 0x02	; 2
      6a:	0f b6       	in	r0, 0x3f	; 63
      6c:	f8 94       	cli
      6e:	de bf       	out	0x3e, r29	; 62
      70:	0f be       	out	0x3f, r0	; 63
      72:	cd bf       	out	0x3d, r28	; 61
      74:	9a 83       	std	Y+2, r25	; 0x02
      76:	89 83       	std	Y+1, r24	; 0x01
    time->hh = 0;
      78:	e9 81       	ldd	r30, Y+1	; 0x01
      7a:	fa 81       	ldd	r31, Y+2	; 0x02
      7c:	10 82       	st	Z, r1
    time->mm = 0;
      7e:	e9 81       	ldd	r30, Y+1	; 0x01
      80:	fa 81       	ldd	r31, Y+2	; 0x02
      82:	11 82       	std	Z+1, r1	; 0x01
    time->ss = 0;
      84:	e9 81       	ldd	r30, Y+1	; 0x01
      86:	fa 81       	ldd	r31, Y+2	; 0x02
      88:	12 82       	std	Z+2, r1	; 0x02
    time->xx = 0;
      8a:	e9 81       	ldd	r30, Y+1	; 0x01
      8c:	fa 81       	ldd	r31, Y+2	; 0x02
      8e:	14 82       	std	Z+4, r1	; 0x04
      90:	13 82       	std	Z+3, r1	; 0x03
      92:	22 96       	adiw	r28, 0x02	; 2
      94:	0f b6       	in	r0, 0x3f	; 63
      96:	f8 94       	cli
      98:	de bf       	out	0x3e, r29	; 62
      9a:	0f be       	out	0x3f, r0	; 63
      9c:	cd bf       	out	0x3d, r28	; 61
      9e:	df 91       	pop	r29
      a0:	cf 91       	pop	r28
      a2:	08 95       	ret

000000a4 <print_time>:
}

void print_time(time_typ * t) {
      a4:	cf 93       	push	r28
      a6:	df 93       	push	r29
      a8:	cd b7       	in	r28, 0x3d	; 61
      aa:	de b7       	in	r29, 0x3e	; 62
      ac:	22 97       	sbiw	r28, 0x02	; 2
      ae:	0f b6       	in	r0, 0x3f	; 63
      b0:	f8 94       	cli
      b2:	de bf       	out	0x3e, r29	; 62
      b4:	0f be       	out	0x3f, r0	; 63
      b6:	cd bf       	out	0x3d, r28	; 61
      b8:	9a 83       	std	Y+2, r25	; 0x02
      ba:	89 83       	std	Y+1, r24	; 0x01
    printf("===%02i:%02i:%02i:%03u===\n",t->hh,t->mm,t->ss,t->xx);
      bc:	e9 81       	ldd	r30, Y+1	; 0x01
      be:	fa 81       	ldd	r31, Y+2	; 0x02
      c0:	83 81       	ldd	r24, Z+3	; 0x03
      c2:	94 81       	ldd	r25, Z+4	; 0x04
      c4:	9f 93       	push	r25
      c6:	8f 93       	push	r24
      c8:	e9 81       	ldd	r30, Y+1	; 0x01
      ca:	fa 81       	ldd	r31, Y+2	; 0x02
      cc:	82 81       	ldd	r24, Z+2	; 0x02
      ce:	99 27       	eor	r25, r25
      d0:	9f 93       	push	r25
      d2:	8f 93       	push	r24
      d4:	e9 81       	ldd	r30, Y+1	; 0x01
      d6:	fa 81       	ldd	r31, Y+2	; 0x02
      d8:	81 81       	ldd	r24, Z+1	; 0x01
      da:	99 27       	eor	r25, r25
      dc:	9f 93       	push	r25
      de:	8f 93       	push	r24
      e0:	e9 81       	ldd	r30, Y+1	; 0x01
      e2:	fa 81       	ldd	r31, Y+2	; 0x02
      e4:	80 81       	ld	r24, Z
      e6:	99 27       	eor	r25, r25
      e8:	9f 93       	push	r25
      ea:	8f 93       	push	r24
      ec:	80 e6       	ldi	r24, 0x60	; 96
      ee:	90 e0       	ldi	r25, 0x00	; 0
      f0:	9f 93       	push	r25
      f2:	8f 93       	push	r24
      f4:	1f d7       	rcall	.+3646   	; 0xf34 <printf>
      f6:	8d b7       	in	r24, 0x3d	; 61
      f8:	9e b7       	in	r25, 0x3e	; 62
      fa:	0a 96       	adiw	r24, 0x0a	; 10
      fc:	0f b6       	in	r0, 0x3f	; 63
      fe:	f8 94       	cli
     100:	9e bf       	out	0x3e, r25	; 62
     102:	0f be       	out	0x3f, r0	; 63
     104:	8d bf       	out	0x3d, r24	; 61
     106:	22 96       	adiw	r28, 0x02	; 2
     108:	0f b6       	in	r0, 0x3f	; 63
     10a:	f8 94       	cli
     10c:	de bf       	out	0x3e, r29	; 62
     10e:	0f be       	out	0x3f, r0	; 63
     110:	cd bf       	out	0x3d, r28	; 61
     112:	df 91       	pop	r29
     114:	cf 91       	pop	r28
     116:	08 95       	ret

00000118 <copy_time>:
}

void copy_time(time_typ * time_source, time_typ * time_dest) { // TO TEST (pointer ?)
     118:	cf 93       	push	r28
     11a:	df 93       	push	r29
     11c:	cd b7       	in	r28, 0x3d	; 61
     11e:	de b7       	in	r29, 0x3e	; 62
     120:	24 97       	sbiw	r28, 0x04	; 4
     122:	0f b6       	in	r0, 0x3f	; 63
     124:	f8 94       	cli
     126:	de bf       	out	0x3e, r29	; 62
     128:	0f be       	out	0x3f, r0	; 63
     12a:	cd bf       	out	0x3d, r28	; 61
     12c:	9a 83       	std	Y+2, r25	; 0x02
     12e:	89 83       	std	Y+1, r24	; 0x01
     130:	7c 83       	std	Y+4, r23	; 0x04
     132:	6b 83       	std	Y+3, r22	; 0x03
    time_dest->hh = time_source->hh;
     134:	ab 81       	ldd	r26, Y+3	; 0x03
     136:	bc 81       	ldd	r27, Y+4	; 0x04
     138:	e9 81       	ldd	r30, Y+1	; 0x01
     13a:	fa 81       	ldd	r31, Y+2	; 0x02
     13c:	80 81       	ld	r24, Z
     13e:	8c 93       	st	X, r24
    time_dest->mm = time_source->mm;
     140:	ab 81       	ldd	r26, Y+3	; 0x03
     142:	bc 81       	ldd	r27, Y+4	; 0x04
     144:	e9 81       	ldd	r30, Y+1	; 0x01
     146:	fa 81       	ldd	r31, Y+2	; 0x02
     148:	81 81       	ldd	r24, Z+1	; 0x01
     14a:	fd 01       	movw	r30, r26
     14c:	81 83       	std	Z+1, r24	; 0x01
    time_dest->ss = time_source->ss;
     14e:	ab 81       	ldd	r26, Y+3	; 0x03
     150:	bc 81       	ldd	r27, Y+4	; 0x04
     152:	e9 81       	ldd	r30, Y+1	; 0x01
     154:	fa 81       	ldd	r31, Y+2	; 0x02
     156:	82 81       	ldd	r24, Z+2	; 0x02
     158:	fd 01       	movw	r30, r26
     15a:	82 83       	std	Z+2, r24	; 0x02
    time_dest->xx = time_source->xx;
     15c:	ab 81       	ldd	r26, Y+3	; 0x03
     15e:	bc 81       	ldd	r27, Y+4	; 0x04
     160:	e9 81       	ldd	r30, Y+1	; 0x01
     162:	fa 81       	ldd	r31, Y+2	; 0x02
     164:	83 81       	ldd	r24, Z+3	; 0x03
     166:	94 81       	ldd	r25, Z+4	; 0x04
     168:	fd 01       	movw	r30, r26
     16a:	94 83       	std	Z+4, r25	; 0x04
     16c:	83 83       	std	Z+3, r24	; 0x03
     16e:	24 96       	adiw	r28, 0x04	; 4
     170:	0f b6       	in	r0, 0x3f	; 63
     172:	f8 94       	cli
     174:	de bf       	out	0x3e, r29	; 62
     176:	0f be       	out	0x3f, r0	; 63
     178:	cd bf       	out	0x3d, r28	; 61
     17a:	df 91       	pop	r29
     17c:	cf 91       	pop	r28
     17e:	08 95       	ret

00000180 <compare_time>:
}

uint8_t compare_time(time_typ * time1, time_typ * time2) {
     180:	cf 93       	push	r28
     182:	df 93       	push	r29
     184:	cd b7       	in	r28, 0x3d	; 61
     186:	de b7       	in	r29, 0x3e	; 62
     188:	24 97       	sbiw	r28, 0x04	; 4
     18a:	0f b6       	in	r0, 0x3f	; 63
     18c:	f8 94       	cli
     18e:	de bf       	out	0x3e, r29	; 62
     190:	0f be       	out	0x3f, r0	; 63
     192:	cd bf       	out	0x3d, r28	; 61
     194:	9a 83       	std	Y+2, r25	; 0x02
     196:	89 83       	std	Y+1, r24	; 0x01
     198:	7c 83       	std	Y+4, r23	; 0x04
     19a:	6b 83       	std	Y+3, r22	; 0x03
    //  0 time1=time2
    // -1 time1<time2
    //  1 time1>time2
    return 0;
     19c:	80 e0       	ldi	r24, 0x00	; 0
     19e:	90 e0       	ldi	r25, 0x00	; 0
     1a0:	24 96       	adiw	r28, 0x04	; 4
     1a2:	0f b6       	in	r0, 0x3f	; 63
     1a4:	f8 94       	cli
     1a6:	de bf       	out	0x3e, r29	; 62
     1a8:	0f be       	out	0x3f, r0	; 63
     1aa:	cd bf       	out	0x3d, r28	; 61
     1ac:	df 91       	pop	r29
     1ae:	cf 91       	pop	r28
     1b0:	08 95       	ret

000001b2 <inc_time>:
}

void inc_time(time_typ * time) {
     1b2:	cf 93       	push	r28
     1b4:	df 93       	push	r29
     1b6:	cd b7       	in	r28, 0x3d	; 61
     1b8:	de b7       	in	r29, 0x3e	; 62
     1ba:	2e 97       	sbiw	r28, 0x0e	; 14
     1bc:	0f b6       	in	r0, 0x3f	; 63
     1be:	f8 94       	cli
     1c0:	de bf       	out	0x3e, r29	; 62
     1c2:	0f be       	out	0x3f, r0	; 63
     1c4:	cd bf       	out	0x3d, r28	; 61
     1c6:	9a 83       	std	Y+2, r25	; 0x02
     1c8:	89 83       	std	Y+1, r24	; 0x01
  if (running_chronometer) {
     1ca:	80 91 7c 00 	lds	r24, 0x007C
     1ce:	88 23       	and	r24, r24
     1d0:	09 f4       	brne	.+2      	; 0x1d4 <inc_time+0x22>
     1d2:	8f c0       	rjmp	.+286    	; 0x2f2 <__stack+0x93>
    time->xx++;
     1d4:	a9 81       	ldd	r26, Y+1	; 0x01
     1d6:	ba 81       	ldd	r27, Y+2	; 0x02
     1d8:	e9 81       	ldd	r30, Y+1	; 0x01
     1da:	fa 81       	ldd	r31, Y+2	; 0x02
     1dc:	83 81       	ldd	r24, Z+3	; 0x03
     1de:	94 81       	ldd	r25, Z+4	; 0x04
     1e0:	01 96       	adiw	r24, 0x01	; 1
     1e2:	fd 01       	movw	r30, r26
     1e4:	94 83       	std	Z+4, r25	; 0x04
     1e6:	83 83       	std	Z+3, r24	; 0x03
    if(time->xx >= 1000) {
     1e8:	e9 81       	ldd	r30, Y+1	; 0x01
     1ea:	fa 81       	ldd	r31, Y+2	; 0x02
     1ec:	83 81       	ldd	r24, Z+3	; 0x03
     1ee:	94 81       	ldd	r25, Z+4	; 0x04
     1f0:	f3 e0       	ldi	r31, 0x03	; 3
     1f2:	88 3e       	cpi	r24, 0xE8	; 232
     1f4:	9f 07       	cpc	r25, r31
     1f6:	98 f1       	brcs	.+102    	; 0x25e <inc_time+0xac>
        time->xx = 0;
     1f8:	e9 81       	ldd	r30, Y+1	; 0x01
     1fa:	fa 81       	ldd	r31, Y+2	; 0x02
     1fc:	14 82       	std	Z+4, r1	; 0x04
     1fe:	13 82       	std	Z+3, r1	; 0x03
        time->ss++;
     200:	a9 81       	ldd	r26, Y+1	; 0x01
     202:	ba 81       	ldd	r27, Y+2	; 0x02
     204:	e9 81       	ldd	r30, Y+1	; 0x01
     206:	fa 81       	ldd	r31, Y+2	; 0x02
     208:	82 81       	ldd	r24, Z+2	; 0x02
     20a:	8f 5f       	subi	r24, 0xFF	; 255
     20c:	fd 01       	movw	r30, r26
     20e:	82 83       	std	Z+2, r24	; 0x02
        if (time->ss >= 60) {
     210:	e9 81       	ldd	r30, Y+1	; 0x01
     212:	fa 81       	ldd	r31, Y+2	; 0x02
     214:	82 81       	ldd	r24, Z+2	; 0x02
     216:	8c 33       	cpi	r24, 0x3C	; 60
     218:	10 f1       	brcs	.+68     	; 0x25e <inc_time+0xac>
            time->ss = 0;
     21a:	e9 81       	ldd	r30, Y+1	; 0x01
     21c:	fa 81       	ldd	r31, Y+2	; 0x02
     21e:	12 82       	std	Z+2, r1	; 0x02
            time->mm++;
     220:	a9 81       	ldd	r26, Y+1	; 0x01
     222:	ba 81       	ldd	r27, Y+2	; 0x02
     224:	e9 81       	ldd	r30, Y+1	; 0x01
     226:	fa 81       	ldd	r31, Y+2	; 0x02
     228:	81 81       	ldd	r24, Z+1	; 0x01
     22a:	8f 5f       	subi	r24, 0xFF	; 255
     22c:	fd 01       	movw	r30, r26
     22e:	81 83       	std	Z+1, r24	; 0x01
            if (time->mm >= 60) {
     230:	e9 81       	ldd	r30, Y+1	; 0x01
     232:	fa 81       	ldd	r31, Y+2	; 0x02
     234:	81 81       	ldd	r24, Z+1	; 0x01
     236:	8c 33       	cpi	r24, 0x3C	; 60
     238:	90 f0       	brcs	.+36     	; 0x25e <inc_time+0xac>
                time->mm = 0;
     23a:	e9 81       	ldd	r30, Y+1	; 0x01
     23c:	fa 81       	ldd	r31, Y+2	; 0x02
     23e:	11 82       	std	Z+1, r1	; 0x01
                time->hh++;
     240:	a9 81       	ldd	r26, Y+1	; 0x01
     242:	ba 81       	ldd	r27, Y+2	; 0x02
     244:	e9 81       	ldd	r30, Y+1	; 0x01
     246:	fa 81       	ldd	r31, Y+2	; 0x02
     248:	80 81       	ld	r24, Z
     24a:	8f 5f       	subi	r24, 0xFF	; 255
     24c:	8c 93       	st	X, r24
                if (time->hh >= 24) {
     24e:	e9 81       	ldd	r30, Y+1	; 0x01
     250:	fa 81       	ldd	r31, Y+2	; 0x02
     252:	80 81       	ld	r24, Z
     254:	88 31       	cpi	r24, 0x18	; 24
     256:	18 f0       	brcs	.+6      	; 0x25e <inc_time+0xac>
                    time->hh = 0;
     258:	e9 81       	ldd	r30, Y+1	; 0x01
     25a:	fa 81       	ldd	r31, Y+2	; 0x02
     25c:	10 82       	st	Z, r1
   The maximal possible delay is 262.14 ms / F_CPU in MHz.
 */
void
_delay_ms(double __ms)
{
     25e:	80 e0       	ldi	r24, 0x00	; 0
     260:	90 e0       	ldi	r25, 0x00	; 0
     262:	a0 e8       	ldi	r26, 0x80	; 128
     264:	bf e3       	ldi	r27, 0x3F	; 63
     266:	8b 83       	std	Y+3, r24	; 0x03
     268:	9c 83       	std	Y+4, r25	; 0x04
     26a:	ad 83       	std	Y+5, r26	; 0x05
     26c:	be 83       	std	Y+6, r27	; 0x06
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     26e:	20 e0       	ldi	r18, 0x00	; 0
     270:	30 e0       	ldi	r19, 0x00	; 0
     272:	4a e7       	ldi	r20, 0x7A	; 122
     274:	53 e4       	ldi	r21, 0x43	; 67
     276:	6b 81       	ldd	r22, Y+3	; 0x03
     278:	7c 81       	ldd	r23, Y+4	; 0x04
     27a:	8d 81       	ldd	r24, Y+5	; 0x05
     27c:	9e 81       	ldd	r25, Y+6	; 0x06
     27e:	72 da       	rcall	.-2844   	; 0xfffff764 <__eeprom_end+0xff7ef764>
     280:	dc 01       	movw	r26, r24
     282:	cb 01       	movw	r24, r22
     284:	89 87       	std	Y+9, r24	; 0x09
     286:	9a 87       	std	Y+10, r25	; 0x0a
     288:	ab 87       	std	Y+11, r26	; 0x0b
     28a:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
     28c:	20 e0       	ldi	r18, 0x00	; 0
     28e:	30 e0       	ldi	r19, 0x00	; 0
     290:	40 e8       	ldi	r20, 0x80	; 128
     292:	5f e3       	ldi	r21, 0x3F	; 63
     294:	69 85       	ldd	r22, Y+9	; 0x09
     296:	7a 85       	ldd	r23, Y+10	; 0x0a
     298:	8b 85       	ldd	r24, Y+11	; 0x0b
     29a:	9c 85       	ldd	r25, Y+12	; 0x0c
     29c:	f3 d9       	rcall	.-3098   	; 0xfffff684 <__eeprom_end+0xff7ef684>
     29e:	88 23       	and	r24, r24
     2a0:	0c f0       	brlt	.+2      	; 0x2a4 <__stack+0x45>
     2a2:	05 c0       	rjmp	.+10     	; 0x2ae <__stack+0x4f>
		__ticks = 1;
     2a4:	81 e0       	ldi	r24, 0x01	; 1
     2a6:	90 e0       	ldi	r25, 0x00	; 0
     2a8:	98 87       	std	Y+8, r25	; 0x08
     2aa:	8f 83       	std	Y+7, r24	; 0x07
     2ac:	18 c0       	rjmp	.+48     	; 0x2de <__stack+0x7f>
	else if (__tmp > 65535)
     2ae:	20 e0       	ldi	r18, 0x00	; 0
     2b0:	3f ef       	ldi	r19, 0xFF	; 255
     2b2:	4f e7       	ldi	r20, 0x7F	; 127
     2b4:	57 e4       	ldi	r21, 0x47	; 71
     2b6:	69 85       	ldd	r22, Y+9	; 0x09
     2b8:	7a 85       	ldd	r23, Y+10	; 0x0a
     2ba:	8b 85       	ldd	r24, Y+11	; 0x0b
     2bc:	9c 85       	ldd	r25, Y+12	; 0x0c
     2be:	e5 d9       	rcall	.-3126   	; 0xfffff68a <__eeprom_end+0xff7ef68a>
     2c0:	18 16       	cp	r1, r24
     2c2:	0c f0       	brlt	.+2      	; 0x2c6 <__stack+0x67>
     2c4:	03 c0       	rjmp	.+6      	; 0x2cc <__stack+0x6d>
		__ticks = 0;	/* i.e. 65536 */
     2c6:	18 86       	std	Y+8, r1	; 0x08
     2c8:	1f 82       	std	Y+7, r1	; 0x07
     2ca:	09 c0       	rjmp	.+18     	; 0x2de <__stack+0x7f>
	else
		__ticks = (uint16_t)__tmp;
     2cc:	69 85       	ldd	r22, Y+9	; 0x09
     2ce:	7a 85       	ldd	r23, Y+10	; 0x0a
     2d0:	8b 85       	ldd	r24, Y+11	; 0x0b
     2d2:	9c 85       	ldd	r25, Y+12	; 0x0c
     2d4:	97 d9       	rcall	.-3282   	; 0xfffff604 <__eeprom_end+0xff7ef604>
     2d6:	dc 01       	movw	r26, r24
     2d8:	cb 01       	movw	r24, r22
     2da:	98 87       	std	Y+8, r25	; 0x08
     2dc:	8f 83       	std	Y+7, r24	; 0x07
     2de:	8f 81       	ldd	r24, Y+7	; 0x07
     2e0:	98 85       	ldd	r25, Y+8	; 0x08
     2e2:	9e 87       	std	Y+14, r25	; 0x0e
     2e4:	8d 87       	std	Y+13, r24	; 0x0d
     2e6:	8d 85       	ldd	r24, Y+13	; 0x0d
     2e8:	9e 85       	ldd	r25, Y+14	; 0x0e
     2ea:	01 97       	sbiw	r24, 0x01	; 1
     2ec:	f1 f7       	brne	.-4      	; 0x2ea <__stack+0x8b>
     2ee:	9e 87       	std	Y+14, r25	; 0x0e
     2f0:	8d 87       	std	Y+13, r24	; 0x0d
     2f2:	2e 96       	adiw	r28, 0x0e	; 14
     2f4:	0f b6       	in	r0, 0x3f	; 63
     2f6:	f8 94       	cli
     2f8:	de bf       	out	0x3e, r29	; 62
     2fa:	0f be       	out	0x3f, r0	; 63
     2fc:	cd bf       	out	0x3d, r28	; 61
     2fe:	df 91       	pop	r29
     300:	cf 91       	pop	r28
     302:	08 95       	ret

00000304 <switch_on_all_leds>:
					 }
            }
        }
    }
    _delay_ms(1);
  }
}



/*
void switch_on_all_leds();
void switch_off_all_leds();
void switch_on_led(uint8_t led);
void switch_off_led(uint8_t led);
void loop(void);
void init(void);
*/

// 1=off
// 0=on

/*
 * switch on all leds
 */
void switch_on_all_leds(void) {
     304:	cf 93       	push	r28
     306:	df 93       	push	r29
     308:	cd b7       	in	r28, 0x3d	; 61
     30a:	de b7       	in	r29, 0x3e	; 62
    PORTC = 0x00;
     30c:	10 92 35 00 	sts	0x0035, r1
     310:	df 91       	pop	r29
     312:	cf 91       	pop	r28
     314:	08 95       	ret

00000316 <switch_off_all_leds>:
}

/*
 * switch off all leds
 */
void switch_off_all_leds(void) {
     316:	cf 93       	push	r28
     318:	df 93       	push	r29
     31a:	cd b7       	in	r28, 0x3d	; 61
     31c:	de b7       	in	r29, 0x3e	; 62
    PORTC = 0xFF;
     31e:	8f ef       	ldi	r24, 0xFF	; 255
     320:	80 93 35 00 	sts	0x0035, r24
     324:	df 91       	pop	r29
     326:	cf 91       	pop	r28
     328:	08 95       	ret

0000032a <switch_on_led>:
}

// led from 1 to 8 (LEDSNUM)
// PCx with w from 0 to 7

/*
 * switch on the led with the number called "led"
 */
void switch_on_led(uint8_t led) {
     32a:	cf 93       	push	r28
     32c:	df 93       	push	r29
     32e:	cd b7       	in	r28, 0x3d	; 61
     330:	de b7       	in	r29, 0x3e	; 62
     332:	23 97       	sbiw	r28, 0x03	; 3
     334:	0f b6       	in	r0, 0x3f	; 63
     336:	f8 94       	cli
     338:	de bf       	out	0x3e, r29	; 62
     33a:	0f be       	out	0x3f, r0	; 63
     33c:	cd bf       	out	0x3d, r28	; 61
     33e:	89 83       	std	Y+1, r24	; 0x01
    uint8_t pin = led - 1;
     340:	89 81       	ldd	r24, Y+1	; 0x01
     342:	81 50       	subi	r24, 0x01	; 1
     344:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t mask = ~(1<<pin);
     346:	8a 81       	ldd	r24, Y+2	; 0x02
     348:	28 2f       	mov	r18, r24
     34a:	33 27       	eor	r19, r19
     34c:	81 e0       	ldi	r24, 0x01	; 1
     34e:	90 e0       	ldi	r25, 0x00	; 0
     350:	02 c0       	rjmp	.+4      	; 0x356 <switch_on_led+0x2c>
     352:	88 0f       	add	r24, r24
     354:	99 1f       	adc	r25, r25
     356:	2a 95       	dec	r18
     358:	e2 f7       	brpl	.-8      	; 0x352 <switch_on_led+0x28>
     35a:	80 95       	com	r24
     35c:	8b 83       	std	Y+3, r24	; 0x03
    PORTC&=mask;
     35e:	90 91 35 00 	lds	r25, 0x0035
     362:	8b 81       	ldd	r24, Y+3	; 0x03
     364:	89 23       	and	r24, r25
     366:	80 93 35 00 	sts	0x0035, r24
     36a:	23 96       	adiw	r28, 0x03	; 3
     36c:	0f b6       	in	r0, 0x3f	; 63
     36e:	f8 94       	cli
     370:	de bf       	out	0x3e, r29	; 62
     372:	0f be       	out	0x3f, r0	; 63
     374:	cd bf       	out	0x3d, r28	; 61
     376:	df 91       	pop	r29
     378:	cf 91       	pop	r28
     37a:	08 95       	ret

0000037c <switch_off_led>:
}

/*
 * switch off the led with the number called "led"
 */
void switch_off_led(uint8_t led) {
     37c:	cf 93       	push	r28
     37e:	df 93       	push	r29
     380:	cd b7       	in	r28, 0x3d	; 61
     382:	de b7       	in	r29, 0x3e	; 62
     384:	23 97       	sbiw	r28, 0x03	; 3
     386:	0f b6       	in	r0, 0x3f	; 63
     388:	f8 94       	cli
     38a:	de bf       	out	0x3e, r29	; 62
     38c:	0f be       	out	0x3f, r0	; 63
     38e:	cd bf       	out	0x3d, r28	; 61
     390:	89 83       	std	Y+1, r24	; 0x01
    uint8_t pin = led - 1;
     392:	89 81       	ldd	r24, Y+1	; 0x01
     394:	81 50       	subi	r24, 0x01	; 1
     396:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t mask = (1<<pin);
     398:	8a 81       	ldd	r24, Y+2	; 0x02
     39a:	28 2f       	mov	r18, r24
     39c:	33 27       	eor	r19, r19
     39e:	81 e0       	ldi	r24, 0x01	; 1
     3a0:	90 e0       	ldi	r25, 0x00	; 0
     3a2:	02 c0       	rjmp	.+4      	; 0x3a8 <switch_off_led+0x2c>
     3a4:	88 0f       	add	r24, r24
     3a6:	99 1f       	adc	r25, r25
     3a8:	2a 95       	dec	r18
     3aa:	e2 f7       	brpl	.-8      	; 0x3a4 <switch_off_led+0x28>
     3ac:	8b 83       	std	Y+3, r24	; 0x03
    PORTC|=mask;
     3ae:	90 91 35 00 	lds	r25, 0x0035
     3b2:	8b 81       	ldd	r24, Y+3	; 0x03
     3b4:	89 2b       	or	r24, r25
     3b6:	80 93 35 00 	sts	0x0035, r24
     3ba:	23 96       	adiw	r28, 0x03	; 3
     3bc:	0f b6       	in	r0, 0x3f	; 63
     3be:	f8 94       	cli
     3c0:	de bf       	out	0x3e, r29	; 62
     3c2:	0f be       	out	0x3f, r0	; 63
     3c4:	cd bf       	out	0x3d, r28	; 61
     3c6:	df 91       	pop	r29
     3c8:	cf 91       	pop	r28
     3ca:	08 95       	ret

000003cc <switch_on_leds_with_delay>:
}

/*
 * switch on every leds one after one with a delay (called "delay")
 */
void switch_on_leds_with_delay(double delay) {
     3cc:	cf 93       	push	r28
     3ce:	df 93       	push	r29
     3d0:	cd b7       	in	r28, 0x3d	; 61
     3d2:	de b7       	in	r29, 0x3e	; 62
     3d4:	61 97       	sbiw	r28, 0x11	; 17
     3d6:	0f b6       	in	r0, 0x3f	; 63
     3d8:	f8 94       	cli
     3da:	de bf       	out	0x3e, r29	; 62
     3dc:	0f be       	out	0x3f, r0	; 63
     3de:	cd bf       	out	0x3d, r28	; 61
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
    uint8_t i;
    for(i = 1; i<=Nleds; i++) {
     3e8:	81 e0       	ldi	r24, 0x01	; 1
     3ea:	8d 83       	std	Y+5, r24	; 0x05
     3ec:	8d 81       	ldd	r24, Y+5	; 0x05
     3ee:	89 30       	cpi	r24, 0x09	; 9
     3f0:	08 f0       	brcs	.+2      	; 0x3f4 <switch_on_leds_with_delay+0x28>
     3f2:	50 c0       	rjmp	.+160    	; 0x494 <switch_on_leds_with_delay+0xc8>
   The maximal possible delay is 262.14 ms / F_CPU in MHz.
 */
void
_delay_ms(double __ms)
{
     3f4:	89 81       	ldd	r24, Y+1	; 0x01
     3f6:	9a 81       	ldd	r25, Y+2	; 0x02
     3f8:	ab 81       	ldd	r26, Y+3	; 0x03
     3fa:	bc 81       	ldd	r27, Y+4	; 0x04
     3fc:	8e 83       	std	Y+6, r24	; 0x06
     3fe:	9f 83       	std	Y+7, r25	; 0x07
     400:	a8 87       	std	Y+8, r26	; 0x08
     402:	b9 87       	std	Y+9, r27	; 0x09
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     404:	20 e0       	ldi	r18, 0x00	; 0
     406:	30 e0       	ldi	r19, 0x00	; 0
     408:	4a e7       	ldi	r20, 0x7A	; 122
     40a:	53 e4       	ldi	r21, 0x43	; 67
     40c:	6e 81       	ldd	r22, Y+6	; 0x06
     40e:	7f 81       	ldd	r23, Y+7	; 0x07
     410:	88 85       	ldd	r24, Y+8	; 0x08
     412:	99 85       	ldd	r25, Y+9	; 0x09
     414:	a7 d9       	rcall	.-3250   	; 0xfffff764 <__eeprom_end+0xff7ef764>
     416:	dc 01       	movw	r26, r24
     418:	cb 01       	movw	r24, r22
     41a:	8c 87       	std	Y+12, r24	; 0x0c
     41c:	9d 87       	std	Y+13, r25	; 0x0d
     41e:	ae 87       	std	Y+14, r26	; 0x0e
     420:	bf 87       	std	Y+15, r27	; 0x0f
	if (__tmp < 1.0)
     422:	20 e0       	ldi	r18, 0x00	; 0
     424:	30 e0       	ldi	r19, 0x00	; 0
     426:	40 e8       	ldi	r20, 0x80	; 128
     428:	5f e3       	ldi	r21, 0x3F	; 63
     42a:	6c 85       	ldd	r22, Y+12	; 0x0c
     42c:	7d 85       	ldd	r23, Y+13	; 0x0d
     42e:	8e 85       	ldd	r24, Y+14	; 0x0e
     430:	9f 85       	ldd	r25, Y+15	; 0x0f
     432:	28 d9       	rcall	.-3504   	; 0xfffff684 <__eeprom_end+0xff7ef684>
     434:	88 23       	and	r24, r24
     436:	0c f0       	brlt	.+2      	; 0x43a <switch_on_leds_with_delay+0x6e>
     438:	05 c0       	rjmp	.+10     	; 0x444 <switch_on_leds_with_delay+0x78>
		__ticks = 1;
     43a:	81 e0       	ldi	r24, 0x01	; 1
     43c:	90 e0       	ldi	r25, 0x00	; 0
     43e:	9b 87       	std	Y+11, r25	; 0x0b
     440:	8a 87       	std	Y+10, r24	; 0x0a
     442:	18 c0       	rjmp	.+48     	; 0x474 <switch_on_leds_with_delay+0xa8>
	else if (__tmp > 65535)
     444:	20 e0       	ldi	r18, 0x00	; 0
     446:	3f ef       	ldi	r19, 0xFF	; 255
     448:	4f e7       	ldi	r20, 0x7F	; 127
     44a:	57 e4       	ldi	r21, 0x47	; 71
     44c:	6c 85       	ldd	r22, Y+12	; 0x0c
     44e:	7d 85       	ldd	r23, Y+13	; 0x0d
     450:	8e 85       	ldd	r24, Y+14	; 0x0e
     452:	9f 85       	ldd	r25, Y+15	; 0x0f
     454:	1a d9       	rcall	.-3532   	; 0xfffff68a <__eeprom_end+0xff7ef68a>
     456:	18 16       	cp	r1, r24
     458:	0c f0       	brlt	.+2      	; 0x45c <switch_on_leds_with_delay+0x90>
     45a:	03 c0       	rjmp	.+6      	; 0x462 <switch_on_leds_with_delay+0x96>
		__ticks = 0;	/* i.e. 65536 */
     45c:	1b 86       	std	Y+11, r1	; 0x0b
     45e:	1a 86       	std	Y+10, r1	; 0x0a
     460:	09 c0       	rjmp	.+18     	; 0x474 <switch_on_leds_with_delay+0xa8>
	else
		__ticks = (uint16_t)__tmp;
     462:	6c 85       	ldd	r22, Y+12	; 0x0c
     464:	7d 85       	ldd	r23, Y+13	; 0x0d
     466:	8e 85       	ldd	r24, Y+14	; 0x0e
     468:	9f 85       	ldd	r25, Y+15	; 0x0f
     46a:	cc d8       	rcall	.-3688   	; 0xfffff604 <__eeprom_end+0xff7ef604>
     46c:	dc 01       	movw	r26, r24
     46e:	cb 01       	movw	r24, r22
     470:	9b 87       	std	Y+11, r25	; 0x0b
     472:	8a 87       	std	Y+10, r24	; 0x0a
     474:	8a 85       	ldd	r24, Y+10	; 0x0a
     476:	9b 85       	ldd	r25, Y+11	; 0x0b
     478:	99 8b       	std	Y+17, r25	; 0x11
     47a:	88 8b       	std	Y+16, r24	; 0x10
     47c:	88 89       	ldd	r24, Y+16	; 0x10
     47e:	99 89       	ldd	r25, Y+17	; 0x11
     480:	01 97       	sbiw	r24, 0x01	; 1
     482:	f1 f7       	brne	.-4      	; 0x480 <switch_on_leds_with_delay+0xb4>
     484:	99 8b       	std	Y+17, r25	; 0x11
     486:	88 8b       	std	Y+16, r24	; 0x10
        _delay_ms(delay);
        switch_on_led(i);
     488:	8d 81       	ldd	r24, Y+5	; 0x05
     48a:	4f df       	rcall	.-354    	; 0x32a <switch_on_led>
     48c:	8d 81       	ldd	r24, Y+5	; 0x05
     48e:	8f 5f       	subi	r24, 0xFF	; 255
     490:	8d 83       	std	Y+5, r24	; 0x05
     492:	ac cf       	rjmp	.-168    	; 0x3ec <switch_on_leds_with_delay+0x20>
     494:	61 96       	adiw	r28, 0x11	; 17
     496:	0f b6       	in	r0, 0x3f	; 63
     498:	f8 94       	cli
     49a:	de bf       	out	0x3e, r29	; 62
     49c:	0f be       	out	0x3f, r0	; 63
     49e:	cd bf       	out	0x3d, r28	; 61
     4a0:	df 91       	pop	r29
     4a2:	cf 91       	pop	r28
     4a4:	08 95       	ret

000004a6 <switch_off_leds_with_delay>:
    }
}

/*
 * switch off every leds on after one with a delay (called "delay")
 */
void switch_off_leds_with_delay(double delay) {
     4a6:	cf 93       	push	r28
     4a8:	df 93       	push	r29
     4aa:	cd b7       	in	r28, 0x3d	; 61
     4ac:	de b7       	in	r29, 0x3e	; 62
     4ae:	61 97       	sbiw	r28, 0x11	; 17
     4b0:	0f b6       	in	r0, 0x3f	; 63
     4b2:	f8 94       	cli
     4b4:	de bf       	out	0x3e, r29	; 62
     4b6:	0f be       	out	0x3f, r0	; 63
     4b8:	cd bf       	out	0x3d, r28	; 61
     4ba:	69 83       	std	Y+1, r22	; 0x01
     4bc:	7a 83       	std	Y+2, r23	; 0x02
     4be:	8b 83       	std	Y+3, r24	; 0x03
     4c0:	9c 83       	std	Y+4, r25	; 0x04
    uint8_t i;
    for(i = Nleds; i>=1; i--) {
     4c2:	88 e0       	ldi	r24, 0x08	; 8
     4c4:	8d 83       	std	Y+5, r24	; 0x05
     4c6:	8d 81       	ldd	r24, Y+5	; 0x05
     4c8:	88 23       	and	r24, r24
     4ca:	09 f4       	brne	.+2      	; 0x4ce <switch_off_leds_with_delay+0x28>
     4cc:	50 c0       	rjmp	.+160    	; 0x56e <switch_off_leds_with_delay+0xc8>
   The maximal possible delay is 262.14 ms / F_CPU in MHz.
 */
void
_delay_ms(double __ms)
{
     4ce:	89 81       	ldd	r24, Y+1	; 0x01
     4d0:	9a 81       	ldd	r25, Y+2	; 0x02
     4d2:	ab 81       	ldd	r26, Y+3	; 0x03
     4d4:	bc 81       	ldd	r27, Y+4	; 0x04
     4d6:	8e 83       	std	Y+6, r24	; 0x06
     4d8:	9f 83       	std	Y+7, r25	; 0x07
     4da:	a8 87       	std	Y+8, r26	; 0x08
     4dc:	b9 87       	std	Y+9, r27	; 0x09
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     4de:	20 e0       	ldi	r18, 0x00	; 0
     4e0:	30 e0       	ldi	r19, 0x00	; 0
     4e2:	4a e7       	ldi	r20, 0x7A	; 122
     4e4:	53 e4       	ldi	r21, 0x43	; 67
     4e6:	6e 81       	ldd	r22, Y+6	; 0x06
     4e8:	7f 81       	ldd	r23, Y+7	; 0x07
     4ea:	88 85       	ldd	r24, Y+8	; 0x08
     4ec:	99 85       	ldd	r25, Y+9	; 0x09
     4ee:	3a d9       	rcall	.-3468   	; 0xfffff764 <__eeprom_end+0xff7ef764>
     4f0:	dc 01       	movw	r26, r24
     4f2:	cb 01       	movw	r24, r22
     4f4:	8c 87       	std	Y+12, r24	; 0x0c
     4f6:	9d 87       	std	Y+13, r25	; 0x0d
     4f8:	ae 87       	std	Y+14, r26	; 0x0e
     4fa:	bf 87       	std	Y+15, r27	; 0x0f
	if (__tmp < 1.0)
     4fc:	20 e0       	ldi	r18, 0x00	; 0
     4fe:	30 e0       	ldi	r19, 0x00	; 0
     500:	40 e8       	ldi	r20, 0x80	; 128
     502:	5f e3       	ldi	r21, 0x3F	; 63
     504:	6c 85       	ldd	r22, Y+12	; 0x0c
     506:	7d 85       	ldd	r23, Y+13	; 0x0d
     508:	8e 85       	ldd	r24, Y+14	; 0x0e
     50a:	9f 85       	ldd	r25, Y+15	; 0x0f
     50c:	bb d8       	rcall	.-3722   	; 0xfffff684 <__eeprom_end+0xff7ef684>
     50e:	88 23       	and	r24, r24
     510:	0c f0       	brlt	.+2      	; 0x514 <switch_off_leds_with_delay+0x6e>
     512:	05 c0       	rjmp	.+10     	; 0x51e <switch_off_leds_with_delay+0x78>
		__ticks = 1;
     514:	81 e0       	ldi	r24, 0x01	; 1
     516:	90 e0       	ldi	r25, 0x00	; 0
     518:	9b 87       	std	Y+11, r25	; 0x0b
     51a:	8a 87       	std	Y+10, r24	; 0x0a
     51c:	18 c0       	rjmp	.+48     	; 0x54e <switch_off_leds_with_delay+0xa8>
	else if (__tmp > 65535)
     51e:	20 e0       	ldi	r18, 0x00	; 0
     520:	3f ef       	ldi	r19, 0xFF	; 255
     522:	4f e7       	ldi	r20, 0x7F	; 127
     524:	57 e4       	ldi	r21, 0x47	; 71
     526:	6c 85       	ldd	r22, Y+12	; 0x0c
     528:	7d 85       	ldd	r23, Y+13	; 0x0d
     52a:	8e 85       	ldd	r24, Y+14	; 0x0e
     52c:	9f 85       	ldd	r25, Y+15	; 0x0f
     52e:	ad d8       	rcall	.-3750   	; 0xfffff68a <__eeprom_end+0xff7ef68a>
     530:	18 16       	cp	r1, r24
     532:	0c f0       	brlt	.+2      	; 0x536 <switch_off_leds_with_delay+0x90>
     534:	03 c0       	rjmp	.+6      	; 0x53c <switch_off_leds_with_delay+0x96>
		__ticks = 0;	/* i.e. 65536 */
     536:	1b 86       	std	Y+11, r1	; 0x0b
     538:	1a 86       	std	Y+10, r1	; 0x0a
     53a:	09 c0       	rjmp	.+18     	; 0x54e <switch_off_leds_with_delay+0xa8>
	else
		__ticks = (uint16_t)__tmp;
     53c:	6c 85       	ldd	r22, Y+12	; 0x0c
     53e:	7d 85       	ldd	r23, Y+13	; 0x0d
     540:	8e 85       	ldd	r24, Y+14	; 0x0e
     542:	9f 85       	ldd	r25, Y+15	; 0x0f
     544:	5f d8       	rcall	.-3906   	; 0xfffff604 <__eeprom_end+0xff7ef604>
     546:	dc 01       	movw	r26, r24
     548:	cb 01       	movw	r24, r22
     54a:	9b 87       	std	Y+11, r25	; 0x0b
     54c:	8a 87       	std	Y+10, r24	; 0x0a
     54e:	8a 85       	ldd	r24, Y+10	; 0x0a
     550:	9b 85       	ldd	r25, Y+11	; 0x0b
     552:	99 8b       	std	Y+17, r25	; 0x11
     554:	88 8b       	std	Y+16, r24	; 0x10
     556:	88 89       	ldd	r24, Y+16	; 0x10
     558:	99 89       	ldd	r25, Y+17	; 0x11
     55a:	01 97       	sbiw	r24, 0x01	; 1
     55c:	f1 f7       	brne	.-4      	; 0x55a <switch_off_leds_with_delay+0xb4>
     55e:	99 8b       	std	Y+17, r25	; 0x11
     560:	88 8b       	std	Y+16, r24	; 0x10
        _delay_ms(delay);
        switch_off_led(i);
     562:	8d 81       	ldd	r24, Y+5	; 0x05
     564:	0b df       	rcall	.-490    	; 0x37c <switch_off_led>
     566:	8d 81       	ldd	r24, Y+5	; 0x05
     568:	81 50       	subi	r24, 0x01	; 1
     56a:	8d 83       	std	Y+5, r24	; 0x05
     56c:	ac cf       	rjmp	.-168    	; 0x4c6 <switch_off_leds_with_delay+0x20>
     56e:	61 96       	adiw	r28, 0x11	; 17
     570:	0f b6       	in	r0, 0x3f	; 63
     572:	f8 94       	cli
     574:	de bf       	out	0x3e, r29	; 62
     576:	0f be       	out	0x3f, r0	; 63
     578:	cd bf       	out	0x3d, r28	; 61
     57a:	df 91       	pop	r29
     57c:	cf 91       	pop	r28
     57e:	08 95       	ret

00000580 <test_leds_up_down>:
    }
}

/*
 * a function for testing leds that switch on every leds and switch off every leds (one after one)
 */
void test_leds_up_down(void) {
     580:	cf 93       	push	r28
     582:	df 93       	push	r29
     584:	cd b7       	in	r28, 0x3d	; 61
     586:	de b7       	in	r29, 0x3e	; 62
     588:	2c 97       	sbiw	r28, 0x0c	; 12
     58a:	0f b6       	in	r0, 0x3f	; 63
     58c:	f8 94       	cli
     58e:	de bf       	out	0x3e, r29	; 62
     590:	0f be       	out	0x3f, r0	; 63
     592:	cd bf       	out	0x3d, r28	; 61
    switch_on_leds_with_delay(50); //100
     594:	60 e0       	ldi	r22, 0x00	; 0
     596:	70 e0       	ldi	r23, 0x00	; 0
     598:	88 e4       	ldi	r24, 0x48	; 72
     59a:	92 e4       	ldi	r25, 0x42	; 66
     59c:	17 df       	rcall	.-466    	; 0x3cc <switch_on_leds_with_delay>
   The maximal possible delay is 262.14 ms / F_CPU in MHz.
 */
void
_delay_ms(double __ms)
{
     59e:	80 e0       	ldi	r24, 0x00	; 0
     5a0:	90 e0       	ldi	r25, 0x00	; 0
     5a2:	a8 e4       	ldi	r26, 0x48	; 72
     5a4:	b2 e4       	ldi	r27, 0x42	; 66
     5a6:	89 83       	std	Y+1, r24	; 0x01
     5a8:	9a 83       	std	Y+2, r25	; 0x02
     5aa:	ab 83       	std	Y+3, r26	; 0x03
     5ac:	bc 83       	std	Y+4, r27	; 0x04
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     5ae:	20 e0       	ldi	r18, 0x00	; 0
     5b0:	30 e0       	ldi	r19, 0x00	; 0
     5b2:	4a e7       	ldi	r20, 0x7A	; 122
     5b4:	53 e4       	ldi	r21, 0x43	; 67
     5b6:	69 81       	ldd	r22, Y+1	; 0x01
     5b8:	7a 81       	ldd	r23, Y+2	; 0x02
     5ba:	8b 81       	ldd	r24, Y+3	; 0x03
     5bc:	9c 81       	ldd	r25, Y+4	; 0x04
     5be:	d2 d8       	rcall	.-3676   	; 0xfffff764 <__eeprom_end+0xff7ef764>
     5c0:	dc 01       	movw	r26, r24
     5c2:	cb 01       	movw	r24, r22
     5c4:	8f 83       	std	Y+7, r24	; 0x07
     5c6:	98 87       	std	Y+8, r25	; 0x08
     5c8:	a9 87       	std	Y+9, r26	; 0x09
     5ca:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     5cc:	20 e0       	ldi	r18, 0x00	; 0
     5ce:	30 e0       	ldi	r19, 0x00	; 0
     5d0:	40 e8       	ldi	r20, 0x80	; 128
     5d2:	5f e3       	ldi	r21, 0x3F	; 63
     5d4:	6f 81       	ldd	r22, Y+7	; 0x07
     5d6:	78 85       	ldd	r23, Y+8	; 0x08
     5d8:	89 85       	ldd	r24, Y+9	; 0x09
     5da:	9a 85       	ldd	r25, Y+10	; 0x0a
     5dc:	53 d8       	rcall	.-3930   	; 0xfffff684 <__eeprom_end+0xff7ef684>
     5de:	88 23       	and	r24, r24
     5e0:	0c f0       	brlt	.+2      	; 0x5e4 <test_leds_up_down+0x64>
     5e2:	05 c0       	rjmp	.+10     	; 0x5ee <test_leds_up_down+0x6e>
		__ticks = 1;
     5e4:	81 e0       	ldi	r24, 0x01	; 1
     5e6:	90 e0       	ldi	r25, 0x00	; 0
     5e8:	9e 83       	std	Y+6, r25	; 0x06
     5ea:	8d 83       	std	Y+5, r24	; 0x05
     5ec:	18 c0       	rjmp	.+48     	; 0x61e <test_leds_up_down+0x9e>
	else if (__tmp > 65535)
     5ee:	20 e0       	ldi	r18, 0x00	; 0
     5f0:	3f ef       	ldi	r19, 0xFF	; 255
     5f2:	4f e7       	ldi	r20, 0x7F	; 127
     5f4:	57 e4       	ldi	r21, 0x47	; 71
     5f6:	6f 81       	ldd	r22, Y+7	; 0x07
     5f8:	78 85       	ldd	r23, Y+8	; 0x08
     5fa:	89 85       	ldd	r24, Y+9	; 0x09
     5fc:	9a 85       	ldd	r25, Y+10	; 0x0a
     5fe:	45 d8       	rcall	.-3958   	; 0xfffff68a <__eeprom_end+0xff7ef68a>
     600:	18 16       	cp	r1, r24
     602:	0c f0       	brlt	.+2      	; 0x606 <test_leds_up_down+0x86>
     604:	03 c0       	rjmp	.+6      	; 0x60c <test_leds_up_down+0x8c>
		__ticks = 0;	/* i.e. 65536 */
     606:	1e 82       	std	Y+6, r1	; 0x06
     608:	1d 82       	std	Y+5, r1	; 0x05
     60a:	09 c0       	rjmp	.+18     	; 0x61e <test_leds_up_down+0x9e>
	else
		__ticks = (uint16_t)__tmp;
     60c:	6f 81       	ldd	r22, Y+7	; 0x07
     60e:	78 85       	ldd	r23, Y+8	; 0x08
     610:	89 85       	ldd	r24, Y+9	; 0x09
     612:	9a 85       	ldd	r25, Y+10	; 0x0a
     614:	f7 d7       	rcall	.+4078   	; 0x1604 <__fixsfsi>
     616:	dc 01       	movw	r26, r24
     618:	cb 01       	movw	r24, r22
     61a:	9e 83       	std	Y+6, r25	; 0x06
     61c:	8d 83       	std	Y+5, r24	; 0x05
     61e:	8d 81       	ldd	r24, Y+5	; 0x05
     620:	9e 81       	ldd	r25, Y+6	; 0x06
     622:	9c 87       	std	Y+12, r25	; 0x0c
     624:	8b 87       	std	Y+11, r24	; 0x0b
     626:	8b 85       	ldd	r24, Y+11	; 0x0b
     628:	9c 85       	ldd	r25, Y+12	; 0x0c
     62a:	01 97       	sbiw	r24, 0x01	; 1
     62c:	f1 f7       	brne	.-4      	; 0x62a <test_leds_up_down+0xaa>
     62e:	9c 87       	std	Y+12, r25	; 0x0c
     630:	8b 87       	std	Y+11, r24	; 0x0b
    _delay_ms(50); //50
    switch_off_leds_with_delay(50); //100
     632:	60 e0       	ldi	r22, 0x00	; 0
     634:	70 e0       	ldi	r23, 0x00	; 0
     636:	88 e4       	ldi	r24, 0x48	; 72
     638:	92 e4       	ldi	r25, 0x42	; 66
     63a:	35 df       	rcall	.-406    	; 0x4a6 <switch_off_leds_with_delay>
     63c:	2c 96       	adiw	r28, 0x0c	; 12
     63e:	0f b6       	in	r0, 0x3f	; 63
     640:	f8 94       	cli
     642:	de bf       	out	0x3e, r29	; 62
     644:	0f be       	out	0x3f, r0	; 63
     646:	cd bf       	out	0x3d, r28	; 61
     648:	df 91       	pop	r29
     64a:	cf 91       	pop	r28
     64c:	08 95       	ret

0000064e <test_leds_up_off>:
}

void test_leds_up_off(void) {
     64e:	cf 93       	push	r28
     650:	df 93       	push	r29
     652:	cd b7       	in	r28, 0x3d	; 61
     654:	de b7       	in	r29, 0x3e	; 62
     656:	2c 97       	sbiw	r28, 0x0c	; 12
     658:	0f b6       	in	r0, 0x3f	; 63
     65a:	f8 94       	cli
     65c:	de bf       	out	0x3e, r29	; 62
     65e:	0f be       	out	0x3f, r0	; 63
     660:	cd bf       	out	0x3d, r28	; 61
    switch_on_leds_with_delay(50); //100
     662:	60 e0       	ldi	r22, 0x00	; 0
     664:	70 e0       	ldi	r23, 0x00	; 0
     666:	88 e4       	ldi	r24, 0x48	; 72
     668:	92 e4       	ldi	r25, 0x42	; 66
     66a:	b0 de       	rcall	.-672    	; 0x3cc <switch_on_leds_with_delay>
   The maximal possible delay is 262.14 ms / F_CPU in MHz.
 */
void
_delay_ms(double __ms)
{
     66c:	80 e0       	ldi	r24, 0x00	; 0
     66e:	90 e0       	ldi	r25, 0x00	; 0
     670:	a8 e4       	ldi	r26, 0x48	; 72
     672:	b2 e4       	ldi	r27, 0x42	; 66
     674:	89 83       	std	Y+1, r24	; 0x01
     676:	9a 83       	std	Y+2, r25	; 0x02
     678:	ab 83       	std	Y+3, r26	; 0x03
     67a:	bc 83       	std	Y+4, r27	; 0x04
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     67c:	20 e0       	ldi	r18, 0x00	; 0
     67e:	30 e0       	ldi	r19, 0x00	; 0
     680:	4a e7       	ldi	r20, 0x7A	; 122
     682:	53 e4       	ldi	r21, 0x43	; 67
     684:	69 81       	ldd	r22, Y+1	; 0x01
     686:	7a 81       	ldd	r23, Y+2	; 0x02
     688:	8b 81       	ldd	r24, Y+3	; 0x03
     68a:	9c 81       	ldd	r25, Y+4	; 0x04
     68c:	6b d8       	rcall	.-3882   	; 0xfffff764 <__eeprom_end+0xff7ef764>
     68e:	dc 01       	movw	r26, r24
     690:	cb 01       	movw	r24, r22
     692:	8f 83       	std	Y+7, r24	; 0x07
     694:	98 87       	std	Y+8, r25	; 0x08
     696:	a9 87       	std	Y+9, r26	; 0x09
     698:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     69a:	20 e0       	ldi	r18, 0x00	; 0
     69c:	30 e0       	ldi	r19, 0x00	; 0
     69e:	40 e8       	ldi	r20, 0x80	; 128
     6a0:	5f e3       	ldi	r21, 0x3F	; 63
     6a2:	6f 81       	ldd	r22, Y+7	; 0x07
     6a4:	78 85       	ldd	r23, Y+8	; 0x08
     6a6:	89 85       	ldd	r24, Y+9	; 0x09
     6a8:	9a 85       	ldd	r25, Y+10	; 0x0a
     6aa:	ec d7       	rcall	.+4056   	; 0x1684 <__eqsf2>
     6ac:	88 23       	and	r24, r24
     6ae:	0c f0       	brlt	.+2      	; 0x6b2 <test_leds_up_off+0x64>
     6b0:	05 c0       	rjmp	.+10     	; 0x6bc <test_leds_up_off+0x6e>
		__ticks = 1;
     6b2:	81 e0       	ldi	r24, 0x01	; 1
     6b4:	90 e0       	ldi	r25, 0x00	; 0
     6b6:	9e 83       	std	Y+6, r25	; 0x06
     6b8:	8d 83       	std	Y+5, r24	; 0x05
     6ba:	18 c0       	rjmp	.+48     	; 0x6ec <test_leds_up_off+0x9e>
	else if (__tmp > 65535)
     6bc:	20 e0       	ldi	r18, 0x00	; 0
     6be:	3f ef       	ldi	r19, 0xFF	; 255
     6c0:	4f e7       	ldi	r20, 0x7F	; 127
     6c2:	57 e4       	ldi	r21, 0x47	; 71
     6c4:	6f 81       	ldd	r22, Y+7	; 0x07
     6c6:	78 85       	ldd	r23, Y+8	; 0x08
     6c8:	89 85       	ldd	r24, Y+9	; 0x09
     6ca:	9a 85       	ldd	r25, Y+10	; 0x0a
     6cc:	de d7       	rcall	.+4028   	; 0x168a <__gesf2>
     6ce:	18 16       	cp	r1, r24
     6d0:	0c f0       	brlt	.+2      	; 0x6d4 <test_leds_up_off+0x86>
     6d2:	03 c0       	rjmp	.+6      	; 0x6da <test_leds_up_off+0x8c>
		__ticks = 0;	/* i.e. 65536 */
     6d4:	1e 82       	std	Y+6, r1	; 0x06
     6d6:	1d 82       	std	Y+5, r1	; 0x05
     6d8:	09 c0       	rjmp	.+18     	; 0x6ec <test_leds_up_off+0x9e>
	else
		__ticks = (uint16_t)__tmp;
     6da:	6f 81       	ldd	r22, Y+7	; 0x07
     6dc:	78 85       	ldd	r23, Y+8	; 0x08
     6de:	89 85       	ldd	r24, Y+9	; 0x09
     6e0:	9a 85       	ldd	r25, Y+10	; 0x0a
     6e2:	90 d7       	rcall	.+3872   	; 0x1604 <__fixsfsi>
     6e4:	dc 01       	movw	r26, r24
     6e6:	cb 01       	movw	r24, r22
     6e8:	9e 83       	std	Y+6, r25	; 0x06
     6ea:	8d 83       	std	Y+5, r24	; 0x05
     6ec:	8d 81       	ldd	r24, Y+5	; 0x05
     6ee:	9e 81       	ldd	r25, Y+6	; 0x06
     6f0:	9c 87       	std	Y+12, r25	; 0x0c
     6f2:	8b 87       	std	Y+11, r24	; 0x0b
     6f4:	8b 85       	ldd	r24, Y+11	; 0x0b
     6f6:	9c 85       	ldd	r25, Y+12	; 0x0c
     6f8:	01 97       	sbiw	r24, 0x01	; 1
     6fa:	f1 f7       	brne	.-4      	; 0x6f8 <test_leds_up_off+0xaa>
     6fc:	9c 87       	std	Y+12, r25	; 0x0c
     6fe:	8b 87       	std	Y+11, r24	; 0x0b
    _delay_ms(50); //50
    switch_off_all_leds();
     700:	0a de       	rcall	.-1004   	; 0x316 <switch_off_all_leds>
     702:	2c 96       	adiw	r28, 0x0c	; 12
     704:	0f b6       	in	r0, 0x3f	; 63
     706:	f8 94       	cli
     708:	de bf       	out	0x3e, r29	; 62
     70a:	0f be       	out	0x3f, r0	; 63
     70c:	cd bf       	out	0x3d, r28	; 61
     70e:	df 91       	pop	r29
     710:	cf 91       	pop	r28
     712:	08 95       	ret

00000714 <switch_on_min_dels>:
}

/*
 *  switch on every leds (from 0 to n)  (and switch off others)
 */
void switch_on_min_dels(uint8_t n) {
     714:	cf 93       	push	r28
     716:	df 93       	push	r29
     718:	cd b7       	in	r28, 0x3d	; 61
     71a:	de b7       	in	r29, 0x3e	; 62
     71c:	22 97       	sbiw	r28, 0x02	; 2
     71e:	0f b6       	in	r0, 0x3f	; 63
     720:	f8 94       	cli
     722:	de bf       	out	0x3e, r29	; 62
     724:	0f be       	out	0x3f, r0	; 63
     726:	cd bf       	out	0x3d, r28	; 61
     728:	89 83       	std	Y+1, r24	; 0x01
    uint8_t i;
    for(i = 1; i<=Nleds; i++) {
     72a:	81 e0       	ldi	r24, 0x01	; 1
     72c:	8a 83       	std	Y+2, r24	; 0x02
     72e:	8a 81       	ldd	r24, Y+2	; 0x02
     730:	89 30       	cpi	r24, 0x09	; 9
     732:	68 f4       	brcc	.+26     	; 0x74e <switch_on_min_dels+0x3a>
        if (i<=n) {
     734:	9a 81       	ldd	r25, Y+2	; 0x02
     736:	89 81       	ldd	r24, Y+1	; 0x01
     738:	89 17       	cp	r24, r25
     73a:	18 f0       	brcs	.+6      	; 0x742 <switch_on_min_dels+0x2e>
            switch_on_led(i);
     73c:	8a 81       	ldd	r24, Y+2	; 0x02
     73e:	f5 dd       	rcall	.-1046   	; 0x32a <switch_on_led>
     740:	02 c0       	rjmp	.+4      	; 0x746 <switch_on_min_dels+0x32>
        } else {
            switch_off_led(i);
     742:	8a 81       	ldd	r24, Y+2	; 0x02
     744:	1b de       	rcall	.-970    	; 0x37c <switch_off_led>
     746:	8a 81       	ldd	r24, Y+2	; 0x02
     748:	8f 5f       	subi	r24, 0xFF	; 255
     74a:	8a 83       	std	Y+2, r24	; 0x02
     74c:	f0 cf       	rjmp	.-32     	; 0x72e <switch_on_min_dels+0x1a>
     74e:	22 96       	adiw	r28, 0x02	; 2
     750:	0f b6       	in	r0, 0x3f	; 63
     752:	f8 94       	cli
     754:	de bf       	out	0x3e, r29	; 62
     756:	0f be       	out	0x3f, r0	; 63
     758:	cd bf       	out	0x3d, r28	; 61
     75a:	df 91       	pop	r29
     75c:	cf 91       	pop	r28
     75e:	08 95       	ret

00000760 <switch_on_max_dels>:
        }
    }
}

/*
 *  switch on every leds (from Nleds to n)
 */
void switch_on_max_dels(uint8_t n) {
     760:	cf 93       	push	r28
     762:	df 93       	push	r29
     764:	cd b7       	in	r28, 0x3d	; 61
     766:	de b7       	in	r29, 0x3e	; 62
     768:	22 97       	sbiw	r28, 0x02	; 2
     76a:	0f b6       	in	r0, 0x3f	; 63
     76c:	f8 94       	cli
     76e:	de bf       	out	0x3e, r29	; 62
     770:	0f be       	out	0x3f, r0	; 63
     772:	cd bf       	out	0x3d, r28	; 61
     774:	89 83       	std	Y+1, r24	; 0x01
    uint8_t i;
    for(i = Nleds; i>=1; i--) {
     776:	88 e0       	ldi	r24, 0x08	; 8
     778:	8a 83       	std	Y+2, r24	; 0x02
     77a:	8a 81       	ldd	r24, Y+2	; 0x02
     77c:	88 23       	and	r24, r24
     77e:	b1 f0       	breq	.+44     	; 0x7ac <switch_on_max_dels+0x4c>
        if (i>=Nleds-n) {
     780:	8a 81       	ldd	r24, Y+2	; 0x02
     782:	48 2f       	mov	r20, r24
     784:	55 27       	eor	r21, r21
     786:	89 81       	ldd	r24, Y+1	; 0x01
     788:	28 2f       	mov	r18, r24
     78a:	33 27       	eor	r19, r19
     78c:	88 e0       	ldi	r24, 0x08	; 8
     78e:	90 e0       	ldi	r25, 0x00	; 0
     790:	82 1b       	sub	r24, r18
     792:	93 0b       	sbc	r25, r19
     794:	48 17       	cp	r20, r24
     796:	59 07       	cpc	r21, r25
     798:	1c f0       	brlt	.+6      	; 0x7a0 <switch_on_max_dels+0x40>
            switch_on_led(i);
     79a:	8a 81       	ldd	r24, Y+2	; 0x02
     79c:	c6 dd       	rcall	.-1140   	; 0x32a <switch_on_led>
     79e:	02 c0       	rjmp	.+4      	; 0x7a4 <switch_on_max_dels+0x44>
        } else {
            switch_off_led(i);
     7a0:	8a 81       	ldd	r24, Y+2	; 0x02
     7a2:	ec dd       	rcall	.-1064   	; 0x37c <switch_off_led>
     7a4:	8a 81       	ldd	r24, Y+2	; 0x02
     7a6:	81 50       	subi	r24, 0x01	; 1
     7a8:	8a 83       	std	Y+2, r24	; 0x02
     7aa:	e7 cf       	rjmp	.-50     	; 0x77a <switch_on_max_dels+0x1a>
     7ac:	22 96       	adiw	r28, 0x02	; 2
     7ae:	0f b6       	in	r0, 0x3f	; 63
     7b0:	f8 94       	cli
     7b2:	de bf       	out	0x3e, r29	; 62
     7b4:	0f be       	out	0x3f, r0	; 63
     7b6:	cd bf       	out	0x3d, r28	; 61
     7b8:	df 91       	pop	r29
     7ba:	cf 91       	pop	r28
     7bc:	08 95       	ret

000007be <led_alarm>:
        }
    }
    // TO TEST (switch off)
}

/*
 * switch off every leds, wait and swith them all, n times (a sort of visual alarm)
 */
void led_alarm(uint8_t n, double delay) {
     7be:	cf 93       	push	r28
     7c0:	df 93       	push	r29
     7c2:	cd b7       	in	r28, 0x3d	; 61
     7c4:	de b7       	in	r29, 0x3e	; 62
     7c6:	62 97       	sbiw	r28, 0x12	; 18
     7c8:	0f b6       	in	r0, 0x3f	; 63
     7ca:	f8 94       	cli
     7cc:	de bf       	out	0x3e, r29	; 62
     7ce:	0f be       	out	0x3f, r0	; 63
     7d0:	cd bf       	out	0x3d, r28	; 61
     7d2:	89 83       	std	Y+1, r24	; 0x01
     7d4:	4a 83       	std	Y+2, r20	; 0x02
     7d6:	5b 83       	std	Y+3, r21	; 0x03
     7d8:	6c 83       	std	Y+4, r22	; 0x04
     7da:	7d 83       	std	Y+5, r23	; 0x05
    uint8_t i;
    for(i = 1; i<=n; i++) {
     7dc:	81 e0       	ldi	r24, 0x01	; 1
     7de:	8e 83       	std	Y+6, r24	; 0x06
     7e0:	9e 81       	ldd	r25, Y+6	; 0x06
     7e2:	89 81       	ldd	r24, Y+1	; 0x01
     7e4:	89 17       	cp	r24, r25
     7e6:	08 f4       	brcc	.+2      	; 0x7ea <led_alarm+0x2c>
     7e8:	9a c0       	rjmp	.+308    	; 0x91e <led_alarm+0x160>
        switch_off_all_leds();
     7ea:	95 dd       	rcall	.-1238   	; 0x316 <switch_off_all_leds>
   The maximal possible delay is 262.14 ms / F_CPU in MHz.
 */
void
_delay_ms(double __ms)
{
     7ec:	8a 81       	ldd	r24, Y+2	; 0x02
     7ee:	9b 81       	ldd	r25, Y+3	; 0x03
     7f0:	ac 81       	ldd	r26, Y+4	; 0x04
     7f2:	bd 81       	ldd	r27, Y+5	; 0x05
     7f4:	8f 83       	std	Y+7, r24	; 0x07
     7f6:	98 87       	std	Y+8, r25	; 0x08
     7f8:	a9 87       	std	Y+9, r26	; 0x09
     7fa:	ba 87       	std	Y+10, r27	; 0x0a
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     7fc:	20 e0       	ldi	r18, 0x00	; 0
     7fe:	30 e0       	ldi	r19, 0x00	; 0
     800:	4a e7       	ldi	r20, 0x7A	; 122
     802:	53 e4       	ldi	r21, 0x43	; 67
     804:	6f 81       	ldd	r22, Y+7	; 0x07
     806:	78 85       	ldd	r23, Y+8	; 0x08
     808:	89 85       	ldd	r24, Y+9	; 0x09
     80a:	9a 85       	ldd	r25, Y+10	; 0x0a
     80c:	ab d7       	rcall	.+3926   	; 0x1764 <__mulsf3>
     80e:	dc 01       	movw	r26, r24
     810:	cb 01       	movw	r24, r22
     812:	8d 87       	std	Y+13, r24	; 0x0d
     814:	9e 87       	std	Y+14, r25	; 0x0e
     816:	af 87       	std	Y+15, r26	; 0x0f
     818:	b8 8b       	std	Y+16, r27	; 0x10
	if (__tmp < 1.0)
     81a:	20 e0       	ldi	r18, 0x00	; 0
     81c:	30 e0       	ldi	r19, 0x00	; 0
     81e:	40 e8       	ldi	r20, 0x80	; 128
     820:	5f e3       	ldi	r21, 0x3F	; 63
     822:	6d 85       	ldd	r22, Y+13	; 0x0d
     824:	7e 85       	ldd	r23, Y+14	; 0x0e
     826:	8f 85       	ldd	r24, Y+15	; 0x0f
     828:	98 89       	ldd	r25, Y+16	; 0x10
     82a:	2c d7       	rcall	.+3672   	; 0x1684 <__eqsf2>
     82c:	88 23       	and	r24, r24
     82e:	0c f0       	brlt	.+2      	; 0x832 <led_alarm+0x74>
     830:	05 c0       	rjmp	.+10     	; 0x83c <led_alarm+0x7e>
		__ticks = 1;
     832:	81 e0       	ldi	r24, 0x01	; 1
     834:	90 e0       	ldi	r25, 0x00	; 0
     836:	9c 87       	std	Y+12, r25	; 0x0c
     838:	8b 87       	std	Y+11, r24	; 0x0b
     83a:	18 c0       	rjmp	.+48     	; 0x86c <led_alarm+0xae>
	else if (__tmp > 65535)
     83c:	20 e0       	ldi	r18, 0x00	; 0
     83e:	3f ef       	ldi	r19, 0xFF	; 255
     840:	4f e7       	ldi	r20, 0x7F	; 127
     842:	57 e4       	ldi	r21, 0x47	; 71
     844:	6d 85       	ldd	r22, Y+13	; 0x0d
     846:	7e 85       	ldd	r23, Y+14	; 0x0e
     848:	8f 85       	ldd	r24, Y+15	; 0x0f
     84a:	98 89       	ldd	r25, Y+16	; 0x10
     84c:	1e d7       	rcall	.+3644   	; 0x168a <__gesf2>
     84e:	18 16       	cp	r1, r24
     850:	0c f0       	brlt	.+2      	; 0x854 <led_alarm+0x96>
     852:	03 c0       	rjmp	.+6      	; 0x85a <led_alarm+0x9c>
		__ticks = 0;	/* i.e. 65536 */
     854:	1c 86       	std	Y+12, r1	; 0x0c
     856:	1b 86       	std	Y+11, r1	; 0x0b
     858:	09 c0       	rjmp	.+18     	; 0x86c <led_alarm+0xae>
	else
		__ticks = (uint16_t)__tmp;
     85a:	6d 85       	ldd	r22, Y+13	; 0x0d
     85c:	7e 85       	ldd	r23, Y+14	; 0x0e
     85e:	8f 85       	ldd	r24, Y+15	; 0x0f
     860:	98 89       	ldd	r25, Y+16	; 0x10
     862:	d0 d6       	rcall	.+3488   	; 0x1604 <__fixsfsi>
     864:	dc 01       	movw	r26, r24
     866:	cb 01       	movw	r24, r22
     868:	9c 87       	std	Y+12, r25	; 0x0c
     86a:	8b 87       	std	Y+11, r24	; 0x0b
     86c:	8b 85       	ldd	r24, Y+11	; 0x0b
     86e:	9c 85       	ldd	r25, Y+12	; 0x0c
     870:	9a 8b       	std	Y+18, r25	; 0x12
     872:	89 8b       	std	Y+17, r24	; 0x11
     874:	89 89       	ldd	r24, Y+17	; 0x11
     876:	9a 89       	ldd	r25, Y+18	; 0x12
     878:	01 97       	sbiw	r24, 0x01	; 1
     87a:	f1 f7       	brne	.-4      	; 0x878 <led_alarm+0xba>
     87c:	9a 8b       	std	Y+18, r25	; 0x12
     87e:	89 8b       	std	Y+17, r24	; 0x11
        _delay_ms(delay);
        switch_on_all_leds();
     880:	41 dd       	rcall	.-1406   	; 0x304 <switch_on_all_leds>
   The maximal possible delay is 262.14 ms / F_CPU in MHz.
 */
void
_delay_ms(double __ms)
{
     882:	8a 81       	ldd	r24, Y+2	; 0x02
     884:	9b 81       	ldd	r25, Y+3	; 0x03
     886:	ac 81       	ldd	r26, Y+4	; 0x04
     888:	bd 81       	ldd	r27, Y+5	; 0x05
     88a:	8d 87       	std	Y+13, r24	; 0x0d
     88c:	9e 87       	std	Y+14, r25	; 0x0e
     88e:	af 87       	std	Y+15, r26	; 0x0f
     890:	b8 8b       	std	Y+16, r27	; 0x10
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     892:	20 e0       	ldi	r18, 0x00	; 0
     894:	30 e0       	ldi	r19, 0x00	; 0
     896:	4a e7       	ldi	r20, 0x7A	; 122
     898:	53 e4       	ldi	r21, 0x43	; 67
     89a:	6d 85       	ldd	r22, Y+13	; 0x0d
     89c:	7e 85       	ldd	r23, Y+14	; 0x0e
     89e:	8f 85       	ldd	r24, Y+15	; 0x0f
     8a0:	98 89       	ldd	r25, Y+16	; 0x10
     8a2:	60 d7       	rcall	.+3776   	; 0x1764 <__mulsf3>
     8a4:	dc 01       	movw	r26, r24
     8a6:	cb 01       	movw	r24, r22
     8a8:	8f 83       	std	Y+7, r24	; 0x07
     8aa:	98 87       	std	Y+8, r25	; 0x08
     8ac:	a9 87       	std	Y+9, r26	; 0x09
     8ae:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     8b0:	20 e0       	ldi	r18, 0x00	; 0
     8b2:	30 e0       	ldi	r19, 0x00	; 0
     8b4:	40 e8       	ldi	r20, 0x80	; 128
     8b6:	5f e3       	ldi	r21, 0x3F	; 63
     8b8:	6f 81       	ldd	r22, Y+7	; 0x07
     8ba:	78 85       	ldd	r23, Y+8	; 0x08
     8bc:	89 85       	ldd	r24, Y+9	; 0x09
     8be:	9a 85       	ldd	r25, Y+10	; 0x0a
     8c0:	e1 d6       	rcall	.+3522   	; 0x1684 <__eqsf2>
     8c2:	88 23       	and	r24, r24
     8c4:	0c f0       	brlt	.+2      	; 0x8c8 <led_alarm+0x10a>
     8c6:	05 c0       	rjmp	.+10     	; 0x8d2 <led_alarm+0x114>
		__ticks = 1;
     8c8:	81 e0       	ldi	r24, 0x01	; 1
     8ca:	90 e0       	ldi	r25, 0x00	; 0
     8cc:	9a 8b       	std	Y+18, r25	; 0x12
     8ce:	89 8b       	std	Y+17, r24	; 0x11
     8d0:	18 c0       	rjmp	.+48     	; 0x902 <led_alarm+0x144>
	else if (__tmp > 65535)
     8d2:	20 e0       	ldi	r18, 0x00	; 0
     8d4:	3f ef       	ldi	r19, 0xFF	; 255
     8d6:	4f e7       	ldi	r20, 0x7F	; 127
     8d8:	57 e4       	ldi	r21, 0x47	; 71
     8da:	6f 81       	ldd	r22, Y+7	; 0x07
     8dc:	78 85       	ldd	r23, Y+8	; 0x08
     8de:	89 85       	ldd	r24, Y+9	; 0x09
     8e0:	9a 85       	ldd	r25, Y+10	; 0x0a
     8e2:	d3 d6       	rcall	.+3494   	; 0x168a <__gesf2>
     8e4:	18 16       	cp	r1, r24
     8e6:	0c f0       	brlt	.+2      	; 0x8ea <led_alarm+0x12c>
     8e8:	03 c0       	rjmp	.+6      	; 0x8f0 <led_alarm+0x132>
		__ticks = 0;	/* i.e. 65536 */
     8ea:	1a 8a       	std	Y+18, r1	; 0x12
     8ec:	19 8a       	std	Y+17, r1	; 0x11
     8ee:	09 c0       	rjmp	.+18     	; 0x902 <led_alarm+0x144>
	else
		__ticks = (uint16_t)__tmp;
     8f0:	6f 81       	ldd	r22, Y+7	; 0x07
     8f2:	78 85       	ldd	r23, Y+8	; 0x08
     8f4:	89 85       	ldd	r24, Y+9	; 0x09
     8f6:	9a 85       	ldd	r25, Y+10	; 0x0a
     8f8:	85 d6       	rcall	.+3338   	; 0x1604 <__fixsfsi>
     8fa:	dc 01       	movw	r26, r24
     8fc:	cb 01       	movw	r24, r22
     8fe:	9a 8b       	std	Y+18, r25	; 0x12
     900:	89 8b       	std	Y+17, r24	; 0x11
     902:	89 89       	ldd	r24, Y+17	; 0x11
     904:	9a 89       	ldd	r25, Y+18	; 0x12
     906:	9c 87       	std	Y+12, r25	; 0x0c
     908:	8b 87       	std	Y+11, r24	; 0x0b
     90a:	8b 85       	ldd	r24, Y+11	; 0x0b
     90c:	9c 85       	ldd	r25, Y+12	; 0x0c
     90e:	01 97       	sbiw	r24, 0x01	; 1
     910:	f1 f7       	brne	.-4      	; 0x90e <led_alarm+0x150>
     912:	9c 87       	std	Y+12, r25	; 0x0c
     914:	8b 87       	std	Y+11, r24	; 0x0b
     916:	8e 81       	ldd	r24, Y+6	; 0x06
     918:	8f 5f       	subi	r24, 0xFF	; 255
     91a:	8e 83       	std	Y+6, r24	; 0x06
     91c:	61 cf       	rjmp	.-318    	; 0x7e0 <led_alarm+0x22>
        _delay_ms(delay);
    }
    switch_off_all_leds();
     91e:	fb dc       	rcall	.-1546   	; 0x316 <switch_off_all_leds>
     920:	62 96       	adiw	r28, 0x12	; 18
     922:	0f b6       	in	r0, 0x3f	; 63
     924:	f8 94       	cli
     926:	de bf       	out	0x3e, r29	; 62
     928:	0f be       	out	0x3f, r0	; 63
     92a:	cd bf       	out	0x3d, r28	; 61
     92c:	df 91       	pop	r29
     92e:	cf 91       	pop	r28
     930:	08 95       	ret

00000932 <roundp>:
}

/*
 * switch on every dels depending of the percentage p
 */
//#define roundp floor
inline uint8_t roundp(double n) {
     932:	cf 93       	push	r28
     934:	df 93       	push	r29
     936:	cd b7       	in	r28, 0x3d	; 61
     938:	de b7       	in	r29, 0x3e	; 62
     93a:	24 97       	sbiw	r28, 0x04	; 4
     93c:	0f b6       	in	r0, 0x3f	; 63
     93e:	f8 94       	cli
     940:	de bf       	out	0x3e, r29	; 62
     942:	0f be       	out	0x3f, r0	; 63
     944:	cd bf       	out	0x3d, r28	; 61
     946:	69 83       	std	Y+1, r22	; 0x01
     948:	7a 83       	std	Y+2, r23	; 0x02
     94a:	8b 83       	std	Y+3, r24	; 0x03
     94c:	9c 83       	std	Y+4, r25	; 0x04
    return floor(n+0.5);
     94e:	20 e0       	ldi	r18, 0x00	; 0
     950:	30 e0       	ldi	r19, 0x00	; 0
     952:	40 e0       	ldi	r20, 0x00	; 0
     954:	5f e3       	ldi	r21, 0x3F	; 63
     956:	69 81       	ldd	r22, Y+1	; 0x01
     958:	7a 81       	ldd	r23, Y+2	; 0x02
     95a:	8b 81       	ldd	r24, Y+3	; 0x03
     95c:	9c 81       	ldd	r25, Y+4	; 0x04
     95e:	ca d5       	rcall	.+2964   	; 0x14f4 <__addsf3>
     960:	dc 01       	movw	r26, r24
     962:	cb 01       	movw	r24, r22
     964:	bc 01       	movw	r22, r24
     966:	cd 01       	movw	r24, r26
     968:	74 d6       	rcall	.+3304   	; 0x1652 <floor>
     96a:	dc 01       	movw	r26, r24
     96c:	cb 01       	movw	r24, r22
     96e:	bc 01       	movw	r22, r24
     970:	cd 01       	movw	r24, r26
     972:	48 d6       	rcall	.+3216   	; 0x1604 <__fixsfsi>
     974:	dc 01       	movw	r26, r24
     976:	cb 01       	movw	r24, r22
     978:	99 27       	eor	r25, r25
     97a:	24 96       	adiw	r28, 0x04	; 4
     97c:	0f b6       	in	r0, 0x3f	; 63
     97e:	f8 94       	cli
     980:	de bf       	out	0x3e, r29	; 62
     982:	0f be       	out	0x3f, r0	; 63
     984:	cd bf       	out	0x3d, r28	; 61
     986:	df 91       	pop	r29
     988:	cf 91       	pop	r28
     98a:	08 95       	ret

0000098c <show_percent>:
}

// roundp = round for positive number
void show_percent(double p) {
     98c:	cf 93       	push	r28
     98e:	df 93       	push	r29
     990:	cd b7       	in	r28, 0x3d	; 61
     992:	de b7       	in	r29, 0x3e	; 62
     994:	25 97       	sbiw	r28, 0x05	; 5
     996:	0f b6       	in	r0, 0x3f	; 63
     998:	f8 94       	cli
     99a:	de bf       	out	0x3e, r29	; 62
     99c:	0f be       	out	0x3f, r0	; 63
     99e:	cd bf       	out	0x3d, r28	; 61
     9a0:	69 83       	std	Y+1, r22	; 0x01
     9a2:	7a 83       	std	Y+2, r23	; 0x02
     9a4:	8b 83       	std	Y+3, r24	; 0x03
     9a6:	9c 83       	std	Y+4, r25	; 0x04
    // p pourcent
    uint8_t n;
    //n = 4;
    n = roundp(p / 100.0 * Nleds); // TO FIX (math.h ceil floor ... round en Java !)
     9a8:	20 e0       	ldi	r18, 0x00	; 0
     9aa:	30 e0       	ldi	r19, 0x00	; 0
     9ac:	48 ec       	ldi	r20, 0xC8	; 200
     9ae:	52 e4       	ldi	r21, 0x42	; 66
     9b0:	69 81       	ldd	r22, Y+1	; 0x01
     9b2:	7a 81       	ldd	r23, Y+2	; 0x02
     9b4:	8b 81       	ldd	r24, Y+3	; 0x03
     9b6:	9c 81       	ldd	r25, Y+4	; 0x04
     9b8:	df d5       	rcall	.+3006   	; 0x1578 <__divsf3>
     9ba:	dc 01       	movw	r26, r24
     9bc:	cb 01       	movw	r24, r22
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	51 e4       	ldi	r21, 0x41	; 65
     9c6:	bc 01       	movw	r22, r24
     9c8:	cd 01       	movw	r24, r26
     9ca:	cc d6       	rcall	.+3480   	; 0x1764 <__mulsf3>
     9cc:	dc 01       	movw	r26, r24
     9ce:	cb 01       	movw	r24, r22
     9d0:	bc 01       	movw	r22, r24
     9d2:	cd 01       	movw	r24, r26
     9d4:	ae df       	rcall	.-164    	; 0x932 <roundp>
     9d6:	8d 83       	std	Y+5, r24	; 0x05
    // TO FIX : +0.5 is a very dirty hack
    switch_on_min_dels(n);
     9d8:	8d 81       	ldd	r24, Y+5	; 0x05
     9da:	9c de       	rcall	.-712    	; 0x714 <switch_on_min_dels>
     9dc:	25 96       	adiw	r28, 0x05	; 5
     9de:	0f b6       	in	r0, 0x3f	; 63
     9e0:	f8 94       	cli
     9e2:	de bf       	out	0x3e, r29	; 62
     9e4:	0f be       	out	0x3f, r0	; 63
     9e6:	cd bf       	out	0x3d, r28	; 61
     9e8:	df 91       	pop	r29
     9ea:	cf 91       	pop	r28
     9ec:	08 95       	ret

000009ee <beep>:
}

/*
 * send a sound (on or more beep(s))
 */
void beep(uint8_t n, double delay) {
     9ee:	cf 93       	push	r28
     9f0:	df 93       	push	r29
     9f2:	cd b7       	in	r28, 0x3d	; 61
     9f4:	de b7       	in	r29, 0x3e	; 62
     9f6:	62 97       	sbiw	r28, 0x12	; 18
     9f8:	0f b6       	in	r0, 0x3f	; 63
     9fa:	f8 94       	cli
     9fc:	de bf       	out	0x3e, r29	; 62
     9fe:	0f be       	out	0x3f, r0	; 63
     a00:	cd bf       	out	0x3d, r28	; 61
     a02:	89 83       	std	Y+1, r24	; 0x01
     a04:	4a 83       	std	Y+2, r20	; 0x02
     a06:	5b 83       	std	Y+3, r21	; 0x03
     a08:	6c 83       	std	Y+4, r22	; 0x04
     a0a:	7d 83       	std	Y+5, r23	; 0x05
    // TO DO
    uint8_t i;
    for(i = 1; i<=n; i++) {
     a0c:	81 e0       	ldi	r24, 0x01	; 1
     a0e:	8e 83       	std	Y+6, r24	; 0x06
     a10:	9e 81       	ldd	r25, Y+6	; 0x06
     a12:	89 81       	ldd	r24, Y+1	; 0x01
     a14:	89 17       	cp	r24, r25
     a16:	08 f4       	brcc	.+2      	; 0xa1a <beep+0x2c>
     a18:	52 c0       	rjmp	.+164    	; 0xabe <beep+0xd0>
        //TO DO : send a beep
        if (n>1) {
     a1a:	89 81       	ldd	r24, Y+1	; 0x01
     a1c:	82 30       	cpi	r24, 0x02	; 2
     a1e:	08 f4       	brcc	.+2      	; 0xa22 <beep+0x34>
     a20:	4a c0       	rjmp	.+148    	; 0xab6 <beep+0xc8>
   The maximal possible delay is 262.14 ms / F_CPU in MHz.
 */
void
_delay_ms(double __ms)
{
     a22:	8a 81       	ldd	r24, Y+2	; 0x02
     a24:	9b 81       	ldd	r25, Y+3	; 0x03
     a26:	ac 81       	ldd	r26, Y+4	; 0x04
     a28:	bd 81       	ldd	r27, Y+5	; 0x05
     a2a:	8f 83       	std	Y+7, r24	; 0x07
     a2c:	98 87       	std	Y+8, r25	; 0x08
     a2e:	a9 87       	std	Y+9, r26	; 0x09
     a30:	ba 87       	std	Y+10, r27	; 0x0a
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     a32:	20 e0       	ldi	r18, 0x00	; 0
     a34:	30 e0       	ldi	r19, 0x00	; 0
     a36:	4a e7       	ldi	r20, 0x7A	; 122
     a38:	53 e4       	ldi	r21, 0x43	; 67
     a3a:	6f 81       	ldd	r22, Y+7	; 0x07
     a3c:	78 85       	ldd	r23, Y+8	; 0x08
     a3e:	89 85       	ldd	r24, Y+9	; 0x09
     a40:	9a 85       	ldd	r25, Y+10	; 0x0a
     a42:	90 d6       	rcall	.+3360   	; 0x1764 <__mulsf3>
     a44:	dc 01       	movw	r26, r24
     a46:	cb 01       	movw	r24, r22
     a48:	8d 87       	std	Y+13, r24	; 0x0d
     a4a:	9e 87       	std	Y+14, r25	; 0x0e
     a4c:	af 87       	std	Y+15, r26	; 0x0f
     a4e:	b8 8b       	std	Y+16, r27	; 0x10
	if (__tmp < 1.0)
     a50:	20 e0       	ldi	r18, 0x00	; 0
     a52:	30 e0       	ldi	r19, 0x00	; 0
     a54:	40 e8       	ldi	r20, 0x80	; 128
     a56:	5f e3       	ldi	r21, 0x3F	; 63
     a58:	6d 85       	ldd	r22, Y+13	; 0x0d
     a5a:	7e 85       	ldd	r23, Y+14	; 0x0e
     a5c:	8f 85       	ldd	r24, Y+15	; 0x0f
     a5e:	98 89       	ldd	r25, Y+16	; 0x10
     a60:	11 d6       	rcall	.+3106   	; 0x1684 <__eqsf2>
     a62:	88 23       	and	r24, r24
     a64:	0c f0       	brlt	.+2      	; 0xa68 <beep+0x7a>
     a66:	05 c0       	rjmp	.+10     	; 0xa72 <beep+0x84>
		__ticks = 1;
     a68:	81 e0       	ldi	r24, 0x01	; 1
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	9c 87       	std	Y+12, r25	; 0x0c
     a6e:	8b 87       	std	Y+11, r24	; 0x0b
     a70:	18 c0       	rjmp	.+48     	; 0xaa2 <beep+0xb4>
	else if (__tmp > 65535)
     a72:	20 e0       	ldi	r18, 0x00	; 0
     a74:	3f ef       	ldi	r19, 0xFF	; 255
     a76:	4f e7       	ldi	r20, 0x7F	; 127
     a78:	57 e4       	ldi	r21, 0x47	; 71
     a7a:	6d 85       	ldd	r22, Y+13	; 0x0d
     a7c:	7e 85       	ldd	r23, Y+14	; 0x0e
     a7e:	8f 85       	ldd	r24, Y+15	; 0x0f
     a80:	98 89       	ldd	r25, Y+16	; 0x10
     a82:	03 d6       	rcall	.+3078   	; 0x168a <__gesf2>
     a84:	18 16       	cp	r1, r24
     a86:	0c f0       	brlt	.+2      	; 0xa8a <beep+0x9c>
     a88:	03 c0       	rjmp	.+6      	; 0xa90 <beep+0xa2>
		__ticks = 0;	/* i.e. 65536 */
     a8a:	1c 86       	std	Y+12, r1	; 0x0c
     a8c:	1b 86       	std	Y+11, r1	; 0x0b
     a8e:	09 c0       	rjmp	.+18     	; 0xaa2 <beep+0xb4>
	else
		__ticks = (uint16_t)__tmp;
     a90:	6d 85       	ldd	r22, Y+13	; 0x0d
     a92:	7e 85       	ldd	r23, Y+14	; 0x0e
     a94:	8f 85       	ldd	r24, Y+15	; 0x0f
     a96:	98 89       	ldd	r25, Y+16	; 0x10
     a98:	b5 d5       	rcall	.+2922   	; 0x1604 <__fixsfsi>
     a9a:	dc 01       	movw	r26, r24
     a9c:	cb 01       	movw	r24, r22
     a9e:	9c 87       	std	Y+12, r25	; 0x0c
     aa0:	8b 87       	std	Y+11, r24	; 0x0b
     aa2:	8b 85       	ldd	r24, Y+11	; 0x0b
     aa4:	9c 85       	ldd	r25, Y+12	; 0x0c
     aa6:	9a 8b       	std	Y+18, r25	; 0x12
     aa8:	89 8b       	std	Y+17, r24	; 0x11
     aaa:	89 89       	ldd	r24, Y+17	; 0x11
     aac:	9a 89       	ldd	r25, Y+18	; 0x12
     aae:	01 97       	sbiw	r24, 0x01	; 1
     ab0:	f1 f7       	brne	.-4      	; 0xaae <beep+0xc0>
     ab2:	9a 8b       	std	Y+18, r25	; 0x12
     ab4:	89 8b       	std	Y+17, r24	; 0x11
     ab6:	8e 81       	ldd	r24, Y+6	; 0x06
     ab8:	8f 5f       	subi	r24, 0xFF	; 255
     aba:	8e 83       	std	Y+6, r24	; 0x06
     abc:	a9 cf       	rjmp	.-174    	; 0xa10 <beep+0x22>
     abe:	62 96       	adiw	r28, 0x12	; 18
     ac0:	0f b6       	in	r0, 0x3f	; 63
     ac2:	f8 94       	cli
     ac4:	de bf       	out	0x3e, r29	; 62
     ac6:	0f be       	out	0x3f, r0	; 63
     ac8:	cd bf       	out	0x3d, r28	; 61
     aca:	df 91       	pop	r29
     acc:	cf 91       	pop	r28
     ace:	08 95       	ret

00000ad0 <StartStopChronometer>:
            _delay_ms(delay);
        }
    }
}

/*
 * start or stop chronometer
 */
inline void StartStopChronometer(void) {
     ad0:	cf 93       	push	r28
     ad2:	df 93       	push	r29
     ad4:	cd b7       	in	r28, 0x3d	; 61
     ad6:	de b7       	in	r29, 0x3e	; 62
    beep(1,100);
     ad8:	40 e0       	ldi	r20, 0x00	; 0
     ada:	50 e0       	ldi	r21, 0x00	; 0
     adc:	68 ec       	ldi	r22, 0xC8	; 200
     ade:	72 e4       	ldi	r23, 0x42	; 66
     ae0:	81 e0       	ldi	r24, 0x01	; 1
     ae2:	85 df       	rcall	.-246    	; 0x9ee <beep>
    led_alarm(3,50);
     ae4:	40 e0       	ldi	r20, 0x00	; 0
     ae6:	50 e0       	ldi	r21, 0x00	; 0
     ae8:	68 e4       	ldi	r22, 0x48	; 72
     aea:	72 e4       	ldi	r23, 0x42	; 66
     aec:	83 e0       	ldi	r24, 0x03	; 3
     aee:	67 de       	rcall	.-818    	; 0x7be <led_alarm>
    if (running_chronometer) {
     af0:	80 91 7c 00 	lds	r24, 0x007C
     af4:	88 23       	and	r24, r24
     af6:	19 f0       	breq	.+6      	; 0xafe <StartStopChronometer+0x2e>
       running_chronometer = FALSE; // false = 0
     af8:	10 92 7c 00 	sts	0x007C, r1
     afc:	03 c0       	rjmp	.+6      	; 0xb04 <StartStopChronometer+0x34>
    } else {
       running_chronometer = TRUE; // true = -1
     afe:	8f ef       	ldi	r24, 0xFF	; 255
     b00:	80 93 7c 00 	sts	0x007C, r24
     b04:	df 91       	pop	r29
     b06:	cf 91       	pop	r28
     b08:	08 95       	ret

00000b0a <TestRunningChronometer>:
    }
}

void TestRunningChronometer(void) {
     b0a:	cf 93       	push	r28
     b0c:	df 93       	push	r29
     b0e:	cd b7       	in	r28, 0x3d	; 61
     b10:	de b7       	in	r29, 0x3e	; 62
     b12:	2c 97       	sbiw	r28, 0x0c	; 12
     b14:	0f b6       	in	r0, 0x3f	; 63
     b16:	f8 94       	cli
     b18:	de bf       	out	0x3e, r29	; 62
     b1a:	0f be       	out	0x3f, r0	; 63
     b1c:	cd bf       	out	0x3d, r28	; 61
    if (running_chronometer) {
     b1e:	80 91 7c 00 	lds	r24, 0x007C
     b22:	88 23       	and	r24, r24
     b24:	09 f4       	brne	.+2      	; 0xb28 <TestRunningChronometer+0x1e>
     b26:	98 c0       	rjmp	.+304    	; 0xc58 <TestRunningChronometer+0x14e>
        switch_on_led(8);
     b28:	88 e0       	ldi	r24, 0x08	; 8
     b2a:	ff db       	rcall	.-2050   	; 0x32a <switch_on_led>
   The maximal possible delay is 262.14 ms / F_CPU in MHz.
 */
void
_delay_ms(double __ms)
{
     b2c:	80 e0       	ldi	r24, 0x00	; 0
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a8 ec       	ldi	r26, 0xC8	; 200
     b32:	b2 e4       	ldi	r27, 0x42	; 66
     b34:	89 83       	std	Y+1, r24	; 0x01
     b36:	9a 83       	std	Y+2, r25	; 0x02
     b38:	ab 83       	std	Y+3, r26	; 0x03
     b3a:	bc 83       	std	Y+4, r27	; 0x04
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b3c:	20 e0       	ldi	r18, 0x00	; 0
     b3e:	30 e0       	ldi	r19, 0x00	; 0
     b40:	4a e7       	ldi	r20, 0x7A	; 122
     b42:	53 e4       	ldi	r21, 0x43	; 67
     b44:	69 81       	ldd	r22, Y+1	; 0x01
     b46:	7a 81       	ldd	r23, Y+2	; 0x02
     b48:	8b 81       	ldd	r24, Y+3	; 0x03
     b4a:	9c 81       	ldd	r25, Y+4	; 0x04
     b4c:	0b d6       	rcall	.+3094   	; 0x1764 <__mulsf3>
     b4e:	dc 01       	movw	r26, r24
     b50:	cb 01       	movw	r24, r22
     b52:	8f 83       	std	Y+7, r24	; 0x07
     b54:	98 87       	std	Y+8, r25	; 0x08
     b56:	a9 87       	std	Y+9, r26	; 0x09
     b58:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     b5a:	20 e0       	ldi	r18, 0x00	; 0
     b5c:	30 e0       	ldi	r19, 0x00	; 0
     b5e:	40 e8       	ldi	r20, 0x80	; 128
     b60:	5f e3       	ldi	r21, 0x3F	; 63
     b62:	6f 81       	ldd	r22, Y+7	; 0x07
     b64:	78 85       	ldd	r23, Y+8	; 0x08
     b66:	89 85       	ldd	r24, Y+9	; 0x09
     b68:	9a 85       	ldd	r25, Y+10	; 0x0a
     b6a:	8c d5       	rcall	.+2840   	; 0x1684 <__eqsf2>
     b6c:	88 23       	and	r24, r24
     b6e:	0c f0       	brlt	.+2      	; 0xb72 <TestRunningChronometer+0x68>
     b70:	05 c0       	rjmp	.+10     	; 0xb7c <TestRunningChronometer+0x72>
		__ticks = 1;
     b72:	81 e0       	ldi	r24, 0x01	; 1
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	9e 83       	std	Y+6, r25	; 0x06
     b78:	8d 83       	std	Y+5, r24	; 0x05
     b7a:	18 c0       	rjmp	.+48     	; 0xbac <TestRunningChronometer+0xa2>
	else if (__tmp > 65535)
     b7c:	20 e0       	ldi	r18, 0x00	; 0
     b7e:	3f ef       	ldi	r19, 0xFF	; 255
     b80:	4f e7       	ldi	r20, 0x7F	; 127
     b82:	57 e4       	ldi	r21, 0x47	; 71
     b84:	6f 81       	ldd	r22, Y+7	; 0x07
     b86:	78 85       	ldd	r23, Y+8	; 0x08
     b88:	89 85       	ldd	r24, Y+9	; 0x09
     b8a:	9a 85       	ldd	r25, Y+10	; 0x0a
     b8c:	7e d5       	rcall	.+2812   	; 0x168a <__gesf2>
     b8e:	18 16       	cp	r1, r24
     b90:	0c f0       	brlt	.+2      	; 0xb94 <TestRunningChronometer+0x8a>
     b92:	03 c0       	rjmp	.+6      	; 0xb9a <TestRunningChronometer+0x90>
		__ticks = 0;	/* i.e. 65536 */
     b94:	1e 82       	std	Y+6, r1	; 0x06
     b96:	1d 82       	std	Y+5, r1	; 0x05
     b98:	09 c0       	rjmp	.+18     	; 0xbac <TestRunningChronometer+0xa2>
	else
		__ticks = (uint16_t)__tmp;
     b9a:	6f 81       	ldd	r22, Y+7	; 0x07
     b9c:	78 85       	ldd	r23, Y+8	; 0x08
     b9e:	89 85       	ldd	r24, Y+9	; 0x09
     ba0:	9a 85       	ldd	r25, Y+10	; 0x0a
     ba2:	30 d5       	rcall	.+2656   	; 0x1604 <__fixsfsi>
     ba4:	dc 01       	movw	r26, r24
     ba6:	cb 01       	movw	r24, r22
     ba8:	9e 83       	std	Y+6, r25	; 0x06
     baa:	8d 83       	std	Y+5, r24	; 0x05
     bac:	8d 81       	ldd	r24, Y+5	; 0x05
     bae:	9e 81       	ldd	r25, Y+6	; 0x06
     bb0:	9c 87       	std	Y+12, r25	; 0x0c
     bb2:	8b 87       	std	Y+11, r24	; 0x0b
     bb4:	8b 85       	ldd	r24, Y+11	; 0x0b
     bb6:	9c 85       	ldd	r25, Y+12	; 0x0c
     bb8:	01 97       	sbiw	r24, 0x01	; 1
     bba:	f1 f7       	brne	.-4      	; 0xbb8 <TestRunningChronometer+0xae>
     bbc:	9c 87       	std	Y+12, r25	; 0x0c
     bbe:	8b 87       	std	Y+11, r24	; 0x0b
        _delay_ms(100);
        switch_off_led(8);
     bc0:	88 e0       	ldi	r24, 0x08	; 8
     bc2:	dc db       	rcall	.-2120   	; 0x37c <switch_off_led>
   The maximal possible delay is 262.14 ms / F_CPU in MHz.
 */
void
_delay_ms(double __ms)
{
     bc4:	80 e0       	ldi	r24, 0x00	; 0
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	a8 ec       	ldi	r26, 0xC8	; 200
     bca:	b2 e4       	ldi	r27, 0x42	; 66
     bcc:	8f 83       	std	Y+7, r24	; 0x07
     bce:	98 87       	std	Y+8, r25	; 0x08
     bd0:	a9 87       	std	Y+9, r26	; 0x09
     bd2:	ba 87       	std	Y+10, r27	; 0x0a
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bd4:	20 e0       	ldi	r18, 0x00	; 0
     bd6:	30 e0       	ldi	r19, 0x00	; 0
     bd8:	4a e7       	ldi	r20, 0x7A	; 122
     bda:	53 e4       	ldi	r21, 0x43	; 67
     bdc:	6f 81       	ldd	r22, Y+7	; 0x07
     bde:	78 85       	ldd	r23, Y+8	; 0x08
     be0:	89 85       	ldd	r24, Y+9	; 0x09
     be2:	9a 85       	ldd	r25, Y+10	; 0x0a
     be4:	bf d5       	rcall	.+2942   	; 0x1764 <__mulsf3>
     be6:	dc 01       	movw	r26, r24
     be8:	cb 01       	movw	r24, r22
     bea:	89 83       	std	Y+1, r24	; 0x01
     bec:	9a 83       	std	Y+2, r25	; 0x02
     bee:	ab 83       	std	Y+3, r26	; 0x03
     bf0:	bc 83       	std	Y+4, r27	; 0x04
	if (__tmp < 1.0)
     bf2:	20 e0       	ldi	r18, 0x00	; 0
     bf4:	30 e0       	ldi	r19, 0x00	; 0
     bf6:	40 e8       	ldi	r20, 0x80	; 128
     bf8:	5f e3       	ldi	r21, 0x3F	; 63
     bfa:	69 81       	ldd	r22, Y+1	; 0x01
     bfc:	7a 81       	ldd	r23, Y+2	; 0x02
     bfe:	8b 81       	ldd	r24, Y+3	; 0x03
     c00:	9c 81       	ldd	r25, Y+4	; 0x04
     c02:	40 d5       	rcall	.+2688   	; 0x1684 <__eqsf2>
     c04:	88 23       	and	r24, r24
     c06:	0c f0       	brlt	.+2      	; 0xc0a <TestRunningChronometer+0x100>
     c08:	05 c0       	rjmp	.+10     	; 0xc14 <TestRunningChronometer+0x10a>
		__ticks = 1;
     c0a:	81 e0       	ldi	r24, 0x01	; 1
     c0c:	90 e0       	ldi	r25, 0x00	; 0
     c0e:	9c 87       	std	Y+12, r25	; 0x0c
     c10:	8b 87       	std	Y+11, r24	; 0x0b
     c12:	18 c0       	rjmp	.+48     	; 0xc44 <TestRunningChronometer+0x13a>
	else if (__tmp > 65535)
     c14:	20 e0       	ldi	r18, 0x00	; 0
     c16:	3f ef       	ldi	r19, 0xFF	; 255
     c18:	4f e7       	ldi	r20, 0x7F	; 127
     c1a:	57 e4       	ldi	r21, 0x47	; 71
     c1c:	69 81       	ldd	r22, Y+1	; 0x01
     c1e:	7a 81       	ldd	r23, Y+2	; 0x02
     c20:	8b 81       	ldd	r24, Y+3	; 0x03
     c22:	9c 81       	ldd	r25, Y+4	; 0x04
     c24:	32 d5       	rcall	.+2660   	; 0x168a <__gesf2>
     c26:	18 16       	cp	r1, r24
     c28:	0c f0       	brlt	.+2      	; 0xc2c <TestRunningChronometer+0x122>
     c2a:	03 c0       	rjmp	.+6      	; 0xc32 <TestRunningChronometer+0x128>
		__ticks = 0;	/* i.e. 65536 */
     c2c:	1c 86       	std	Y+12, r1	; 0x0c
     c2e:	1b 86       	std	Y+11, r1	; 0x0b
     c30:	09 c0       	rjmp	.+18     	; 0xc44 <TestRunningChronometer+0x13a>
	else
		__ticks = (uint16_t)__tmp;
     c32:	69 81       	ldd	r22, Y+1	; 0x01
     c34:	7a 81       	ldd	r23, Y+2	; 0x02
     c36:	8b 81       	ldd	r24, Y+3	; 0x03
     c38:	9c 81       	ldd	r25, Y+4	; 0x04
     c3a:	e4 d4       	rcall	.+2504   	; 0x1604 <__fixsfsi>
     c3c:	dc 01       	movw	r26, r24
     c3e:	cb 01       	movw	r24, r22
     c40:	9c 87       	std	Y+12, r25	; 0x0c
     c42:	8b 87       	std	Y+11, r24	; 0x0b
     c44:	8b 85       	ldd	r24, Y+11	; 0x0b
     c46:	9c 85       	ldd	r25, Y+12	; 0x0c
     c48:	9e 83       	std	Y+6, r25	; 0x06
     c4a:	8d 83       	std	Y+5, r24	; 0x05
     c4c:	8d 81       	ldd	r24, Y+5	; 0x05
     c4e:	9e 81       	ldd	r25, Y+6	; 0x06
     c50:	01 97       	sbiw	r24, 0x01	; 1
     c52:	f1 f7       	brne	.-4      	; 0xc50 <TestRunningChronometer+0x146>
     c54:	9e 83       	std	Y+6, r25	; 0x06
     c56:	8d 83       	std	Y+5, r24	; 0x05
     c58:	2c 96       	adiw	r28, 0x0c	; 12
     c5a:	0f b6       	in	r0, 0x3f	; 63
     c5c:	f8 94       	cli
     c5e:	de bf       	out	0x3e, r29	; 62
     c60:	0f be       	out	0x3f, r0	; 63
     c62:	cd bf       	out	0x3d, r28	; 61
     c64:	df 91       	pop	r29
     c66:	cf 91       	pop	r28
     c68:	08 95       	ret

00000c6a <sf_init>:
        _delay_ms(100);
    }
}

/*
 * software init function
 */
void sf_init(void) {
     c6a:	cf 93       	push	r28
     c6c:	df 93       	push	r29
     c6e:	cd b7       	in	r28, 0x3d	; 61
     c70:	de b7       	in	r29, 0x3e	; 62
    // Leds
    //test_leds_up_off(); // uncomment for release or comment for debug

    // Sound
    //beep(3,100); // uncomment for release or comment for debug

    // Time
    running_chronometer = FALSE;
     c72:	10 92 7c 00 	sts	0x007C, r1
    init_time(&current_time);
     c76:	8d e7       	ldi	r24, 0x7D	; 125
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	f2 d9       	rcall	.-3100   	; 0x60 <init_time>
    init_time(&last_time);
     c7c:	87 e8       	ldi	r24, 0x87	; 135
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	ef d9       	rcall	.-3106   	; 0x60 <init_time>
    init_time(&best_time);
     c82:	82 e8       	ldi	r24, 0x82	; 130
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	ec d9       	rcall	.-3112   	; 0x60 <init_time>
     c88:	df 91       	pop	r29
     c8a:	cf 91       	pop	r28
     c8c:	08 95       	ret

00000c8e <hw_init>:
}

/*
 *  hardware init function
 */
void hw_init(void) {
     c8e:	cf 93       	push	r28
     c90:	df 93       	push	r29
     c92:	cd b7       	in	r28, 0x3d	; 61
     c94:	de b7       	in	r29, 0x3e	; 62
     c96:	21 97       	sbiw	r28, 0x01	; 1
     c98:	0f b6       	in	r0, 0x3f	; 63
     c9a:	f8 94       	cli
     c9c:	de bf       	out	0x3e, r29	; 62
     c9e:	0f be       	out	0x3f, r0	; 63
     ca0:	cd bf       	out	0x3d, r28	; 61
   // ******************
   // * WatchDog Timer *
   // ******************
   // disable by default

   // ********
   // * LEDs *
   // ********
   DDRC=0xFF; // set up PORTD pins 0 to 7 as output
     ca2:	8f ef       	ldi	r24, 0xFF	; 255
     ca4:	80 93 34 00 	sts	0x0034, r24
   //switch_on_all_leds();
   switch_off_all_leds();
     ca8:	36 db       	rcall	.-2452   	; 0x316 <switch_off_all_leds>

   // *********************************
   // * Start/Stop chronometer (INT0) *
   // *********************************
   // Set Pin 6 (PD2) as the pin to use for this example
   //PCMSK |= (1<<PIND2); // TO FIX
   //PIND |= (1<<PIND2); // try scls:Error : read-only !!!

   // interrupt on INT0 pin falling edge (sensor triggered)
   MCUCR = (1<<ISC01) | (1<<ISC00);
     caa:	83 e0       	ldi	r24, 0x03	; 3
     cac:	80 93 55 00 	sts	0x0055, r24

   // turn on interrupts!

   GICR |= (1<<INT0); //INT0
     cb0:	80 91 5b 00 	lds	r24, 0x005B
     cb4:	80 64       	ori	r24, 0x40	; 64
     cb6:	80 93 5b 00 	sts	0x005B, r24

   sei(); // enable interrupts
     cba:	78 94       	sei

   // *************************************************
   // * Conv Analog to Digital (CAN for RPM and Temp) *
   // *************************************************

   //volatile static int analog_result;
   //volatile static unsigned char analog_busy;

   //analog_busy=1; // busy mark the ADC function
   uint8_t channel = 0; // measure ADC0
     cbc:	19 82       	std	Y+1, r1	; 0x01

   // use internal 2.56V ref  REFS1=1 & REFS0=1 (11)
   // use external ref (01)
   ADMUX=(0<<REFS1)|(1<<REFS0)|(channel & 0x07); // channel & 0x07
     cbe:	89 81       	ldd	r24, Y+1	; 0x01
     cc0:	87 70       	andi	r24, 0x07	; 7
     cc2:	80 64       	ori	r24, 0x40	; 64
     cc4:	80 93 27 00 	sts	0x0027, r24

   //ADCSRA=(1<<ADEN)|(1<<ADIE)|(1<<ADIF)|(1<<ADPS2); // interrupt ADIE=1
   ADCSRA=(1<<ADEN)|(0<<ADIE)|(1<<ADIF)|(1<<ADPS2); // no interrupt ADIE=0
     cc8:	84 e9       	ldi	r24, 0x94	; 148
     cca:	80 93 26 00 	sts	0x0026, r24

   ADCSRA |= (1 << (ADSC)); // start conversion
     cce:	80 91 26 00 	lds	r24, 0x0026
     cd2:	80 64       	ori	r24, 0x40	; 64
     cd4:	80 93 26 00 	sts	0x0026, r24

   DDRA=0x00;
     cd8:	10 92 3a 00 	sts	0x003A, r1
	// make sure pull-up resistors are turned off
	PORTA = 0x00;
     cdc:	10 92 3b 00 	sts	0x003B, r1
	

   // **********
   // * Keypad *
   // **********
   // 1 joystick button (4 directions, up, down, left, right)
   // 2 push buttons (ok, cancel)
   DDRB=0x00;
     ce0:	10 92 37 00 	sts	0x0037, r1
   PORTB=0xFF;
     ce4:	8f ef       	ldi	r24, 0xFF	; 255
     ce6:	80 93 38 00 	sts	0x0038, r24
     cea:	21 96       	adiw	r28, 0x01	; 1
     cec:	0f b6       	in	r0, 0x3f	; 63
     cee:	f8 94       	cli
     cf0:	de bf       	out	0x3e, r29	; 62
     cf2:	0f be       	out	0x3f, r0	; 63
     cf4:	cd bf       	out	0x3d, r28	; 61
     cf6:	df 91       	pop	r29
     cf8:	cf 91       	pop	r28
     cfa:	08 95       	ret

00000cfc <init>:

   // ***************
   // * Graphic LCD *
   // ***************

   // Sound

   // Time
}

/*
 * init function
 */
void init(void) {
     cfc:	cf 93       	push	r28
     cfe:	df 93       	push	r29
     d00:	cd b7       	in	r28, 0x3d	; 61
     d02:	de b7       	in	r29, 0x3e	; 62
    hw_init();
     d04:	c4 df       	rcall	.-120    	; 0xc8e <hw_init>
    sf_init();
     d06:	b1 df       	rcall	.-158    	; 0xc6a <sf_init>
     d08:	df 91       	pop	r29
     d0a:	cf 91       	pop	r28
     d0c:	08 95       	ret

00000d0e <adcConvert10bit>:
}

/*
 * convert from analog to digital (10 bits)
 */
unsigned short adcConvert10bit(uint8_t ch)
{
     d0e:	cf 93       	push	r28
     d10:	df 93       	push	r29
     d12:	cd b7       	in	r28, 0x3d	; 61
     d14:	de b7       	in	r29, 0x3e	; 62
     d16:	21 97       	sbiw	r28, 0x01	; 1
     d18:	0f b6       	in	r0, 0x3f	; 63
     d1a:	f8 94       	cli
     d1c:	de bf       	out	0x3e, r29	; 62
     d1e:	0f be       	out	0x3f, r0	; 63
     d20:	cd bf       	out	0x3d, r28	; 61
     d22:	89 83       	std	Y+1, r24	; 0x01
	//a2dCompleteFlag = 0;				// clear conversion complete flag
	ADMUX = ((ADMUX) & ~0x1F) | (ch & 0x1F);	// set channel ADC_MUX_MASK=0x1F
     d24:	80 91 27 00 	lds	r24, 0x0027
     d28:	98 2f       	mov	r25, r24
     d2a:	90 7e       	andi	r25, 0xE0	; 224
     d2c:	89 81       	ldd	r24, Y+1	; 0x01
     d2e:	8f 71       	andi	r24, 0x1F	; 31
     d30:	89 2b       	or	r24, r25
     d32:	80 93 27 00 	sts	0x0027, r24
	ADCSRA |= (_BV(ADIF)); // clear hardware "conversion complete" flag
     d36:	80 91 26 00 	lds	r24, 0x0026
     d3a:	80 61       	ori	r24, 0x10	; 16
     d3c:	80 93 26 00 	sts	0x0026, r24
	ADCSRA |= (_BV(ADSC)); // start conversion
     d40:	80 91 26 00 	lds	r24, 0x0026
     d44:	80 64       	ori	r24, 0x40	; 64
     d46:	80 93 26 00 	sts	0x0026, r24
							
	//while(!a2dCompleteFlag);				// wait until conversion complete
	//while( bit_is_clear(ADCSR, ADIF) );		// wait until conversion complete
	while( bit_is_set(ADCSRA, ADSC) );		// wait until conversion complete
     d4a:	80 91 26 00 	lds	r24, 0x0026
     d4e:	99 27       	eor	r25, r25
     d50:	80 74       	andi	r24, 0x40	; 64
     d52:	90 70       	andi	r25, 0x00	; 0
     d54:	00 97       	sbiw	r24, 0x00	; 0
     d56:	09 f0       	breq	.+2      	; 0xd5a <adcConvert10bit+0x4c>
     d58:	f8 cf       	rjmp	.-16     	; 0xd4a <adcConvert10bit+0x3c>

	// CAUTION: MUST READ ADCL BEFORE ADCH!!!
	return ((ADCL) | ((ADCH)<<8));	// read ADC (full 10 bits);
     d5a:	80 91 24 00 	lds	r24, 0x0024
     d5e:	28 2f       	mov	r18, r24
     d60:	33 27       	eor	r19, r19
     d62:	80 91 25 00 	lds	r24, 0x0025
     d66:	99 27       	eor	r25, r25
     d68:	98 2f       	mov	r25, r24
     d6a:	88 27       	eor	r24, r24
     d6c:	28 2b       	or	r18, r24
     d6e:	39 2b       	or	r19, r25
     d70:	c9 01       	movw	r24, r18
     d72:	21 96       	adiw	r28, 0x01	; 1
     d74:	0f b6       	in	r0, 0x3f	; 63
     d76:	f8 94       	cli
     d78:	de bf       	out	0x3e, r29	; 62
     d7a:	0f be       	out	0x3f, r0	; 63
     d7c:	cd bf       	out	0x3d, r28	; 61
     d7e:	df 91       	pop	r29
     d80:	cf 91       	pop	r28
     d82:	08 95       	ret

00000d84 <adcConvert8bit>:
}

/*
 * convert from analog to digital (8 bits)
 * starts conversion, waits until conversion is done, and returns result
 */
unsigned char adcConvert8bit(unsigned char ch)
{
     d84:	cf 93       	push	r28
     d86:	df 93       	push	r29
     d88:	cd b7       	in	r28, 0x3d	; 61
     d8a:	de b7       	in	r29, 0x3e	; 62
     d8c:	21 97       	sbiw	r28, 0x01	; 1
     d8e:	0f b6       	in	r0, 0x3f	; 63
     d90:	f8 94       	cli
     d92:	de bf       	out	0x3e, r29	; 62
     d94:	0f be       	out	0x3f, r0	; 63
     d96:	cd bf       	out	0x3d, r28	; 61
     d98:	89 83       	std	Y+1, r24	; 0x01
	// do 10-bit conversion and return highest 8 bits
	return adcConvert10bit(ch)>>2;			// return ADC MSB byte
     d9a:	89 81       	ldd	r24, Y+1	; 0x01
     d9c:	b8 df       	rcall	.-144    	; 0xd0e <adcConvert10bit>
     d9e:	96 95       	lsr	r25
     da0:	87 95       	ror	r24
     da2:	96 95       	lsr	r25
     da4:	87 95       	ror	r24
     da6:	99 27       	eor	r25, r25
     da8:	21 96       	adiw	r28, 0x01	; 1
     daa:	0f b6       	in	r0, 0x3f	; 63
     dac:	f8 94       	cli
     dae:	de bf       	out	0x3e, r29	; 62
     db0:	0f be       	out	0x3f, r0	; 63
     db2:	cd bf       	out	0x3d, r28	; 61
     db4:	df 91       	pop	r29
     db6:	cf 91       	pop	r28
     db8:	08 95       	ret

00000dba <SeekButtons>:
}

#define Nbuts 6
#define B_LEFT 0
#define B_RIGHT 1
#define B_UP 2
#define B_DOWN 3
#define B_OK 4
#define B_CANCEL 5

void SeekButtons(void) {
     dba:	cf 93       	push	r28
     dbc:	df 93       	push	r29
     dbe:	cd b7       	in	r28, 0x3d	; 61
     dc0:	de b7       	in	r29, 0x3e	; 62
     dc2:	22 97       	sbiw	r28, 0x02	; 2
     dc4:	0f b6       	in	r0, 0x3f	; 63
     dc6:	f8 94       	cli
     dc8:	de bf       	out	0x3e, r29	; 62
     dca:	0f be       	out	0x3f, r0	; 63
     dcc:	cd bf       	out	0x3d, r28	; 61
    uint8_t bstate = FALSE;
     dce:	19 82       	std	Y+1, r1	; 0x01
    uint8_t i;
	 for (i=0; i<=Nbuts-1; i++) {
     dd0:	1a 82       	std	Y+2, r1	; 0x02
     dd2:	8a 81       	ldd	r24, Y+2	; 0x02
     dd4:	86 30       	cpi	r24, 0x06	; 6
     dd6:	e8 f4       	brcc	.+58     	; 0xe12 <SeekButtons+0x58>
	     if (PINB>>i) {
     dd8:	80 91 36 00 	lds	r24, 0x0036
     ddc:	28 2f       	mov	r18, r24
     dde:	33 27       	eor	r19, r19
     de0:	8a 81       	ldd	r24, Y+2	; 0x02
     de2:	99 27       	eor	r25, r25
     de4:	02 c0       	rjmp	.+4      	; 0xdea <SeekButtons+0x30>
     de6:	35 95       	asr	r19
     de8:	27 95       	ror	r18
     dea:	8a 95       	dec	r24
     dec:	e2 f7       	brpl	.-8      	; 0xde6 <SeekButtons+0x2c>
     dee:	c9 01       	movw	r24, r18
     df0:	00 97       	sbiw	r24, 0x00	; 0
     df2:	11 f0       	breq	.+4      	; 0xdf8 <SeekButtons+0x3e>
	         bstate = FALSE;
     df4:	19 82       	std	Y+1, r1	; 0x01
     df6:	02 c0       	rjmp	.+4      	; 0xdfc <SeekButtons+0x42>
	     } else {
	         bstate = TRUE;
     df8:	8f ef       	ldi	r24, 0xFF	; 255
     dfa:	89 83       	std	Y+1, r24	; 0x01
	     }
		
	     if ( i==B_LEFT && bstate ) { // LEFT

	     }
	     if ( i==B_RIGHT && bstate ) { // RIGHT

	     }
	     if ( i==B_UP && bstate ) { // UP

	     }
	     if ( i==B_DOWN && bstate ) { // DOWN

	     }
	     if ( i==B_OK && bstate ) { // OK
     dfc:	8a 81       	ldd	r24, Y+2	; 0x02
     dfe:	84 30       	cpi	r24, 0x04	; 4
     e00:	21 f4       	brne	.+8      	; 0xe0a <SeekButtons+0x50>
     e02:	89 81       	ldd	r24, Y+1	; 0x01
     e04:	88 23       	and	r24, r24
     e06:	09 f0       	breq	.+2      	; 0xe0a <SeekButtons+0x50>
            StartStopChronometer();
     e08:	63 de       	rcall	.-826    	; 0xad0 <StartStopChronometer>
     e0a:	8a 81       	ldd	r24, Y+2	; 0x02
     e0c:	8f 5f       	subi	r24, 0xFF	; 255
     e0e:	8a 83       	std	Y+2, r24	; 0x02
     e10:	e0 cf       	rjmp	.-64     	; 0xdd2 <SeekButtons+0x18>
     e12:	22 96       	adiw	r28, 0x02	; 2
     e14:	0f b6       	in	r0, 0x3f	; 63
     e16:	f8 94       	cli
     e18:	de bf       	out	0x3e, r29	; 62
     e1a:	0f be       	out	0x3f, r0	; 63
     e1c:	cd bf       	out	0x3d, r28	; 61
     e1e:	df 91       	pop	r29
     e20:	cf 91       	pop	r28
     e22:	08 95       	ret

00000e24 <loop>:
	     }
	     if ( i==B_CANCEL && bstate ) { // CANCEL

	     }	     	     	     	
	}
}

/*
 *  this is the main loop
 */
void loop(void) {
     e24:	0f 93       	push	r16
     e26:	1f 93       	push	r17
     e28:	cf 93       	push	r28
     e2a:	df 93       	push	r29
     e2c:	cd b7       	in	r28, 0x3d	; 61
     e2e:	de b7       	in	r29, 0x3e	; 62
     e30:	28 97       	sbiw	r28, 0x08	; 8
     e32:	0f b6       	in	r0, 0x3f	; 63
     e34:	f8 94       	cli
     e36:	de bf       	out	0x3e, r29	; 62
     e38:	0f be       	out	0x3f, r0	; 63
     e3a:	cd bf       	out	0x3d, r28	; 61
    SeekButtons();
     e3c:	be df       	rcall	.-132    	; 0xdba <SeekButtons>

    volatile double ch0 = adcConvert10bit(0);
     e3e:	80 e0       	ldi	r24, 0x00	; 0
     e40:	66 df       	rcall	.-308    	; 0xd0e <adcConvert10bit>
     e42:	8c 01       	movw	r16, r24
     e44:	c8 01       	movw	r24, r16
     e46:	aa 27       	eor	r26, r26
     e48:	97 fd       	sbrc	r25, 7
     e4a:	a0 95       	com	r26
     e4c:	ba 2f       	mov	r27, r26
     e4e:	bc 01       	movw	r22, r24
     e50:	cd 01       	movw	r24, r26
     e52:	f5 d3       	rcall	.+2026   	; 0x163e <__floatsisf>
     e54:	6d 83       	std	Y+5, r22	; 0x05
     e56:	7e 83       	std	Y+6, r23	; 0x06
     e58:	8f 83       	std	Y+7, r24	; 0x07
     e5a:	98 87       	std	Y+8, r25	; 0x08
     e5c:	11 23       	and	r17, r17
     e5e:	7c f4       	brge	.+30     	; 0xe7e <loop+0x5a>
     e60:	20 e0       	ldi	r18, 0x00	; 0
     e62:	30 e0       	ldi	r19, 0x00	; 0
     e64:	40 e8       	ldi	r20, 0x80	; 128
     e66:	57 e4       	ldi	r21, 0x47	; 71
     e68:	6d 81       	ldd	r22, Y+5	; 0x05
     e6a:	7e 81       	ldd	r23, Y+6	; 0x06
     e6c:	8f 81       	ldd	r24, Y+7	; 0x07
     e6e:	98 85       	ldd	r25, Y+8	; 0x08
     e70:	41 d3       	rcall	.+1666   	; 0x14f4 <__addsf3>
     e72:	dc 01       	movw	r26, r24
     e74:	cb 01       	movw	r24, r22
     e76:	8d 83       	std	Y+5, r24	; 0x05
     e78:	9e 83       	std	Y+6, r25	; 0x06
     e7a:	af 83       	std	Y+7, r26	; 0x07
     e7c:	b8 87       	std	Y+8, r27	; 0x08
     e7e:	8d 81       	ldd	r24, Y+5	; 0x05
     e80:	9e 81       	ldd	r25, Y+6	; 0x06
     e82:	af 81       	ldd	r26, Y+7	; 0x07
     e84:	b8 85       	ldd	r27, Y+8	; 0x08
     e86:	89 83       	std	Y+1, r24	; 0x01
     e88:	9a 83       	std	Y+2, r25	; 0x02
     e8a:	ab 83       	std	Y+3, r26	; 0x03
     e8c:	bc 83       	std	Y+4, r27	; 0x04
    ch0 *= 0.09765625; // 0.09765625 = 100 / 2^10
     e8e:	20 e0       	ldi	r18, 0x00	; 0
     e90:	30 e0       	ldi	r19, 0x00	; 0
     e92:	48 ec       	ldi	r20, 0xC8	; 200
     e94:	5d e3       	ldi	r21, 0x3D	; 61
     e96:	69 81       	ldd	r22, Y+1	; 0x01
     e98:	7a 81       	ldd	r23, Y+2	; 0x02
     e9a:	8b 81       	ldd	r24, Y+3	; 0x03
     e9c:	9c 81       	ldd	r25, Y+4	; 0x04
     e9e:	62 d4       	rcall	.+2244   	; 0x1764 <__mulsf3>
     ea0:	dc 01       	movw	r26, r24
     ea2:	cb 01       	movw	r24, r22
     ea4:	89 83       	std	Y+1, r24	; 0x01
     ea6:	9a 83       	std	Y+2, r25	; 0x02
     ea8:	ab 83       	std	Y+3, r26	; 0x03
     eaa:	bc 83       	std	Y+4, r27	; 0x04
    show_percent(ch0);
     eac:	69 81       	ldd	r22, Y+1	; 0x01
     eae:	7a 81       	ldd	r23, Y+2	; 0x02
     eb0:	8b 81       	ldd	r24, Y+3	; 0x03
     eb2:	9c 81       	ldd	r25, Y+4	; 0x04
     eb4:	6b dd       	rcall	.-1322   	; 0x98c <show_percent>

/*
    _delay_ms(500);

    double ch1 = adcConvert10bit(1);
    ch1 *= 0.09765625; // 0.09765625 = 100 / 2^10
    show_percent(ch1);

    _delay_ms(500);
*/

    TestRunningChronometer();
     eb6:	29 de       	rcall	.-942    	; 0xb0a <TestRunningChronometer>

    inc_time(&current_time);
     eb8:	8d e7       	ldi	r24, 0x7D	; 125
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	7a d9       	rcall	.-3340   	; 0x1b2 <inc_time>
     ebe:	28 96       	adiw	r28, 0x08	; 8
     ec0:	0f b6       	in	r0, 0x3f	; 63
     ec2:	f8 94       	cli
     ec4:	de bf       	out	0x3e, r29	; 62
     ec6:	0f be       	out	0x3f, r0	; 63
     ec8:	cd bf       	out	0x3d, r28	; 61
     eca:	df 91       	pop	r29
     ecc:	cf 91       	pop	r28
     ece:	1f 91       	pop	r17
     ed0:	0f 91       	pop	r16
     ed2:	08 95       	ret

00000ed4 <main>:
}


/*
 * main program
 */
int main(void) {
     ed4:	cf e5       	ldi	r28, 0x5F	; 95
     ed6:	d2 e0       	ldi	r29, 0x02	; 2
     ed8:	de bf       	out	0x3e, r29	; 62
     eda:	cd bf       	out	0x3d, r28	; 61
    init();
     edc:	0f df       	rcall	.-482    	; 0xcfc <init>
    while(1) { // Infinite loop; define here the
        loop(); // system behaviour
     ede:	a2 df       	rcall	.-188    	; 0xe24 <loop>
     ee0:	fe cf       	rjmp	.-4      	; 0xede <main+0xa>

00000ee2 <__vector_1>:
    }
    return 0;
}

/*
 * interrupt handler for INT0
 */
SIGNAL(SIG_INTERRUPT0) {
     ee2:	1f 92       	push	r1
     ee4:	0f 92       	push	r0
     ee6:	0f b6       	in	r0, 0x3f	; 63
     ee8:	0f 92       	push	r0
     eea:	11 24       	eor	r1, r1
     eec:	2f 93       	push	r18
     eee:	3f 93       	push	r19
     ef0:	4f 93       	push	r20
     ef2:	5f 93       	push	r21
     ef4:	6f 93       	push	r22
     ef6:	7f 93       	push	r23
     ef8:	8f 93       	push	r24
     efa:	9f 93       	push	r25
     efc:	af 93       	push	r26
     efe:	bf 93       	push	r27
     f00:	ef 93       	push	r30
     f02:	ff 93       	push	r31
     f04:	cf 93       	push	r28
     f06:	df 93       	push	r29
     f08:	cd b7       	in	r28, 0x3d	; 61
     f0a:	de b7       	in	r29, 0x3e	; 62
    StartStopChronometer();
     f0c:	e1 dd       	rcall	.-1086   	; 0xad0 <StartStopChronometer>
     f0e:	df 91       	pop	r29
     f10:	cf 91       	pop	r28
     f12:	ff 91       	pop	r31
     f14:	ef 91       	pop	r30
     f16:	bf 91       	pop	r27
     f18:	af 91       	pop	r26
     f1a:	9f 91       	pop	r25
     f1c:	8f 91       	pop	r24
     f1e:	7f 91       	pop	r23
     f20:	6f 91       	pop	r22
     f22:	5f 91       	pop	r21
     f24:	4f 91       	pop	r20
     f26:	3f 91       	pop	r19
     f28:	2f 91       	pop	r18
     f2a:	0f 90       	pop	r0
     f2c:	0f be       	out	0x3f, r0	; 63
     f2e:	0f 90       	pop	r0
     f30:	1f 90       	pop	r1
     f32:	18 95       	reti

00000f34 <printf>:
     f34:	a0 e0       	ldi	r26, 0x00	; 0
     f36:	b0 e0       	ldi	r27, 0x00	; 0
     f38:	ef e9       	ldi	r30, 0x9F	; 159
     f3a:	f7 e0       	ldi	r31, 0x07	; 7
     f3c:	8d c4       	rjmp	.+2330   	; 0x1858 <__prologue_saves__+0x20>
     f3e:	e5 e0       	ldi	r30, 0x05	; 5
     f40:	f0 e0       	ldi	r31, 0x00	; 0
     f42:	ec 0f       	add	r30, r28
     f44:	fd 1f       	adc	r31, r29
     f46:	81 91       	ld	r24, Z+
     f48:	91 91       	ld	r25, Z+
     f4a:	af 01       	movw	r20, r30
     f4c:	bc 01       	movw	r22, r24
     f4e:	80 91 8e 00 	lds	r24, 0x008E
     f52:	90 91 8f 00 	lds	r25, 0x008F
     f56:	02 d0       	rcall	.+4      	; 0xf5c <vfprintf>
     f58:	e2 e0       	ldi	r30, 0x02	; 2
     f5a:	9a c4       	rjmp	.+2356   	; 0x1890 <__epilogue_restores__+0x20>

00000f5c <vfprintf>:
     f5c:	a2 e1       	ldi	r26, 0x12	; 18
     f5e:	b0 e0       	ldi	r27, 0x00	; 0
     f60:	e3 eb       	ldi	r30, 0xB3	; 179
     f62:	f7 e0       	ldi	r31, 0x07	; 7
     f64:	69 c4       	rjmp	.+2258   	; 0x1838 <__prologue_saves__>
     f66:	ee 24       	eor	r14, r14
     f68:	ff 24       	eor	r15, r15
     f6a:	87 01       	movw	r16, r14
     f6c:	1c 01       	movw	r2, r24
     f6e:	7e 87       	std	Y+14, r23	; 0x0e
     f70:	6d 87       	std	Y+13, r22	; 0x0d
     f72:	2a 01       	movw	r4, r20
     f74:	cc 24       	eor	r12, r12
     f76:	dd 24       	eor	r13, r13
     f78:	fc 01       	movw	r30, r24
     f7a:	d7 82       	std	Z+7, r13	; 0x07
     f7c:	c6 82       	std	Z+6, r12	; 0x06
     f7e:	83 81       	ldd	r24, Z+3	; 0x03
     f80:	81 fd       	sbrc	r24, 1
     f82:	55 c2       	rjmp	.+1194   	; 0x142e <vfprintf+0x4d2>
     f84:	8f ef       	ldi	r24, 0xFF	; 255
     f86:	9f ef       	ldi	r25, 0xFF	; 255
     f88:	65 c2       	rjmp	.+1226   	; 0x1454 <vfprintf+0x4f8>
     f8a:	8d 85       	ldd	r24, Y+13	; 0x0d
     f8c:	9e 85       	ldd	r25, Y+14	; 0x0e
     f8e:	01 96       	adiw	r24, 0x01	; 1
     f90:	9e 87       	std	Y+14, r25	; 0x0e
     f92:	8d 87       	std	Y+13, r24	; 0x0d
     f94:	c0 fe       	sbrs	r12, 0
     f96:	39 c2       	rjmp	.+1138   	; 0x140a <vfprintf+0x4ae>
     f98:	8f 85       	ldd	r24, Y+15	; 0x0f
     f9a:	80 53       	subi	r24, 0x30	; 48
     f9c:	8a 30       	cpi	r24, 0x0A	; 10
     f9e:	d0 f4       	brcc	.+52     	; 0xfd4 <vfprintf+0x78>
     fa0:	9f 85       	ldd	r25, Y+15	; 0x0f
     fa2:	90 33       	cpi	r25, 0x30	; 48
     fa4:	39 f4       	brne	.+14     	; 0xfb4 <vfprintf+0x58>
     fa6:	66 20       	and	r6, r6
     fa8:	29 f4       	brne	.+10     	; 0xfb4 <vfprintf+0x58>
     faa:	c3 fc       	sbrc	r12, 3
     fac:	03 c0       	rjmp	.+6      	; 0xfb4 <vfprintf+0x58>
     fae:	e0 e0       	ldi	r30, 0x00	; 0
     fb0:	f1 e0       	ldi	r31, 0x01	; 1
     fb2:	8d c0       	rjmp	.+282    	; 0x10ce <vfprintf+0x172>
     fb4:	8a e0       	ldi	r24, 0x0A	; 10
     fb6:	68 9e       	mul	r6, r24
     fb8:	60 2c       	mov	r6, r0
     fba:	11 24       	eor	r1, r1
     fbc:	ff 85       	ldd	r31, Y+15	; 0x0f
     fbe:	6f 0e       	add	r6, r31
     fc0:	20 ed       	ldi	r18, 0xD0	; 208
     fc2:	62 0e       	add	r6, r18
     fc4:	67 fe       	sbrs	r6, 7
     fc6:	02 c0       	rjmp	.+4      	; 0xfcc <vfprintf+0x70>
     fc8:	5f e7       	ldi	r21, 0x7F	; 127
     fca:	65 2e       	mov	r6, r21
     fcc:	c3 fc       	sbrc	r12, 3
     fce:	2f c2       	rjmp	.+1118   	; 0x142e <vfprintf+0x4d2>
     fd0:	76 2c       	mov	r7, r6
     fd2:	2d c2       	rjmp	.+1114   	; 0x142e <vfprintf+0x4d2>
     fd4:	c3 fe       	sbrs	r12, 3
     fd6:	04 c0       	rjmp	.+8      	; 0xfe0 <vfprintf+0x84>
     fd8:	66 20       	and	r6, r6
     fda:	11 f4       	brne	.+4      	; 0xfe0 <vfprintf+0x84>
     fdc:	41 e0       	ldi	r20, 0x01	; 1
     fde:	64 2e       	mov	r6, r20
     fe0:	ef 85       	ldd	r30, Y+15	; 0x0f
     fe2:	8e 2f       	mov	r24, r30
     fe4:	99 27       	eor	r25, r25
     fe6:	87 fd       	sbrc	r24, 7
     fe8:	90 95       	com	r25
     fea:	88 36       	cpi	r24, 0x68	; 104
     fec:	91 05       	cpc	r25, r1
     fee:	8c f5       	brge	.+98     	; 0x1052 <vfprintf+0xf6>
     ff0:	85 36       	cpi	r24, 0x65	; 101
     ff2:	91 05       	cpc	r25, r1
     ff4:	0c f0       	brlt	.+2      	; 0xff8 <vfprintf+0x9c>
     ff6:	6e c0       	rjmp	.+220    	; 0x10d4 <vfprintf+0x178>
     ff8:	83 35       	cpi	r24, 0x53	; 83
     ffa:	91 05       	cpc	r25, r1
     ffc:	09 f4       	brne	.+2      	; 0x1000 <vfprintf+0xa4>
     ffe:	92 c0       	rjmp	.+292    	; 0x1124 <vfprintf+0x1c8>
    1000:	84 35       	cpi	r24, 0x54	; 84
    1002:	91 05       	cpc	r25, r1
    1004:	cc f4       	brge	.+50     	; 0x1038 <vfprintf+0xdc>
    1006:	8b 32       	cpi	r24, 0x2B	; 43
    1008:	91 05       	cpc	r25, r1
    100a:	09 f4       	brne	.+2      	; 0x100e <vfprintf+0xb2>
    100c:	49 c0       	rjmp	.+146    	; 0x10a0 <vfprintf+0x144>
    100e:	8c 32       	cpi	r24, 0x2C	; 44
    1010:	91 05       	cpc	r25, r1
    1012:	4c f4       	brge	.+18     	; 0x1026 <vfprintf+0xca>
    1014:	80 32       	cpi	r24, 0x20	; 32
    1016:	91 05       	cpc	r25, r1
    1018:	09 f4       	brne	.+2      	; 0x101c <vfprintf+0xc0>
    101a:	46 c0       	rjmp	.+140    	; 0x10a8 <vfprintf+0x14c>
    101c:	83 32       	cpi	r24, 0x23	; 35
    101e:	91 05       	cpc	r25, r1
    1020:	09 f4       	brne	.+2      	; 0x1024 <vfprintf+0xc8>
    1022:	4a c0       	rjmp	.+148    	; 0x10b8 <vfprintf+0x15c>
    1024:	ed c1       	rjmp	.+986    	; 0x1400 <vfprintf+0x4a4>
    1026:	8d 32       	cpi	r24, 0x2D	; 45
    1028:	91 05       	cpc	r25, r1
    102a:	09 f4       	brne	.+2      	; 0x102e <vfprintf+0xd2>
    102c:	40 c0       	rjmp	.+128    	; 0x10ae <vfprintf+0x152>
    102e:	8e 32       	cpi	r24, 0x2E	; 46
    1030:	91 05       	cpc	r25, r1
    1032:	09 f4       	brne	.+2      	; 0x1036 <vfprintf+0xda>
    1034:	44 c0       	rjmp	.+136    	; 0x10be <vfprintf+0x162>
    1036:	e4 c1       	rjmp	.+968    	; 0x1400 <vfprintf+0x4a4>
    1038:	83 36       	cpi	r24, 0x63	; 99
    103a:	91 05       	cpc	r25, r1
    103c:	09 f4       	brne	.+2      	; 0x1040 <vfprintf+0xe4>
    103e:	50 c0       	rjmp	.+160    	; 0x10e0 <vfprintf+0x184>
    1040:	84 36       	cpi	r24, 0x64	; 100
    1042:	91 05       	cpc	r25, r1
    1044:	0c f0       	brlt	.+2      	; 0x1048 <vfprintf+0xec>
    1046:	87 c0       	rjmp	.+270    	; 0x1156 <vfprintf+0x1fa>
    1048:	88 35       	cpi	r24, 0x58	; 88
    104a:	91 05       	cpc	r25, r1
    104c:	09 f4       	brne	.+2      	; 0x1050 <vfprintf+0xf4>
    104e:	b9 c0       	rjmp	.+370    	; 0x11c2 <vfprintf+0x266>
    1050:	d7 c1       	rjmp	.+942    	; 0x1400 <vfprintf+0x4a4>
    1052:	80 37       	cpi	r24, 0x70	; 112
    1054:	91 05       	cpc	r25, r1
    1056:	09 f4       	brne	.+2      	; 0x105a <vfprintf+0xfe>
    1058:	ae c0       	rjmp	.+348    	; 0x11b6 <vfprintf+0x25a>
    105a:	81 37       	cpi	r24, 0x71	; 113
    105c:	91 05       	cpc	r25, r1
    105e:	84 f4       	brge	.+32     	; 0x1080 <vfprintf+0x124>
    1060:	8c 36       	cpi	r24, 0x6C	; 108
    1062:	91 05       	cpc	r25, r1
    1064:	91 f1       	breq	.+100    	; 0x10ca <vfprintf+0x16e>
    1066:	8d 36       	cpi	r24, 0x6D	; 109
    1068:	91 05       	cpc	r25, r1
    106a:	2c f4       	brge	.+10     	; 0x1076 <vfprintf+0x11a>
    106c:	89 36       	cpi	r24, 0x69	; 105
    106e:	91 05       	cpc	r25, r1
    1070:	09 f4       	brne	.+2      	; 0x1074 <vfprintf+0x118>
    1072:	71 c0       	rjmp	.+226    	; 0x1156 <vfprintf+0x1fa>
    1074:	c5 c1       	rjmp	.+906    	; 0x1400 <vfprintf+0x4a4>
    1076:	8f 36       	cpi	r24, 0x6F	; 111
    1078:	91 05       	cpc	r25, r1
    107a:	09 f4       	brne	.+2      	; 0x107e <vfprintf+0x122>
    107c:	99 c0       	rjmp	.+306    	; 0x11b0 <vfprintf+0x254>
    107e:	c0 c1       	rjmp	.+896    	; 0x1400 <vfprintf+0x4a4>
    1080:	85 37       	cpi	r24, 0x75	; 117
    1082:	91 05       	cpc	r25, r1
    1084:	09 f4       	brne	.+2      	; 0x1088 <vfprintf+0x12c>
    1086:	9f c0       	rjmp	.+318    	; 0x11c6 <vfprintf+0x26a>
    1088:	86 37       	cpi	r24, 0x76	; 118
    108a:	91 05       	cpc	r25, r1
    108c:	24 f4       	brge	.+8      	; 0x1096 <vfprintf+0x13a>
    108e:	83 37       	cpi	r24, 0x73	; 115
    1090:	91 05       	cpc	r25, r1
    1092:	71 f1       	breq	.+92     	; 0x10f0 <vfprintf+0x194>
    1094:	b5 c1       	rjmp	.+874    	; 0x1400 <vfprintf+0x4a4>
    1096:	88 37       	cpi	r24, 0x78	; 120
    1098:	91 05       	cpc	r25, r1
    109a:	09 f4       	brne	.+2      	; 0x109e <vfprintf+0x142>
    109c:	92 c0       	rjmp	.+292    	; 0x11c2 <vfprintf+0x266>
    109e:	b0 c1       	rjmp	.+864    	; 0x1400 <vfprintf+0x4a4>
    10a0:	80 e1       	ldi	r24, 0x10	; 16
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	c8 2a       	or	r12, r24
    10a6:	d9 2a       	or	r13, r25
    10a8:	e0 e2       	ldi	r30, 0x20	; 32
    10aa:	f0 e0       	ldi	r31, 0x00	; 0
    10ac:	10 c0       	rjmp	.+32     	; 0x10ce <vfprintf+0x172>
    10ae:	80 e8       	ldi	r24, 0x80	; 128
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	c8 2a       	or	r12, r24
    10b4:	d9 2a       	or	r13, r25
    10b6:	bb c1       	rjmp	.+886    	; 0x142e <vfprintf+0x4d2>
    10b8:	e0 e4       	ldi	r30, 0x40	; 64
    10ba:	f0 e0       	ldi	r31, 0x00	; 0
    10bc:	08 c0       	rjmp	.+16     	; 0x10ce <vfprintf+0x172>
    10be:	88 e0       	ldi	r24, 0x08	; 8
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	c8 2a       	or	r12, r24
    10c4:	d9 2a       	or	r13, r25
    10c6:	66 24       	eor	r6, r6
    10c8:	b2 c1       	rjmp	.+868    	; 0x142e <vfprintf+0x4d2>
    10ca:	e4 e0       	ldi	r30, 0x04	; 4
    10cc:	f0 e0       	ldi	r31, 0x00	; 0
    10ce:	ce 2a       	or	r12, r30
    10d0:	df 2a       	or	r13, r31
    10d2:	ad c1       	rjmp	.+858    	; 0x142e <vfprintf+0x4d2>
    10d4:	3f e3       	ldi	r19, 0x3F	; 63
    10d6:	e3 2e       	mov	r14, r19
    10d8:	7a 94       	dec	r7
    10da:	f3 e6       	ldi	r31, 0x63	; 99
    10dc:	ff 87       	std	Y+15, r31	; 0x0f
    10de:	31 c1       	rjmp	.+610    	; 0x1342 <vfprintf+0x3e6>
    10e0:	f2 01       	movw	r30, r4
    10e2:	82 e0       	ldi	r24, 0x02	; 2
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	48 0e       	add	r4, r24
    10e8:	59 1e       	adc	r5, r25
    10ea:	e0 80       	ld	r14, Z
    10ec:	7a 94       	dec	r7
    10ee:	29 c1       	rjmp	.+594    	; 0x1342 <vfprintf+0x3e6>
    10f0:	f2 01       	movw	r30, r4
    10f2:	82 e0       	ldi	r24, 0x02	; 2
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	48 0e       	add	r4, r24
    10f8:	59 1e       	adc	r5, r25
    10fa:	a0 81       	ld	r26, Z
    10fc:	b1 81       	ldd	r27, Z+1	; 0x01
    10fe:	7d 01       	movw	r14, r26
    1100:	c3 fe       	sbrs	r12, 3
    1102:	08 c0       	rjmp	.+16     	; 0x1114 <vfprintf+0x1b8>
    1104:	86 2d       	mov	r24, r6
    1106:	99 27       	eor	r25, r25
    1108:	87 fd       	sbrc	r24, 7
    110a:	90 95       	com	r25
    110c:	bc 01       	movw	r22, r24
    110e:	cd 01       	movw	r24, r26
    1110:	b8 d1       	rcall	.+880    	; 0x1482 <strnlen>
    1112:	1d c0       	rjmp	.+58     	; 0x114e <vfprintf+0x1f2>
    1114:	fd 01       	movw	r30, r26
    1116:	01 90       	ld	r0, Z+
    1118:	00 20       	and	r0, r0
    111a:	e9 f7       	brne	.-6      	; 0x1116 <vfprintf+0x1ba>
    111c:	31 97       	sbiw	r30, 0x01	; 1
    111e:	ea 1b       	sub	r30, r26
    1120:	e8 8b       	std	Y+16, r30	; 0x10
    1122:	16 c0       	rjmp	.+44     	; 0x1150 <vfprintf+0x1f4>
    1124:	f2 01       	movw	r30, r4
    1126:	82 e0       	ldi	r24, 0x02	; 2
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	48 0e       	add	r4, r24
    112c:	59 1e       	adc	r5, r25
    112e:	01 90       	ld	r0, Z+
    1130:	f0 81       	ld	r31, Z
    1132:	e0 2d       	mov	r30, r0
    1134:	7f 01       	movw	r14, r30
    1136:	c3 fe       	sbrs	r12, 3
    1138:	08 c0       	rjmp	.+16     	; 0x114a <vfprintf+0x1ee>
    113a:	86 2d       	mov	r24, r6
    113c:	99 27       	eor	r25, r25
    113e:	87 fd       	sbrc	r24, 7
    1140:	90 95       	com	r25
    1142:	bc 01       	movw	r22, r24
    1144:	cf 01       	movw	r24, r30
    1146:	92 d1       	rcall	.+804    	; 0x146c <strnlen_P>
    1148:	02 c0       	rjmp	.+4      	; 0x114e <vfprintf+0x1f2>
    114a:	cf 01       	movw	r24, r30
    114c:	86 d1       	rcall	.+780    	; 0x145a <strlen_P>
    114e:	88 8b       	std	Y+16, r24	; 0x10
    1150:	98 89       	ldd	r25, Y+16	; 0x10
    1152:	79 1a       	sub	r7, r25
    1154:	f6 c0       	rjmp	.+492    	; 0x1342 <vfprintf+0x3e6>
    1156:	c2 fe       	sbrs	r12, 2
    1158:	0a c0       	rjmp	.+20     	; 0x116e <vfprintf+0x212>
    115a:	f2 01       	movw	r30, r4
    115c:	84 e0       	ldi	r24, 0x04	; 4
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	48 0e       	add	r4, r24
    1162:	59 1e       	adc	r5, r25
    1164:	20 81       	ld	r18, Z
    1166:	31 81       	ldd	r19, Z+1	; 0x01
    1168:	42 81       	ldd	r20, Z+2	; 0x02
    116a:	53 81       	ldd	r21, Z+3	; 0x03
    116c:	0c c0       	rjmp	.+24     	; 0x1186 <vfprintf+0x22a>
    116e:	f2 01       	movw	r30, r4
    1170:	82 e0       	ldi	r24, 0x02	; 2
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	48 0e       	add	r4, r24
    1176:	59 1e       	adc	r5, r25
    1178:	80 81       	ld	r24, Z
    117a:	91 81       	ldd	r25, Z+1	; 0x01
    117c:	9c 01       	movw	r18, r24
    117e:	44 27       	eor	r20, r20
    1180:	37 fd       	sbrc	r19, 7
    1182:	40 95       	com	r20
    1184:	54 2f       	mov	r21, r20
    1186:	79 01       	movw	r14, r18
    1188:	8a 01       	movw	r16, r20
    118a:	57 ff       	sbrs	r21, 7
    118c:	0c c0       	rjmp	.+24     	; 0x11a6 <vfprintf+0x24a>
    118e:	e2 e0       	ldi	r30, 0x02	; 2
    1190:	f0 e0       	ldi	r31, 0x00	; 0
    1192:	ce 2a       	or	r12, r30
    1194:	df 2a       	or	r13, r31
    1196:	10 95       	com	r17
    1198:	00 95       	com	r16
    119a:	f0 94       	com	r15
    119c:	e0 94       	com	r14
    119e:	e1 1c       	adc	r14, r1
    11a0:	f1 1c       	adc	r15, r1
    11a2:	01 1d       	adc	r16, r1
    11a4:	11 1d       	adc	r17, r1
    11a6:	8f eb       	ldi	r24, 0xBF	; 191
    11a8:	9f ef       	ldi	r25, 0xFF	; 255
    11aa:	c8 22       	and	r12, r24
    11ac:	d9 22       	and	r13, r25
    11ae:	27 c0       	rjmp	.+78     	; 0x11fe <vfprintf+0x2a2>
    11b0:	98 e0       	ldi	r25, 0x08	; 8
    11b2:	98 8b       	std	Y+16, r25	; 0x10
    11b4:	08 c0       	rjmp	.+16     	; 0x11c6 <vfprintf+0x26a>
    11b6:	e0 e4       	ldi	r30, 0x40	; 64
    11b8:	f0 e0       	ldi	r31, 0x00	; 0
    11ba:	ce 2a       	or	r12, r30
    11bc:	df 2a       	or	r13, r31
    11be:	f8 e7       	ldi	r31, 0x78	; 120
    11c0:	ff 87       	std	Y+15, r31	; 0x0f
    11c2:	20 e1       	ldi	r18, 0x10	; 16
    11c4:	28 8b       	std	Y+16, r18	; 0x10
    11c6:	c2 fe       	sbrs	r12, 2
    11c8:	0a c0       	rjmp	.+20     	; 0x11de <vfprintf+0x282>
    11ca:	f2 01       	movw	r30, r4
    11cc:	84 e0       	ldi	r24, 0x04	; 4
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	48 0e       	add	r4, r24
    11d2:	59 1e       	adc	r5, r25
    11d4:	20 81       	ld	r18, Z
    11d6:	31 81       	ldd	r19, Z+1	; 0x01
    11d8:	42 81       	ldd	r20, Z+2	; 0x02
    11da:	53 81       	ldd	r21, Z+3	; 0x03
    11dc:	0a c0       	rjmp	.+20     	; 0x11f2 <vfprintf+0x296>
    11de:	f2 01       	movw	r30, r4
    11e0:	82 e0       	ldi	r24, 0x02	; 2
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	48 0e       	add	r4, r24
    11e6:	59 1e       	adc	r5, r25
    11e8:	80 81       	ld	r24, Z
    11ea:	91 81       	ldd	r25, Z+1	; 0x01
    11ec:	9c 01       	movw	r18, r24
    11ee:	44 27       	eor	r20, r20
    11f0:	55 27       	eor	r21, r21
    11f2:	79 01       	movw	r14, r18
    11f4:	8a 01       	movw	r16, r20
    11f6:	ef ec       	ldi	r30, 0xCF	; 207
    11f8:	ff ef       	ldi	r31, 0xFF	; 255
    11fa:	ce 22       	and	r12, r30
    11fc:	df 22       	and	r13, r31
    11fe:	ce 01       	movw	r24, r28
    1200:	01 96       	adiw	r24, 0x01	; 1
    1202:	9a 8b       	std	Y+18, r25	; 0x12
    1204:	89 8b       	std	Y+17, r24	; 0x11
    1206:	98 89       	ldd	r25, Y+16	; 0x10
    1208:	89 2e       	mov	r8, r25
    120a:	99 24       	eor	r9, r9
    120c:	aa 24       	eor	r10, r10
    120e:	bb 24       	eor	r11, r11
    1210:	c8 01       	movw	r24, r16
    1212:	b7 01       	movw	r22, r14
    1214:	a5 01       	movw	r20, r10
    1216:	94 01       	movw	r18, r8
    1218:	ed d2       	rcall	.+1498   	; 0x17f4 <__udivmodsi4>
    121a:	dc 01       	movw	r26, r24
    121c:	cb 01       	movw	r24, r22
    121e:	e9 89       	ldd	r30, Y+17	; 0x11
    1220:	fa 89       	ldd	r31, Y+18	; 0x12
    1222:	80 83       	st	Z, r24
    1224:	8a 30       	cpi	r24, 0x0A	; 10
    1226:	24 f0       	brlt	.+8      	; 0x1230 <vfprintf+0x2d4>
    1228:	ff 85       	ldd	r31, Y+15	; 0x0f
    122a:	8f 0f       	add	r24, r31
    122c:	81 52       	subi	r24, 0x21	; 33
    122e:	01 c0       	rjmp	.+2      	; 0x1232 <vfprintf+0x2d6>
    1230:	80 5d       	subi	r24, 0xD0	; 208
    1232:	e9 89       	ldd	r30, Y+17	; 0x11
    1234:	fa 89       	ldd	r31, Y+18	; 0x12
    1236:	81 93       	st	Z+, r24
    1238:	fa 8b       	std	Y+18, r31	; 0x12
    123a:	e9 8b       	std	Y+17, r30	; 0x11
    123c:	c8 01       	movw	r24, r16
    123e:	b7 01       	movw	r22, r14
    1240:	a5 01       	movw	r20, r10
    1242:	94 01       	movw	r18, r8
    1244:	d7 d2       	rcall	.+1454   	; 0x17f4 <__udivmodsi4>
    1246:	79 01       	movw	r14, r18
    1248:	8a 01       	movw	r16, r20
    124a:	21 15       	cp	r18, r1
    124c:	31 05       	cpc	r19, r1
    124e:	41 05       	cpc	r20, r1
    1250:	51 05       	cpc	r21, r1
    1252:	f1 f6       	brne	.-68     	; 0x1210 <vfprintf+0x2b4>
    1254:	e9 88       	ldd	r14, Y+17	; 0x11
    1256:	81 e0       	ldi	r24, 0x01	; 1
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	8c 0f       	add	r24, r28
    125c:	9d 1f       	adc	r25, r29
    125e:	e8 1a       	sub	r14, r24
    1260:	c6 01       	movw	r24, r12
    1262:	82 73       	andi	r24, 0x32	; 50
    1264:	90 70       	andi	r25, 0x00	; 0
    1266:	89 2b       	or	r24, r25
    1268:	09 f0       	breq	.+2      	; 0x126c <vfprintf+0x310>
    126a:	7a 94       	dec	r7
    126c:	c6 fe       	sbrs	r12, 6
    126e:	0d c0       	rjmp	.+26     	; 0x128a <vfprintf+0x32e>
    1270:	87 2d       	mov	r24, r7
    1272:	99 27       	eor	r25, r25
    1274:	87 fd       	sbrc	r24, 7
    1276:	90 95       	com	r25
    1278:	e8 89       	ldd	r30, Y+16	; 0x10
    127a:	e0 31       	cpi	r30, 0x10	; 16
    127c:	21 f4       	brne	.+8      	; 0x1286 <vfprintf+0x32a>
    127e:	2e ef       	ldi	r18, 0xFE	; 254
    1280:	72 2e       	mov	r7, r18
    1282:	78 0e       	add	r7, r24
    1284:	02 c0       	rjmp	.+4      	; 0x128a <vfprintf+0x32e>
    1286:	78 2e       	mov	r7, r24
    1288:	7a 94       	dec	r7
    128a:	c3 fe       	sbrs	r12, 3
    128c:	0f c0       	rjmp	.+30     	; 0x12ac <vfprintf+0x350>
    128e:	26 2d       	mov	r18, r6
    1290:	33 27       	eor	r19, r19
    1292:	27 fd       	sbrc	r18, 7
    1294:	30 95       	com	r19
    1296:	8e 2d       	mov	r24, r14
    1298:	99 27       	eor	r25, r25
    129a:	82 17       	cp	r24, r18
    129c:	93 07       	cpc	r25, r19
    129e:	2c f0       	brlt	.+10     	; 0x12aa <vfprintf+0x34e>
    12a0:	87 ef       	ldi	r24, 0xF7	; 247
    12a2:	9f ef       	ldi	r25, 0xFF	; 255
    12a4:	c8 22       	and	r12, r24
    12a6:	d9 22       	and	r13, r25
    12a8:	01 c0       	rjmp	.+2      	; 0x12ac <vfprintf+0x350>
    12aa:	6e 18       	sub	r6, r14
    12ac:	c3 fe       	sbrs	r12, 3
    12ae:	02 c0       	rjmp	.+4      	; 0x12b4 <vfprintf+0x358>
    12b0:	76 18       	sub	r7, r6
    12b2:	01 c0       	rjmp	.+2      	; 0x12b6 <vfprintf+0x35a>
    12b4:	7e 18       	sub	r7, r14
    12b6:	c6 01       	movw	r24, r12
    12b8:	80 78       	andi	r24, 0x80	; 128
    12ba:	91 70       	andi	r25, 0x01	; 1
    12bc:	89 2b       	or	r24, r25
    12be:	49 f4       	brne	.+18     	; 0x12d2 <vfprintf+0x376>
    12c0:	87 2d       	mov	r24, r7
    12c2:	7a 94       	dec	r7
    12c4:	18 16       	cp	r1, r24
    12c6:	2c f4       	brge	.+10     	; 0x12d2 <vfprintf+0x376>
    12c8:	b1 01       	movw	r22, r2
    12ca:	80 e2       	ldi	r24, 0x20	; 32
    12cc:	90 e0       	ldi	r25, 0x00	; 0
    12ce:	e4 d0       	rcall	.+456    	; 0x1498 <fputc>
    12d0:	f7 cf       	rjmp	.-18     	; 0x12c0 <vfprintf+0x364>
    12d2:	c1 fe       	sbrs	r12, 1
    12d4:	04 c0       	rjmp	.+8      	; 0x12de <vfprintf+0x382>
    12d6:	b1 01       	movw	r22, r2
    12d8:	8d e2       	ldi	r24, 0x2D	; 45
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	0b c0       	rjmp	.+22     	; 0x12f4 <vfprintf+0x398>
    12de:	c4 fe       	sbrs	r12, 4
    12e0:	04 c0       	rjmp	.+8      	; 0x12ea <vfprintf+0x38e>
    12e2:	b1 01       	movw	r22, r2
    12e4:	8b e2       	ldi	r24, 0x2B	; 43
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	05 c0       	rjmp	.+10     	; 0x12f4 <vfprintf+0x398>
    12ea:	c5 fe       	sbrs	r12, 5
    12ec:	04 c0       	rjmp	.+8      	; 0x12f6 <vfprintf+0x39a>
    12ee:	b1 01       	movw	r22, r2
    12f0:	80 e2       	ldi	r24, 0x20	; 32
    12f2:	90 e0       	ldi	r25, 0x00	; 0
    12f4:	d1 d0       	rcall	.+418    	; 0x1498 <fputc>
    12f6:	c6 fe       	sbrs	r12, 6
    12f8:	0e c0       	rjmp	.+28     	; 0x1316 <vfprintf+0x3ba>
    12fa:	b1 01       	movw	r22, r2
    12fc:	80 e3       	ldi	r24, 0x30	; 48
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	cb d0       	rcall	.+406    	; 0x1498 <fputc>
    1302:	98 89       	ldd	r25, Y+16	; 0x10
    1304:	90 31       	cpi	r25, 0x10	; 16
    1306:	39 f4       	brne	.+14     	; 0x1316 <vfprintf+0x3ba>
    1308:	b1 01       	movw	r22, r2
    130a:	ef 85       	ldd	r30, Y+15	; 0x0f
    130c:	8e 2f       	mov	r24, r30
    130e:	99 27       	eor	r25, r25
    1310:	87 fd       	sbrc	r24, 7
    1312:	90 95       	com	r25
    1314:	c1 d0       	rcall	.+386    	; 0x1498 <fputc>
    1316:	d0 fe       	sbrs	r13, 0
    1318:	09 c0       	rjmp	.+18     	; 0x132c <vfprintf+0x3d0>
    131a:	87 2d       	mov	r24, r7
    131c:	7a 94       	dec	r7
    131e:	18 16       	cp	r1, r24
    1320:	2c f4       	brge	.+10     	; 0x132c <vfprintf+0x3d0>
    1322:	b1 01       	movw	r22, r2
    1324:	80 e3       	ldi	r24, 0x30	; 48
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	b7 d0       	rcall	.+366    	; 0x1498 <fputc>
    132a:	f7 cf       	rjmp	.-18     	; 0x131a <vfprintf+0x3be>
    132c:	c3 fe       	sbrs	r12, 3
    132e:	09 c0       	rjmp	.+18     	; 0x1342 <vfprintf+0x3e6>
    1330:	86 2d       	mov	r24, r6
    1332:	6a 94       	dec	r6
    1334:	18 16       	cp	r1, r24
    1336:	2c f4       	brge	.+10     	; 0x1342 <vfprintf+0x3e6>
    1338:	b1 01       	movw	r22, r2
    133a:	80 e3       	ldi	r24, 0x30	; 48
    133c:	90 e0       	ldi	r25, 0x00	; 0
    133e:	ac d0       	rcall	.+344    	; 0x1498 <fputc>
    1340:	f7 cf       	rjmp	.-18     	; 0x1330 <vfprintf+0x3d4>
    1342:	90 e8       	ldi	r25, 0x80	; 128
    1344:	b9 2e       	mov	r11, r25
    1346:	bc 20       	and	r11, r12
    1348:	49 f4       	brne	.+18     	; 0x135c <vfprintf+0x400>
    134a:	87 2d       	mov	r24, r7
    134c:	7a 94       	dec	r7
    134e:	18 16       	cp	r1, r24
    1350:	2c f4       	brge	.+10     	; 0x135c <vfprintf+0x400>
    1352:	b1 01       	movw	r22, r2
    1354:	80 e2       	ldi	r24, 0x20	; 32
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	9f d0       	rcall	.+318    	; 0x1498 <fputc>
    135a:	f7 cf       	rjmp	.-18     	; 0x134a <vfprintf+0x3ee>
    135c:	ff 85       	ldd	r31, Y+15	; 0x0f
    135e:	f3 36       	cpi	r31, 0x63	; 99
    1360:	39 f4       	brne	.+14     	; 0x1370 <vfprintf+0x414>
    1362:	8e 2d       	mov	r24, r14
    1364:	b1 01       	movw	r22, r2
    1366:	99 27       	eor	r25, r25
    1368:	87 fd       	sbrc	r24, 7
    136a:	90 95       	com	r25
    136c:	95 d0       	rcall	.+298    	; 0x1498 <fputc>
    136e:	3d c0       	rjmp	.+122    	; 0x13ea <vfprintf+0x48e>
    1370:	2f 85       	ldd	r18, Y+15	; 0x0f
    1372:	23 37       	cpi	r18, 0x73	; 115
    1374:	a9 f4       	brne	.+42     	; 0x13a0 <vfprintf+0x444>
    1376:	88 89       	ldd	r24, Y+16	; 0x10
    1378:	81 50       	subi	r24, 0x01	; 1
    137a:	88 8b       	std	Y+16, r24	; 0x10
    137c:	8f 3f       	cpi	r24, 0xFF	; 255
    137e:	a9 f1       	breq	.+106    	; 0x13ea <vfprintf+0x48e>
    1380:	f7 01       	movw	r30, r14
    1382:	80 81       	ld	r24, Z
    1384:	08 94       	sec
    1386:	e1 1c       	adc	r14, r1
    1388:	f1 1c       	adc	r15, r1
    138a:	b1 01       	movw	r22, r2
    138c:	99 27       	eor	r25, r25
    138e:	87 fd       	sbrc	r24, 7
    1390:	90 95       	com	r25
    1392:	82 d0       	rcall	.+260    	; 0x1498 <fputc>
    1394:	98 89       	ldd	r25, Y+16	; 0x10
    1396:	91 50       	subi	r25, 0x01	; 1
    1398:	98 8b       	std	Y+16, r25	; 0x10
    139a:	9f 3f       	cpi	r25, 0xFF	; 255
    139c:	89 f7       	brne	.-30     	; 0x1380 <vfprintf+0x424>
    139e:	25 c0       	rjmp	.+74     	; 0x13ea <vfprintf+0x48e>
    13a0:	ef 85       	ldd	r30, Y+15	; 0x0f
    13a2:	e3 35       	cpi	r30, 0x53	; 83
    13a4:	71 f4       	brne	.+28     	; 0x13c2 <vfprintf+0x466>
    13a6:	f8 89       	ldd	r31, Y+16	; 0x10
    13a8:	f1 50       	subi	r31, 0x01	; 1
    13aa:	f8 8b       	std	Y+16, r31	; 0x10
    13ac:	ff 3f       	cpi	r31, 0xFF	; 255
    13ae:	e9 f0       	breq	.+58     	; 0x13ea <vfprintf+0x48e>
    13b0:	f7 01       	movw	r30, r14
    13b2:	84 91       	lpm	r24, Z
    13b4:	b1 01       	movw	r22, r2
    13b6:	99 27       	eor	r25, r25
    13b8:	6f d0       	rcall	.+222    	; 0x1498 <fputc>
    13ba:	08 94       	sec
    13bc:	e1 1c       	adc	r14, r1
    13be:	f1 1c       	adc	r15, r1
    13c0:	f2 cf       	rjmp	.-28     	; 0x13a6 <vfprintf+0x44a>
    13c2:	6e 01       	movw	r12, r28
    13c4:	08 94       	sec
    13c6:	c1 1c       	adc	r12, r1
    13c8:	d1 1c       	adc	r13, r1
    13ca:	89 89       	ldd	r24, Y+17	; 0x11
    13cc:	9a 89       	ldd	r25, Y+18	; 0x12
    13ce:	8c 15       	cp	r24, r12
    13d0:	9d 05       	cpc	r25, r13
    13d2:	59 f0       	breq	.+22     	; 0x13ea <vfprintf+0x48e>
    13d4:	e9 89       	ldd	r30, Y+17	; 0x11
    13d6:	fa 89       	ldd	r31, Y+18	; 0x12
    13d8:	82 91       	ld	r24, -Z
    13da:	fa 8b       	std	Y+18, r31	; 0x12
    13dc:	e9 8b       	std	Y+17, r30	; 0x11
    13de:	b1 01       	movw	r22, r2
    13e0:	99 27       	eor	r25, r25
    13e2:	87 fd       	sbrc	r24, 7
    13e4:	90 95       	com	r25
    13e6:	58 d0       	rcall	.+176    	; 0x1498 <fputc>
    13e8:	f0 cf       	rjmp	.-32     	; 0x13ca <vfprintf+0x46e>
    13ea:	bb 20       	and	r11, r11
    13ec:	59 f0       	breq	.+22     	; 0x1404 <vfprintf+0x4a8>
    13ee:	87 2d       	mov	r24, r7
    13f0:	7a 94       	dec	r7
    13f2:	18 16       	cp	r1, r24
    13f4:	3c f4       	brge	.+14     	; 0x1404 <vfprintf+0x4a8>
    13f6:	b1 01       	movw	r22, r2
    13f8:	80 e2       	ldi	r24, 0x20	; 32
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	4d d0       	rcall	.+154    	; 0x1498 <fputc>
    13fe:	f7 cf       	rjmp	.-18     	; 0x13ee <vfprintf+0x492>
    1400:	b1 01       	movw	r22, r2
    1402:	4a d0       	rcall	.+148    	; 0x1498 <fputc>
    1404:	cc 24       	eor	r12, r12
    1406:	dd 24       	eor	r13, r13
    1408:	12 c0       	rjmp	.+36     	; 0x142e <vfprintf+0x4d2>
    140a:	9f 85       	ldd	r25, Y+15	; 0x0f
    140c:	95 32       	cpi	r25, 0x25	; 37
    140e:	41 f4       	brne	.+16     	; 0x1420 <vfprintf+0x4c4>
    1410:	81 e0       	ldi	r24, 0x01	; 1
    1412:	c8 2e       	mov	r12, r24
    1414:	d1 2c       	mov	r13, r1
    1416:	66 24       	eor	r6, r6
    1418:	76 2c       	mov	r7, r6
    141a:	ea e0       	ldi	r30, 0x0A	; 10
    141c:	e8 8b       	std	Y+16, r30	; 0x10
    141e:	07 c0       	rjmp	.+14     	; 0x142e <vfprintf+0x4d2>
    1420:	b1 01       	movw	r22, r2
    1422:	ff 85       	ldd	r31, Y+15	; 0x0f
    1424:	8f 2f       	mov	r24, r31
    1426:	99 27       	eor	r25, r25
    1428:	87 fd       	sbrc	r24, 7
    142a:	90 95       	com	r25
    142c:	35 d0       	rcall	.+106    	; 0x1498 <fputc>
    142e:	f1 01       	movw	r30, r2
    1430:	83 81       	ldd	r24, Z+3	; 0x03
    1432:	83 ff       	sbrs	r24, 3
    1434:	04 c0       	rjmp	.+8      	; 0x143e <vfprintf+0x4e2>
    1436:	ed 85       	ldd	r30, Y+13	; 0x0d
    1438:	fe 85       	ldd	r31, Y+14	; 0x0e
    143a:	f4 91       	lpm	r31, Z
    143c:	03 c0       	rjmp	.+6      	; 0x1444 <vfprintf+0x4e8>
    143e:	ed 85       	ldd	r30, Y+13	; 0x0d
    1440:	fe 85       	ldd	r31, Y+14	; 0x0e
    1442:	f0 81       	ld	r31, Z
    1444:	ff 87       	std	Y+15, r31	; 0x0f
    1446:	2f 85       	ldd	r18, Y+15	; 0x0f
    1448:	22 23       	and	r18, r18
    144a:	09 f0       	breq	.+2      	; 0x144e <vfprintf+0x4f2>
    144c:	9e cd       	rjmp	.-1220   	; 0xf8a <vfprintf+0x2e>
    144e:	f1 01       	movw	r30, r2
    1450:	86 81       	ldd	r24, Z+6	; 0x06
    1452:	97 81       	ldd	r25, Z+7	; 0x07
    1454:	e2 e1       	ldi	r30, 0x12	; 18
    1456:	62 96       	adiw	r28, 0x12	; 18
    1458:	0b c2       	rjmp	.+1046   	; 0x1870 <__epilogue_restores__>

0000145a <strlen_P>:
    145a:	fc 01       	movw	r30, r24
    145c:	05 90       	lpm	r0, Z+
    145e:	00 20       	and	r0, r0
    1460:	e9 f7       	brne	.-6      	; 0x145c <strlen_P+0x2>
    1462:	80 95       	com	r24
    1464:	90 95       	com	r25
    1466:	8e 0f       	add	r24, r30
    1468:	9f 1f       	adc	r25, r31
    146a:	08 95       	ret

0000146c <strnlen_P>:
    146c:	fc 01       	movw	r30, r24
    146e:	05 90       	lpm	r0, Z+
    1470:	61 50       	subi	r22, 0x01	; 1
    1472:	70 40       	sbci	r23, 0x00	; 0
    1474:	01 10       	cpse	r0, r1
    1476:	d8 f7       	brcc	.-10     	; 0x146e <strnlen_P+0x2>
    1478:	80 95       	com	r24
    147a:	90 95       	com	r25
    147c:	8e 0f       	add	r24, r30
    147e:	9f 1f       	adc	r25, r31
    1480:	08 95       	ret

00001482 <strnlen>:
    1482:	fc 01       	movw	r30, r24
    1484:	61 50       	subi	r22, 0x01	; 1
    1486:	70 40       	sbci	r23, 0x00	; 0
    1488:	01 90       	ld	r0, Z+
    148a:	01 10       	cpse	r0, r1
    148c:	d8 f7       	brcc	.-10     	; 0x1484 <strnlen+0x2>
    148e:	80 95       	com	r24
    1490:	90 95       	com	r25
    1492:	8e 0f       	add	r24, r30
    1494:	9f 1f       	adc	r25, r31
    1496:	08 95       	ret

00001498 <fputc>:
    1498:	0f 93       	push	r16
    149a:	1f 93       	push	r17
    149c:	cf 93       	push	r28
    149e:	df 93       	push	r29
    14a0:	8c 01       	movw	r16, r24
    14a2:	eb 01       	movw	r28, r22
    14a4:	8b 81       	ldd	r24, Y+3	; 0x03
    14a6:	99 27       	eor	r25, r25
    14a8:	81 ff       	sbrs	r24, 1
    14aa:	1c c0       	rjmp	.+56     	; 0x14e4 <fputc+0x4c>
    14ac:	82 ff       	sbrs	r24, 2
    14ae:	0d c0       	rjmp	.+26     	; 0x14ca <fputc+0x32>
    14b0:	2e 81       	ldd	r18, Y+6	; 0x06
    14b2:	3f 81       	ldd	r19, Y+7	; 0x07
    14b4:	8c 81       	ldd	r24, Y+4	; 0x04
    14b6:	9d 81       	ldd	r25, Y+5	; 0x05
    14b8:	28 17       	cp	r18, r24
    14ba:	39 07       	cpc	r19, r25
    14bc:	64 f4       	brge	.+24     	; 0x14d6 <fputc+0x3e>
    14be:	e8 81       	ld	r30, Y
    14c0:	f9 81       	ldd	r31, Y+1	; 0x01
    14c2:	01 93       	st	Z+, r16
    14c4:	f9 83       	std	Y+1, r31	; 0x01
    14c6:	e8 83       	st	Y, r30
    14c8:	06 c0       	rjmp	.+12     	; 0x14d6 <fputc+0x3e>
    14ca:	e8 85       	ldd	r30, Y+8	; 0x08
    14cc:	f9 85       	ldd	r31, Y+9	; 0x09
    14ce:	80 2f       	mov	r24, r16
    14d0:	09 95       	icall
    14d2:	89 2b       	or	r24, r25
    14d4:	39 f4       	brne	.+14     	; 0x14e4 <fputc+0x4c>
    14d6:	8e 81       	ldd	r24, Y+6	; 0x06
    14d8:	9f 81       	ldd	r25, Y+7	; 0x07
    14da:	01 96       	adiw	r24, 0x01	; 1
    14dc:	9f 83       	std	Y+7, r25	; 0x07
    14de:	8e 83       	std	Y+6, r24	; 0x06
    14e0:	c8 01       	movw	r24, r16
    14e2:	02 c0       	rjmp	.+4      	; 0x14e8 <fputc+0x50>
    14e4:	8f ef       	ldi	r24, 0xFF	; 255
    14e6:	9f ef       	ldi	r25, 0xFF	; 255
    14e8:	df 91       	pop	r29
    14ea:	cf 91       	pop	r28
    14ec:	1f 91       	pop	r17
    14ee:	0f 91       	pop	r16
    14f0:	08 95       	ret

000014f2 <__subsf3>:
    14f2:	50 58       	subi	r21, 0x80	; 128

000014f4 <__addsf3>:
    14f4:	19 2e       	mov	r1, r25
    14f6:	08 d1       	rcall	.+528    	; 0x1708 <__fp_split3>
    14f8:	01 d0       	rcall	.+2      	; 0x14fc <__addsf3x>
    14fa:	eb c0       	rjmp	.+470    	; 0x16d2 <__fp_merge>

000014fc <__addsf3x>:
    14fc:	ba 17       	cp	r27, r26
    14fe:	62 07       	cpc	r22, r18
    1500:	73 07       	cpc	r23, r19
    1502:	84 07       	cpc	r24, r20
    1504:	95 07       	cpc	r25, r21
    1506:	b1 f1       	breq	.+108    	; 0x1574 <__addsf3x+0x78>
    1508:	88 f4       	brcc	.+34     	; 0x152c <__addsf3x+0x30>
    150a:	0e f4       	brtc	.+2      	; 0x150e <__addsf3x+0x12>
    150c:	10 94       	com	r1
    150e:	0b 2e       	mov	r0, r27
    1510:	ba 2f       	mov	r27, r26
    1512:	a0 2d       	mov	r26, r0
    1514:	06 2e       	mov	r0, r22
    1516:	62 2f       	mov	r22, r18
    1518:	20 2d       	mov	r18, r0
    151a:	07 2e       	mov	r0, r23
    151c:	73 2f       	mov	r23, r19
    151e:	30 2d       	mov	r19, r0
    1520:	08 2e       	mov	r0, r24
    1522:	84 2f       	mov	r24, r20
    1524:	40 2d       	mov	r20, r0
    1526:	09 2e       	mov	r0, r25
    1528:	95 2f       	mov	r25, r21
    152a:	50 2d       	mov	r21, r0
    152c:	ff 27       	eor	r31, r31
    152e:	55 23       	and	r21, r21
    1530:	b9 f0       	breq	.+46     	; 0x1560 <__addsf3x+0x64>
    1532:	59 1b       	sub	r21, r25
    1534:	49 f0       	breq	.+18     	; 0x1548 <__addsf3x+0x4c>
    1536:	57 3e       	cpi	r21, 0xE7	; 231
    1538:	98 f0       	brcs	.+38     	; 0x1560 <__addsf3x+0x64>
    153a:	46 95       	lsr	r20
    153c:	37 95       	ror	r19
    153e:	27 95       	ror	r18
    1540:	a7 95       	ror	r26
    1542:	f0 40       	sbci	r31, 0x00	; 0
    1544:	53 95       	inc	r21
    1546:	c9 f7       	brne	.-14     	; 0x153a <__addsf3x+0x3e>
    1548:	76 f0       	brts	.+28     	; 0x1566 <__addsf3x+0x6a>
    154a:	ba 0f       	add	r27, r26
    154c:	62 1f       	adc	r22, r18
    154e:	73 1f       	adc	r23, r19
    1550:	84 1f       	adc	r24, r20
    1552:	30 f4       	brcc	.+12     	; 0x1560 <__addsf3x+0x64>
    1554:	87 95       	ror	r24
    1556:	77 95       	ror	r23
    1558:	67 95       	ror	r22
    155a:	b7 95       	ror	r27
    155c:	f0 40       	sbci	r31, 0x00	; 0
    155e:	93 95       	inc	r25
    1560:	17 fa       	bst	r1, 7
    1562:	0f 2e       	mov	r0, r31
    1564:	08 95       	ret
    1566:	bf 1b       	sub	r27, r31
    1568:	bb 27       	eor	r27, r27
    156a:	ba 0b       	sbc	r27, r26
    156c:	62 0b       	sbc	r22, r18
    156e:	73 0b       	sbc	r23, r19
    1570:	84 0b       	sbc	r24, r20
    1572:	f6 cf       	rjmp	.-20     	; 0x1560 <__addsf3x+0x64>
    1574:	de f6       	brtc	.-74     	; 0x152c <__addsf3x+0x30>
    1576:	f4 c0       	rjmp	.+488    	; 0x1760 <__fp_zerox>

00001578 <__divsf3>:
    1578:	c7 d0       	rcall	.+398    	; 0x1708 <__fp_split3>
    157a:	01 d0       	rcall	.+2      	; 0x157e <__divsf3x>
    157c:	aa c0       	rjmp	.+340    	; 0x16d2 <__fp_merge>

0000157e <__divsf3x>:
    157e:	55 23       	and	r21, r21
    1580:	59 f0       	breq	.+22     	; 0x1598 <__divsf3x+0x1a>
    1582:	99 23       	and	r25, r25
    1584:	69 f0       	breq	.+26     	; 0x15a0 <__divsf3x+0x22>
    1586:	9f 57       	subi	r25, 0x7F	; 127
    1588:	5f 57       	subi	r21, 0x7F	; 127
    158a:	95 1b       	sub	r25, r21
    158c:	33 f4       	brvc	.+12     	; 0x159a <__divsf3x+0x1c>
    158e:	42 f4       	brpl	.+16     	; 0x15a0 <__divsf3x+0x22>
    1590:	90 38       	cpi	r25, 0x80	; 128
    1592:	11 f4       	brne	.+4      	; 0x1598 <__divsf3x+0x1a>
    1594:	91 58       	subi	r25, 0x81	; 129
    1596:	05 c0       	rjmp	.+10     	; 0x15a2 <__divsf3x+0x24>
    1598:	b4 c0       	rjmp	.+360    	; 0x1702 <__fp_nan>
    159a:	91 58       	subi	r25, 0x81	; 129
    159c:	9f 3f       	cpi	r25, 0xFF	; 255
    159e:	09 f4       	brne	.+2      	; 0x15a2 <__divsf3x+0x24>
    15a0:	df c0       	rjmp	.+446    	; 0x1760 <__fp_zerox>
    15a2:	bb 27       	eor	r27, r27
    15a4:	11 24       	eor	r1, r1
    15a6:	62 17       	cp	r22, r18
    15a8:	73 07       	cpc	r23, r19
    15aa:	84 07       	cpc	r24, r20
    15ac:	30 f4       	brcc	.+12     	; 0x15ba <__divsf3x+0x3c>
    15ae:	66 0f       	add	r22, r22
    15b0:	77 1f       	adc	r23, r23
    15b2:	88 1f       	adc	r24, r24
    15b4:	bb 1f       	adc	r27, r27
    15b6:	91 50       	subi	r25, 0x01	; 1
    15b8:	98 f3       	brcs	.-26     	; 0x15a0 <__divsf3x+0x22>
    15ba:	11 d0       	rcall	.+34     	; 0x15de <__divsf3x+0x60>
    15bc:	0f 92       	push	r0
    15be:	0f d0       	rcall	.+30     	; 0x15de <__divsf3x+0x60>
    15c0:	0f 92       	push	r0
    15c2:	0d d0       	rcall	.+26     	; 0x15de <__divsf3x+0x60>
    15c4:	a0 e8       	ldi	r26, 0x80	; 128
    15c6:	26 17       	cp	r18, r22
    15c8:	37 07       	cpc	r19, r23
    15ca:	48 07       	cpc	r20, r24
    15cc:	1b 06       	cpc	r1, r27
    15ce:	09 f0       	breq	.+2      	; 0x15d2 <__divsf3x+0x54>
    15d0:	a0 48       	sbci	r26, 0x80	; 128
    15d2:	ba 2f       	mov	r27, r26
    15d4:	60 2d       	mov	r22, r0
    15d6:	7f 91       	pop	r23
    15d8:	8f 91       	pop	r24
    15da:	00 24       	eor	r0, r0
    15dc:	08 95       	ret
    15de:	a0 e8       	ldi	r26, 0x80	; 128
    15e0:	00 24       	eor	r0, r0
    15e2:	62 17       	cp	r22, r18
    15e4:	73 07       	cpc	r23, r19
    15e6:	84 07       	cpc	r24, r20
    15e8:	b1 05       	cpc	r27, r1
    15ea:	28 f0       	brcs	.+10     	; 0x15f6 <__divsf3x+0x78>
    15ec:	62 1b       	sub	r22, r18
    15ee:	73 0b       	sbc	r23, r19
    15f0:	84 0b       	sbc	r24, r20
    15f2:	b1 09       	sbc	r27, r1
    15f4:	0a 2a       	or	r0, r26
    15f6:	66 0f       	add	r22, r22
    15f8:	77 1f       	adc	r23, r23
    15fa:	88 1f       	adc	r24, r24
    15fc:	bb 1f       	adc	r27, r27
    15fe:	a6 95       	lsr	r26
    1600:	81 f7       	brne	.-32     	; 0x15e2 <__divsf3x+0x64>
    1602:	08 95       	ret

00001604 <__fixsfsi>:
    1604:	97 fb       	bst	r25, 7
    1606:	8c d0       	rcall	.+280    	; 0x1720 <__fp_split1>
    1608:	9f 37       	cpi	r25, 0x7F	; 127
    160a:	38 f0       	brcs	.+14     	; 0x161a <__fixsfsi+0x16>
    160c:	fe e9       	ldi	r31, 0x9E	; 158
    160e:	f9 1b       	sub	r31, r25
    1610:	98 2f       	mov	r25, r24
    1612:	87 2f       	mov	r24, r23
    1614:	76 2f       	mov	r23, r22
    1616:	6b 2f       	mov	r22, r27
    1618:	05 c0       	rjmp	.+10     	; 0x1624 <__fixsfsi+0x20>
    161a:	9f c0       	rjmp	.+318    	; 0x175a <__fp_zero>
    161c:	96 95       	lsr	r25
    161e:	87 95       	ror	r24
    1620:	77 95       	ror	r23
    1622:	67 95       	ror	r22
    1624:	f1 50       	subi	r31, 0x01	; 1
    1626:	d0 f7       	brcc	.-12     	; 0x161c <__fixsfsi+0x18>
    1628:	3e f4       	brtc	.+14     	; 0x1638 <__fp_lneg+0xe>

0000162a <__fp_lneg>:
    162a:	90 95       	com	r25
    162c:	80 95       	com	r24
    162e:	70 95       	com	r23
    1630:	61 95       	neg	r22
    1632:	7f 4f       	sbci	r23, 0xFF	; 255
    1634:	8f 4f       	sbci	r24, 0xFF	; 255
    1636:	9f 4f       	sbci	r25, 0xFF	; 255
    1638:	08 95       	ret

0000163a <__floatunssisf>:
    163a:	e8 94       	clt
    163c:	03 c0       	rjmp	.+6      	; 0x1644 <__floatsisf+0x6>

0000163e <__floatsisf>:
    163e:	97 fb       	bst	r25, 7
    1640:	0e f4       	brtc	.+2      	; 0x1644 <__floatsisf+0x6>
    1642:	f3 df       	rcall	.-26     	; 0x162a <__fp_lneg>
    1644:	b6 2f       	mov	r27, r22
    1646:	67 2f       	mov	r22, r23
    1648:	78 2f       	mov	r23, r24
    164a:	89 2f       	mov	r24, r25
    164c:	9e e9       	ldi	r25, 0x9E	; 158
    164e:	00 24       	eor	r0, r0
    1650:	40 c0       	rjmp	.+128    	; 0x16d2 <__fp_merge>

00001652 <floor>:
    1652:	74 d0       	rcall	.+232    	; 0x173c <__fp_split_a>
    1654:	9f 37       	cpi	r25, 0x7F	; 127
    1656:	60 f4       	brcc	.+24     	; 0x1670 <floor+0x1e>
    1658:	0e f0       	brts	.+2      	; 0x165c <floor+0xa>
    165a:	7f c0       	rjmp	.+254    	; 0x175a <__fp_zero>
    165c:	9f eb       	ldi	r25, 0xBF	; 191
    165e:	80 e8       	ldi	r24, 0x80	; 128
    1660:	77 27       	eor	r23, r23
    1662:	66 27       	eor	r22, r22
    1664:	08 95       	ret
    1666:	86 95       	lsr	r24
    1668:	77 95       	ror	r23
    166a:	67 95       	ror	r22
    166c:	b1 1d       	adc	r27, r1
    166e:	93 95       	inc	r25
    1670:	96 39       	cpi	r25, 0x96	; 150
    1672:	c8 f3       	brcs	.-14     	; 0x1666 <floor+0x14>
    1674:	2e f4       	brtc	.+10     	; 0x1680 <floor+0x2e>
    1676:	bb 23       	and	r27, r27
    1678:	19 f0       	breq	.+6      	; 0x1680 <floor+0x2e>
    167a:	6f 5f       	subi	r22, 0xFF	; 255
    167c:	7f 4f       	sbci	r23, 0xFF	; 255
    167e:	8f 4f       	sbci	r24, 0xFF	; 255
    1680:	bb 27       	eor	r27, r27
    1682:	27 c0       	rjmp	.+78     	; 0x16d2 <__fp_merge>

00001684 <__eqsf2>:
    1684:	0e d0       	rcall	.+28     	; 0x16a2 <.fp_cmp>
    1686:	5e f0       	brts	.+22     	; 0x169e <__cmpsf2+0xe>
    1688:	04 c0       	rjmp	.+8      	; 0x1692 <__cmpsf2+0x2>

0000168a <__gesf2>:
    168a:	0b d0       	rcall	.+22     	; 0x16a2 <.fp_cmp>
    168c:	26 f0       	brts	.+8      	; 0x1696 <__cmpsf2+0x6>
    168e:	01 c0       	rjmp	.+2      	; 0x1692 <__cmpsf2+0x2>

00001690 <__cmpsf2>:
    1690:	08 d0       	rcall	.+16     	; 0x16a2 <.fp_cmp>
    1692:	19 f0       	breq	.+6      	; 0x169a <__cmpsf2+0xa>
    1694:	20 f4       	brcc	.+8      	; 0x169e <__cmpsf2+0xe>
    1696:	8f ef       	ldi	r24, 0xFF	; 255
    1698:	08 95       	ret
    169a:	80 e0       	ldi	r24, 0x00	; 0
    169c:	08 95       	ret
    169e:	81 e0       	ldi	r24, 0x01	; 1
    16a0:	08 95       	ret

000016a2 <.fp_cmp>:
    16a2:	97 fb       	bst	r25, 7
    16a4:	09 2e       	mov	r0, r25
    16a6:	05 26       	eor	r0, r21
    16a8:	00 f8       	bld	r0, 0
    16aa:	68 94       	set
    16ac:	30 d0       	rcall	.+96     	; 0x170e <__fp_split2>
    16ae:	e8 94       	clt
    16b0:	07 fc       	sbrc	r0, 7
    16b2:	07 c0       	rjmp	.+14     	; 0x16c2 <.fp_cmp+0x20>
    16b4:	62 17       	cp	r22, r18
    16b6:	73 07       	cpc	r23, r19
    16b8:	84 07       	cpc	r24, r20
    16ba:	95 07       	cpc	r25, r21
    16bc:	21 f0       	breq	.+8      	; 0x16c6 <.fp_cmp+0x24>
    16be:	08 f4       	brcc	.+2      	; 0x16c2 <.fp_cmp+0x20>
    16c0:	00 94       	com	r0
    16c2:	07 94       	ror	r0
    16c4:	98 94       	clz
    16c6:	08 95       	ret
    16c8:	9a 95       	dec	r25
    16ca:	bb 0f       	add	r27, r27
    16cc:	66 1f       	adc	r22, r22
    16ce:	77 1f       	adc	r23, r23
    16d0:	88 1f       	adc	r24, r24

000016d2 <__fp_merge>:
    16d2:	11 24       	eor	r1, r1
    16d4:	99 23       	and	r25, r25
    16d6:	a1 f0       	breq	.+40     	; 0x1700 <__fp_merge+0x2e>
    16d8:	88 23       	and	r24, r24
    16da:	b2 f7       	brpl	.-20     	; 0x16c8 <.fp_cmp+0x26>
    16dc:	9f 3f       	cpi	r25, 0xFF	; 255
    16de:	59 f0       	breq	.+22     	; 0x16f6 <__fp_merge+0x24>
    16e0:	bb 0f       	add	r27, r27
    16e2:	48 f4       	brcc	.+18     	; 0x16f6 <__fp_merge+0x24>
    16e4:	21 f4       	brne	.+8      	; 0x16ee <__fp_merge+0x1c>
    16e6:	00 20       	and	r0, r0
    16e8:	11 f4       	brne	.+4      	; 0x16ee <__fp_merge+0x1c>
    16ea:	60 ff       	sbrs	r22, 0
    16ec:	04 c0       	rjmp	.+8      	; 0x16f6 <__fp_merge+0x24>
    16ee:	6f 5f       	subi	r22, 0xFF	; 255
    16f0:	7f 4f       	sbci	r23, 0xFF	; 255
    16f2:	8f 4f       	sbci	r24, 0xFF	; 255
    16f4:	9f 4f       	sbci	r25, 0xFF	; 255
    16f6:	88 1f       	adc	r24, r24
    16f8:	97 95       	ror	r25
    16fa:	87 95       	ror	r24
    16fc:	97 f9       	bld	r25, 7
    16fe:	08 95       	ret
    1700:	2c c0       	rjmp	.+88     	; 0x175a <__fp_zero>

00001702 <__fp_nan>:
    1702:	9f ef       	ldi	r25, 0xFF	; 255
    1704:	80 ec       	ldi	r24, 0xC0	; 192
    1706:	08 95       	ret

00001708 <__fp_split3>:
    1708:	05 2e       	mov	r0, r21
    170a:	09 26       	eor	r0, r25
    170c:	07 fa       	bst	r0, 7

0000170e <__fp_split2>:
    170e:	44 0f       	add	r20, r20
    1710:	55 1f       	adc	r21, r21
    1712:	5f 3f       	cpi	r21, 0xFF	; 255
    1714:	79 f0       	breq	.+30     	; 0x1734 <__fp_split1+0x14>
    1716:	aa 27       	eor	r26, r26
    1718:	a5 17       	cp	r26, r21
    171a:	08 f0       	brcs	.+2      	; 0x171e <__fp_split2+0x10>
    171c:	51 e0       	ldi	r21, 0x01	; 1
    171e:	47 95       	ror	r20

00001720 <__fp_split1>:
    1720:	88 0f       	add	r24, r24
    1722:	99 1f       	adc	r25, r25
    1724:	9f 3f       	cpi	r25, 0xFF	; 255
    1726:	31 f0       	breq	.+12     	; 0x1734 <__fp_split1+0x14>
    1728:	bb 27       	eor	r27, r27
    172a:	b9 17       	cp	r27, r25
    172c:	08 f0       	brcs	.+2      	; 0x1730 <__fp_split1+0x10>
    172e:	91 e0       	ldi	r25, 0x01	; 1
    1730:	87 95       	ror	r24
    1732:	08 95       	ret
    1734:	9f 91       	pop	r25
    1736:	9f 91       	pop	r25
    1738:	11 24       	eor	r1, r1
    173a:	e3 cf       	rjmp	.-58     	; 0x1702 <__fp_nan>

0000173c <__fp_split_a>:
    173c:	97 fb       	bst	r25, 7
    173e:	88 0f       	add	r24, r24
    1740:	99 1f       	adc	r25, r25
    1742:	9f 3f       	cpi	r25, 0xFF	; 255
    1744:	31 f0       	breq	.+12     	; 0x1752 <__fp_split_a+0x16>
    1746:	bb 27       	eor	r27, r27
    1748:	b9 17       	cp	r27, r25
    174a:	08 f0       	brcs	.+2      	; 0x174e <__fp_split_a+0x12>
    174c:	91 e0       	ldi	r25, 0x01	; 1
    174e:	87 95       	ror	r24
    1750:	08 95       	ret
    1752:	9f 91       	pop	r25
    1754:	9f 91       	pop	r25
    1756:	11 24       	eor	r1, r1
    1758:	d4 cf       	rjmp	.-88     	; 0x1702 <__fp_nan>

0000175a <__fp_zero>:
    175a:	66 27       	eor	r22, r22
    175c:	77 27       	eor	r23, r23
    175e:	88 27       	eor	r24, r24

00001760 <__fp_zerox>:
    1760:	99 27       	eor	r25, r25
    1762:	08 95       	ret

00001764 <__mulsf3>:
    1764:	d1 df       	rcall	.-94     	; 0x1708 <__fp_split3>
    1766:	01 d0       	rcall	.+2      	; 0x176a <__mulsf3x>
    1768:	b4 cf       	rjmp	.-152    	; 0x16d2 <__fp_merge>

0000176a <__mulsf3x>:
    176a:	99 23       	and	r25, r25
    176c:	39 f0       	breq	.+14     	; 0x177c <__mulsf3x+0x12>
    176e:	55 23       	and	r21, r21
    1770:	29 f0       	breq	.+10     	; 0x177c <__mulsf3x+0x12>
    1772:	9f 57       	subi	r25, 0x7F	; 127
    1774:	5f 57       	subi	r21, 0x7F	; 127
    1776:	95 0f       	add	r25, r21
    1778:	13 f4       	brvc	.+4      	; 0x177e <__mulsf3x+0x14>
    177a:	9a f1       	brmi	.+102    	; 0x17e2 <__mulsf3x+0x78>
    177c:	f1 cf       	rjmp	.-30     	; 0x1760 <__fp_zerox>
    177e:	91 58       	subi	r25, 0x81	; 129
    1780:	9f 3f       	cpi	r25, 0xFF	; 255
    1782:	e1 f3       	breq	.-8      	; 0x177c <__mulsf3x+0x12>
    1784:	62 9f       	mul	r22, r18
    1786:	a1 2d       	mov	r26, r1
    1788:	0f 92       	push	r0
    178a:	bb 27       	eor	r27, r27
    178c:	63 9f       	mul	r22, r19
    178e:	a0 0d       	add	r26, r0
    1790:	b1 1d       	adc	r27, r1
    1792:	ee 27       	eor	r30, r30
    1794:	72 9f       	mul	r23, r18
    1796:	a0 0d       	add	r26, r0
    1798:	b1 1d       	adc	r27, r1
    179a:	ee 1f       	adc	r30, r30
    179c:	af 93       	push	r26
    179e:	aa 27       	eor	r26, r26
    17a0:	64 9f       	mul	r22, r20
    17a2:	b0 0d       	add	r27, r0
    17a4:	e1 1d       	adc	r30, r1
    17a6:	73 9f       	mul	r23, r19
    17a8:	b0 0d       	add	r27, r0
    17aa:	e1 1d       	adc	r30, r1
    17ac:	aa 1f       	adc	r26, r26
    17ae:	66 27       	eor	r22, r22
    17b0:	82 9f       	mul	r24, r18
    17b2:	b0 0d       	add	r27, r0
    17b4:	e1 1d       	adc	r30, r1
    17b6:	a6 1f       	adc	r26, r22
    17b8:	55 27       	eor	r21, r21
    17ba:	74 9f       	mul	r23, r20
    17bc:	e0 0d       	add	r30, r0
    17be:	a1 1d       	adc	r26, r1
    17c0:	55 1f       	adc	r21, r21
    17c2:	83 9f       	mul	r24, r19
    17c4:	e0 0d       	add	r30, r0
    17c6:	a1 1d       	adc	r26, r1
    17c8:	56 1f       	adc	r21, r22
    17ca:	84 9f       	mul	r24, r20
    17cc:	a0 0d       	add	r26, r0
    17ce:	51 1d       	adc	r21, r1
    17d0:	85 2f       	mov	r24, r21
    17d2:	7a 2f       	mov	r23, r26
    17d4:	6e 2f       	mov	r22, r30
    17d6:	1f 90       	pop	r1
    17d8:	0f 90       	pop	r0
    17da:	88 23       	and	r24, r24
    17dc:	1a f4       	brpl	.+6      	; 0x17e4 <__mulsf3x+0x7a>
    17de:	93 95       	inc	r25
    17e0:	39 f4       	brne	.+14     	; 0x17f0 <__mulsf3x+0x86>
    17e2:	8f cf       	rjmp	.-226    	; 0x1702 <__fp_nan>
    17e4:	00 0c       	add	r0, r0
    17e6:	11 1c       	adc	r1, r1
    17e8:	bb 1f       	adc	r27, r27
    17ea:	66 1f       	adc	r22, r22
    17ec:	77 1f       	adc	r23, r23
    17ee:	88 1f       	adc	r24, r24
    17f0:	01 28       	or	r0, r1
    17f2:	08 95       	ret

000017f4 <__udivmodsi4>:
    17f4:	a1 e2       	ldi	r26, 0x21	; 33
    17f6:	1a 2e       	mov	r1, r26
    17f8:	aa 1b       	sub	r26, r26
    17fa:	bb 1b       	sub	r27, r27
    17fc:	fd 01       	movw	r30, r26
    17fe:	0d c0       	rjmp	.+26     	; 0x181a <__udivmodsi4_ep>

00001800 <__udivmodsi4_loop>:
    1800:	aa 1f       	adc	r26, r26
    1802:	bb 1f       	adc	r27, r27
    1804:	ee 1f       	adc	r30, r30
    1806:	ff 1f       	adc	r31, r31
    1808:	a2 17       	cp	r26, r18
    180a:	b3 07       	cpc	r27, r19
    180c:	e4 07       	cpc	r30, r20
    180e:	f5 07       	cpc	r31, r21
    1810:	20 f0       	brcs	.+8      	; 0x181a <__udivmodsi4_ep>
    1812:	a2 1b       	sub	r26, r18
    1814:	b3 0b       	sbc	r27, r19
    1816:	e4 0b       	sbc	r30, r20
    1818:	f5 0b       	sbc	r31, r21

0000181a <__udivmodsi4_ep>:
    181a:	66 1f       	adc	r22, r22
    181c:	77 1f       	adc	r23, r23
    181e:	88 1f       	adc	r24, r24
    1820:	99 1f       	adc	r25, r25
    1822:	1a 94       	dec	r1
    1824:	69 f7       	brne	.-38     	; 0x1800 <__udivmodsi4_loop>
    1826:	60 95       	com	r22
    1828:	70 95       	com	r23
    182a:	80 95       	com	r24
    182c:	90 95       	com	r25
    182e:	9b 01       	movw	r18, r22
    1830:	ac 01       	movw	r20, r24
    1832:	bd 01       	movw	r22, r26
    1834:	cf 01       	movw	r24, r30
    1836:	08 95       	ret

00001838 <__prologue_saves__>:
    1838:	2f 92       	push	r2
    183a:	3f 92       	push	r3
    183c:	4f 92       	push	r4
    183e:	5f 92       	push	r5
    1840:	6f 92       	push	r6
    1842:	7f 92       	push	r7
    1844:	8f 92       	push	r8
    1846:	9f 92       	push	r9
    1848:	af 92       	push	r10
    184a:	bf 92       	push	r11
    184c:	cf 92       	push	r12
    184e:	df 92       	push	r13
    1850:	ef 92       	push	r14
    1852:	ff 92       	push	r15
    1854:	0f 93       	push	r16
    1856:	1f 93       	push	r17
    1858:	cf 93       	push	r28
    185a:	df 93       	push	r29
    185c:	cd b7       	in	r28, 0x3d	; 61
    185e:	de b7       	in	r29, 0x3e	; 62
    1860:	ca 1b       	sub	r28, r26
    1862:	db 0b       	sbc	r29, r27
    1864:	0f b6       	in	r0, 0x3f	; 63
    1866:	f8 94       	cli
    1868:	de bf       	out	0x3e, r29	; 62
    186a:	0f be       	out	0x3f, r0	; 63
    186c:	cd bf       	out	0x3d, r28	; 61
    186e:	09 94       	ijmp

00001870 <__epilogue_restores__>:
    1870:	2a 88       	ldd	r2, Y+18	; 0x12
    1872:	39 88       	ldd	r3, Y+17	; 0x11
    1874:	48 88       	ldd	r4, Y+16	; 0x10
    1876:	5f 84       	ldd	r5, Y+15	; 0x0f
    1878:	6e 84       	ldd	r6, Y+14	; 0x0e
    187a:	7d 84       	ldd	r7, Y+13	; 0x0d
    187c:	8c 84       	ldd	r8, Y+12	; 0x0c
    187e:	9b 84       	ldd	r9, Y+11	; 0x0b
    1880:	aa 84       	ldd	r10, Y+10	; 0x0a
    1882:	b9 84       	ldd	r11, Y+9	; 0x09
    1884:	c8 84       	ldd	r12, Y+8	; 0x08
    1886:	df 80       	ldd	r13, Y+7	; 0x07
    1888:	ee 80       	ldd	r14, Y+6	; 0x06
    188a:	fd 80       	ldd	r15, Y+5	; 0x05
    188c:	0c 81       	ldd	r16, Y+4	; 0x04
    188e:	1b 81       	ldd	r17, Y+3	; 0x03
    1890:	aa 81       	ldd	r26, Y+2	; 0x02
    1892:	b9 81       	ldd	r27, Y+1	; 0x01
    1894:	ce 0f       	add	r28, r30
    1896:	d1 1d       	adc	r29, r1
    1898:	0f b6       	in	r0, 0x3f	; 63
    189a:	f8 94       	cli
    189c:	de bf       	out	0x3e, r29	; 62
    189e:	0f be       	out	0x3f, r0	; 63
    18a0:	cd bf       	out	0x3d, r28	; 61
    18a2:	ed 01       	movw	r28, r26
    18a4:	08 95       	ret
