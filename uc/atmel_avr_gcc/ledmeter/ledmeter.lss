
ledmeter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000018fc  00000000  00000000  00000094  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  000018fc  00001990  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000016  0080007c  0080007c  000019ac  2**0
                  ALLOC
  3 .noinit       00000000  00800092  00800092  000019ac  2**0
                  CONTENTS
  4 .eeprom       00000000  00810000  00810000  000019ac  2**0
                  CONTENTS
  5 .stab         00001bc0  00000000  00000000  000019ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  6 .stabstr      00000d4b  00000000  00000000  0000356c  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
       0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
       2:	86 c7       	rjmp	.+3852   	; 0xf10 <__vector_1>
       4:	2c c0       	rjmp	.+88     	; 0x5e <__bad_interrupt>
       6:	2b c0       	rjmp	.+86     	; 0x5e <__bad_interrupt>
       8:	2a c0       	rjmp	.+84     	; 0x5e <__bad_interrupt>
       a:	29 c0       	rjmp	.+82     	; 0x5e <__bad_interrupt>
       c:	28 c0       	rjmp	.+80     	; 0x5e <__bad_interrupt>
       e:	27 c0       	rjmp	.+78     	; 0x5e <__bad_interrupt>
      10:	26 c0       	rjmp	.+76     	; 0x5e <__bad_interrupt>
      12:	25 c0       	rjmp	.+74     	; 0x5e <__bad_interrupt>
      14:	24 c0       	rjmp	.+72     	; 0x5e <__bad_interrupt>
      16:	23 c0       	rjmp	.+70     	; 0x5e <__bad_interrupt>
      18:	22 c0       	rjmp	.+68     	; 0x5e <__bad_interrupt>
      1a:	21 c0       	rjmp	.+66     	; 0x5e <__bad_interrupt>
      1c:	20 c0       	rjmp	.+64     	; 0x5e <__bad_interrupt>
      1e:	1f c0       	rjmp	.+62     	; 0x5e <__bad_interrupt>
      20:	1e c0       	rjmp	.+60     	; 0x5e <__bad_interrupt>
      22:	1d c0       	rjmp	.+58     	; 0x5e <__bad_interrupt>
      24:	1c c0       	rjmp	.+56     	; 0x5e <__bad_interrupt>
      26:	1b c0       	rjmp	.+54     	; 0x5e <__bad_interrupt>
      28:	1a c0       	rjmp	.+52     	; 0x5e <__bad_interrupt>

0000002a <__ctors_end>:
      2a:	11 24       	eor	r1, r1
      2c:	1f be       	out	0x3f, r1	; 63
      2e:	cf e5       	ldi	r28, 0x5F	; 95
      30:	d2 e0       	ldi	r29, 0x02	; 2
      32:	de bf       	out	0x3e, r29	; 62
      34:	cd bf       	out	0x3d, r28	; 61

00000036 <__do_copy_data>:
      36:	10 e0       	ldi	r17, 0x00	; 0
      38:	a0 e6       	ldi	r26, 0x60	; 96
      3a:	b0 e0       	ldi	r27, 0x00	; 0
      3c:	ec ef       	ldi	r30, 0xFC	; 252
      3e:	f8 e1       	ldi	r31, 0x18	; 24
      40:	02 c0       	rjmp	.+4      	; 0x46 <.do_copy_data_start>

00000042 <.do_copy_data_loop>:
      42:	05 90       	lpm	r0, Z+
      44:	0d 92       	st	X+, r0

00000046 <.do_copy_data_start>:
      46:	ac 37       	cpi	r26, 0x7C	; 124
      48:	b1 07       	cpc	r27, r17
      4a:	d9 f7       	brne	.-10     	; 0x42 <.do_copy_data_loop>

0000004c <__do_clear_bss>:
      4c:	10 e0       	ldi	r17, 0x00	; 0
      4e:	ac e7       	ldi	r26, 0x7C	; 124
      50:	b0 e0       	ldi	r27, 0x00	; 0
      52:	01 c0       	rjmp	.+2      	; 0x56 <.do_clear_bss_start>

00000054 <.do_clear_bss_loop>:
      54:	1d 92       	st	X+, r1

00000056 <.do_clear_bss_start>:
      56:	a2 39       	cpi	r26, 0x92	; 146
      58:	b1 07       	cpc	r27, r17
      5a:	e1 f7       	brne	.-8      	; 0x54 <.do_clear_bss_loop>
      5c:	52 c7       	rjmp	.+3748   	; 0xf02 <main>

0000005e <__bad_interrupt>:
      5e:	d0 cf       	rjmp	.-96     	; 0x0 <__vectors>

00000060 <init_time>:
time_typ current_time;
time_typ last_time;
time_typ best_time;

void init_time(time_typ * time) {
      60:	cf 93       	push	r28
      62:	df 93       	push	r29
      64:	cd b7       	in	r28, 0x3d	; 61
      66:	de b7       	in	r29, 0x3e	; 62
      68:	22 97       	sbiw	r28, 0x02	; 2
      6a:	0f b6       	in	r0, 0x3f	; 63
      6c:	f8 94       	cli
      6e:	de bf       	out	0x3e, r29	; 62
      70:	0f be       	out	0x3f, r0	; 63
      72:	cd bf       	out	0x3d, r28	; 61
      74:	9a 83       	std	Y+2, r25	; 0x02
      76:	89 83       	std	Y+1, r24	; 0x01
    time->hh = 0;
      78:	e9 81       	ldd	r30, Y+1	; 0x01
      7a:	fa 81       	ldd	r31, Y+2	; 0x02
      7c:	10 82       	st	Z, r1
    time->mm = 0;
      7e:	e9 81       	ldd	r30, Y+1	; 0x01
      80:	fa 81       	ldd	r31, Y+2	; 0x02
      82:	11 82       	std	Z+1, r1	; 0x01
    time->ss = 0;
      84:	e9 81       	ldd	r30, Y+1	; 0x01
      86:	fa 81       	ldd	r31, Y+2	; 0x02
      88:	12 82       	std	Z+2, r1	; 0x02
    time->xx = 0;
      8a:	e9 81       	ldd	r30, Y+1	; 0x01
      8c:	fa 81       	ldd	r31, Y+2	; 0x02
      8e:	14 82       	std	Z+4, r1	; 0x04
      90:	13 82       	std	Z+3, r1	; 0x03
      92:	22 96       	adiw	r28, 0x02	; 2
      94:	0f b6       	in	r0, 0x3f	; 63
      96:	f8 94       	cli
      98:	de bf       	out	0x3e, r29	; 62
      9a:	0f be       	out	0x3f, r0	; 63
      9c:	cd bf       	out	0x3d, r28	; 61
      9e:	df 91       	pop	r29
      a0:	cf 91       	pop	r28
      a2:	08 95       	ret

000000a4 <def_time>:
}

void def_time(time_typ * time, uint8_t _hh, uint8_t _mm, uint8_t _ss, unsigned short int _xx) {
      a4:	0f 93       	push	r16
      a6:	1f 93       	push	r17
      a8:	cf 93       	push	r28
      aa:	df 93       	push	r29
      ac:	cd b7       	in	r28, 0x3d	; 61
      ae:	de b7       	in	r29, 0x3e	; 62
      b0:	27 97       	sbiw	r28, 0x07	; 7
      b2:	0f b6       	in	r0, 0x3f	; 63
      b4:	f8 94       	cli
      b6:	de bf       	out	0x3e, r29	; 62
      b8:	0f be       	out	0x3f, r0	; 63
      ba:	cd bf       	out	0x3d, r28	; 61
      bc:	9a 83       	std	Y+2, r25	; 0x02
      be:	89 83       	std	Y+1, r24	; 0x01
      c0:	6b 83       	std	Y+3, r22	; 0x03
      c2:	4c 83       	std	Y+4, r20	; 0x04
      c4:	2d 83       	std	Y+5, r18	; 0x05
      c6:	1f 83       	std	Y+7, r17	; 0x07
      c8:	0e 83       	std	Y+6, r16	; 0x06
    time->hh = _hh;
      ca:	e9 81       	ldd	r30, Y+1	; 0x01
      cc:	fa 81       	ldd	r31, Y+2	; 0x02
      ce:	8b 81       	ldd	r24, Y+3	; 0x03
      d0:	80 83       	st	Z, r24
    time->mm = _mm;
      d2:	e9 81       	ldd	r30, Y+1	; 0x01
      d4:	fa 81       	ldd	r31, Y+2	; 0x02
      d6:	8c 81       	ldd	r24, Y+4	; 0x04
      d8:	81 83       	std	Z+1, r24	; 0x01
    time->ss = _ss;
      da:	e9 81       	ldd	r30, Y+1	; 0x01
      dc:	fa 81       	ldd	r31, Y+2	; 0x02
      de:	8d 81       	ldd	r24, Y+5	; 0x05
      e0:	82 83       	std	Z+2, r24	; 0x02
    time->xx = _xx;
      e2:	e9 81       	ldd	r30, Y+1	; 0x01
      e4:	fa 81       	ldd	r31, Y+2	; 0x02
      e6:	8e 81       	ldd	r24, Y+6	; 0x06
      e8:	9f 81       	ldd	r25, Y+7	; 0x07
      ea:	94 83       	std	Z+4, r25	; 0x04
      ec:	83 83       	std	Z+3, r24	; 0x03
      ee:	27 96       	adiw	r28, 0x07	; 7
      f0:	0f b6       	in	r0, 0x3f	; 63
      f2:	f8 94       	cli
      f4:	de bf       	out	0x3e, r29	; 62
      f6:	0f be       	out	0x3f, r0	; 63
      f8:	cd bf       	out	0x3d, r28	; 61
      fa:	df 91       	pop	r29
      fc:	cf 91       	pop	r28
      fe:	1f 91       	pop	r17
     100:	0f 91       	pop	r16
     102:	08 95       	ret

00000104 <print_time>:
}

void print_time(time_typ * t) {
     104:	cf 93       	push	r28
     106:	df 93       	push	r29
     108:	cd b7       	in	r28, 0x3d	; 61
     10a:	de b7       	in	r29, 0x3e	; 62
     10c:	22 97       	sbiw	r28, 0x02	; 2
     10e:	0f b6       	in	r0, 0x3f	; 63
     110:	f8 94       	cli
     112:	de bf       	out	0x3e, r29	; 62
     114:	0f be       	out	0x3f, r0	; 63
     116:	cd bf       	out	0x3d, r28	; 61
     118:	9a 83       	std	Y+2, r25	; 0x02
     11a:	89 83       	std	Y+1, r24	; 0x01
    //printf("===%02i:%02i:%02i:%03u===\n",t->hh,t->mm,t->ss,t->xx/10);
    printf("===%02i:%02i:%02i:%03u===\n",t->hh,t->mm,t->ss,t->xx/((int) pow(10,CHR_PRECISION-CHR_DISPLAY)));
     11c:	e9 81       	ldd	r30, Y+1	; 0x01
     11e:	fa 81       	ldd	r31, Y+2	; 0x02
     120:	83 81       	ldd	r24, Z+3	; 0x03
     122:	94 81       	ldd	r25, Z+4	; 0x04
     124:	2a e0       	ldi	r18, 0x0A	; 10
     126:	30 e0       	ldi	r19, 0x00	; 0
     128:	b9 01       	movw	r22, r18
     12a:	7b db       	rcall	.-2314   	; 0xfffff822 <__eeprom_end+0xff7ef822>
     12c:	cb 01       	movw	r24, r22
     12e:	9f 93       	push	r25
     130:	8f 93       	push	r24
     132:	e9 81       	ldd	r30, Y+1	; 0x01
     134:	fa 81       	ldd	r31, Y+2	; 0x02
     136:	82 81       	ldd	r24, Z+2	; 0x02
     138:	99 27       	eor	r25, r25
     13a:	9f 93       	push	r25
     13c:	8f 93       	push	r24
     13e:	e9 81       	ldd	r30, Y+1	; 0x01
     140:	fa 81       	ldd	r31, Y+2	; 0x02
     142:	81 81       	ldd	r24, Z+1	; 0x01
     144:	99 27       	eor	r25, r25
     146:	9f 93       	push	r25
     148:	8f 93       	push	r24
     14a:	e9 81       	ldd	r30, Y+1	; 0x01
     14c:	fa 81       	ldd	r31, Y+2	; 0x02
     14e:	80 81       	ld	r24, Z
     150:	99 27       	eor	r25, r25
     152:	9f 93       	push	r25
     154:	8f 93       	push	r24
     156:	80 e6       	ldi	r24, 0x60	; 96
     158:	90 e0       	ldi	r25, 0x00	; 0
     15a:	9f 93       	push	r25
     15c:	8f 93       	push	r24
     15e:	01 d7       	rcall	.+3586   	; 0xf62 <printf>
     160:	8d b7       	in	r24, 0x3d	; 61
     162:	9e b7       	in	r25, 0x3e	; 62
     164:	0a 96       	adiw	r24, 0x0a	; 10
     166:	0f b6       	in	r0, 0x3f	; 63
     168:	f8 94       	cli
     16a:	9e bf       	out	0x3e, r25	; 62
     16c:	0f be       	out	0x3f, r0	; 63
     16e:	8d bf       	out	0x3d, r24	; 61
     170:	22 96       	adiw	r28, 0x02	; 2
     172:	0f b6       	in	r0, 0x3f	; 63
     174:	f8 94       	cli
     176:	de bf       	out	0x3e, r29	; 62
     178:	0f be       	out	0x3f, r0	; 63
     17a:	cd bf       	out	0x3d, r28	; 61
     17c:	df 91       	pop	r29
     17e:	cf 91       	pop	r28
     180:	08 95       	ret

00000182 <inc_time>:
}

void inc_time(time_typ * time) {
     182:	0f 93       	push	r16
     184:	1f 93       	push	r17
     186:	cf 93       	push	r28
     188:	df 93       	push	r29
     18a:	cd b7       	in	r28, 0x3d	; 61
     18c:	de b7       	in	r29, 0x3e	; 62
     18e:	26 97       	sbiw	r28, 0x06	; 6
     190:	0f b6       	in	r0, 0x3f	; 63
     192:	f8 94       	cli
     194:	de bf       	out	0x3e, r29	; 62
     196:	0f be       	out	0x3f, r0	; 63
     198:	cd bf       	out	0x3d, r28	; 61
     19a:	9a 83       	std	Y+2, r25	; 0x02
     19c:	89 83       	std	Y+1, r24	; 0x01
  if (running_chronometer) {
     19e:	80 91 7c 00 	lds	r24, 0x007C
     1a2:	88 23       	and	r24, r24
     1a4:	09 f4       	brne	.+2      	; 0x1a8 <inc_time+0x26>
     1a6:	6d c0       	rjmp	.+218    	; 0x282 <__stack+0x23>
    time->xx++;
     1a8:	a9 81       	ldd	r26, Y+1	; 0x01
     1aa:	ba 81       	ldd	r27, Y+2	; 0x02
     1ac:	e9 81       	ldd	r30, Y+1	; 0x01
     1ae:	fa 81       	ldd	r31, Y+2	; 0x02
     1b0:	83 81       	ldd	r24, Z+3	; 0x03
     1b2:	94 81       	ldd	r25, Z+4	; 0x04
     1b4:	01 96       	adiw	r24, 0x01	; 1
     1b6:	fd 01       	movw	r30, r26
     1b8:	94 83       	std	Z+4, r25	; 0x04
     1ba:	83 83       	std	Z+3, r24	; 0x03
    if(time->xx >= pow(10,CHR_PRECISION)) {
     1bc:	09 81       	ldd	r16, Y+1	; 0x01
     1be:	1a 81       	ldd	r17, Y+2	; 0x02
     1c0:	f8 01       	movw	r30, r16
     1c2:	83 81       	ldd	r24, Z+3	; 0x03
     1c4:	94 81       	ldd	r25, Z+4	; 0x04
     1c6:	aa 27       	eor	r26, r26
     1c8:	97 fd       	sbrc	r25, 7
     1ca:	a0 95       	com	r26
     1cc:	ba 2f       	mov	r27, r26
     1ce:	bc 01       	movw	r22, r24
     1d0:	cd 01       	movw	r24, r26
     1d2:	4c da       	rcall	.-2920   	; 0xfffff66c <__eeprom_end+0xff7ef66c>
     1d4:	6b 83       	std	Y+3, r22	; 0x03
     1d6:	7c 83       	std	Y+4, r23	; 0x04
     1d8:	8d 83       	std	Y+5, r24	; 0x05
     1da:	9e 83       	std	Y+6, r25	; 0x06
     1dc:	f8 01       	movw	r30, r16
     1de:	83 81       	ldd	r24, Z+3	; 0x03
     1e0:	94 81       	ldd	r25, Z+4	; 0x04
     1e2:	99 23       	and	r25, r25
     1e4:	7c f4       	brge	.+30     	; 0x204 <inc_time+0x82>
     1e6:	20 e0       	ldi	r18, 0x00	; 0
     1e8:	30 e0       	ldi	r19, 0x00	; 0
     1ea:	40 e8       	ldi	r20, 0x80	; 128
     1ec:	57 e4       	ldi	r21, 0x47	; 71
     1ee:	6b 81       	ldd	r22, Y+3	; 0x03
     1f0:	7c 81       	ldd	r23, Y+4	; 0x04
     1f2:	8d 81       	ldd	r24, Y+5	; 0x05
     1f4:	9e 81       	ldd	r25, Y+6	; 0x06
     1f6:	95 d9       	rcall	.-3286   	; 0xfffff522 <__eeprom_end+0xff7ef522>
     1f8:	dc 01       	movw	r26, r24
     1fa:	cb 01       	movw	r24, r22
     1fc:	8b 83       	std	Y+3, r24	; 0x03
     1fe:	9c 83       	std	Y+4, r25	; 0x04
     200:	ad 83       	std	Y+5, r26	; 0x05
     202:	be 83       	std	Y+6, r27	; 0x06
     204:	20 e0       	ldi	r18, 0x00	; 0
     206:	30 e4       	ldi	r19, 0x40	; 64
     208:	4c e1       	ldi	r20, 0x1C	; 28
     20a:	56 e4       	ldi	r21, 0x46	; 70
     20c:	6b 81       	ldd	r22, Y+3	; 0x03
     20e:	7c 81       	ldd	r23, Y+4	; 0x04
     210:	8d 81       	ldd	r24, Y+5	; 0x05
     212:	9e 81       	ldd	r25, Y+6	; 0x06
     214:	51 da       	rcall	.-2910   	; 0xfffff6b8 <__eeprom_end+0xff7ef6b8>
     216:	88 23       	and	r24, r24
     218:	0c f4       	brge	.+2      	; 0x21c <inc_time+0x9a>
     21a:	33 c0       	rjmp	.+102    	; 0x282 <__stack+0x23>
        time->xx = 0;
     21c:	e9 81       	ldd	r30, Y+1	; 0x01
     21e:	fa 81       	ldd	r31, Y+2	; 0x02
     220:	14 82       	std	Z+4, r1	; 0x04
     222:	13 82       	std	Z+3, r1	; 0x03
        time->ss++;
     224:	a9 81       	ldd	r26, Y+1	; 0x01
     226:	ba 81       	ldd	r27, Y+2	; 0x02
     228:	e9 81       	ldd	r30, Y+1	; 0x01
     22a:	fa 81       	ldd	r31, Y+2	; 0x02
     22c:	82 81       	ldd	r24, Z+2	; 0x02
     22e:	8f 5f       	subi	r24, 0xFF	; 255
     230:	fd 01       	movw	r30, r26
     232:	82 83       	std	Z+2, r24	; 0x02
        if (time->ss >= 60) {
     234:	e9 81       	ldd	r30, Y+1	; 0x01
     236:	fa 81       	ldd	r31, Y+2	; 0x02
     238:	82 81       	ldd	r24, Z+2	; 0x02
     23a:	8c 33       	cpi	r24, 0x3C	; 60
     23c:	10 f1       	brcs	.+68     	; 0x282 <__stack+0x23>
            time->ss = 0;
     23e:	e9 81       	ldd	r30, Y+1	; 0x01
     240:	fa 81       	ldd	r31, Y+2	; 0x02
     242:	12 82       	std	Z+2, r1	; 0x02
            time->mm++;
     244:	a9 81       	ldd	r26, Y+1	; 0x01
     246:	ba 81       	ldd	r27, Y+2	; 0x02
     248:	e9 81       	ldd	r30, Y+1	; 0x01
     24a:	fa 81       	ldd	r31, Y+2	; 0x02
     24c:	81 81       	ldd	r24, Z+1	; 0x01
     24e:	8f 5f       	subi	r24, 0xFF	; 255
     250:	fd 01       	movw	r30, r26
     252:	81 83       	std	Z+1, r24	; 0x01
            if (time->mm >= 60) {
     254:	e9 81       	ldd	r30, Y+1	; 0x01
     256:	fa 81       	ldd	r31, Y+2	; 0x02
     258:	81 81       	ldd	r24, Z+1	; 0x01
     25a:	8c 33       	cpi	r24, 0x3C	; 60
     25c:	90 f0       	brcs	.+36     	; 0x282 <__stack+0x23>
                time->mm = 0;
     25e:	e9 81       	ldd	r30, Y+1	; 0x01
     260:	fa 81       	ldd	r31, Y+2	; 0x02
     262:	11 82       	std	Z+1, r1	; 0x01
                time->hh++;
     264:	a9 81       	ldd	r26, Y+1	; 0x01
     266:	ba 81       	ldd	r27, Y+2	; 0x02
     268:	e9 81       	ldd	r30, Y+1	; 0x01
     26a:	fa 81       	ldd	r31, Y+2	; 0x02
     26c:	80 81       	ld	r24, Z
     26e:	8f 5f       	subi	r24, 0xFF	; 255
     270:	8c 93       	st	X, r24
                if (time->hh >= 24) {
     272:	e9 81       	ldd	r30, Y+1	; 0x01
     274:	fa 81       	ldd	r31, Y+2	; 0x02
     276:	80 81       	ld	r24, Z
     278:	88 31       	cpi	r24, 0x18	; 24
     27a:	18 f0       	brcs	.+6      	; 0x282 <__stack+0x23>
                    time->hh = 0;
     27c:	e9 81       	ldd	r30, Y+1	; 0x01
     27e:	fa 81       	ldd	r31, Y+2	; 0x02
     280:	10 82       	st	Z, r1
     282:	26 96       	adiw	r28, 0x06	; 6
     284:	0f b6       	in	r0, 0x3f	; 63
     286:	f8 94       	cli
     288:	de bf       	out	0x3e, r29	; 62
     28a:	0f be       	out	0x3f, r0	; 63
     28c:	cd bf       	out	0x3d, r28	; 61
     28e:	df 91       	pop	r29
     290:	cf 91       	pop	r28
     292:	1f 91       	pop	r17
     294:	0f 91       	pop	r16
     296:	08 95       	ret

00000298 <copy_time>:
					 }
            }
        }
    }
    //_delay_ms(1);
  }
}

void copy_time(time_typ * time_source, time_typ * time_dest) { // TO TEST (pointer ?)
     298:	cf 93       	push	r28
     29a:	df 93       	push	r29
     29c:	cd b7       	in	r28, 0x3d	; 61
     29e:	de b7       	in	r29, 0x3e	; 62
     2a0:	24 97       	sbiw	r28, 0x04	; 4
     2a2:	0f b6       	in	r0, 0x3f	; 63
     2a4:	f8 94       	cli
     2a6:	de bf       	out	0x3e, r29	; 62
     2a8:	0f be       	out	0x3f, r0	; 63
     2aa:	cd bf       	out	0x3d, r28	; 61
     2ac:	9a 83       	std	Y+2, r25	; 0x02
     2ae:	89 83       	std	Y+1, r24	; 0x01
     2b0:	7c 83       	std	Y+4, r23	; 0x04
     2b2:	6b 83       	std	Y+3, r22	; 0x03
    time_dest->hh = time_source->hh;
     2b4:	ab 81       	ldd	r26, Y+3	; 0x03
     2b6:	bc 81       	ldd	r27, Y+4	; 0x04
     2b8:	e9 81       	ldd	r30, Y+1	; 0x01
     2ba:	fa 81       	ldd	r31, Y+2	; 0x02
     2bc:	80 81       	ld	r24, Z
     2be:	8c 93       	st	X, r24
    time_dest->mm = time_source->mm;
     2c0:	ab 81       	ldd	r26, Y+3	; 0x03
     2c2:	bc 81       	ldd	r27, Y+4	; 0x04
     2c4:	e9 81       	ldd	r30, Y+1	; 0x01
     2c6:	fa 81       	ldd	r31, Y+2	; 0x02
     2c8:	81 81       	ldd	r24, Z+1	; 0x01
     2ca:	fd 01       	movw	r30, r26
     2cc:	81 83       	std	Z+1, r24	; 0x01
    time_dest->ss = time_source->ss;
     2ce:	ab 81       	ldd	r26, Y+3	; 0x03
     2d0:	bc 81       	ldd	r27, Y+4	; 0x04
     2d2:	e9 81       	ldd	r30, Y+1	; 0x01
     2d4:	fa 81       	ldd	r31, Y+2	; 0x02
     2d6:	82 81       	ldd	r24, Z+2	; 0x02
     2d8:	fd 01       	movw	r30, r26
     2da:	82 83       	std	Z+2, r24	; 0x02
    time_dest->xx = time_source->xx;
     2dc:	ab 81       	ldd	r26, Y+3	; 0x03
     2de:	bc 81       	ldd	r27, Y+4	; 0x04
     2e0:	e9 81       	ldd	r30, Y+1	; 0x01
     2e2:	fa 81       	ldd	r31, Y+2	; 0x02
     2e4:	83 81       	ldd	r24, Z+3	; 0x03
     2e6:	94 81       	ldd	r25, Z+4	; 0x04
     2e8:	fd 01       	movw	r30, r26
     2ea:	94 83       	std	Z+4, r25	; 0x04
     2ec:	83 83       	std	Z+3, r24	; 0x03
     2ee:	24 96       	adiw	r28, 0x04	; 4
     2f0:	0f b6       	in	r0, 0x3f	; 63
     2f2:	f8 94       	cli
     2f4:	de bf       	out	0x3e, r29	; 62
     2f6:	0f be       	out	0x3f, r0	; 63
     2f8:	cd bf       	out	0x3d, r28	; 61
     2fa:	df 91       	pop	r29
     2fc:	cf 91       	pop	r28
     2fe:	08 95       	ret

00000300 <compare_time>:
}

uint8_t compare_time(time_typ * time1, time_typ * time2) {
     300:	cf 93       	push	r28
     302:	df 93       	push	r29
     304:	cd b7       	in	r28, 0x3d	; 61
     306:	de b7       	in	r29, 0x3e	; 62
     308:	24 97       	sbiw	r28, 0x04	; 4
     30a:	0f b6       	in	r0, 0x3f	; 63
     30c:	f8 94       	cli
     30e:	de bf       	out	0x3e, r29	; 62
     310:	0f be       	out	0x3f, r0	; 63
     312:	cd bf       	out	0x3d, r28	; 61
     314:	9a 83       	std	Y+2, r25	; 0x02
     316:	89 83       	std	Y+1, r24	; 0x01
     318:	7c 83       	std	Y+4, r23	; 0x04
     31a:	6b 83       	std	Y+3, r22	; 0x03
    //  0 time1=time2
    // -1 time1<time2
    //  1 time1>time2
    return 0;
     31c:	80 e0       	ldi	r24, 0x00	; 0
     31e:	90 e0       	ldi	r25, 0x00	; 0
     320:	24 96       	adiw	r28, 0x04	; 4
     322:	0f b6       	in	r0, 0x3f	; 63
     324:	f8 94       	cli
     326:	de bf       	out	0x3e, r29	; 62
     328:	0f be       	out	0x3f, r0	; 63
     32a:	cd bf       	out	0x3d, r28	; 61
     32c:	df 91       	pop	r29
     32e:	cf 91       	pop	r28
     330:	08 95       	ret

00000332 <switch_on_all_leds>:
}




/*
void switch_on_all_leds();
void switch_off_all_leds();
void switch_on_led(uint8_t led);
void switch_off_led(uint8_t led);
void loop(void);
void init(void);
*/

// 1=off
// 0=on

/*
 * switch on all leds
 */
void switch_on_all_leds(void) {
     332:	cf 93       	push	r28
     334:	df 93       	push	r29
     336:	cd b7       	in	r28, 0x3d	; 61
     338:	de b7       	in	r29, 0x3e	; 62
    PORTC = 0x00;
     33a:	10 92 35 00 	sts	0x0035, r1
     33e:	df 91       	pop	r29
     340:	cf 91       	pop	r28
     342:	08 95       	ret

00000344 <switch_off_all_leds>:
}

/*
 * switch off all leds
 */
void switch_off_all_leds(void) {
     344:	cf 93       	push	r28
     346:	df 93       	push	r29
     348:	cd b7       	in	r28, 0x3d	; 61
     34a:	de b7       	in	r29, 0x3e	; 62
    PORTC = 0xFF;
     34c:	8f ef       	ldi	r24, 0xFF	; 255
     34e:	80 93 35 00 	sts	0x0035, r24
     352:	df 91       	pop	r29
     354:	cf 91       	pop	r28
     356:	08 95       	ret

00000358 <switch_on_led>:
}

// led from 1 to 8 (LEDSNUM)
// PCx with w from 0 to 7

/*
 * switch on the led with the number called "led"
 */
void switch_on_led(uint8_t led) {
     358:	cf 93       	push	r28
     35a:	df 93       	push	r29
     35c:	cd b7       	in	r28, 0x3d	; 61
     35e:	de b7       	in	r29, 0x3e	; 62
     360:	23 97       	sbiw	r28, 0x03	; 3
     362:	0f b6       	in	r0, 0x3f	; 63
     364:	f8 94       	cli
     366:	de bf       	out	0x3e, r29	; 62
     368:	0f be       	out	0x3f, r0	; 63
     36a:	cd bf       	out	0x3d, r28	; 61
     36c:	89 83       	std	Y+1, r24	; 0x01
    uint8_t pin = led - 1;
     36e:	89 81       	ldd	r24, Y+1	; 0x01
     370:	81 50       	subi	r24, 0x01	; 1
     372:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t mask = ~(1<<pin);
     374:	8a 81       	ldd	r24, Y+2	; 0x02
     376:	28 2f       	mov	r18, r24
     378:	33 27       	eor	r19, r19
     37a:	81 e0       	ldi	r24, 0x01	; 1
     37c:	90 e0       	ldi	r25, 0x00	; 0
     37e:	02 c0       	rjmp	.+4      	; 0x384 <switch_on_led+0x2c>
     380:	88 0f       	add	r24, r24
     382:	99 1f       	adc	r25, r25
     384:	2a 95       	dec	r18
     386:	e2 f7       	brpl	.-8      	; 0x380 <switch_on_led+0x28>
     388:	80 95       	com	r24
     38a:	8b 83       	std	Y+3, r24	; 0x03
    PORTC&=mask;
     38c:	90 91 35 00 	lds	r25, 0x0035
     390:	8b 81       	ldd	r24, Y+3	; 0x03
     392:	89 23       	and	r24, r25
     394:	80 93 35 00 	sts	0x0035, r24
     398:	23 96       	adiw	r28, 0x03	; 3
     39a:	0f b6       	in	r0, 0x3f	; 63
     39c:	f8 94       	cli
     39e:	de bf       	out	0x3e, r29	; 62
     3a0:	0f be       	out	0x3f, r0	; 63
     3a2:	cd bf       	out	0x3d, r28	; 61
     3a4:	df 91       	pop	r29
     3a6:	cf 91       	pop	r28
     3a8:	08 95       	ret

000003aa <switch_off_led>:
}

/*
 * switch off the led with the number called "led"
 */
void switch_off_led(uint8_t led) {
     3aa:	cf 93       	push	r28
     3ac:	df 93       	push	r29
     3ae:	cd b7       	in	r28, 0x3d	; 61
     3b0:	de b7       	in	r29, 0x3e	; 62
     3b2:	23 97       	sbiw	r28, 0x03	; 3
     3b4:	0f b6       	in	r0, 0x3f	; 63
     3b6:	f8 94       	cli
     3b8:	de bf       	out	0x3e, r29	; 62
     3ba:	0f be       	out	0x3f, r0	; 63
     3bc:	cd bf       	out	0x3d, r28	; 61
     3be:	89 83       	std	Y+1, r24	; 0x01
    uint8_t pin = led - 1;
     3c0:	89 81       	ldd	r24, Y+1	; 0x01
     3c2:	81 50       	subi	r24, 0x01	; 1
     3c4:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t mask = (1<<pin);
     3c6:	8a 81       	ldd	r24, Y+2	; 0x02
     3c8:	28 2f       	mov	r18, r24
     3ca:	33 27       	eor	r19, r19
     3cc:	81 e0       	ldi	r24, 0x01	; 1
     3ce:	90 e0       	ldi	r25, 0x00	; 0
     3d0:	02 c0       	rjmp	.+4      	; 0x3d6 <switch_off_led+0x2c>
     3d2:	88 0f       	add	r24, r24
     3d4:	99 1f       	adc	r25, r25
     3d6:	2a 95       	dec	r18
     3d8:	e2 f7       	brpl	.-8      	; 0x3d2 <switch_off_led+0x28>
     3da:	8b 83       	std	Y+3, r24	; 0x03
    PORTC|=mask;
     3dc:	90 91 35 00 	lds	r25, 0x0035
     3e0:	8b 81       	ldd	r24, Y+3	; 0x03
     3e2:	89 2b       	or	r24, r25
     3e4:	80 93 35 00 	sts	0x0035, r24
     3e8:	23 96       	adiw	r28, 0x03	; 3
     3ea:	0f b6       	in	r0, 0x3f	; 63
     3ec:	f8 94       	cli
     3ee:	de bf       	out	0x3e, r29	; 62
     3f0:	0f be       	out	0x3f, r0	; 63
     3f2:	cd bf       	out	0x3d, r28	; 61
     3f4:	df 91       	pop	r29
     3f6:	cf 91       	pop	r28
     3f8:	08 95       	ret

000003fa <switch_on_leds_with_delay>:
}

/*
 * switch on every leds one after one with a delay (called "delay")
 */
void switch_on_leds_with_delay(double delay) {
     3fa:	cf 93       	push	r28
     3fc:	df 93       	push	r29
     3fe:	cd b7       	in	r28, 0x3d	; 61
     400:	de b7       	in	r29, 0x3e	; 62
     402:	61 97       	sbiw	r28, 0x11	; 17
     404:	0f b6       	in	r0, 0x3f	; 63
     406:	f8 94       	cli
     408:	de bf       	out	0x3e, r29	; 62
     40a:	0f be       	out	0x3f, r0	; 63
     40c:	cd bf       	out	0x3d, r28	; 61
     40e:	69 83       	std	Y+1, r22	; 0x01
     410:	7a 83       	std	Y+2, r23	; 0x02
     412:	8b 83       	std	Y+3, r24	; 0x03
     414:	9c 83       	std	Y+4, r25	; 0x04
    uint8_t i;
    for(i = 1; i<=Nleds; i++) {
     416:	81 e0       	ldi	r24, 0x01	; 1
     418:	8d 83       	std	Y+5, r24	; 0x05
     41a:	8d 81       	ldd	r24, Y+5	; 0x05
     41c:	89 30       	cpi	r24, 0x09	; 9
     41e:	08 f0       	brcs	.+2      	; 0x422 <switch_on_leds_with_delay+0x28>
     420:	50 c0       	rjmp	.+160    	; 0x4c2 <switch_on_leds_with_delay+0xc8>
   The maximal possible delay is 262.14 ms / F_CPU in MHz.
 */
void
_delay_ms(double __ms)
{
     422:	89 81       	ldd	r24, Y+1	; 0x01
     424:	9a 81       	ldd	r25, Y+2	; 0x02
     426:	ab 81       	ldd	r26, Y+3	; 0x03
     428:	bc 81       	ldd	r27, Y+4	; 0x04
     42a:	8e 83       	std	Y+6, r24	; 0x06
     42c:	9f 83       	std	Y+7, r25	; 0x07
     42e:	a8 87       	std	Y+8, r26	; 0x08
     430:	b9 87       	std	Y+9, r27	; 0x09
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     432:	20 e0       	ldi	r18, 0x00	; 0
     434:	30 e0       	ldi	r19, 0x00	; 0
     436:	4a e7       	ldi	r20, 0x7A	; 122
     438:	53 e4       	ldi	r21, 0x43	; 67
     43a:	6e 81       	ldd	r22, Y+6	; 0x06
     43c:	7f 81       	ldd	r23, Y+7	; 0x07
     43e:	88 85       	ldd	r24, Y+8	; 0x08
     440:	99 85       	ldd	r25, Y+9	; 0x09
     442:	a7 d9       	rcall	.-3250   	; 0xfffff792 <__eeprom_end+0xff7ef792>
     444:	dc 01       	movw	r26, r24
     446:	cb 01       	movw	r24, r22
     448:	8c 87       	std	Y+12, r24	; 0x0c
     44a:	9d 87       	std	Y+13, r25	; 0x0d
     44c:	ae 87       	std	Y+14, r26	; 0x0e
     44e:	bf 87       	std	Y+15, r27	; 0x0f
	if (__tmp < 1.0)
     450:	20 e0       	ldi	r18, 0x00	; 0
     452:	30 e0       	ldi	r19, 0x00	; 0
     454:	40 e8       	ldi	r20, 0x80	; 128
     456:	5f e3       	ldi	r21, 0x3F	; 63
     458:	6c 85       	ldd	r22, Y+12	; 0x0c
     45a:	7d 85       	ldd	r23, Y+13	; 0x0d
     45c:	8e 85       	ldd	r24, Y+14	; 0x0e
     45e:	9f 85       	ldd	r25, Y+15	; 0x0f
     460:	28 d9       	rcall	.-3504   	; 0xfffff6b2 <__eeprom_end+0xff7ef6b2>
     462:	88 23       	and	r24, r24
     464:	0c f0       	brlt	.+2      	; 0x468 <switch_on_leds_with_delay+0x6e>
     466:	05 c0       	rjmp	.+10     	; 0x472 <switch_on_leds_with_delay+0x78>
		__ticks = 1;
     468:	81 e0       	ldi	r24, 0x01	; 1
     46a:	90 e0       	ldi	r25, 0x00	; 0
     46c:	9b 87       	std	Y+11, r25	; 0x0b
     46e:	8a 87       	std	Y+10, r24	; 0x0a
     470:	18 c0       	rjmp	.+48     	; 0x4a2 <switch_on_leds_with_delay+0xa8>
	else if (__tmp > 65535)
     472:	20 e0       	ldi	r18, 0x00	; 0
     474:	3f ef       	ldi	r19, 0xFF	; 255
     476:	4f e7       	ldi	r20, 0x7F	; 127
     478:	57 e4       	ldi	r21, 0x47	; 71
     47a:	6c 85       	ldd	r22, Y+12	; 0x0c
     47c:	7d 85       	ldd	r23, Y+13	; 0x0d
     47e:	8e 85       	ldd	r24, Y+14	; 0x0e
     480:	9f 85       	ldd	r25, Y+15	; 0x0f
     482:	1a d9       	rcall	.-3532   	; 0xfffff6b8 <__eeprom_end+0xff7ef6b8>
     484:	18 16       	cp	r1, r24
     486:	0c f0       	brlt	.+2      	; 0x48a <switch_on_leds_with_delay+0x90>
     488:	03 c0       	rjmp	.+6      	; 0x490 <switch_on_leds_with_delay+0x96>
		__ticks = 0;	/* i.e. 65536 */
     48a:	1b 86       	std	Y+11, r1	; 0x0b
     48c:	1a 86       	std	Y+10, r1	; 0x0a
     48e:	09 c0       	rjmp	.+18     	; 0x4a2 <switch_on_leds_with_delay+0xa8>
	else
		__ticks = (uint16_t)__tmp;
     490:	6c 85       	ldd	r22, Y+12	; 0x0c
     492:	7d 85       	ldd	r23, Y+13	; 0x0d
     494:	8e 85       	ldd	r24, Y+14	; 0x0e
     496:	9f 85       	ldd	r25, Y+15	; 0x0f
     498:	cc d8       	rcall	.-3688   	; 0xfffff632 <__eeprom_end+0xff7ef632>
     49a:	dc 01       	movw	r26, r24
     49c:	cb 01       	movw	r24, r22
     49e:	9b 87       	std	Y+11, r25	; 0x0b
     4a0:	8a 87       	std	Y+10, r24	; 0x0a
     4a2:	8a 85       	ldd	r24, Y+10	; 0x0a
     4a4:	9b 85       	ldd	r25, Y+11	; 0x0b
     4a6:	99 8b       	std	Y+17, r25	; 0x11
     4a8:	88 8b       	std	Y+16, r24	; 0x10
     4aa:	88 89       	ldd	r24, Y+16	; 0x10
     4ac:	99 89       	ldd	r25, Y+17	; 0x11
     4ae:	01 97       	sbiw	r24, 0x01	; 1
     4b0:	f1 f7       	brne	.-4      	; 0x4ae <switch_on_leds_with_delay+0xb4>
     4b2:	99 8b       	std	Y+17, r25	; 0x11
     4b4:	88 8b       	std	Y+16, r24	; 0x10
        _delay_ms(delay);
        switch_on_led(i);
     4b6:	8d 81       	ldd	r24, Y+5	; 0x05
     4b8:	4f df       	rcall	.-354    	; 0x358 <switch_on_led>
     4ba:	8d 81       	ldd	r24, Y+5	; 0x05
     4bc:	8f 5f       	subi	r24, 0xFF	; 255
     4be:	8d 83       	std	Y+5, r24	; 0x05
     4c0:	ac cf       	rjmp	.-168    	; 0x41a <switch_on_leds_with_delay+0x20>
     4c2:	61 96       	adiw	r28, 0x11	; 17
     4c4:	0f b6       	in	r0, 0x3f	; 63
     4c6:	f8 94       	cli
     4c8:	de bf       	out	0x3e, r29	; 62
     4ca:	0f be       	out	0x3f, r0	; 63
     4cc:	cd bf       	out	0x3d, r28	; 61
     4ce:	df 91       	pop	r29
     4d0:	cf 91       	pop	r28
     4d2:	08 95       	ret

000004d4 <switch_off_leds_with_delay>:
    }
}

/*
 * switch off every leds on after one with a delay (called "delay")
 */
void switch_off_leds_with_delay(double delay) {
     4d4:	cf 93       	push	r28
     4d6:	df 93       	push	r29
     4d8:	cd b7       	in	r28, 0x3d	; 61
     4da:	de b7       	in	r29, 0x3e	; 62
     4dc:	61 97       	sbiw	r28, 0x11	; 17
     4de:	0f b6       	in	r0, 0x3f	; 63
     4e0:	f8 94       	cli
     4e2:	de bf       	out	0x3e, r29	; 62
     4e4:	0f be       	out	0x3f, r0	; 63
     4e6:	cd bf       	out	0x3d, r28	; 61
     4e8:	69 83       	std	Y+1, r22	; 0x01
     4ea:	7a 83       	std	Y+2, r23	; 0x02
     4ec:	8b 83       	std	Y+3, r24	; 0x03
     4ee:	9c 83       	std	Y+4, r25	; 0x04
    uint8_t i;
    for(i = Nleds; i>=1; i--) {
     4f0:	88 e0       	ldi	r24, 0x08	; 8
     4f2:	8d 83       	std	Y+5, r24	; 0x05
     4f4:	8d 81       	ldd	r24, Y+5	; 0x05
     4f6:	88 23       	and	r24, r24
     4f8:	09 f4       	brne	.+2      	; 0x4fc <switch_off_leds_with_delay+0x28>
     4fa:	50 c0       	rjmp	.+160    	; 0x59c <switch_off_leds_with_delay+0xc8>
   The maximal possible delay is 262.14 ms / F_CPU in MHz.
 */
void
_delay_ms(double __ms)
{
     4fc:	89 81       	ldd	r24, Y+1	; 0x01
     4fe:	9a 81       	ldd	r25, Y+2	; 0x02
     500:	ab 81       	ldd	r26, Y+3	; 0x03
     502:	bc 81       	ldd	r27, Y+4	; 0x04
     504:	8e 83       	std	Y+6, r24	; 0x06
     506:	9f 83       	std	Y+7, r25	; 0x07
     508:	a8 87       	std	Y+8, r26	; 0x08
     50a:	b9 87       	std	Y+9, r27	; 0x09
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     50c:	20 e0       	ldi	r18, 0x00	; 0
     50e:	30 e0       	ldi	r19, 0x00	; 0
     510:	4a e7       	ldi	r20, 0x7A	; 122
     512:	53 e4       	ldi	r21, 0x43	; 67
     514:	6e 81       	ldd	r22, Y+6	; 0x06
     516:	7f 81       	ldd	r23, Y+7	; 0x07
     518:	88 85       	ldd	r24, Y+8	; 0x08
     51a:	99 85       	ldd	r25, Y+9	; 0x09
     51c:	3a d9       	rcall	.-3468   	; 0xfffff792 <__eeprom_end+0xff7ef792>
     51e:	dc 01       	movw	r26, r24
     520:	cb 01       	movw	r24, r22
     522:	8c 87       	std	Y+12, r24	; 0x0c
     524:	9d 87       	std	Y+13, r25	; 0x0d
     526:	ae 87       	std	Y+14, r26	; 0x0e
     528:	bf 87       	std	Y+15, r27	; 0x0f
	if (__tmp < 1.0)
     52a:	20 e0       	ldi	r18, 0x00	; 0
     52c:	30 e0       	ldi	r19, 0x00	; 0
     52e:	40 e8       	ldi	r20, 0x80	; 128
     530:	5f e3       	ldi	r21, 0x3F	; 63
     532:	6c 85       	ldd	r22, Y+12	; 0x0c
     534:	7d 85       	ldd	r23, Y+13	; 0x0d
     536:	8e 85       	ldd	r24, Y+14	; 0x0e
     538:	9f 85       	ldd	r25, Y+15	; 0x0f
     53a:	bb d8       	rcall	.-3722   	; 0xfffff6b2 <__eeprom_end+0xff7ef6b2>
     53c:	88 23       	and	r24, r24
     53e:	0c f0       	brlt	.+2      	; 0x542 <switch_off_leds_with_delay+0x6e>
     540:	05 c0       	rjmp	.+10     	; 0x54c <switch_off_leds_with_delay+0x78>
		__ticks = 1;
     542:	81 e0       	ldi	r24, 0x01	; 1
     544:	90 e0       	ldi	r25, 0x00	; 0
     546:	9b 87       	std	Y+11, r25	; 0x0b
     548:	8a 87       	std	Y+10, r24	; 0x0a
     54a:	18 c0       	rjmp	.+48     	; 0x57c <switch_off_leds_with_delay+0xa8>
	else if (__tmp > 65535)
     54c:	20 e0       	ldi	r18, 0x00	; 0
     54e:	3f ef       	ldi	r19, 0xFF	; 255
     550:	4f e7       	ldi	r20, 0x7F	; 127
     552:	57 e4       	ldi	r21, 0x47	; 71
     554:	6c 85       	ldd	r22, Y+12	; 0x0c
     556:	7d 85       	ldd	r23, Y+13	; 0x0d
     558:	8e 85       	ldd	r24, Y+14	; 0x0e
     55a:	9f 85       	ldd	r25, Y+15	; 0x0f
     55c:	ad d8       	rcall	.-3750   	; 0xfffff6b8 <__eeprom_end+0xff7ef6b8>
     55e:	18 16       	cp	r1, r24
     560:	0c f0       	brlt	.+2      	; 0x564 <switch_off_leds_with_delay+0x90>
     562:	03 c0       	rjmp	.+6      	; 0x56a <switch_off_leds_with_delay+0x96>
		__ticks = 0;	/* i.e. 65536 */
     564:	1b 86       	std	Y+11, r1	; 0x0b
     566:	1a 86       	std	Y+10, r1	; 0x0a
     568:	09 c0       	rjmp	.+18     	; 0x57c <switch_off_leds_with_delay+0xa8>
	else
		__ticks = (uint16_t)__tmp;
     56a:	6c 85       	ldd	r22, Y+12	; 0x0c
     56c:	7d 85       	ldd	r23, Y+13	; 0x0d
     56e:	8e 85       	ldd	r24, Y+14	; 0x0e
     570:	9f 85       	ldd	r25, Y+15	; 0x0f
     572:	5f d8       	rcall	.-3906   	; 0xfffff632 <__eeprom_end+0xff7ef632>
     574:	dc 01       	movw	r26, r24
     576:	cb 01       	movw	r24, r22
     578:	9b 87       	std	Y+11, r25	; 0x0b
     57a:	8a 87       	std	Y+10, r24	; 0x0a
     57c:	8a 85       	ldd	r24, Y+10	; 0x0a
     57e:	9b 85       	ldd	r25, Y+11	; 0x0b
     580:	99 8b       	std	Y+17, r25	; 0x11
     582:	88 8b       	std	Y+16, r24	; 0x10
     584:	88 89       	ldd	r24, Y+16	; 0x10
     586:	99 89       	ldd	r25, Y+17	; 0x11
     588:	01 97       	sbiw	r24, 0x01	; 1
     58a:	f1 f7       	brne	.-4      	; 0x588 <switch_off_leds_with_delay+0xb4>
     58c:	99 8b       	std	Y+17, r25	; 0x11
     58e:	88 8b       	std	Y+16, r24	; 0x10
        _delay_ms(delay);
        switch_off_led(i);
     590:	8d 81       	ldd	r24, Y+5	; 0x05
     592:	0b df       	rcall	.-490    	; 0x3aa <switch_off_led>
     594:	8d 81       	ldd	r24, Y+5	; 0x05
     596:	81 50       	subi	r24, 0x01	; 1
     598:	8d 83       	std	Y+5, r24	; 0x05
     59a:	ac cf       	rjmp	.-168    	; 0x4f4 <switch_off_leds_with_delay+0x20>
     59c:	61 96       	adiw	r28, 0x11	; 17
     59e:	0f b6       	in	r0, 0x3f	; 63
     5a0:	f8 94       	cli
     5a2:	de bf       	out	0x3e, r29	; 62
     5a4:	0f be       	out	0x3f, r0	; 63
     5a6:	cd bf       	out	0x3d, r28	; 61
     5a8:	df 91       	pop	r29
     5aa:	cf 91       	pop	r28
     5ac:	08 95       	ret

000005ae <test_leds_up_down>:
    }
}

/*
 * a function for testing leds that switch on every leds and switch off every leds (one after one)
 */
void test_leds_up_down(void) {
     5ae:	cf 93       	push	r28
     5b0:	df 93       	push	r29
     5b2:	cd b7       	in	r28, 0x3d	; 61
     5b4:	de b7       	in	r29, 0x3e	; 62
     5b6:	2c 97       	sbiw	r28, 0x0c	; 12
     5b8:	0f b6       	in	r0, 0x3f	; 63
     5ba:	f8 94       	cli
     5bc:	de bf       	out	0x3e, r29	; 62
     5be:	0f be       	out	0x3f, r0	; 63
     5c0:	cd bf       	out	0x3d, r28	; 61
    switch_on_leds_with_delay(50); //100
     5c2:	60 e0       	ldi	r22, 0x00	; 0
     5c4:	70 e0       	ldi	r23, 0x00	; 0
     5c6:	88 e4       	ldi	r24, 0x48	; 72
     5c8:	92 e4       	ldi	r25, 0x42	; 66
     5ca:	17 df       	rcall	.-466    	; 0x3fa <switch_on_leds_with_delay>
   The maximal possible delay is 262.14 ms / F_CPU in MHz.
 */
void
_delay_ms(double __ms)
{
     5cc:	80 e0       	ldi	r24, 0x00	; 0
     5ce:	90 e0       	ldi	r25, 0x00	; 0
     5d0:	a8 e4       	ldi	r26, 0x48	; 72
     5d2:	b2 e4       	ldi	r27, 0x42	; 66
     5d4:	89 83       	std	Y+1, r24	; 0x01
     5d6:	9a 83       	std	Y+2, r25	; 0x02
     5d8:	ab 83       	std	Y+3, r26	; 0x03
     5da:	bc 83       	std	Y+4, r27	; 0x04
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     5dc:	20 e0       	ldi	r18, 0x00	; 0
     5de:	30 e0       	ldi	r19, 0x00	; 0
     5e0:	4a e7       	ldi	r20, 0x7A	; 122
     5e2:	53 e4       	ldi	r21, 0x43	; 67
     5e4:	69 81       	ldd	r22, Y+1	; 0x01
     5e6:	7a 81       	ldd	r23, Y+2	; 0x02
     5e8:	8b 81       	ldd	r24, Y+3	; 0x03
     5ea:	9c 81       	ldd	r25, Y+4	; 0x04
     5ec:	d2 d8       	rcall	.-3676   	; 0xfffff792 <__eeprom_end+0xff7ef792>
     5ee:	dc 01       	movw	r26, r24
     5f0:	cb 01       	movw	r24, r22
     5f2:	8f 83       	std	Y+7, r24	; 0x07
     5f4:	98 87       	std	Y+8, r25	; 0x08
     5f6:	a9 87       	std	Y+9, r26	; 0x09
     5f8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     5fa:	20 e0       	ldi	r18, 0x00	; 0
     5fc:	30 e0       	ldi	r19, 0x00	; 0
     5fe:	40 e8       	ldi	r20, 0x80	; 128
     600:	5f e3       	ldi	r21, 0x3F	; 63
     602:	6f 81       	ldd	r22, Y+7	; 0x07
     604:	78 85       	ldd	r23, Y+8	; 0x08
     606:	89 85       	ldd	r24, Y+9	; 0x09
     608:	9a 85       	ldd	r25, Y+10	; 0x0a
     60a:	53 d8       	rcall	.-3930   	; 0xfffff6b2 <__eeprom_end+0xff7ef6b2>
     60c:	88 23       	and	r24, r24
     60e:	0c f0       	brlt	.+2      	; 0x612 <test_leds_up_down+0x64>
     610:	05 c0       	rjmp	.+10     	; 0x61c <test_leds_up_down+0x6e>
		__ticks = 1;
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	90 e0       	ldi	r25, 0x00	; 0
     616:	9e 83       	std	Y+6, r25	; 0x06
     618:	8d 83       	std	Y+5, r24	; 0x05
     61a:	18 c0       	rjmp	.+48     	; 0x64c <test_leds_up_down+0x9e>
	else if (__tmp > 65535)
     61c:	20 e0       	ldi	r18, 0x00	; 0
     61e:	3f ef       	ldi	r19, 0xFF	; 255
     620:	4f e7       	ldi	r20, 0x7F	; 127
     622:	57 e4       	ldi	r21, 0x47	; 71
     624:	6f 81       	ldd	r22, Y+7	; 0x07
     626:	78 85       	ldd	r23, Y+8	; 0x08
     628:	89 85       	ldd	r24, Y+9	; 0x09
     62a:	9a 85       	ldd	r25, Y+10	; 0x0a
     62c:	45 d8       	rcall	.-3958   	; 0xfffff6b8 <__eeprom_end+0xff7ef6b8>
     62e:	18 16       	cp	r1, r24
     630:	0c f0       	brlt	.+2      	; 0x634 <test_leds_up_down+0x86>
     632:	03 c0       	rjmp	.+6      	; 0x63a <test_leds_up_down+0x8c>
		__ticks = 0;	/* i.e. 65536 */
     634:	1e 82       	std	Y+6, r1	; 0x06
     636:	1d 82       	std	Y+5, r1	; 0x05
     638:	09 c0       	rjmp	.+18     	; 0x64c <test_leds_up_down+0x9e>
	else
		__ticks = (uint16_t)__tmp;
     63a:	6f 81       	ldd	r22, Y+7	; 0x07
     63c:	78 85       	ldd	r23, Y+8	; 0x08
     63e:	89 85       	ldd	r24, Y+9	; 0x09
     640:	9a 85       	ldd	r25, Y+10	; 0x0a
     642:	f7 d7       	rcall	.+4078   	; 0x1632 <__fixsfsi>
     644:	dc 01       	movw	r26, r24
     646:	cb 01       	movw	r24, r22
     648:	9e 83       	std	Y+6, r25	; 0x06
     64a:	8d 83       	std	Y+5, r24	; 0x05
     64c:	8d 81       	ldd	r24, Y+5	; 0x05
     64e:	9e 81       	ldd	r25, Y+6	; 0x06
     650:	9c 87       	std	Y+12, r25	; 0x0c
     652:	8b 87       	std	Y+11, r24	; 0x0b
     654:	8b 85       	ldd	r24, Y+11	; 0x0b
     656:	9c 85       	ldd	r25, Y+12	; 0x0c
     658:	01 97       	sbiw	r24, 0x01	; 1
     65a:	f1 f7       	brne	.-4      	; 0x658 <test_leds_up_down+0xaa>
     65c:	9c 87       	std	Y+12, r25	; 0x0c
     65e:	8b 87       	std	Y+11, r24	; 0x0b
    _delay_ms(50); //50
    switch_off_leds_with_delay(50); //100
     660:	60 e0       	ldi	r22, 0x00	; 0
     662:	70 e0       	ldi	r23, 0x00	; 0
     664:	88 e4       	ldi	r24, 0x48	; 72
     666:	92 e4       	ldi	r25, 0x42	; 66
     668:	35 df       	rcall	.-406    	; 0x4d4 <switch_off_leds_with_delay>
     66a:	2c 96       	adiw	r28, 0x0c	; 12
     66c:	0f b6       	in	r0, 0x3f	; 63
     66e:	f8 94       	cli
     670:	de bf       	out	0x3e, r29	; 62
     672:	0f be       	out	0x3f, r0	; 63
     674:	cd bf       	out	0x3d, r28	; 61
     676:	df 91       	pop	r29
     678:	cf 91       	pop	r28
     67a:	08 95       	ret

0000067c <test_leds_up_off>:
}

void test_leds_up_off(void) {
     67c:	cf 93       	push	r28
     67e:	df 93       	push	r29
     680:	cd b7       	in	r28, 0x3d	; 61
     682:	de b7       	in	r29, 0x3e	; 62
     684:	2c 97       	sbiw	r28, 0x0c	; 12
     686:	0f b6       	in	r0, 0x3f	; 63
     688:	f8 94       	cli
     68a:	de bf       	out	0x3e, r29	; 62
     68c:	0f be       	out	0x3f, r0	; 63
     68e:	cd bf       	out	0x3d, r28	; 61
    switch_on_leds_with_delay(50); //100
     690:	60 e0       	ldi	r22, 0x00	; 0
     692:	70 e0       	ldi	r23, 0x00	; 0
     694:	88 e4       	ldi	r24, 0x48	; 72
     696:	92 e4       	ldi	r25, 0x42	; 66
     698:	b0 de       	rcall	.-672    	; 0x3fa <switch_on_leds_with_delay>
   The maximal possible delay is 262.14 ms / F_CPU in MHz.
 */
void
_delay_ms(double __ms)
{
     69a:	80 e0       	ldi	r24, 0x00	; 0
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	a8 e4       	ldi	r26, 0x48	; 72
     6a0:	b2 e4       	ldi	r27, 0x42	; 66
     6a2:	89 83       	std	Y+1, r24	; 0x01
     6a4:	9a 83       	std	Y+2, r25	; 0x02
     6a6:	ab 83       	std	Y+3, r26	; 0x03
     6a8:	bc 83       	std	Y+4, r27	; 0x04
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     6aa:	20 e0       	ldi	r18, 0x00	; 0
     6ac:	30 e0       	ldi	r19, 0x00	; 0
     6ae:	4a e7       	ldi	r20, 0x7A	; 122
     6b0:	53 e4       	ldi	r21, 0x43	; 67
     6b2:	69 81       	ldd	r22, Y+1	; 0x01
     6b4:	7a 81       	ldd	r23, Y+2	; 0x02
     6b6:	8b 81       	ldd	r24, Y+3	; 0x03
     6b8:	9c 81       	ldd	r25, Y+4	; 0x04
     6ba:	6b d8       	rcall	.-3882   	; 0xfffff792 <__eeprom_end+0xff7ef792>
     6bc:	dc 01       	movw	r26, r24
     6be:	cb 01       	movw	r24, r22
     6c0:	8f 83       	std	Y+7, r24	; 0x07
     6c2:	98 87       	std	Y+8, r25	; 0x08
     6c4:	a9 87       	std	Y+9, r26	; 0x09
     6c6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     6c8:	20 e0       	ldi	r18, 0x00	; 0
     6ca:	30 e0       	ldi	r19, 0x00	; 0
     6cc:	40 e8       	ldi	r20, 0x80	; 128
     6ce:	5f e3       	ldi	r21, 0x3F	; 63
     6d0:	6f 81       	ldd	r22, Y+7	; 0x07
     6d2:	78 85       	ldd	r23, Y+8	; 0x08
     6d4:	89 85       	ldd	r24, Y+9	; 0x09
     6d6:	9a 85       	ldd	r25, Y+10	; 0x0a
     6d8:	ec d7       	rcall	.+4056   	; 0x16b2 <__eqsf2>
     6da:	88 23       	and	r24, r24
     6dc:	0c f0       	brlt	.+2      	; 0x6e0 <test_leds_up_off+0x64>
     6de:	05 c0       	rjmp	.+10     	; 0x6ea <test_leds_up_off+0x6e>
		__ticks = 1;
     6e0:	81 e0       	ldi	r24, 0x01	; 1
     6e2:	90 e0       	ldi	r25, 0x00	; 0
     6e4:	9e 83       	std	Y+6, r25	; 0x06
     6e6:	8d 83       	std	Y+5, r24	; 0x05
     6e8:	18 c0       	rjmp	.+48     	; 0x71a <test_leds_up_off+0x9e>
	else if (__tmp > 65535)
     6ea:	20 e0       	ldi	r18, 0x00	; 0
     6ec:	3f ef       	ldi	r19, 0xFF	; 255
     6ee:	4f e7       	ldi	r20, 0x7F	; 127
     6f0:	57 e4       	ldi	r21, 0x47	; 71
     6f2:	6f 81       	ldd	r22, Y+7	; 0x07
     6f4:	78 85       	ldd	r23, Y+8	; 0x08
     6f6:	89 85       	ldd	r24, Y+9	; 0x09
     6f8:	9a 85       	ldd	r25, Y+10	; 0x0a
     6fa:	de d7       	rcall	.+4028   	; 0x16b8 <__gesf2>
     6fc:	18 16       	cp	r1, r24
     6fe:	0c f0       	brlt	.+2      	; 0x702 <test_leds_up_off+0x86>
     700:	03 c0       	rjmp	.+6      	; 0x708 <test_leds_up_off+0x8c>
		__ticks = 0;	/* i.e. 65536 */
     702:	1e 82       	std	Y+6, r1	; 0x06
     704:	1d 82       	std	Y+5, r1	; 0x05
     706:	09 c0       	rjmp	.+18     	; 0x71a <test_leds_up_off+0x9e>
	else
		__ticks = (uint16_t)__tmp;
     708:	6f 81       	ldd	r22, Y+7	; 0x07
     70a:	78 85       	ldd	r23, Y+8	; 0x08
     70c:	89 85       	ldd	r24, Y+9	; 0x09
     70e:	9a 85       	ldd	r25, Y+10	; 0x0a
     710:	90 d7       	rcall	.+3872   	; 0x1632 <__fixsfsi>
     712:	dc 01       	movw	r26, r24
     714:	cb 01       	movw	r24, r22
     716:	9e 83       	std	Y+6, r25	; 0x06
     718:	8d 83       	std	Y+5, r24	; 0x05
     71a:	8d 81       	ldd	r24, Y+5	; 0x05
     71c:	9e 81       	ldd	r25, Y+6	; 0x06
     71e:	9c 87       	std	Y+12, r25	; 0x0c
     720:	8b 87       	std	Y+11, r24	; 0x0b
     722:	8b 85       	ldd	r24, Y+11	; 0x0b
     724:	9c 85       	ldd	r25, Y+12	; 0x0c
     726:	01 97       	sbiw	r24, 0x01	; 1
     728:	f1 f7       	brne	.-4      	; 0x726 <test_leds_up_off+0xaa>
     72a:	9c 87       	std	Y+12, r25	; 0x0c
     72c:	8b 87       	std	Y+11, r24	; 0x0b
    _delay_ms(50); //50
    switch_off_all_leds();
     72e:	0a de       	rcall	.-1004   	; 0x344 <switch_off_all_leds>
     730:	2c 96       	adiw	r28, 0x0c	; 12
     732:	0f b6       	in	r0, 0x3f	; 63
     734:	f8 94       	cli
     736:	de bf       	out	0x3e, r29	; 62
     738:	0f be       	out	0x3f, r0	; 63
     73a:	cd bf       	out	0x3d, r28	; 61
     73c:	df 91       	pop	r29
     73e:	cf 91       	pop	r28
     740:	08 95       	ret

00000742 <switch_on_min_dels>:
}

/*
 *  switch on every leds (from 0 to n)  (and switch off others)
 */
void switch_on_min_dels(uint8_t n) {
     742:	cf 93       	push	r28
     744:	df 93       	push	r29
     746:	cd b7       	in	r28, 0x3d	; 61
     748:	de b7       	in	r29, 0x3e	; 62
     74a:	22 97       	sbiw	r28, 0x02	; 2
     74c:	0f b6       	in	r0, 0x3f	; 63
     74e:	f8 94       	cli
     750:	de bf       	out	0x3e, r29	; 62
     752:	0f be       	out	0x3f, r0	; 63
     754:	cd bf       	out	0x3d, r28	; 61
     756:	89 83       	std	Y+1, r24	; 0x01
    uint8_t i;
    for(i = 1; i<=Nleds; i++) {
     758:	81 e0       	ldi	r24, 0x01	; 1
     75a:	8a 83       	std	Y+2, r24	; 0x02
     75c:	8a 81       	ldd	r24, Y+2	; 0x02
     75e:	89 30       	cpi	r24, 0x09	; 9
     760:	68 f4       	brcc	.+26     	; 0x77c <switch_on_min_dels+0x3a>
        if (i<=n) {
     762:	9a 81       	ldd	r25, Y+2	; 0x02
     764:	89 81       	ldd	r24, Y+1	; 0x01
     766:	89 17       	cp	r24, r25
     768:	18 f0       	brcs	.+6      	; 0x770 <switch_on_min_dels+0x2e>
            switch_on_led(i);
     76a:	8a 81       	ldd	r24, Y+2	; 0x02
     76c:	f5 dd       	rcall	.-1046   	; 0x358 <switch_on_led>
     76e:	02 c0       	rjmp	.+4      	; 0x774 <switch_on_min_dels+0x32>
        } else {
            switch_off_led(i);
     770:	8a 81       	ldd	r24, Y+2	; 0x02
     772:	1b de       	rcall	.-970    	; 0x3aa <switch_off_led>
     774:	8a 81       	ldd	r24, Y+2	; 0x02
     776:	8f 5f       	subi	r24, 0xFF	; 255
     778:	8a 83       	std	Y+2, r24	; 0x02
     77a:	f0 cf       	rjmp	.-32     	; 0x75c <switch_on_min_dels+0x1a>
     77c:	22 96       	adiw	r28, 0x02	; 2
     77e:	0f b6       	in	r0, 0x3f	; 63
     780:	f8 94       	cli
     782:	de bf       	out	0x3e, r29	; 62
     784:	0f be       	out	0x3f, r0	; 63
     786:	cd bf       	out	0x3d, r28	; 61
     788:	df 91       	pop	r29
     78a:	cf 91       	pop	r28
     78c:	08 95       	ret

0000078e <switch_on_max_dels>:
        }
    }
}

/*
 *  switch on every leds (from Nleds to n)
 */
void switch_on_max_dels(uint8_t n) {
     78e:	cf 93       	push	r28
     790:	df 93       	push	r29
     792:	cd b7       	in	r28, 0x3d	; 61
     794:	de b7       	in	r29, 0x3e	; 62
     796:	22 97       	sbiw	r28, 0x02	; 2
     798:	0f b6       	in	r0, 0x3f	; 63
     79a:	f8 94       	cli
     79c:	de bf       	out	0x3e, r29	; 62
     79e:	0f be       	out	0x3f, r0	; 63
     7a0:	cd bf       	out	0x3d, r28	; 61
     7a2:	89 83       	std	Y+1, r24	; 0x01
    uint8_t i;
    for(i = Nleds; i>=1; i--) {
     7a4:	88 e0       	ldi	r24, 0x08	; 8
     7a6:	8a 83       	std	Y+2, r24	; 0x02
     7a8:	8a 81       	ldd	r24, Y+2	; 0x02
     7aa:	88 23       	and	r24, r24
     7ac:	b1 f0       	breq	.+44     	; 0x7da <switch_on_max_dels+0x4c>
        if (i>=Nleds-n) {
     7ae:	8a 81       	ldd	r24, Y+2	; 0x02
     7b0:	48 2f       	mov	r20, r24
     7b2:	55 27       	eor	r21, r21
     7b4:	89 81       	ldd	r24, Y+1	; 0x01
     7b6:	28 2f       	mov	r18, r24
     7b8:	33 27       	eor	r19, r19
     7ba:	88 e0       	ldi	r24, 0x08	; 8
     7bc:	90 e0       	ldi	r25, 0x00	; 0
     7be:	82 1b       	sub	r24, r18
     7c0:	93 0b       	sbc	r25, r19
     7c2:	48 17       	cp	r20, r24
     7c4:	59 07       	cpc	r21, r25
     7c6:	1c f0       	brlt	.+6      	; 0x7ce <switch_on_max_dels+0x40>
            switch_on_led(i);
     7c8:	8a 81       	ldd	r24, Y+2	; 0x02
     7ca:	c6 dd       	rcall	.-1140   	; 0x358 <switch_on_led>
     7cc:	02 c0       	rjmp	.+4      	; 0x7d2 <switch_on_max_dels+0x44>
        } else {
            switch_off_led(i);
     7ce:	8a 81       	ldd	r24, Y+2	; 0x02
     7d0:	ec dd       	rcall	.-1064   	; 0x3aa <switch_off_led>
     7d2:	8a 81       	ldd	r24, Y+2	; 0x02
     7d4:	81 50       	subi	r24, 0x01	; 1
     7d6:	8a 83       	std	Y+2, r24	; 0x02
     7d8:	e7 cf       	rjmp	.-50     	; 0x7a8 <switch_on_max_dels+0x1a>
     7da:	22 96       	adiw	r28, 0x02	; 2
     7dc:	0f b6       	in	r0, 0x3f	; 63
     7de:	f8 94       	cli
     7e0:	de bf       	out	0x3e, r29	; 62
     7e2:	0f be       	out	0x3f, r0	; 63
     7e4:	cd bf       	out	0x3d, r28	; 61
     7e6:	df 91       	pop	r29
     7e8:	cf 91       	pop	r28
     7ea:	08 95       	ret

000007ec <led_alarm>:
        }
    }
    // TO TEST (switch off)
}

/*
 * switch off every leds, wait and swith them all, n times (a sort of visual alarm)
 */
void led_alarm(uint8_t n, double delay) {
     7ec:	cf 93       	push	r28
     7ee:	df 93       	push	r29
     7f0:	cd b7       	in	r28, 0x3d	; 61
     7f2:	de b7       	in	r29, 0x3e	; 62
     7f4:	62 97       	sbiw	r28, 0x12	; 18
     7f6:	0f b6       	in	r0, 0x3f	; 63
     7f8:	f8 94       	cli
     7fa:	de bf       	out	0x3e, r29	; 62
     7fc:	0f be       	out	0x3f, r0	; 63
     7fe:	cd bf       	out	0x3d, r28	; 61
     800:	89 83       	std	Y+1, r24	; 0x01
     802:	4a 83       	std	Y+2, r20	; 0x02
     804:	5b 83       	std	Y+3, r21	; 0x03
     806:	6c 83       	std	Y+4, r22	; 0x04
     808:	7d 83       	std	Y+5, r23	; 0x05
    uint8_t i;
    for(i = 1; i<=n; i++) {
     80a:	81 e0       	ldi	r24, 0x01	; 1
     80c:	8e 83       	std	Y+6, r24	; 0x06
     80e:	9e 81       	ldd	r25, Y+6	; 0x06
     810:	89 81       	ldd	r24, Y+1	; 0x01
     812:	89 17       	cp	r24, r25
     814:	08 f4       	brcc	.+2      	; 0x818 <led_alarm+0x2c>
     816:	9a c0       	rjmp	.+308    	; 0x94c <led_alarm+0x160>
        switch_off_all_leds();
     818:	95 dd       	rcall	.-1238   	; 0x344 <switch_off_all_leds>
   The maximal possible delay is 262.14 ms / F_CPU in MHz.
 */
void
_delay_ms(double __ms)
{
     81a:	8a 81       	ldd	r24, Y+2	; 0x02
     81c:	9b 81       	ldd	r25, Y+3	; 0x03
     81e:	ac 81       	ldd	r26, Y+4	; 0x04
     820:	bd 81       	ldd	r27, Y+5	; 0x05
     822:	8f 83       	std	Y+7, r24	; 0x07
     824:	98 87       	std	Y+8, r25	; 0x08
     826:	a9 87       	std	Y+9, r26	; 0x09
     828:	ba 87       	std	Y+10, r27	; 0x0a
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     82a:	20 e0       	ldi	r18, 0x00	; 0
     82c:	30 e0       	ldi	r19, 0x00	; 0
     82e:	4a e7       	ldi	r20, 0x7A	; 122
     830:	53 e4       	ldi	r21, 0x43	; 67
     832:	6f 81       	ldd	r22, Y+7	; 0x07
     834:	78 85       	ldd	r23, Y+8	; 0x08
     836:	89 85       	ldd	r24, Y+9	; 0x09
     838:	9a 85       	ldd	r25, Y+10	; 0x0a
     83a:	ab d7       	rcall	.+3926   	; 0x1792 <__mulsf3>
     83c:	dc 01       	movw	r26, r24
     83e:	cb 01       	movw	r24, r22
     840:	8d 87       	std	Y+13, r24	; 0x0d
     842:	9e 87       	std	Y+14, r25	; 0x0e
     844:	af 87       	std	Y+15, r26	; 0x0f
     846:	b8 8b       	std	Y+16, r27	; 0x10
	if (__tmp < 1.0)
     848:	20 e0       	ldi	r18, 0x00	; 0
     84a:	30 e0       	ldi	r19, 0x00	; 0
     84c:	40 e8       	ldi	r20, 0x80	; 128
     84e:	5f e3       	ldi	r21, 0x3F	; 63
     850:	6d 85       	ldd	r22, Y+13	; 0x0d
     852:	7e 85       	ldd	r23, Y+14	; 0x0e
     854:	8f 85       	ldd	r24, Y+15	; 0x0f
     856:	98 89       	ldd	r25, Y+16	; 0x10
     858:	2c d7       	rcall	.+3672   	; 0x16b2 <__eqsf2>
     85a:	88 23       	and	r24, r24
     85c:	0c f0       	brlt	.+2      	; 0x860 <led_alarm+0x74>
     85e:	05 c0       	rjmp	.+10     	; 0x86a <led_alarm+0x7e>
		__ticks = 1;
     860:	81 e0       	ldi	r24, 0x01	; 1
     862:	90 e0       	ldi	r25, 0x00	; 0
     864:	9c 87       	std	Y+12, r25	; 0x0c
     866:	8b 87       	std	Y+11, r24	; 0x0b
     868:	18 c0       	rjmp	.+48     	; 0x89a <led_alarm+0xae>
	else if (__tmp > 65535)
     86a:	20 e0       	ldi	r18, 0x00	; 0
     86c:	3f ef       	ldi	r19, 0xFF	; 255
     86e:	4f e7       	ldi	r20, 0x7F	; 127
     870:	57 e4       	ldi	r21, 0x47	; 71
     872:	6d 85       	ldd	r22, Y+13	; 0x0d
     874:	7e 85       	ldd	r23, Y+14	; 0x0e
     876:	8f 85       	ldd	r24, Y+15	; 0x0f
     878:	98 89       	ldd	r25, Y+16	; 0x10
     87a:	1e d7       	rcall	.+3644   	; 0x16b8 <__gesf2>
     87c:	18 16       	cp	r1, r24
     87e:	0c f0       	brlt	.+2      	; 0x882 <led_alarm+0x96>
     880:	03 c0       	rjmp	.+6      	; 0x888 <led_alarm+0x9c>
		__ticks = 0;	/* i.e. 65536 */
     882:	1c 86       	std	Y+12, r1	; 0x0c
     884:	1b 86       	std	Y+11, r1	; 0x0b
     886:	09 c0       	rjmp	.+18     	; 0x89a <led_alarm+0xae>
	else
		__ticks = (uint16_t)__tmp;
     888:	6d 85       	ldd	r22, Y+13	; 0x0d
     88a:	7e 85       	ldd	r23, Y+14	; 0x0e
     88c:	8f 85       	ldd	r24, Y+15	; 0x0f
     88e:	98 89       	ldd	r25, Y+16	; 0x10
     890:	d0 d6       	rcall	.+3488   	; 0x1632 <__fixsfsi>
     892:	dc 01       	movw	r26, r24
     894:	cb 01       	movw	r24, r22
     896:	9c 87       	std	Y+12, r25	; 0x0c
     898:	8b 87       	std	Y+11, r24	; 0x0b
     89a:	8b 85       	ldd	r24, Y+11	; 0x0b
     89c:	9c 85       	ldd	r25, Y+12	; 0x0c
     89e:	9a 8b       	std	Y+18, r25	; 0x12
     8a0:	89 8b       	std	Y+17, r24	; 0x11
     8a2:	89 89       	ldd	r24, Y+17	; 0x11
     8a4:	9a 89       	ldd	r25, Y+18	; 0x12
     8a6:	01 97       	sbiw	r24, 0x01	; 1
     8a8:	f1 f7       	brne	.-4      	; 0x8a6 <led_alarm+0xba>
     8aa:	9a 8b       	std	Y+18, r25	; 0x12
     8ac:	89 8b       	std	Y+17, r24	; 0x11
        _delay_ms(delay);
        switch_on_all_leds();
     8ae:	41 dd       	rcall	.-1406   	; 0x332 <switch_on_all_leds>
   The maximal possible delay is 262.14 ms / F_CPU in MHz.
 */
void
_delay_ms(double __ms)
{
     8b0:	8a 81       	ldd	r24, Y+2	; 0x02
     8b2:	9b 81       	ldd	r25, Y+3	; 0x03
     8b4:	ac 81       	ldd	r26, Y+4	; 0x04
     8b6:	bd 81       	ldd	r27, Y+5	; 0x05
     8b8:	8d 87       	std	Y+13, r24	; 0x0d
     8ba:	9e 87       	std	Y+14, r25	; 0x0e
     8bc:	af 87       	std	Y+15, r26	; 0x0f
     8be:	b8 8b       	std	Y+16, r27	; 0x10
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     8c0:	20 e0       	ldi	r18, 0x00	; 0
     8c2:	30 e0       	ldi	r19, 0x00	; 0
     8c4:	4a e7       	ldi	r20, 0x7A	; 122
     8c6:	53 e4       	ldi	r21, 0x43	; 67
     8c8:	6d 85       	ldd	r22, Y+13	; 0x0d
     8ca:	7e 85       	ldd	r23, Y+14	; 0x0e
     8cc:	8f 85       	ldd	r24, Y+15	; 0x0f
     8ce:	98 89       	ldd	r25, Y+16	; 0x10
     8d0:	60 d7       	rcall	.+3776   	; 0x1792 <__mulsf3>
     8d2:	dc 01       	movw	r26, r24
     8d4:	cb 01       	movw	r24, r22
     8d6:	8f 83       	std	Y+7, r24	; 0x07
     8d8:	98 87       	std	Y+8, r25	; 0x08
     8da:	a9 87       	std	Y+9, r26	; 0x09
     8dc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     8de:	20 e0       	ldi	r18, 0x00	; 0
     8e0:	30 e0       	ldi	r19, 0x00	; 0
     8e2:	40 e8       	ldi	r20, 0x80	; 128
     8e4:	5f e3       	ldi	r21, 0x3F	; 63
     8e6:	6f 81       	ldd	r22, Y+7	; 0x07
     8e8:	78 85       	ldd	r23, Y+8	; 0x08
     8ea:	89 85       	ldd	r24, Y+9	; 0x09
     8ec:	9a 85       	ldd	r25, Y+10	; 0x0a
     8ee:	e1 d6       	rcall	.+3522   	; 0x16b2 <__eqsf2>
     8f0:	88 23       	and	r24, r24
     8f2:	0c f0       	brlt	.+2      	; 0x8f6 <led_alarm+0x10a>
     8f4:	05 c0       	rjmp	.+10     	; 0x900 <led_alarm+0x114>
		__ticks = 1;
     8f6:	81 e0       	ldi	r24, 0x01	; 1
     8f8:	90 e0       	ldi	r25, 0x00	; 0
     8fa:	9a 8b       	std	Y+18, r25	; 0x12
     8fc:	89 8b       	std	Y+17, r24	; 0x11
     8fe:	18 c0       	rjmp	.+48     	; 0x930 <led_alarm+0x144>
	else if (__tmp > 65535)
     900:	20 e0       	ldi	r18, 0x00	; 0
     902:	3f ef       	ldi	r19, 0xFF	; 255
     904:	4f e7       	ldi	r20, 0x7F	; 127
     906:	57 e4       	ldi	r21, 0x47	; 71
     908:	6f 81       	ldd	r22, Y+7	; 0x07
     90a:	78 85       	ldd	r23, Y+8	; 0x08
     90c:	89 85       	ldd	r24, Y+9	; 0x09
     90e:	9a 85       	ldd	r25, Y+10	; 0x0a
     910:	d3 d6       	rcall	.+3494   	; 0x16b8 <__gesf2>
     912:	18 16       	cp	r1, r24
     914:	0c f0       	brlt	.+2      	; 0x918 <led_alarm+0x12c>
     916:	03 c0       	rjmp	.+6      	; 0x91e <led_alarm+0x132>
		__ticks = 0;	/* i.e. 65536 */
     918:	1a 8a       	std	Y+18, r1	; 0x12
     91a:	19 8a       	std	Y+17, r1	; 0x11
     91c:	09 c0       	rjmp	.+18     	; 0x930 <led_alarm+0x144>
	else
		__ticks = (uint16_t)__tmp;
     91e:	6f 81       	ldd	r22, Y+7	; 0x07
     920:	78 85       	ldd	r23, Y+8	; 0x08
     922:	89 85       	ldd	r24, Y+9	; 0x09
     924:	9a 85       	ldd	r25, Y+10	; 0x0a
     926:	85 d6       	rcall	.+3338   	; 0x1632 <__fixsfsi>
     928:	dc 01       	movw	r26, r24
     92a:	cb 01       	movw	r24, r22
     92c:	9a 8b       	std	Y+18, r25	; 0x12
     92e:	89 8b       	std	Y+17, r24	; 0x11
     930:	89 89       	ldd	r24, Y+17	; 0x11
     932:	9a 89       	ldd	r25, Y+18	; 0x12
     934:	9c 87       	std	Y+12, r25	; 0x0c
     936:	8b 87       	std	Y+11, r24	; 0x0b
     938:	8b 85       	ldd	r24, Y+11	; 0x0b
     93a:	9c 85       	ldd	r25, Y+12	; 0x0c
     93c:	01 97       	sbiw	r24, 0x01	; 1
     93e:	f1 f7       	brne	.-4      	; 0x93c <led_alarm+0x150>
     940:	9c 87       	std	Y+12, r25	; 0x0c
     942:	8b 87       	std	Y+11, r24	; 0x0b
     944:	8e 81       	ldd	r24, Y+6	; 0x06
     946:	8f 5f       	subi	r24, 0xFF	; 255
     948:	8e 83       	std	Y+6, r24	; 0x06
     94a:	61 cf       	rjmp	.-318    	; 0x80e <led_alarm+0x22>
        _delay_ms(delay);
    }
    switch_off_all_leds();
     94c:	fb dc       	rcall	.-1546   	; 0x344 <switch_off_all_leds>
     94e:	62 96       	adiw	r28, 0x12	; 18
     950:	0f b6       	in	r0, 0x3f	; 63
     952:	f8 94       	cli
     954:	de bf       	out	0x3e, r29	; 62
     956:	0f be       	out	0x3f, r0	; 63
     958:	cd bf       	out	0x3d, r28	; 61
     95a:	df 91       	pop	r29
     95c:	cf 91       	pop	r28
     95e:	08 95       	ret

00000960 <roundp>:
}

/*
 * switch on every dels depending of the percentage p
 */
//#define roundp floor
inline uint8_t roundp(double n) {
     960:	cf 93       	push	r28
     962:	df 93       	push	r29
     964:	cd b7       	in	r28, 0x3d	; 61
     966:	de b7       	in	r29, 0x3e	; 62
     968:	24 97       	sbiw	r28, 0x04	; 4
     96a:	0f b6       	in	r0, 0x3f	; 63
     96c:	f8 94       	cli
     96e:	de bf       	out	0x3e, r29	; 62
     970:	0f be       	out	0x3f, r0	; 63
     972:	cd bf       	out	0x3d, r28	; 61
     974:	69 83       	std	Y+1, r22	; 0x01
     976:	7a 83       	std	Y+2, r23	; 0x02
     978:	8b 83       	std	Y+3, r24	; 0x03
     97a:	9c 83       	std	Y+4, r25	; 0x04
    return floor(n+0.5);
     97c:	20 e0       	ldi	r18, 0x00	; 0
     97e:	30 e0       	ldi	r19, 0x00	; 0
     980:	40 e0       	ldi	r20, 0x00	; 0
     982:	5f e3       	ldi	r21, 0x3F	; 63
     984:	69 81       	ldd	r22, Y+1	; 0x01
     986:	7a 81       	ldd	r23, Y+2	; 0x02
     988:	8b 81       	ldd	r24, Y+3	; 0x03
     98a:	9c 81       	ldd	r25, Y+4	; 0x04
     98c:	ca d5       	rcall	.+2964   	; 0x1522 <__addsf3>
     98e:	dc 01       	movw	r26, r24
     990:	cb 01       	movw	r24, r22
     992:	bc 01       	movw	r22, r24
     994:	cd 01       	movw	r24, r26
     996:	74 d6       	rcall	.+3304   	; 0x1680 <floor>
     998:	dc 01       	movw	r26, r24
     99a:	cb 01       	movw	r24, r22
     99c:	bc 01       	movw	r22, r24
     99e:	cd 01       	movw	r24, r26
     9a0:	48 d6       	rcall	.+3216   	; 0x1632 <__fixsfsi>
     9a2:	dc 01       	movw	r26, r24
     9a4:	cb 01       	movw	r24, r22
     9a6:	99 27       	eor	r25, r25
     9a8:	24 96       	adiw	r28, 0x04	; 4
     9aa:	0f b6       	in	r0, 0x3f	; 63
     9ac:	f8 94       	cli
     9ae:	de bf       	out	0x3e, r29	; 62
     9b0:	0f be       	out	0x3f, r0	; 63
     9b2:	cd bf       	out	0x3d, r28	; 61
     9b4:	df 91       	pop	r29
     9b6:	cf 91       	pop	r28
     9b8:	08 95       	ret

000009ba <show_percent>:
}

// roundp = round for positive number
void show_percent(double p) {
     9ba:	cf 93       	push	r28
     9bc:	df 93       	push	r29
     9be:	cd b7       	in	r28, 0x3d	; 61
     9c0:	de b7       	in	r29, 0x3e	; 62
     9c2:	25 97       	sbiw	r28, 0x05	; 5
     9c4:	0f b6       	in	r0, 0x3f	; 63
     9c6:	f8 94       	cli
     9c8:	de bf       	out	0x3e, r29	; 62
     9ca:	0f be       	out	0x3f, r0	; 63
     9cc:	cd bf       	out	0x3d, r28	; 61
     9ce:	69 83       	std	Y+1, r22	; 0x01
     9d0:	7a 83       	std	Y+2, r23	; 0x02
     9d2:	8b 83       	std	Y+3, r24	; 0x03
     9d4:	9c 83       	std	Y+4, r25	; 0x04
    // p pourcent
    uint8_t n;
    //n = 4;
    n = roundp(p / 100.0 * Nleds); // TO FIX (math.h ceil floor ... round en Java !)
     9d6:	20 e0       	ldi	r18, 0x00	; 0
     9d8:	30 e0       	ldi	r19, 0x00	; 0
     9da:	48 ec       	ldi	r20, 0xC8	; 200
     9dc:	52 e4       	ldi	r21, 0x42	; 66
     9de:	69 81       	ldd	r22, Y+1	; 0x01
     9e0:	7a 81       	ldd	r23, Y+2	; 0x02
     9e2:	8b 81       	ldd	r24, Y+3	; 0x03
     9e4:	9c 81       	ldd	r25, Y+4	; 0x04
     9e6:	df d5       	rcall	.+3006   	; 0x15a6 <__divsf3>
     9e8:	dc 01       	movw	r26, r24
     9ea:	cb 01       	movw	r24, r22
     9ec:	20 e0       	ldi	r18, 0x00	; 0
     9ee:	30 e0       	ldi	r19, 0x00	; 0
     9f0:	40 e0       	ldi	r20, 0x00	; 0
     9f2:	51 e4       	ldi	r21, 0x41	; 65
     9f4:	bc 01       	movw	r22, r24
     9f6:	cd 01       	movw	r24, r26
     9f8:	cc d6       	rcall	.+3480   	; 0x1792 <__mulsf3>
     9fa:	dc 01       	movw	r26, r24
     9fc:	cb 01       	movw	r24, r22
     9fe:	bc 01       	movw	r22, r24
     a00:	cd 01       	movw	r24, r26
     a02:	ae df       	rcall	.-164    	; 0x960 <roundp>
     a04:	8d 83       	std	Y+5, r24	; 0x05
    // TO FIX : +0.5 is a very dirty hack
    switch_on_min_dels(n);
     a06:	8d 81       	ldd	r24, Y+5	; 0x05
     a08:	9c de       	rcall	.-712    	; 0x742 <switch_on_min_dels>
     a0a:	25 96       	adiw	r28, 0x05	; 5
     a0c:	0f b6       	in	r0, 0x3f	; 63
     a0e:	f8 94       	cli
     a10:	de bf       	out	0x3e, r29	; 62
     a12:	0f be       	out	0x3f, r0	; 63
     a14:	cd bf       	out	0x3d, r28	; 61
     a16:	df 91       	pop	r29
     a18:	cf 91       	pop	r28
     a1a:	08 95       	ret

00000a1c <beep>:
}

/*
 * send a sound (on or more beep(s))
 */
void beep(uint8_t n, double delay) {
     a1c:	cf 93       	push	r28
     a1e:	df 93       	push	r29
     a20:	cd b7       	in	r28, 0x3d	; 61
     a22:	de b7       	in	r29, 0x3e	; 62
     a24:	62 97       	sbiw	r28, 0x12	; 18
     a26:	0f b6       	in	r0, 0x3f	; 63
     a28:	f8 94       	cli
     a2a:	de bf       	out	0x3e, r29	; 62
     a2c:	0f be       	out	0x3f, r0	; 63
     a2e:	cd bf       	out	0x3d, r28	; 61
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	4a 83       	std	Y+2, r20	; 0x02
     a34:	5b 83       	std	Y+3, r21	; 0x03
     a36:	6c 83       	std	Y+4, r22	; 0x04
     a38:	7d 83       	std	Y+5, r23	; 0x05
    // TO DO
    uint8_t i;
    for(i = 1; i<=n; i++) {
     a3a:	81 e0       	ldi	r24, 0x01	; 1
     a3c:	8e 83       	std	Y+6, r24	; 0x06
     a3e:	9e 81       	ldd	r25, Y+6	; 0x06
     a40:	89 81       	ldd	r24, Y+1	; 0x01
     a42:	89 17       	cp	r24, r25
     a44:	08 f4       	brcc	.+2      	; 0xa48 <beep+0x2c>
     a46:	52 c0       	rjmp	.+164    	; 0xaec <beep+0xd0>
        //TO DO : send a beep
        if (n>1) {
     a48:	89 81       	ldd	r24, Y+1	; 0x01
     a4a:	82 30       	cpi	r24, 0x02	; 2
     a4c:	08 f4       	brcc	.+2      	; 0xa50 <beep+0x34>
     a4e:	4a c0       	rjmp	.+148    	; 0xae4 <beep+0xc8>
   The maximal possible delay is 262.14 ms / F_CPU in MHz.
 */
void
_delay_ms(double __ms)
{
     a50:	8a 81       	ldd	r24, Y+2	; 0x02
     a52:	9b 81       	ldd	r25, Y+3	; 0x03
     a54:	ac 81       	ldd	r26, Y+4	; 0x04
     a56:	bd 81       	ldd	r27, Y+5	; 0x05
     a58:	8f 83       	std	Y+7, r24	; 0x07
     a5a:	98 87       	std	Y+8, r25	; 0x08
     a5c:	a9 87       	std	Y+9, r26	; 0x09
     a5e:	ba 87       	std	Y+10, r27	; 0x0a
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     a60:	20 e0       	ldi	r18, 0x00	; 0
     a62:	30 e0       	ldi	r19, 0x00	; 0
     a64:	4a e7       	ldi	r20, 0x7A	; 122
     a66:	53 e4       	ldi	r21, 0x43	; 67
     a68:	6f 81       	ldd	r22, Y+7	; 0x07
     a6a:	78 85       	ldd	r23, Y+8	; 0x08
     a6c:	89 85       	ldd	r24, Y+9	; 0x09
     a6e:	9a 85       	ldd	r25, Y+10	; 0x0a
     a70:	90 d6       	rcall	.+3360   	; 0x1792 <__mulsf3>
     a72:	dc 01       	movw	r26, r24
     a74:	cb 01       	movw	r24, r22
     a76:	8d 87       	std	Y+13, r24	; 0x0d
     a78:	9e 87       	std	Y+14, r25	; 0x0e
     a7a:	af 87       	std	Y+15, r26	; 0x0f
     a7c:	b8 8b       	std	Y+16, r27	; 0x10
	if (__tmp < 1.0)
     a7e:	20 e0       	ldi	r18, 0x00	; 0
     a80:	30 e0       	ldi	r19, 0x00	; 0
     a82:	40 e8       	ldi	r20, 0x80	; 128
     a84:	5f e3       	ldi	r21, 0x3F	; 63
     a86:	6d 85       	ldd	r22, Y+13	; 0x0d
     a88:	7e 85       	ldd	r23, Y+14	; 0x0e
     a8a:	8f 85       	ldd	r24, Y+15	; 0x0f
     a8c:	98 89       	ldd	r25, Y+16	; 0x10
     a8e:	11 d6       	rcall	.+3106   	; 0x16b2 <__eqsf2>
     a90:	88 23       	and	r24, r24
     a92:	0c f0       	brlt	.+2      	; 0xa96 <beep+0x7a>
     a94:	05 c0       	rjmp	.+10     	; 0xaa0 <beep+0x84>
		__ticks = 1;
     a96:	81 e0       	ldi	r24, 0x01	; 1
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	9c 87       	std	Y+12, r25	; 0x0c
     a9c:	8b 87       	std	Y+11, r24	; 0x0b
     a9e:	18 c0       	rjmp	.+48     	; 0xad0 <beep+0xb4>
	else if (__tmp > 65535)
     aa0:	20 e0       	ldi	r18, 0x00	; 0
     aa2:	3f ef       	ldi	r19, 0xFF	; 255
     aa4:	4f e7       	ldi	r20, 0x7F	; 127
     aa6:	57 e4       	ldi	r21, 0x47	; 71
     aa8:	6d 85       	ldd	r22, Y+13	; 0x0d
     aaa:	7e 85       	ldd	r23, Y+14	; 0x0e
     aac:	8f 85       	ldd	r24, Y+15	; 0x0f
     aae:	98 89       	ldd	r25, Y+16	; 0x10
     ab0:	03 d6       	rcall	.+3078   	; 0x16b8 <__gesf2>
     ab2:	18 16       	cp	r1, r24
     ab4:	0c f0       	brlt	.+2      	; 0xab8 <beep+0x9c>
     ab6:	03 c0       	rjmp	.+6      	; 0xabe <beep+0xa2>
		__ticks = 0;	/* i.e. 65536 */
     ab8:	1c 86       	std	Y+12, r1	; 0x0c
     aba:	1b 86       	std	Y+11, r1	; 0x0b
     abc:	09 c0       	rjmp	.+18     	; 0xad0 <beep+0xb4>
	else
		__ticks = (uint16_t)__tmp;
     abe:	6d 85       	ldd	r22, Y+13	; 0x0d
     ac0:	7e 85       	ldd	r23, Y+14	; 0x0e
     ac2:	8f 85       	ldd	r24, Y+15	; 0x0f
     ac4:	98 89       	ldd	r25, Y+16	; 0x10
     ac6:	b5 d5       	rcall	.+2922   	; 0x1632 <__fixsfsi>
     ac8:	dc 01       	movw	r26, r24
     aca:	cb 01       	movw	r24, r22
     acc:	9c 87       	std	Y+12, r25	; 0x0c
     ace:	8b 87       	std	Y+11, r24	; 0x0b
     ad0:	8b 85       	ldd	r24, Y+11	; 0x0b
     ad2:	9c 85       	ldd	r25, Y+12	; 0x0c
     ad4:	9a 8b       	std	Y+18, r25	; 0x12
     ad6:	89 8b       	std	Y+17, r24	; 0x11
     ad8:	89 89       	ldd	r24, Y+17	; 0x11
     ada:	9a 89       	ldd	r25, Y+18	; 0x12
     adc:	01 97       	sbiw	r24, 0x01	; 1
     ade:	f1 f7       	brne	.-4      	; 0xadc <beep+0xc0>
     ae0:	9a 8b       	std	Y+18, r25	; 0x12
     ae2:	89 8b       	std	Y+17, r24	; 0x11
     ae4:	8e 81       	ldd	r24, Y+6	; 0x06
     ae6:	8f 5f       	subi	r24, 0xFF	; 255
     ae8:	8e 83       	std	Y+6, r24	; 0x06
     aea:	a9 cf       	rjmp	.-174    	; 0xa3e <beep+0x22>
     aec:	62 96       	adiw	r28, 0x12	; 18
     aee:	0f b6       	in	r0, 0x3f	; 63
     af0:	f8 94       	cli
     af2:	de bf       	out	0x3e, r29	; 62
     af4:	0f be       	out	0x3f, r0	; 63
     af6:	cd bf       	out	0x3d, r28	; 61
     af8:	df 91       	pop	r29
     afa:	cf 91       	pop	r28
     afc:	08 95       	ret

00000afe <StartStopChronometer>:
            _delay_ms(delay);
        }
    }
}

/*
 * start or stop chronometer
 */
inline void StartStopChronometer(void) {
     afe:	cf 93       	push	r28
     b00:	df 93       	push	r29
     b02:	cd b7       	in	r28, 0x3d	; 61
     b04:	de b7       	in	r29, 0x3e	; 62
    beep(1,100);
     b06:	40 e0       	ldi	r20, 0x00	; 0
     b08:	50 e0       	ldi	r21, 0x00	; 0
     b0a:	68 ec       	ldi	r22, 0xC8	; 200
     b0c:	72 e4       	ldi	r23, 0x42	; 66
     b0e:	81 e0       	ldi	r24, 0x01	; 1
     b10:	85 df       	rcall	.-246    	; 0xa1c <beep>
    led_alarm(3,50);
     b12:	40 e0       	ldi	r20, 0x00	; 0
     b14:	50 e0       	ldi	r21, 0x00	; 0
     b16:	68 e4       	ldi	r22, 0x48	; 72
     b18:	72 e4       	ldi	r23, 0x42	; 66
     b1a:	83 e0       	ldi	r24, 0x03	; 3
     b1c:	67 de       	rcall	.-818    	; 0x7ec <led_alarm>
    if (running_chronometer) {
     b1e:	80 91 7c 00 	lds	r24, 0x007C
     b22:	88 23       	and	r24, r24
     b24:	19 f0       	breq	.+6      	; 0xb2c <StartStopChronometer+0x2e>
       running_chronometer = false; // false = 0
     b26:	10 92 7c 00 	sts	0x007C, r1
     b2a:	03 c0       	rjmp	.+6      	; 0xb32 <StartStopChronometer+0x34>
    } else {
       running_chronometer = true; // true = -1
     b2c:	81 e0       	ldi	r24, 0x01	; 1
     b2e:	80 93 7c 00 	sts	0x007C, r24
     b32:	df 91       	pop	r29
     b34:	cf 91       	pop	r28
     b36:	08 95       	ret

00000b38 <TestRunningChronometer>:
    }
}

void TestRunningChronometer(void) {
     b38:	cf 93       	push	r28
     b3a:	df 93       	push	r29
     b3c:	cd b7       	in	r28, 0x3d	; 61
     b3e:	de b7       	in	r29, 0x3e	; 62
     b40:	2c 97       	sbiw	r28, 0x0c	; 12
     b42:	0f b6       	in	r0, 0x3f	; 63
     b44:	f8 94       	cli
     b46:	de bf       	out	0x3e, r29	; 62
     b48:	0f be       	out	0x3f, r0	; 63
     b4a:	cd bf       	out	0x3d, r28	; 61
    if (running_chronometer) {
     b4c:	80 91 7c 00 	lds	r24, 0x007C
     b50:	88 23       	and	r24, r24
     b52:	09 f4       	brne	.+2      	; 0xb56 <TestRunningChronometer+0x1e>
     b54:	98 c0       	rjmp	.+304    	; 0xc86 <TestRunningChronometer+0x14e>
        switch_on_led(8);
     b56:	88 e0       	ldi	r24, 0x08	; 8
     b58:	ff db       	rcall	.-2050   	; 0x358 <switch_on_led>
   The maximal possible delay is 262.14 ms / F_CPU in MHz.
 */
void
_delay_ms(double __ms)
{
     b5a:	80 e0       	ldi	r24, 0x00	; 0
     b5c:	90 e0       	ldi	r25, 0x00	; 0
     b5e:	a8 ec       	ldi	r26, 0xC8	; 200
     b60:	b2 e4       	ldi	r27, 0x42	; 66
     b62:	89 83       	std	Y+1, r24	; 0x01
     b64:	9a 83       	std	Y+2, r25	; 0x02
     b66:	ab 83       	std	Y+3, r26	; 0x03
     b68:	bc 83       	std	Y+4, r27	; 0x04
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b6a:	20 e0       	ldi	r18, 0x00	; 0
     b6c:	30 e0       	ldi	r19, 0x00	; 0
     b6e:	4a e7       	ldi	r20, 0x7A	; 122
     b70:	53 e4       	ldi	r21, 0x43	; 67
     b72:	69 81       	ldd	r22, Y+1	; 0x01
     b74:	7a 81       	ldd	r23, Y+2	; 0x02
     b76:	8b 81       	ldd	r24, Y+3	; 0x03
     b78:	9c 81       	ldd	r25, Y+4	; 0x04
     b7a:	0b d6       	rcall	.+3094   	; 0x1792 <__mulsf3>
     b7c:	dc 01       	movw	r26, r24
     b7e:	cb 01       	movw	r24, r22
     b80:	8f 83       	std	Y+7, r24	; 0x07
     b82:	98 87       	std	Y+8, r25	; 0x08
     b84:	a9 87       	std	Y+9, r26	; 0x09
     b86:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     b88:	20 e0       	ldi	r18, 0x00	; 0
     b8a:	30 e0       	ldi	r19, 0x00	; 0
     b8c:	40 e8       	ldi	r20, 0x80	; 128
     b8e:	5f e3       	ldi	r21, 0x3F	; 63
     b90:	6f 81       	ldd	r22, Y+7	; 0x07
     b92:	78 85       	ldd	r23, Y+8	; 0x08
     b94:	89 85       	ldd	r24, Y+9	; 0x09
     b96:	9a 85       	ldd	r25, Y+10	; 0x0a
     b98:	8c d5       	rcall	.+2840   	; 0x16b2 <__eqsf2>
     b9a:	88 23       	and	r24, r24
     b9c:	0c f0       	brlt	.+2      	; 0xba0 <TestRunningChronometer+0x68>
     b9e:	05 c0       	rjmp	.+10     	; 0xbaa <TestRunningChronometer+0x72>
		__ticks = 1;
     ba0:	81 e0       	ldi	r24, 0x01	; 1
     ba2:	90 e0       	ldi	r25, 0x00	; 0
     ba4:	9e 83       	std	Y+6, r25	; 0x06
     ba6:	8d 83       	std	Y+5, r24	; 0x05
     ba8:	18 c0       	rjmp	.+48     	; 0xbda <TestRunningChronometer+0xa2>
	else if (__tmp > 65535)
     baa:	20 e0       	ldi	r18, 0x00	; 0
     bac:	3f ef       	ldi	r19, 0xFF	; 255
     bae:	4f e7       	ldi	r20, 0x7F	; 127
     bb0:	57 e4       	ldi	r21, 0x47	; 71
     bb2:	6f 81       	ldd	r22, Y+7	; 0x07
     bb4:	78 85       	ldd	r23, Y+8	; 0x08
     bb6:	89 85       	ldd	r24, Y+9	; 0x09
     bb8:	9a 85       	ldd	r25, Y+10	; 0x0a
     bba:	7e d5       	rcall	.+2812   	; 0x16b8 <__gesf2>
     bbc:	18 16       	cp	r1, r24
     bbe:	0c f0       	brlt	.+2      	; 0xbc2 <TestRunningChronometer+0x8a>
     bc0:	03 c0       	rjmp	.+6      	; 0xbc8 <TestRunningChronometer+0x90>
		__ticks = 0;	/* i.e. 65536 */
     bc2:	1e 82       	std	Y+6, r1	; 0x06
     bc4:	1d 82       	std	Y+5, r1	; 0x05
     bc6:	09 c0       	rjmp	.+18     	; 0xbda <TestRunningChronometer+0xa2>
	else
		__ticks = (uint16_t)__tmp;
     bc8:	6f 81       	ldd	r22, Y+7	; 0x07
     bca:	78 85       	ldd	r23, Y+8	; 0x08
     bcc:	89 85       	ldd	r24, Y+9	; 0x09
     bce:	9a 85       	ldd	r25, Y+10	; 0x0a
     bd0:	30 d5       	rcall	.+2656   	; 0x1632 <__fixsfsi>
     bd2:	dc 01       	movw	r26, r24
     bd4:	cb 01       	movw	r24, r22
     bd6:	9e 83       	std	Y+6, r25	; 0x06
     bd8:	8d 83       	std	Y+5, r24	; 0x05
     bda:	8d 81       	ldd	r24, Y+5	; 0x05
     bdc:	9e 81       	ldd	r25, Y+6	; 0x06
     bde:	9c 87       	std	Y+12, r25	; 0x0c
     be0:	8b 87       	std	Y+11, r24	; 0x0b
     be2:	8b 85       	ldd	r24, Y+11	; 0x0b
     be4:	9c 85       	ldd	r25, Y+12	; 0x0c
     be6:	01 97       	sbiw	r24, 0x01	; 1
     be8:	f1 f7       	brne	.-4      	; 0xbe6 <TestRunningChronometer+0xae>
     bea:	9c 87       	std	Y+12, r25	; 0x0c
     bec:	8b 87       	std	Y+11, r24	; 0x0b
        _delay_ms(100);
        switch_off_led(8);
     bee:	88 e0       	ldi	r24, 0x08	; 8
     bf0:	dc db       	rcall	.-2120   	; 0x3aa <switch_off_led>
   The maximal possible delay is 262.14 ms / F_CPU in MHz.
 */
void
_delay_ms(double __ms)
{
     bf2:	80 e0       	ldi	r24, 0x00	; 0
     bf4:	90 e0       	ldi	r25, 0x00	; 0
     bf6:	a8 ec       	ldi	r26, 0xC8	; 200
     bf8:	b2 e4       	ldi	r27, 0x42	; 66
     bfa:	8f 83       	std	Y+7, r24	; 0x07
     bfc:	98 87       	std	Y+8, r25	; 0x08
     bfe:	a9 87       	std	Y+9, r26	; 0x09
     c00:	ba 87       	std	Y+10, r27	; 0x0a
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c02:	20 e0       	ldi	r18, 0x00	; 0
     c04:	30 e0       	ldi	r19, 0x00	; 0
     c06:	4a e7       	ldi	r20, 0x7A	; 122
     c08:	53 e4       	ldi	r21, 0x43	; 67
     c0a:	6f 81       	ldd	r22, Y+7	; 0x07
     c0c:	78 85       	ldd	r23, Y+8	; 0x08
     c0e:	89 85       	ldd	r24, Y+9	; 0x09
     c10:	9a 85       	ldd	r25, Y+10	; 0x0a
     c12:	bf d5       	rcall	.+2942   	; 0x1792 <__mulsf3>
     c14:	dc 01       	movw	r26, r24
     c16:	cb 01       	movw	r24, r22
     c18:	89 83       	std	Y+1, r24	; 0x01
     c1a:	9a 83       	std	Y+2, r25	; 0x02
     c1c:	ab 83       	std	Y+3, r26	; 0x03
     c1e:	bc 83       	std	Y+4, r27	; 0x04
	if (__tmp < 1.0)
     c20:	20 e0       	ldi	r18, 0x00	; 0
     c22:	30 e0       	ldi	r19, 0x00	; 0
     c24:	40 e8       	ldi	r20, 0x80	; 128
     c26:	5f e3       	ldi	r21, 0x3F	; 63
     c28:	69 81       	ldd	r22, Y+1	; 0x01
     c2a:	7a 81       	ldd	r23, Y+2	; 0x02
     c2c:	8b 81       	ldd	r24, Y+3	; 0x03
     c2e:	9c 81       	ldd	r25, Y+4	; 0x04
     c30:	40 d5       	rcall	.+2688   	; 0x16b2 <__eqsf2>
     c32:	88 23       	and	r24, r24
     c34:	0c f0       	brlt	.+2      	; 0xc38 <TestRunningChronometer+0x100>
     c36:	05 c0       	rjmp	.+10     	; 0xc42 <TestRunningChronometer+0x10a>
		__ticks = 1;
     c38:	81 e0       	ldi	r24, 0x01	; 1
     c3a:	90 e0       	ldi	r25, 0x00	; 0
     c3c:	9c 87       	std	Y+12, r25	; 0x0c
     c3e:	8b 87       	std	Y+11, r24	; 0x0b
     c40:	18 c0       	rjmp	.+48     	; 0xc72 <TestRunningChronometer+0x13a>
	else if (__tmp > 65535)
     c42:	20 e0       	ldi	r18, 0x00	; 0
     c44:	3f ef       	ldi	r19, 0xFF	; 255
     c46:	4f e7       	ldi	r20, 0x7F	; 127
     c48:	57 e4       	ldi	r21, 0x47	; 71
     c4a:	69 81       	ldd	r22, Y+1	; 0x01
     c4c:	7a 81       	ldd	r23, Y+2	; 0x02
     c4e:	8b 81       	ldd	r24, Y+3	; 0x03
     c50:	9c 81       	ldd	r25, Y+4	; 0x04
     c52:	32 d5       	rcall	.+2660   	; 0x16b8 <__gesf2>
     c54:	18 16       	cp	r1, r24
     c56:	0c f0       	brlt	.+2      	; 0xc5a <TestRunningChronometer+0x122>
     c58:	03 c0       	rjmp	.+6      	; 0xc60 <TestRunningChronometer+0x128>
		__ticks = 0;	/* i.e. 65536 */
     c5a:	1c 86       	std	Y+12, r1	; 0x0c
     c5c:	1b 86       	std	Y+11, r1	; 0x0b
     c5e:	09 c0       	rjmp	.+18     	; 0xc72 <TestRunningChronometer+0x13a>
	else
		__ticks = (uint16_t)__tmp;
     c60:	69 81       	ldd	r22, Y+1	; 0x01
     c62:	7a 81       	ldd	r23, Y+2	; 0x02
     c64:	8b 81       	ldd	r24, Y+3	; 0x03
     c66:	9c 81       	ldd	r25, Y+4	; 0x04
     c68:	e4 d4       	rcall	.+2504   	; 0x1632 <__fixsfsi>
     c6a:	dc 01       	movw	r26, r24
     c6c:	cb 01       	movw	r24, r22
     c6e:	9c 87       	std	Y+12, r25	; 0x0c
     c70:	8b 87       	std	Y+11, r24	; 0x0b
     c72:	8b 85       	ldd	r24, Y+11	; 0x0b
     c74:	9c 85       	ldd	r25, Y+12	; 0x0c
     c76:	9e 83       	std	Y+6, r25	; 0x06
     c78:	8d 83       	std	Y+5, r24	; 0x05
     c7a:	8d 81       	ldd	r24, Y+5	; 0x05
     c7c:	9e 81       	ldd	r25, Y+6	; 0x06
     c7e:	01 97       	sbiw	r24, 0x01	; 1
     c80:	f1 f7       	brne	.-4      	; 0xc7e <TestRunningChronometer+0x146>
     c82:	9e 83       	std	Y+6, r25	; 0x06
     c84:	8d 83       	std	Y+5, r24	; 0x05
     c86:	2c 96       	adiw	r28, 0x0c	; 12
     c88:	0f b6       	in	r0, 0x3f	; 63
     c8a:	f8 94       	cli
     c8c:	de bf       	out	0x3e, r29	; 62
     c8e:	0f be       	out	0x3f, r0	; 63
     c90:	cd bf       	out	0x3d, r28	; 61
     c92:	df 91       	pop	r29
     c94:	cf 91       	pop	r28
     c96:	08 95       	ret

00000c98 <sf_init>:
        _delay_ms(100);
    }
}

/*
 * software init function
 */
void sf_init(void) {
     c98:	cf 93       	push	r28
     c9a:	df 93       	push	r29
     c9c:	cd b7       	in	r28, 0x3d	; 61
     c9e:	de b7       	in	r29, 0x3e	; 62
    // Leds
    //test_leds_up_off(); // uncomment for release or comment for debug

    // Sound
    //beep(3,100); // uncomment for release or comment for debug

    // Time
    running_chronometer = false;
     ca0:	10 92 7c 00 	sts	0x007C, r1
    init_time(&current_time);
     ca4:	8d e7       	ldi	r24, 0x7D	; 125
     ca6:	90 e0       	ldi	r25, 0x00	; 0
     ca8:	db d9       	rcall	.-3146   	; 0x60 <init_time>
    init_time(&last_time);
     caa:	87 e8       	ldi	r24, 0x87	; 135
     cac:	90 e0       	ldi	r25, 0x00	; 0
     cae:	d8 d9       	rcall	.-3152   	; 0x60 <init_time>
    init_time(&best_time);
     cb0:	82 e8       	ldi	r24, 0x82	; 130
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	d5 d9       	rcall	.-3158   	; 0x60 <init_time>
     cb6:	df 91       	pop	r29
     cb8:	cf 91       	pop	r28
     cba:	08 95       	ret

00000cbc <hw_init>:
}

/*
 *  hardware init function
 */
void hw_init(void) {
     cbc:	cf 93       	push	r28
     cbe:	df 93       	push	r29
     cc0:	cd b7       	in	r28, 0x3d	; 61
     cc2:	de b7       	in	r29, 0x3e	; 62
     cc4:	21 97       	sbiw	r28, 0x01	; 1
     cc6:	0f b6       	in	r0, 0x3f	; 63
     cc8:	f8 94       	cli
     cca:	de bf       	out	0x3e, r29	; 62
     ccc:	0f be       	out	0x3f, r0	; 63
     cce:	cd bf       	out	0x3d, r28	; 61
   // ******************
   // * WatchDog Timer *
   // ******************
   // disable by default

   // ********
   // * LEDs *
   // ********
   DDRC=0xFF; // set up PORTD pins 0 to 7 as output
     cd0:	8f ef       	ldi	r24, 0xFF	; 255
     cd2:	80 93 34 00 	sts	0x0034, r24
   //switch_on_all_leds();
   switch_off_all_leds();
     cd6:	36 db       	rcall	.-2452   	; 0x344 <switch_off_all_leds>

   // *********************************
   // * Start/Stop chronometer (INT0) *
   // *********************************
   // Set Pin 6 (PD2) as the pin to use for this example
   //PCMSK |= (1<<PIND2); // TO FIX
   //PIND |= (1<<PIND2); // try scls:Error : read-only !!!

   // interrupt on INT0 pin falling edge (sensor triggered)
   MCUCR = (1<<ISC01) | (1<<ISC00);
     cd8:	83 e0       	ldi	r24, 0x03	; 3
     cda:	80 93 55 00 	sts	0x0055, r24

   // turn on interrupts!

   GICR |= (1<<INT0); //INT0
     cde:	80 91 5b 00 	lds	r24, 0x005B
     ce2:	80 64       	ori	r24, 0x40	; 64
     ce4:	80 93 5b 00 	sts	0x005B, r24

   sei(); // enable interrupts
     ce8:	78 94       	sei

   // *************************************************
   // * Conv Analog to Digital (CAN for RPM and Temp) *
   // *************************************************

   //volatile static int analog_result;
   //volatile static unsigned char analog_busy;

   //analog_busy=1; // busy mark the ADC function
   uint8_t channel = 0; // measure ADC0
     cea:	19 82       	std	Y+1, r1	; 0x01

   // use internal 2.56V ref  REFS1=1 & REFS0=1 (11)
   // use external ref (01)
   ADMUX=(0<<REFS1)|(1<<REFS0)|(channel & 0x07); // channel & 0x07
     cec:	89 81       	ldd	r24, Y+1	; 0x01
     cee:	87 70       	andi	r24, 0x07	; 7
     cf0:	80 64       	ori	r24, 0x40	; 64
     cf2:	80 93 27 00 	sts	0x0027, r24

   //ADCSRA=(1<<ADEN)|(1<<ADIE)|(1<<ADIF)|(1<<ADPS2); // interrupt ADIE=1
   ADCSRA=(1<<ADEN)|(0<<ADIE)|(1<<ADIF)|(1<<ADPS2); // no interrupt ADIE=0
     cf6:	84 e9       	ldi	r24, 0x94	; 148
     cf8:	80 93 26 00 	sts	0x0026, r24

   ADCSRA |= (1 << (ADSC)); // start conversion
     cfc:	80 91 26 00 	lds	r24, 0x0026
     d00:	80 64       	ori	r24, 0x40	; 64
     d02:	80 93 26 00 	sts	0x0026, r24

   DDRA=0x00;
     d06:	10 92 3a 00 	sts	0x003A, r1
	// make sure pull-up resistors are turned off
	PORTA = 0x00;
     d0a:	10 92 3b 00 	sts	0x003B, r1
	

   // **********
   // * Keypad *
   // **********
   // 1 joystick button (4 directions, up, down, left, right)
   // 2 push buttons (ok, cancel)
   DDRB=0x00;
     d0e:	10 92 37 00 	sts	0x0037, r1
   PORTB=0xFF;
     d12:	8f ef       	ldi	r24, 0xFF	; 255
     d14:	80 93 38 00 	sts	0x0038, r24
     d18:	21 96       	adiw	r28, 0x01	; 1
     d1a:	0f b6       	in	r0, 0x3f	; 63
     d1c:	f8 94       	cli
     d1e:	de bf       	out	0x3e, r29	; 62
     d20:	0f be       	out	0x3f, r0	; 63
     d22:	cd bf       	out	0x3d, r28	; 61
     d24:	df 91       	pop	r29
     d26:	cf 91       	pop	r28
     d28:	08 95       	ret

00000d2a <init>:

   // ***************
   // * Graphic LCD *
   // ***************

   // Sound

   // Time
}

/*
 * init function
 */
void init(void) {
     d2a:	cf 93       	push	r28
     d2c:	df 93       	push	r29
     d2e:	cd b7       	in	r28, 0x3d	; 61
     d30:	de b7       	in	r29, 0x3e	; 62
    hw_init();
     d32:	c4 df       	rcall	.-120    	; 0xcbc <hw_init>
    sf_init();
     d34:	b1 df       	rcall	.-158    	; 0xc98 <sf_init>
     d36:	df 91       	pop	r29
     d38:	cf 91       	pop	r28
     d3a:	08 95       	ret

00000d3c <adcConvert10bit>:
}

/*
 * convert from analog to digital (10 bits)
 */
unsigned short adcConvert10bit(uint8_t ch)
{
     d3c:	cf 93       	push	r28
     d3e:	df 93       	push	r29
     d40:	cd b7       	in	r28, 0x3d	; 61
     d42:	de b7       	in	r29, 0x3e	; 62
     d44:	21 97       	sbiw	r28, 0x01	; 1
     d46:	0f b6       	in	r0, 0x3f	; 63
     d48:	f8 94       	cli
     d4a:	de bf       	out	0x3e, r29	; 62
     d4c:	0f be       	out	0x3f, r0	; 63
     d4e:	cd bf       	out	0x3d, r28	; 61
     d50:	89 83       	std	Y+1, r24	; 0x01
	//a2dCompleteFlag = 0;				// clear conversion complete flag
	ADMUX = ((ADMUX) & ~0x1F) | (ch & 0x1F);	// set channel ADC_MUX_MASK=0x1F
     d52:	80 91 27 00 	lds	r24, 0x0027
     d56:	98 2f       	mov	r25, r24
     d58:	90 7e       	andi	r25, 0xE0	; 224
     d5a:	89 81       	ldd	r24, Y+1	; 0x01
     d5c:	8f 71       	andi	r24, 0x1F	; 31
     d5e:	89 2b       	or	r24, r25
     d60:	80 93 27 00 	sts	0x0027, r24
	ADCSRA |= (_BV(ADIF)); // clear hardware "conversion complete" flag
     d64:	80 91 26 00 	lds	r24, 0x0026
     d68:	80 61       	ori	r24, 0x10	; 16
     d6a:	80 93 26 00 	sts	0x0026, r24
	ADCSRA |= (_BV(ADSC)); // start conversion
     d6e:	80 91 26 00 	lds	r24, 0x0026
     d72:	80 64       	ori	r24, 0x40	; 64
     d74:	80 93 26 00 	sts	0x0026, r24
							
	//while(!a2dCompleteFlag);				// wait until conversion complete
	//while( bit_is_clear(ADCSR, ADIF) );		// wait until conversion complete
	while( bit_is_set(ADCSRA, ADSC) );		// wait until conversion complete
     d78:	80 91 26 00 	lds	r24, 0x0026
     d7c:	99 27       	eor	r25, r25
     d7e:	80 74       	andi	r24, 0x40	; 64
     d80:	90 70       	andi	r25, 0x00	; 0
     d82:	00 97       	sbiw	r24, 0x00	; 0
     d84:	09 f0       	breq	.+2      	; 0xd88 <adcConvert10bit+0x4c>
     d86:	f8 cf       	rjmp	.-16     	; 0xd78 <adcConvert10bit+0x3c>

	// CAUTION: MUST READ ADCL BEFORE ADCH!!!
	return ((ADCL) | ((ADCH)<<8));	// read ADC (full 10 bits);
     d88:	80 91 24 00 	lds	r24, 0x0024
     d8c:	28 2f       	mov	r18, r24
     d8e:	33 27       	eor	r19, r19
     d90:	80 91 25 00 	lds	r24, 0x0025
     d94:	99 27       	eor	r25, r25
     d96:	98 2f       	mov	r25, r24
     d98:	88 27       	eor	r24, r24
     d9a:	28 2b       	or	r18, r24
     d9c:	39 2b       	or	r19, r25
     d9e:	c9 01       	movw	r24, r18
     da0:	21 96       	adiw	r28, 0x01	; 1
     da2:	0f b6       	in	r0, 0x3f	; 63
     da4:	f8 94       	cli
     da6:	de bf       	out	0x3e, r29	; 62
     da8:	0f be       	out	0x3f, r0	; 63
     daa:	cd bf       	out	0x3d, r28	; 61
     dac:	df 91       	pop	r29
     dae:	cf 91       	pop	r28
     db0:	08 95       	ret

00000db2 <adcConvert8bit>:
}

/*
 * convert from analog to digital (8 bits)
 * starts conversion, waits until conversion is done, and returns result
 */
unsigned char adcConvert8bit(unsigned char ch)
{
     db2:	cf 93       	push	r28
     db4:	df 93       	push	r29
     db6:	cd b7       	in	r28, 0x3d	; 61
     db8:	de b7       	in	r29, 0x3e	; 62
     dba:	21 97       	sbiw	r28, 0x01	; 1
     dbc:	0f b6       	in	r0, 0x3f	; 63
     dbe:	f8 94       	cli
     dc0:	de bf       	out	0x3e, r29	; 62
     dc2:	0f be       	out	0x3f, r0	; 63
     dc4:	cd bf       	out	0x3d, r28	; 61
     dc6:	89 83       	std	Y+1, r24	; 0x01
	// do 10-bit conversion and return highest 8 bits
	return adcConvert10bit(ch)>>2;			// return ADC MSB byte
     dc8:	89 81       	ldd	r24, Y+1	; 0x01
     dca:	b8 df       	rcall	.-144    	; 0xd3c <adcConvert10bit>
     dcc:	96 95       	lsr	r25
     dce:	87 95       	ror	r24
     dd0:	96 95       	lsr	r25
     dd2:	87 95       	ror	r24
     dd4:	99 27       	eor	r25, r25
     dd6:	21 96       	adiw	r28, 0x01	; 1
     dd8:	0f b6       	in	r0, 0x3f	; 63
     dda:	f8 94       	cli
     ddc:	de bf       	out	0x3e, r29	; 62
     dde:	0f be       	out	0x3f, r0	; 63
     de0:	cd bf       	out	0x3d, r28	; 61
     de2:	df 91       	pop	r29
     de4:	cf 91       	pop	r28
     de6:	08 95       	ret

00000de8 <SeekButtons>:
}

#define Nbuts 6
#define B_LEFT 0
#define B_RIGHT 1
#define B_UP 2
#define B_DOWN 3
#define B_OK 4
#define B_CANCEL 5

void SeekButtons(void) {
     de8:	cf 93       	push	r28
     dea:	df 93       	push	r29
     dec:	cd b7       	in	r28, 0x3d	; 61
     dee:	de b7       	in	r29, 0x3e	; 62
     df0:	22 97       	sbiw	r28, 0x02	; 2
     df2:	0f b6       	in	r0, 0x3f	; 63
     df4:	f8 94       	cli
     df6:	de bf       	out	0x3e, r29	; 62
     df8:	0f be       	out	0x3f, r0	; 63
     dfa:	cd bf       	out	0x3d, r28	; 61
    uint8_t bstate = false;
     dfc:	19 82       	std	Y+1, r1	; 0x01
    uint8_t i;
	 for (i=0; i<=Nbuts-1; i++) {
     dfe:	1a 82       	std	Y+2, r1	; 0x02
     e00:	8a 81       	ldd	r24, Y+2	; 0x02
     e02:	86 30       	cpi	r24, 0x06	; 6
     e04:	e8 f4       	brcc	.+58     	; 0xe40 <SeekButtons+0x58>
	     if (PINB>>i) {
     e06:	80 91 36 00 	lds	r24, 0x0036
     e0a:	28 2f       	mov	r18, r24
     e0c:	33 27       	eor	r19, r19
     e0e:	8a 81       	ldd	r24, Y+2	; 0x02
     e10:	99 27       	eor	r25, r25
     e12:	02 c0       	rjmp	.+4      	; 0xe18 <SeekButtons+0x30>
     e14:	35 95       	asr	r19
     e16:	27 95       	ror	r18
     e18:	8a 95       	dec	r24
     e1a:	e2 f7       	brpl	.-8      	; 0xe14 <SeekButtons+0x2c>
     e1c:	c9 01       	movw	r24, r18
     e1e:	00 97       	sbiw	r24, 0x00	; 0
     e20:	11 f0       	breq	.+4      	; 0xe26 <SeekButtons+0x3e>
	         bstate = false;
     e22:	19 82       	std	Y+1, r1	; 0x01
     e24:	02 c0       	rjmp	.+4      	; 0xe2a <SeekButtons+0x42>
	     } else {
	         bstate = true;
     e26:	81 e0       	ldi	r24, 0x01	; 1
     e28:	89 83       	std	Y+1, r24	; 0x01
	     }
		
	     if ( i==B_LEFT && bstate ) { // LEFT

	     }
	     if ( i==B_RIGHT && bstate ) { // RIGHT

	     }
	     if ( i==B_UP && bstate ) { // UP

	     }
	     if ( i==B_DOWN && bstate ) { // DOWN

	     }
	     if ( i==B_OK && bstate ) { // OK
     e2a:	8a 81       	ldd	r24, Y+2	; 0x02
     e2c:	84 30       	cpi	r24, 0x04	; 4
     e2e:	21 f4       	brne	.+8      	; 0xe38 <SeekButtons+0x50>
     e30:	89 81       	ldd	r24, Y+1	; 0x01
     e32:	88 23       	and	r24, r24
     e34:	09 f0       	breq	.+2      	; 0xe38 <SeekButtons+0x50>
            StartStopChronometer();
     e36:	63 de       	rcall	.-826    	; 0xafe <StartStopChronometer>
     e38:	8a 81       	ldd	r24, Y+2	; 0x02
     e3a:	8f 5f       	subi	r24, 0xFF	; 255
     e3c:	8a 83       	std	Y+2, r24	; 0x02
     e3e:	e0 cf       	rjmp	.-64     	; 0xe00 <SeekButtons+0x18>
     e40:	22 96       	adiw	r28, 0x02	; 2
     e42:	0f b6       	in	r0, 0x3f	; 63
     e44:	f8 94       	cli
     e46:	de bf       	out	0x3e, r29	; 62
     e48:	0f be       	out	0x3f, r0	; 63
     e4a:	cd bf       	out	0x3d, r28	; 61
     e4c:	df 91       	pop	r29
     e4e:	cf 91       	pop	r28
     e50:	08 95       	ret

00000e52 <loop>:
	     }
	     if ( i==B_CANCEL && bstate ) { // CANCEL

	     }	     	     	     	
	}
}

/*
 *  this is the main loop
 */
void loop(void) {
     e52:	0f 93       	push	r16
     e54:	1f 93       	push	r17
     e56:	cf 93       	push	r28
     e58:	df 93       	push	r29
     e5a:	cd b7       	in	r28, 0x3d	; 61
     e5c:	de b7       	in	r29, 0x3e	; 62
     e5e:	28 97       	sbiw	r28, 0x08	; 8
     e60:	0f b6       	in	r0, 0x3f	; 63
     e62:	f8 94       	cli
     e64:	de bf       	out	0x3e, r29	; 62
     e66:	0f be       	out	0x3f, r0	; 63
     e68:	cd bf       	out	0x3d, r28	; 61
    SeekButtons();
     e6a:	be df       	rcall	.-132    	; 0xde8 <SeekButtons>

    volatile double ch0 = adcConvert10bit(0);
     e6c:	80 e0       	ldi	r24, 0x00	; 0
     e6e:	66 df       	rcall	.-308    	; 0xd3c <adcConvert10bit>
     e70:	8c 01       	movw	r16, r24
     e72:	c8 01       	movw	r24, r16
     e74:	aa 27       	eor	r26, r26
     e76:	97 fd       	sbrc	r25, 7
     e78:	a0 95       	com	r26
     e7a:	ba 2f       	mov	r27, r26
     e7c:	bc 01       	movw	r22, r24
     e7e:	cd 01       	movw	r24, r26
     e80:	f5 d3       	rcall	.+2026   	; 0x166c <__floatsisf>
     e82:	6d 83       	std	Y+5, r22	; 0x05
     e84:	7e 83       	std	Y+6, r23	; 0x06
     e86:	8f 83       	std	Y+7, r24	; 0x07
     e88:	98 87       	std	Y+8, r25	; 0x08
     e8a:	11 23       	and	r17, r17
     e8c:	7c f4       	brge	.+30     	; 0xeac <loop+0x5a>
     e8e:	20 e0       	ldi	r18, 0x00	; 0
     e90:	30 e0       	ldi	r19, 0x00	; 0
     e92:	40 e8       	ldi	r20, 0x80	; 128
     e94:	57 e4       	ldi	r21, 0x47	; 71
     e96:	6d 81       	ldd	r22, Y+5	; 0x05
     e98:	7e 81       	ldd	r23, Y+6	; 0x06
     e9a:	8f 81       	ldd	r24, Y+7	; 0x07
     e9c:	98 85       	ldd	r25, Y+8	; 0x08
     e9e:	41 d3       	rcall	.+1666   	; 0x1522 <__addsf3>
     ea0:	dc 01       	movw	r26, r24
     ea2:	cb 01       	movw	r24, r22
     ea4:	8d 83       	std	Y+5, r24	; 0x05
     ea6:	9e 83       	std	Y+6, r25	; 0x06
     ea8:	af 83       	std	Y+7, r26	; 0x07
     eaa:	b8 87       	std	Y+8, r27	; 0x08
     eac:	8d 81       	ldd	r24, Y+5	; 0x05
     eae:	9e 81       	ldd	r25, Y+6	; 0x06
     eb0:	af 81       	ldd	r26, Y+7	; 0x07
     eb2:	b8 85       	ldd	r27, Y+8	; 0x08
     eb4:	89 83       	std	Y+1, r24	; 0x01
     eb6:	9a 83       	std	Y+2, r25	; 0x02
     eb8:	ab 83       	std	Y+3, r26	; 0x03
     eba:	bc 83       	std	Y+4, r27	; 0x04
    ch0 *= 0.09765625; // 0.09765625 = 100 / 2^10
     ebc:	20 e0       	ldi	r18, 0x00	; 0
     ebe:	30 e0       	ldi	r19, 0x00	; 0
     ec0:	48 ec       	ldi	r20, 0xC8	; 200
     ec2:	5d e3       	ldi	r21, 0x3D	; 61
     ec4:	69 81       	ldd	r22, Y+1	; 0x01
     ec6:	7a 81       	ldd	r23, Y+2	; 0x02
     ec8:	8b 81       	ldd	r24, Y+3	; 0x03
     eca:	9c 81       	ldd	r25, Y+4	; 0x04
     ecc:	62 d4       	rcall	.+2244   	; 0x1792 <__mulsf3>
     ece:	dc 01       	movw	r26, r24
     ed0:	cb 01       	movw	r24, r22
     ed2:	89 83       	std	Y+1, r24	; 0x01
     ed4:	9a 83       	std	Y+2, r25	; 0x02
     ed6:	ab 83       	std	Y+3, r26	; 0x03
     ed8:	bc 83       	std	Y+4, r27	; 0x04
    show_percent(ch0);
     eda:	69 81       	ldd	r22, Y+1	; 0x01
     edc:	7a 81       	ldd	r23, Y+2	; 0x02
     ede:	8b 81       	ldd	r24, Y+3	; 0x03
     ee0:	9c 81       	ldd	r25, Y+4	; 0x04
     ee2:	6b dd       	rcall	.-1322   	; 0x9ba <show_percent>

/*
    _delay_ms(500);

    double ch1 = adcConvert10bit(1);
    ch1 *= 0.09765625; // 0.09765625 = 100 / 2^10
    show_percent(ch1);

    _delay_ms(500);
*/

    TestRunningChronometer();
     ee4:	29 de       	rcall	.-942    	; 0xb38 <TestRunningChronometer>

    inc_time(&current_time);
     ee6:	8d e7       	ldi	r24, 0x7D	; 125
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	4b d9       	rcall	.-3434   	; 0x182 <inc_time>
     eec:	28 96       	adiw	r28, 0x08	; 8
     eee:	0f b6       	in	r0, 0x3f	; 63
     ef0:	f8 94       	cli
     ef2:	de bf       	out	0x3e, r29	; 62
     ef4:	0f be       	out	0x3f, r0	; 63
     ef6:	cd bf       	out	0x3d, r28	; 61
     ef8:	df 91       	pop	r29
     efa:	cf 91       	pop	r28
     efc:	1f 91       	pop	r17
     efe:	0f 91       	pop	r16
     f00:	08 95       	ret

00000f02 <main>:
}


/*
 * main program
 */
int main(void) {
     f02:	cf e5       	ldi	r28, 0x5F	; 95
     f04:	d2 e0       	ldi	r29, 0x02	; 2
     f06:	de bf       	out	0x3e, r29	; 62
     f08:	cd bf       	out	0x3d, r28	; 61
    init();
     f0a:	0f df       	rcall	.-482    	; 0xd2a <init>
    while(1) { // Infinite loop; define here the
        loop(); // system behaviour
     f0c:	a2 df       	rcall	.-188    	; 0xe52 <loop>
     f0e:	fe cf       	rjmp	.-4      	; 0xf0c <main+0xa>

00000f10 <__vector_1>:
    }
    return 0;
}

/*
 * interrupt handler for INT0
 */
SIGNAL(SIG_INTERRUPT0) {
     f10:	1f 92       	push	r1
     f12:	0f 92       	push	r0
     f14:	0f b6       	in	r0, 0x3f	; 63
     f16:	0f 92       	push	r0
     f18:	11 24       	eor	r1, r1
     f1a:	2f 93       	push	r18
     f1c:	3f 93       	push	r19
     f1e:	4f 93       	push	r20
     f20:	5f 93       	push	r21
     f22:	6f 93       	push	r22
     f24:	7f 93       	push	r23
     f26:	8f 93       	push	r24
     f28:	9f 93       	push	r25
     f2a:	af 93       	push	r26
     f2c:	bf 93       	push	r27
     f2e:	ef 93       	push	r30
     f30:	ff 93       	push	r31
     f32:	cf 93       	push	r28
     f34:	df 93       	push	r29
     f36:	cd b7       	in	r28, 0x3d	; 61
     f38:	de b7       	in	r29, 0x3e	; 62
    StartStopChronometer();
     f3a:	e1 dd       	rcall	.-1086   	; 0xafe <StartStopChronometer>
     f3c:	df 91       	pop	r29
     f3e:	cf 91       	pop	r28
     f40:	ff 91       	pop	r31
     f42:	ef 91       	pop	r30
     f44:	bf 91       	pop	r27
     f46:	af 91       	pop	r26
     f48:	9f 91       	pop	r25
     f4a:	8f 91       	pop	r24
     f4c:	7f 91       	pop	r23
     f4e:	6f 91       	pop	r22
     f50:	5f 91       	pop	r21
     f52:	4f 91       	pop	r20
     f54:	3f 91       	pop	r19
     f56:	2f 91       	pop	r18
     f58:	0f 90       	pop	r0
     f5a:	0f be       	out	0x3f, r0	; 63
     f5c:	0f 90       	pop	r0
     f5e:	1f 90       	pop	r1
     f60:	18 95       	reti

00000f62 <printf>:
     f62:	a0 e0       	ldi	r26, 0x00	; 0
     f64:	b0 e0       	ldi	r27, 0x00	; 0
     f66:	e6 eb       	ldi	r30, 0xB6	; 182
     f68:	f7 e0       	ldi	r31, 0x07	; 7
     f6a:	a1 c4       	rjmp	.+2370   	; 0x18ae <__prologue_saves__+0x20>
     f6c:	e5 e0       	ldi	r30, 0x05	; 5
     f6e:	f0 e0       	ldi	r31, 0x00	; 0
     f70:	ec 0f       	add	r30, r28
     f72:	fd 1f       	adc	r31, r29
     f74:	81 91       	ld	r24, Z+
     f76:	91 91       	ld	r25, Z+
     f78:	af 01       	movw	r20, r30
     f7a:	bc 01       	movw	r22, r24
     f7c:	80 91 8e 00 	lds	r24, 0x008E
     f80:	90 91 8f 00 	lds	r25, 0x008F
     f84:	02 d0       	rcall	.+4      	; 0xf8a <vfprintf>
     f86:	e2 e0       	ldi	r30, 0x02	; 2
     f88:	ae c4       	rjmp	.+2396   	; 0x18e6 <__epilogue_restores__+0x20>

00000f8a <vfprintf>:
     f8a:	a2 e1       	ldi	r26, 0x12	; 18
     f8c:	b0 e0       	ldi	r27, 0x00	; 0
     f8e:	ea ec       	ldi	r30, 0xCA	; 202
     f90:	f7 e0       	ldi	r31, 0x07	; 7
     f92:	7d c4       	rjmp	.+2298   	; 0x188e <__prologue_saves__>
     f94:	ee 24       	eor	r14, r14
     f96:	ff 24       	eor	r15, r15
     f98:	87 01       	movw	r16, r14
     f9a:	1c 01       	movw	r2, r24
     f9c:	7e 87       	std	Y+14, r23	; 0x0e
     f9e:	6d 87       	std	Y+13, r22	; 0x0d
     fa0:	2a 01       	movw	r4, r20
     fa2:	cc 24       	eor	r12, r12
     fa4:	dd 24       	eor	r13, r13
     fa6:	fc 01       	movw	r30, r24
     fa8:	d7 82       	std	Z+7, r13	; 0x07
     faa:	c6 82       	std	Z+6, r12	; 0x06
     fac:	83 81       	ldd	r24, Z+3	; 0x03
     fae:	81 fd       	sbrc	r24, 1
     fb0:	55 c2       	rjmp	.+1194   	; 0x145c <vfprintf+0x4d2>
     fb2:	8f ef       	ldi	r24, 0xFF	; 255
     fb4:	9f ef       	ldi	r25, 0xFF	; 255
     fb6:	65 c2       	rjmp	.+1226   	; 0x1482 <vfprintf+0x4f8>
     fb8:	8d 85       	ldd	r24, Y+13	; 0x0d
     fba:	9e 85       	ldd	r25, Y+14	; 0x0e
     fbc:	01 96       	adiw	r24, 0x01	; 1
     fbe:	9e 87       	std	Y+14, r25	; 0x0e
     fc0:	8d 87       	std	Y+13, r24	; 0x0d
     fc2:	c0 fe       	sbrs	r12, 0
     fc4:	39 c2       	rjmp	.+1138   	; 0x1438 <vfprintf+0x4ae>
     fc6:	8f 85       	ldd	r24, Y+15	; 0x0f
     fc8:	80 53       	subi	r24, 0x30	; 48
     fca:	8a 30       	cpi	r24, 0x0A	; 10
     fcc:	d0 f4       	brcc	.+52     	; 0x1002 <vfprintf+0x78>
     fce:	9f 85       	ldd	r25, Y+15	; 0x0f
     fd0:	90 33       	cpi	r25, 0x30	; 48
     fd2:	39 f4       	brne	.+14     	; 0xfe2 <vfprintf+0x58>
     fd4:	66 20       	and	r6, r6
     fd6:	29 f4       	brne	.+10     	; 0xfe2 <vfprintf+0x58>
     fd8:	c3 fc       	sbrc	r12, 3
     fda:	03 c0       	rjmp	.+6      	; 0xfe2 <vfprintf+0x58>
     fdc:	e0 e0       	ldi	r30, 0x00	; 0
     fde:	f1 e0       	ldi	r31, 0x01	; 1
     fe0:	8d c0       	rjmp	.+282    	; 0x10fc <vfprintf+0x172>
     fe2:	8a e0       	ldi	r24, 0x0A	; 10
     fe4:	68 9e       	mul	r6, r24
     fe6:	60 2c       	mov	r6, r0
     fe8:	11 24       	eor	r1, r1
     fea:	ff 85       	ldd	r31, Y+15	; 0x0f
     fec:	6f 0e       	add	r6, r31
     fee:	20 ed       	ldi	r18, 0xD0	; 208
     ff0:	62 0e       	add	r6, r18
     ff2:	67 fe       	sbrs	r6, 7
     ff4:	02 c0       	rjmp	.+4      	; 0xffa <vfprintf+0x70>
     ff6:	5f e7       	ldi	r21, 0x7F	; 127
     ff8:	65 2e       	mov	r6, r21
     ffa:	c3 fc       	sbrc	r12, 3
     ffc:	2f c2       	rjmp	.+1118   	; 0x145c <vfprintf+0x4d2>
     ffe:	76 2c       	mov	r7, r6
    1000:	2d c2       	rjmp	.+1114   	; 0x145c <vfprintf+0x4d2>
    1002:	c3 fe       	sbrs	r12, 3
    1004:	04 c0       	rjmp	.+8      	; 0x100e <vfprintf+0x84>
    1006:	66 20       	and	r6, r6
    1008:	11 f4       	brne	.+4      	; 0x100e <vfprintf+0x84>
    100a:	41 e0       	ldi	r20, 0x01	; 1
    100c:	64 2e       	mov	r6, r20
    100e:	ef 85       	ldd	r30, Y+15	; 0x0f
    1010:	8e 2f       	mov	r24, r30
    1012:	99 27       	eor	r25, r25
    1014:	87 fd       	sbrc	r24, 7
    1016:	90 95       	com	r25
    1018:	88 36       	cpi	r24, 0x68	; 104
    101a:	91 05       	cpc	r25, r1
    101c:	8c f5       	brge	.+98     	; 0x1080 <vfprintf+0xf6>
    101e:	85 36       	cpi	r24, 0x65	; 101
    1020:	91 05       	cpc	r25, r1
    1022:	0c f0       	brlt	.+2      	; 0x1026 <vfprintf+0x9c>
    1024:	6e c0       	rjmp	.+220    	; 0x1102 <vfprintf+0x178>
    1026:	83 35       	cpi	r24, 0x53	; 83
    1028:	91 05       	cpc	r25, r1
    102a:	09 f4       	brne	.+2      	; 0x102e <vfprintf+0xa4>
    102c:	92 c0       	rjmp	.+292    	; 0x1152 <vfprintf+0x1c8>
    102e:	84 35       	cpi	r24, 0x54	; 84
    1030:	91 05       	cpc	r25, r1
    1032:	cc f4       	brge	.+50     	; 0x1066 <vfprintf+0xdc>
    1034:	8b 32       	cpi	r24, 0x2B	; 43
    1036:	91 05       	cpc	r25, r1
    1038:	09 f4       	brne	.+2      	; 0x103c <vfprintf+0xb2>
    103a:	49 c0       	rjmp	.+146    	; 0x10ce <vfprintf+0x144>
    103c:	8c 32       	cpi	r24, 0x2C	; 44
    103e:	91 05       	cpc	r25, r1
    1040:	4c f4       	brge	.+18     	; 0x1054 <vfprintf+0xca>
    1042:	80 32       	cpi	r24, 0x20	; 32
    1044:	91 05       	cpc	r25, r1
    1046:	09 f4       	brne	.+2      	; 0x104a <vfprintf+0xc0>
    1048:	46 c0       	rjmp	.+140    	; 0x10d6 <vfprintf+0x14c>
    104a:	83 32       	cpi	r24, 0x23	; 35
    104c:	91 05       	cpc	r25, r1
    104e:	09 f4       	brne	.+2      	; 0x1052 <vfprintf+0xc8>
    1050:	4a c0       	rjmp	.+148    	; 0x10e6 <vfprintf+0x15c>
    1052:	ed c1       	rjmp	.+986    	; 0x142e <vfprintf+0x4a4>
    1054:	8d 32       	cpi	r24, 0x2D	; 45
    1056:	91 05       	cpc	r25, r1
    1058:	09 f4       	brne	.+2      	; 0x105c <vfprintf+0xd2>
    105a:	40 c0       	rjmp	.+128    	; 0x10dc <vfprintf+0x152>
    105c:	8e 32       	cpi	r24, 0x2E	; 46
    105e:	91 05       	cpc	r25, r1
    1060:	09 f4       	brne	.+2      	; 0x1064 <vfprintf+0xda>
    1062:	44 c0       	rjmp	.+136    	; 0x10ec <vfprintf+0x162>
    1064:	e4 c1       	rjmp	.+968    	; 0x142e <vfprintf+0x4a4>
    1066:	83 36       	cpi	r24, 0x63	; 99
    1068:	91 05       	cpc	r25, r1
    106a:	09 f4       	brne	.+2      	; 0x106e <vfprintf+0xe4>
    106c:	50 c0       	rjmp	.+160    	; 0x110e <vfprintf+0x184>
    106e:	84 36       	cpi	r24, 0x64	; 100
    1070:	91 05       	cpc	r25, r1
    1072:	0c f0       	brlt	.+2      	; 0x1076 <vfprintf+0xec>
    1074:	87 c0       	rjmp	.+270    	; 0x1184 <vfprintf+0x1fa>
    1076:	88 35       	cpi	r24, 0x58	; 88
    1078:	91 05       	cpc	r25, r1
    107a:	09 f4       	brne	.+2      	; 0x107e <vfprintf+0xf4>
    107c:	b9 c0       	rjmp	.+370    	; 0x11f0 <vfprintf+0x266>
    107e:	d7 c1       	rjmp	.+942    	; 0x142e <vfprintf+0x4a4>
    1080:	80 37       	cpi	r24, 0x70	; 112
    1082:	91 05       	cpc	r25, r1
    1084:	09 f4       	brne	.+2      	; 0x1088 <vfprintf+0xfe>
    1086:	ae c0       	rjmp	.+348    	; 0x11e4 <vfprintf+0x25a>
    1088:	81 37       	cpi	r24, 0x71	; 113
    108a:	91 05       	cpc	r25, r1
    108c:	84 f4       	brge	.+32     	; 0x10ae <vfprintf+0x124>
    108e:	8c 36       	cpi	r24, 0x6C	; 108
    1090:	91 05       	cpc	r25, r1
    1092:	91 f1       	breq	.+100    	; 0x10f8 <vfprintf+0x16e>
    1094:	8d 36       	cpi	r24, 0x6D	; 109
    1096:	91 05       	cpc	r25, r1
    1098:	2c f4       	brge	.+10     	; 0x10a4 <vfprintf+0x11a>
    109a:	89 36       	cpi	r24, 0x69	; 105
    109c:	91 05       	cpc	r25, r1
    109e:	09 f4       	brne	.+2      	; 0x10a2 <vfprintf+0x118>
    10a0:	71 c0       	rjmp	.+226    	; 0x1184 <vfprintf+0x1fa>
    10a2:	c5 c1       	rjmp	.+906    	; 0x142e <vfprintf+0x4a4>
    10a4:	8f 36       	cpi	r24, 0x6F	; 111
    10a6:	91 05       	cpc	r25, r1
    10a8:	09 f4       	brne	.+2      	; 0x10ac <vfprintf+0x122>
    10aa:	99 c0       	rjmp	.+306    	; 0x11de <vfprintf+0x254>
    10ac:	c0 c1       	rjmp	.+896    	; 0x142e <vfprintf+0x4a4>
    10ae:	85 37       	cpi	r24, 0x75	; 117
    10b0:	91 05       	cpc	r25, r1
    10b2:	09 f4       	brne	.+2      	; 0x10b6 <vfprintf+0x12c>
    10b4:	9f c0       	rjmp	.+318    	; 0x11f4 <vfprintf+0x26a>
    10b6:	86 37       	cpi	r24, 0x76	; 118
    10b8:	91 05       	cpc	r25, r1
    10ba:	24 f4       	brge	.+8      	; 0x10c4 <vfprintf+0x13a>
    10bc:	83 37       	cpi	r24, 0x73	; 115
    10be:	91 05       	cpc	r25, r1
    10c0:	71 f1       	breq	.+92     	; 0x111e <vfprintf+0x194>
    10c2:	b5 c1       	rjmp	.+874    	; 0x142e <vfprintf+0x4a4>
    10c4:	88 37       	cpi	r24, 0x78	; 120
    10c6:	91 05       	cpc	r25, r1
    10c8:	09 f4       	brne	.+2      	; 0x10cc <vfprintf+0x142>
    10ca:	92 c0       	rjmp	.+292    	; 0x11f0 <vfprintf+0x266>
    10cc:	b0 c1       	rjmp	.+864    	; 0x142e <vfprintf+0x4a4>
    10ce:	80 e1       	ldi	r24, 0x10	; 16
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	c8 2a       	or	r12, r24
    10d4:	d9 2a       	or	r13, r25
    10d6:	e0 e2       	ldi	r30, 0x20	; 32
    10d8:	f0 e0       	ldi	r31, 0x00	; 0
    10da:	10 c0       	rjmp	.+32     	; 0x10fc <vfprintf+0x172>
    10dc:	80 e8       	ldi	r24, 0x80	; 128
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	c8 2a       	or	r12, r24
    10e2:	d9 2a       	or	r13, r25
    10e4:	bb c1       	rjmp	.+886    	; 0x145c <vfprintf+0x4d2>
    10e6:	e0 e4       	ldi	r30, 0x40	; 64
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	08 c0       	rjmp	.+16     	; 0x10fc <vfprintf+0x172>
    10ec:	88 e0       	ldi	r24, 0x08	; 8
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	c8 2a       	or	r12, r24
    10f2:	d9 2a       	or	r13, r25
    10f4:	66 24       	eor	r6, r6
    10f6:	b2 c1       	rjmp	.+868    	; 0x145c <vfprintf+0x4d2>
    10f8:	e4 e0       	ldi	r30, 0x04	; 4
    10fa:	f0 e0       	ldi	r31, 0x00	; 0
    10fc:	ce 2a       	or	r12, r30
    10fe:	df 2a       	or	r13, r31
    1100:	ad c1       	rjmp	.+858    	; 0x145c <vfprintf+0x4d2>
    1102:	3f e3       	ldi	r19, 0x3F	; 63
    1104:	e3 2e       	mov	r14, r19
    1106:	7a 94       	dec	r7
    1108:	f3 e6       	ldi	r31, 0x63	; 99
    110a:	ff 87       	std	Y+15, r31	; 0x0f
    110c:	31 c1       	rjmp	.+610    	; 0x1370 <vfprintf+0x3e6>
    110e:	f2 01       	movw	r30, r4
    1110:	82 e0       	ldi	r24, 0x02	; 2
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	48 0e       	add	r4, r24
    1116:	59 1e       	adc	r5, r25
    1118:	e0 80       	ld	r14, Z
    111a:	7a 94       	dec	r7
    111c:	29 c1       	rjmp	.+594    	; 0x1370 <vfprintf+0x3e6>
    111e:	f2 01       	movw	r30, r4
    1120:	82 e0       	ldi	r24, 0x02	; 2
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	48 0e       	add	r4, r24
    1126:	59 1e       	adc	r5, r25
    1128:	a0 81       	ld	r26, Z
    112a:	b1 81       	ldd	r27, Z+1	; 0x01
    112c:	7d 01       	movw	r14, r26
    112e:	c3 fe       	sbrs	r12, 3
    1130:	08 c0       	rjmp	.+16     	; 0x1142 <vfprintf+0x1b8>
    1132:	86 2d       	mov	r24, r6
    1134:	99 27       	eor	r25, r25
    1136:	87 fd       	sbrc	r24, 7
    1138:	90 95       	com	r25
    113a:	bc 01       	movw	r22, r24
    113c:	cd 01       	movw	r24, r26
    113e:	b8 d1       	rcall	.+880    	; 0x14b0 <strnlen>
    1140:	1d c0       	rjmp	.+58     	; 0x117c <vfprintf+0x1f2>
    1142:	fd 01       	movw	r30, r26
    1144:	01 90       	ld	r0, Z+
    1146:	00 20       	and	r0, r0
    1148:	e9 f7       	brne	.-6      	; 0x1144 <vfprintf+0x1ba>
    114a:	31 97       	sbiw	r30, 0x01	; 1
    114c:	ea 1b       	sub	r30, r26
    114e:	e8 8b       	std	Y+16, r30	; 0x10
    1150:	16 c0       	rjmp	.+44     	; 0x117e <vfprintf+0x1f4>
    1152:	f2 01       	movw	r30, r4
    1154:	82 e0       	ldi	r24, 0x02	; 2
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	48 0e       	add	r4, r24
    115a:	59 1e       	adc	r5, r25
    115c:	01 90       	ld	r0, Z+
    115e:	f0 81       	ld	r31, Z
    1160:	e0 2d       	mov	r30, r0
    1162:	7f 01       	movw	r14, r30
    1164:	c3 fe       	sbrs	r12, 3
    1166:	08 c0       	rjmp	.+16     	; 0x1178 <vfprintf+0x1ee>
    1168:	86 2d       	mov	r24, r6
    116a:	99 27       	eor	r25, r25
    116c:	87 fd       	sbrc	r24, 7
    116e:	90 95       	com	r25
    1170:	bc 01       	movw	r22, r24
    1172:	cf 01       	movw	r24, r30
    1174:	92 d1       	rcall	.+804    	; 0x149a <strnlen_P>
    1176:	02 c0       	rjmp	.+4      	; 0x117c <vfprintf+0x1f2>
    1178:	cf 01       	movw	r24, r30
    117a:	86 d1       	rcall	.+780    	; 0x1488 <strlen_P>
    117c:	88 8b       	std	Y+16, r24	; 0x10
    117e:	98 89       	ldd	r25, Y+16	; 0x10
    1180:	79 1a       	sub	r7, r25
    1182:	f6 c0       	rjmp	.+492    	; 0x1370 <vfprintf+0x3e6>
    1184:	c2 fe       	sbrs	r12, 2
    1186:	0a c0       	rjmp	.+20     	; 0x119c <vfprintf+0x212>
    1188:	f2 01       	movw	r30, r4
    118a:	84 e0       	ldi	r24, 0x04	; 4
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	48 0e       	add	r4, r24
    1190:	59 1e       	adc	r5, r25
    1192:	20 81       	ld	r18, Z
    1194:	31 81       	ldd	r19, Z+1	; 0x01
    1196:	42 81       	ldd	r20, Z+2	; 0x02
    1198:	53 81       	ldd	r21, Z+3	; 0x03
    119a:	0c c0       	rjmp	.+24     	; 0x11b4 <vfprintf+0x22a>
    119c:	f2 01       	movw	r30, r4
    119e:	82 e0       	ldi	r24, 0x02	; 2
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	48 0e       	add	r4, r24
    11a4:	59 1e       	adc	r5, r25
    11a6:	80 81       	ld	r24, Z
    11a8:	91 81       	ldd	r25, Z+1	; 0x01
    11aa:	9c 01       	movw	r18, r24
    11ac:	44 27       	eor	r20, r20
    11ae:	37 fd       	sbrc	r19, 7
    11b0:	40 95       	com	r20
    11b2:	54 2f       	mov	r21, r20
    11b4:	79 01       	movw	r14, r18
    11b6:	8a 01       	movw	r16, r20
    11b8:	57 ff       	sbrs	r21, 7
    11ba:	0c c0       	rjmp	.+24     	; 0x11d4 <vfprintf+0x24a>
    11bc:	e2 e0       	ldi	r30, 0x02	; 2
    11be:	f0 e0       	ldi	r31, 0x00	; 0
    11c0:	ce 2a       	or	r12, r30
    11c2:	df 2a       	or	r13, r31
    11c4:	10 95       	com	r17
    11c6:	00 95       	com	r16
    11c8:	f0 94       	com	r15
    11ca:	e0 94       	com	r14
    11cc:	e1 1c       	adc	r14, r1
    11ce:	f1 1c       	adc	r15, r1
    11d0:	01 1d       	adc	r16, r1
    11d2:	11 1d       	adc	r17, r1
    11d4:	8f eb       	ldi	r24, 0xBF	; 191
    11d6:	9f ef       	ldi	r25, 0xFF	; 255
    11d8:	c8 22       	and	r12, r24
    11da:	d9 22       	and	r13, r25
    11dc:	27 c0       	rjmp	.+78     	; 0x122c <vfprintf+0x2a2>
    11de:	98 e0       	ldi	r25, 0x08	; 8
    11e0:	98 8b       	std	Y+16, r25	; 0x10
    11e2:	08 c0       	rjmp	.+16     	; 0x11f4 <vfprintf+0x26a>
    11e4:	e0 e4       	ldi	r30, 0x40	; 64
    11e6:	f0 e0       	ldi	r31, 0x00	; 0
    11e8:	ce 2a       	or	r12, r30
    11ea:	df 2a       	or	r13, r31
    11ec:	f8 e7       	ldi	r31, 0x78	; 120
    11ee:	ff 87       	std	Y+15, r31	; 0x0f
    11f0:	20 e1       	ldi	r18, 0x10	; 16
    11f2:	28 8b       	std	Y+16, r18	; 0x10
    11f4:	c2 fe       	sbrs	r12, 2
    11f6:	0a c0       	rjmp	.+20     	; 0x120c <vfprintf+0x282>
    11f8:	f2 01       	movw	r30, r4
    11fa:	84 e0       	ldi	r24, 0x04	; 4
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	48 0e       	add	r4, r24
    1200:	59 1e       	adc	r5, r25
    1202:	20 81       	ld	r18, Z
    1204:	31 81       	ldd	r19, Z+1	; 0x01
    1206:	42 81       	ldd	r20, Z+2	; 0x02
    1208:	53 81       	ldd	r21, Z+3	; 0x03
    120a:	0a c0       	rjmp	.+20     	; 0x1220 <vfprintf+0x296>
    120c:	f2 01       	movw	r30, r4
    120e:	82 e0       	ldi	r24, 0x02	; 2
    1210:	90 e0       	ldi	r25, 0x00	; 0
    1212:	48 0e       	add	r4, r24
    1214:	59 1e       	adc	r5, r25
    1216:	80 81       	ld	r24, Z
    1218:	91 81       	ldd	r25, Z+1	; 0x01
    121a:	9c 01       	movw	r18, r24
    121c:	44 27       	eor	r20, r20
    121e:	55 27       	eor	r21, r21
    1220:	79 01       	movw	r14, r18
    1222:	8a 01       	movw	r16, r20
    1224:	ef ec       	ldi	r30, 0xCF	; 207
    1226:	ff ef       	ldi	r31, 0xFF	; 255
    1228:	ce 22       	and	r12, r30
    122a:	df 22       	and	r13, r31
    122c:	ce 01       	movw	r24, r28
    122e:	01 96       	adiw	r24, 0x01	; 1
    1230:	9a 8b       	std	Y+18, r25	; 0x12
    1232:	89 8b       	std	Y+17, r24	; 0x11
    1234:	98 89       	ldd	r25, Y+16	; 0x10
    1236:	89 2e       	mov	r8, r25
    1238:	99 24       	eor	r9, r9
    123a:	aa 24       	eor	r10, r10
    123c:	bb 24       	eor	r11, r11
    123e:	c8 01       	movw	r24, r16
    1240:	b7 01       	movw	r22, r14
    1242:	a5 01       	movw	r20, r10
    1244:	94 01       	movw	r18, r8
    1246:	01 d3       	rcall	.+1538   	; 0x184a <__udivmodsi4>
    1248:	dc 01       	movw	r26, r24
    124a:	cb 01       	movw	r24, r22
    124c:	e9 89       	ldd	r30, Y+17	; 0x11
    124e:	fa 89       	ldd	r31, Y+18	; 0x12
    1250:	80 83       	st	Z, r24
    1252:	8a 30       	cpi	r24, 0x0A	; 10
    1254:	24 f0       	brlt	.+8      	; 0x125e <vfprintf+0x2d4>
    1256:	ff 85       	ldd	r31, Y+15	; 0x0f
    1258:	8f 0f       	add	r24, r31
    125a:	81 52       	subi	r24, 0x21	; 33
    125c:	01 c0       	rjmp	.+2      	; 0x1260 <vfprintf+0x2d6>
    125e:	80 5d       	subi	r24, 0xD0	; 208
    1260:	e9 89       	ldd	r30, Y+17	; 0x11
    1262:	fa 89       	ldd	r31, Y+18	; 0x12
    1264:	81 93       	st	Z+, r24
    1266:	fa 8b       	std	Y+18, r31	; 0x12
    1268:	e9 8b       	std	Y+17, r30	; 0x11
    126a:	c8 01       	movw	r24, r16
    126c:	b7 01       	movw	r22, r14
    126e:	a5 01       	movw	r20, r10
    1270:	94 01       	movw	r18, r8
    1272:	eb d2       	rcall	.+1494   	; 0x184a <__udivmodsi4>
    1274:	79 01       	movw	r14, r18
    1276:	8a 01       	movw	r16, r20
    1278:	21 15       	cp	r18, r1
    127a:	31 05       	cpc	r19, r1
    127c:	41 05       	cpc	r20, r1
    127e:	51 05       	cpc	r21, r1
    1280:	f1 f6       	brne	.-68     	; 0x123e <vfprintf+0x2b4>
    1282:	e9 88       	ldd	r14, Y+17	; 0x11
    1284:	81 e0       	ldi	r24, 0x01	; 1
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	8c 0f       	add	r24, r28
    128a:	9d 1f       	adc	r25, r29
    128c:	e8 1a       	sub	r14, r24
    128e:	c6 01       	movw	r24, r12
    1290:	82 73       	andi	r24, 0x32	; 50
    1292:	90 70       	andi	r25, 0x00	; 0
    1294:	89 2b       	or	r24, r25
    1296:	09 f0       	breq	.+2      	; 0x129a <vfprintf+0x310>
    1298:	7a 94       	dec	r7
    129a:	c6 fe       	sbrs	r12, 6
    129c:	0d c0       	rjmp	.+26     	; 0x12b8 <vfprintf+0x32e>
    129e:	87 2d       	mov	r24, r7
    12a0:	99 27       	eor	r25, r25
    12a2:	87 fd       	sbrc	r24, 7
    12a4:	90 95       	com	r25
    12a6:	e8 89       	ldd	r30, Y+16	; 0x10
    12a8:	e0 31       	cpi	r30, 0x10	; 16
    12aa:	21 f4       	brne	.+8      	; 0x12b4 <vfprintf+0x32a>
    12ac:	2e ef       	ldi	r18, 0xFE	; 254
    12ae:	72 2e       	mov	r7, r18
    12b0:	78 0e       	add	r7, r24
    12b2:	02 c0       	rjmp	.+4      	; 0x12b8 <vfprintf+0x32e>
    12b4:	78 2e       	mov	r7, r24
    12b6:	7a 94       	dec	r7
    12b8:	c3 fe       	sbrs	r12, 3
    12ba:	0f c0       	rjmp	.+30     	; 0x12da <vfprintf+0x350>
    12bc:	26 2d       	mov	r18, r6
    12be:	33 27       	eor	r19, r19
    12c0:	27 fd       	sbrc	r18, 7
    12c2:	30 95       	com	r19
    12c4:	8e 2d       	mov	r24, r14
    12c6:	99 27       	eor	r25, r25
    12c8:	82 17       	cp	r24, r18
    12ca:	93 07       	cpc	r25, r19
    12cc:	2c f0       	brlt	.+10     	; 0x12d8 <vfprintf+0x34e>
    12ce:	87 ef       	ldi	r24, 0xF7	; 247
    12d0:	9f ef       	ldi	r25, 0xFF	; 255
    12d2:	c8 22       	and	r12, r24
    12d4:	d9 22       	and	r13, r25
    12d6:	01 c0       	rjmp	.+2      	; 0x12da <vfprintf+0x350>
    12d8:	6e 18       	sub	r6, r14
    12da:	c3 fe       	sbrs	r12, 3
    12dc:	02 c0       	rjmp	.+4      	; 0x12e2 <vfprintf+0x358>
    12de:	76 18       	sub	r7, r6
    12e0:	01 c0       	rjmp	.+2      	; 0x12e4 <vfprintf+0x35a>
    12e2:	7e 18       	sub	r7, r14
    12e4:	c6 01       	movw	r24, r12
    12e6:	80 78       	andi	r24, 0x80	; 128
    12e8:	91 70       	andi	r25, 0x01	; 1
    12ea:	89 2b       	or	r24, r25
    12ec:	49 f4       	brne	.+18     	; 0x1300 <vfprintf+0x376>
    12ee:	87 2d       	mov	r24, r7
    12f0:	7a 94       	dec	r7
    12f2:	18 16       	cp	r1, r24
    12f4:	2c f4       	brge	.+10     	; 0x1300 <vfprintf+0x376>
    12f6:	b1 01       	movw	r22, r2
    12f8:	80 e2       	ldi	r24, 0x20	; 32
    12fa:	90 e0       	ldi	r25, 0x00	; 0
    12fc:	e4 d0       	rcall	.+456    	; 0x14c6 <fputc>
    12fe:	f7 cf       	rjmp	.-18     	; 0x12ee <vfprintf+0x364>
    1300:	c1 fe       	sbrs	r12, 1
    1302:	04 c0       	rjmp	.+8      	; 0x130c <vfprintf+0x382>
    1304:	b1 01       	movw	r22, r2
    1306:	8d e2       	ldi	r24, 0x2D	; 45
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	0b c0       	rjmp	.+22     	; 0x1322 <vfprintf+0x398>
    130c:	c4 fe       	sbrs	r12, 4
    130e:	04 c0       	rjmp	.+8      	; 0x1318 <vfprintf+0x38e>
    1310:	b1 01       	movw	r22, r2
    1312:	8b e2       	ldi	r24, 0x2B	; 43
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	05 c0       	rjmp	.+10     	; 0x1322 <vfprintf+0x398>
    1318:	c5 fe       	sbrs	r12, 5
    131a:	04 c0       	rjmp	.+8      	; 0x1324 <vfprintf+0x39a>
    131c:	b1 01       	movw	r22, r2
    131e:	80 e2       	ldi	r24, 0x20	; 32
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	d1 d0       	rcall	.+418    	; 0x14c6 <fputc>
    1324:	c6 fe       	sbrs	r12, 6
    1326:	0e c0       	rjmp	.+28     	; 0x1344 <vfprintf+0x3ba>
    1328:	b1 01       	movw	r22, r2
    132a:	80 e3       	ldi	r24, 0x30	; 48
    132c:	90 e0       	ldi	r25, 0x00	; 0
    132e:	cb d0       	rcall	.+406    	; 0x14c6 <fputc>
    1330:	98 89       	ldd	r25, Y+16	; 0x10
    1332:	90 31       	cpi	r25, 0x10	; 16
    1334:	39 f4       	brne	.+14     	; 0x1344 <vfprintf+0x3ba>
    1336:	b1 01       	movw	r22, r2
    1338:	ef 85       	ldd	r30, Y+15	; 0x0f
    133a:	8e 2f       	mov	r24, r30
    133c:	99 27       	eor	r25, r25
    133e:	87 fd       	sbrc	r24, 7
    1340:	90 95       	com	r25
    1342:	c1 d0       	rcall	.+386    	; 0x14c6 <fputc>
    1344:	d0 fe       	sbrs	r13, 0
    1346:	09 c0       	rjmp	.+18     	; 0x135a <vfprintf+0x3d0>
    1348:	87 2d       	mov	r24, r7
    134a:	7a 94       	dec	r7
    134c:	18 16       	cp	r1, r24
    134e:	2c f4       	brge	.+10     	; 0x135a <vfprintf+0x3d0>
    1350:	b1 01       	movw	r22, r2
    1352:	80 e3       	ldi	r24, 0x30	; 48
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	b7 d0       	rcall	.+366    	; 0x14c6 <fputc>
    1358:	f7 cf       	rjmp	.-18     	; 0x1348 <vfprintf+0x3be>
    135a:	c3 fe       	sbrs	r12, 3
    135c:	09 c0       	rjmp	.+18     	; 0x1370 <vfprintf+0x3e6>
    135e:	86 2d       	mov	r24, r6
    1360:	6a 94       	dec	r6
    1362:	18 16       	cp	r1, r24
    1364:	2c f4       	brge	.+10     	; 0x1370 <vfprintf+0x3e6>
    1366:	b1 01       	movw	r22, r2
    1368:	80 e3       	ldi	r24, 0x30	; 48
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	ac d0       	rcall	.+344    	; 0x14c6 <fputc>
    136e:	f7 cf       	rjmp	.-18     	; 0x135e <vfprintf+0x3d4>
    1370:	90 e8       	ldi	r25, 0x80	; 128
    1372:	b9 2e       	mov	r11, r25
    1374:	bc 20       	and	r11, r12
    1376:	49 f4       	brne	.+18     	; 0x138a <vfprintf+0x400>
    1378:	87 2d       	mov	r24, r7
    137a:	7a 94       	dec	r7
    137c:	18 16       	cp	r1, r24
    137e:	2c f4       	brge	.+10     	; 0x138a <vfprintf+0x400>
    1380:	b1 01       	movw	r22, r2
    1382:	80 e2       	ldi	r24, 0x20	; 32
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	9f d0       	rcall	.+318    	; 0x14c6 <fputc>
    1388:	f7 cf       	rjmp	.-18     	; 0x1378 <vfprintf+0x3ee>
    138a:	ff 85       	ldd	r31, Y+15	; 0x0f
    138c:	f3 36       	cpi	r31, 0x63	; 99
    138e:	39 f4       	brne	.+14     	; 0x139e <vfprintf+0x414>
    1390:	8e 2d       	mov	r24, r14
    1392:	b1 01       	movw	r22, r2
    1394:	99 27       	eor	r25, r25
    1396:	87 fd       	sbrc	r24, 7
    1398:	90 95       	com	r25
    139a:	95 d0       	rcall	.+298    	; 0x14c6 <fputc>
    139c:	3d c0       	rjmp	.+122    	; 0x1418 <vfprintf+0x48e>
    139e:	2f 85       	ldd	r18, Y+15	; 0x0f
    13a0:	23 37       	cpi	r18, 0x73	; 115
    13a2:	a9 f4       	brne	.+42     	; 0x13ce <vfprintf+0x444>
    13a4:	88 89       	ldd	r24, Y+16	; 0x10
    13a6:	81 50       	subi	r24, 0x01	; 1
    13a8:	88 8b       	std	Y+16, r24	; 0x10
    13aa:	8f 3f       	cpi	r24, 0xFF	; 255
    13ac:	a9 f1       	breq	.+106    	; 0x1418 <vfprintf+0x48e>
    13ae:	f7 01       	movw	r30, r14
    13b0:	80 81       	ld	r24, Z
    13b2:	08 94       	sec
    13b4:	e1 1c       	adc	r14, r1
    13b6:	f1 1c       	adc	r15, r1
    13b8:	b1 01       	movw	r22, r2
    13ba:	99 27       	eor	r25, r25
    13bc:	87 fd       	sbrc	r24, 7
    13be:	90 95       	com	r25
    13c0:	82 d0       	rcall	.+260    	; 0x14c6 <fputc>
    13c2:	98 89       	ldd	r25, Y+16	; 0x10
    13c4:	91 50       	subi	r25, 0x01	; 1
    13c6:	98 8b       	std	Y+16, r25	; 0x10
    13c8:	9f 3f       	cpi	r25, 0xFF	; 255
    13ca:	89 f7       	brne	.-30     	; 0x13ae <vfprintf+0x424>
    13cc:	25 c0       	rjmp	.+74     	; 0x1418 <vfprintf+0x48e>
    13ce:	ef 85       	ldd	r30, Y+15	; 0x0f
    13d0:	e3 35       	cpi	r30, 0x53	; 83
    13d2:	71 f4       	brne	.+28     	; 0x13f0 <vfprintf+0x466>
    13d4:	f8 89       	ldd	r31, Y+16	; 0x10
    13d6:	f1 50       	subi	r31, 0x01	; 1
    13d8:	f8 8b       	std	Y+16, r31	; 0x10
    13da:	ff 3f       	cpi	r31, 0xFF	; 255
    13dc:	e9 f0       	breq	.+58     	; 0x1418 <vfprintf+0x48e>
    13de:	f7 01       	movw	r30, r14
    13e0:	84 91       	lpm	r24, Z
    13e2:	b1 01       	movw	r22, r2
    13e4:	99 27       	eor	r25, r25
    13e6:	6f d0       	rcall	.+222    	; 0x14c6 <fputc>
    13e8:	08 94       	sec
    13ea:	e1 1c       	adc	r14, r1
    13ec:	f1 1c       	adc	r15, r1
    13ee:	f2 cf       	rjmp	.-28     	; 0x13d4 <vfprintf+0x44a>
    13f0:	6e 01       	movw	r12, r28
    13f2:	08 94       	sec
    13f4:	c1 1c       	adc	r12, r1
    13f6:	d1 1c       	adc	r13, r1
    13f8:	89 89       	ldd	r24, Y+17	; 0x11
    13fa:	9a 89       	ldd	r25, Y+18	; 0x12
    13fc:	8c 15       	cp	r24, r12
    13fe:	9d 05       	cpc	r25, r13
    1400:	59 f0       	breq	.+22     	; 0x1418 <vfprintf+0x48e>
    1402:	e9 89       	ldd	r30, Y+17	; 0x11
    1404:	fa 89       	ldd	r31, Y+18	; 0x12
    1406:	82 91       	ld	r24, -Z
    1408:	fa 8b       	std	Y+18, r31	; 0x12
    140a:	e9 8b       	std	Y+17, r30	; 0x11
    140c:	b1 01       	movw	r22, r2
    140e:	99 27       	eor	r25, r25
    1410:	87 fd       	sbrc	r24, 7
    1412:	90 95       	com	r25
    1414:	58 d0       	rcall	.+176    	; 0x14c6 <fputc>
    1416:	f0 cf       	rjmp	.-32     	; 0x13f8 <vfprintf+0x46e>
    1418:	bb 20       	and	r11, r11
    141a:	59 f0       	breq	.+22     	; 0x1432 <vfprintf+0x4a8>
    141c:	87 2d       	mov	r24, r7
    141e:	7a 94       	dec	r7
    1420:	18 16       	cp	r1, r24
    1422:	3c f4       	brge	.+14     	; 0x1432 <vfprintf+0x4a8>
    1424:	b1 01       	movw	r22, r2
    1426:	80 e2       	ldi	r24, 0x20	; 32
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	4d d0       	rcall	.+154    	; 0x14c6 <fputc>
    142c:	f7 cf       	rjmp	.-18     	; 0x141c <vfprintf+0x492>
    142e:	b1 01       	movw	r22, r2
    1430:	4a d0       	rcall	.+148    	; 0x14c6 <fputc>
    1432:	cc 24       	eor	r12, r12
    1434:	dd 24       	eor	r13, r13
    1436:	12 c0       	rjmp	.+36     	; 0x145c <vfprintf+0x4d2>
    1438:	9f 85       	ldd	r25, Y+15	; 0x0f
    143a:	95 32       	cpi	r25, 0x25	; 37
    143c:	41 f4       	brne	.+16     	; 0x144e <vfprintf+0x4c4>
    143e:	81 e0       	ldi	r24, 0x01	; 1
    1440:	c8 2e       	mov	r12, r24
    1442:	d1 2c       	mov	r13, r1
    1444:	66 24       	eor	r6, r6
    1446:	76 2c       	mov	r7, r6
    1448:	ea e0       	ldi	r30, 0x0A	; 10
    144a:	e8 8b       	std	Y+16, r30	; 0x10
    144c:	07 c0       	rjmp	.+14     	; 0x145c <vfprintf+0x4d2>
    144e:	b1 01       	movw	r22, r2
    1450:	ff 85       	ldd	r31, Y+15	; 0x0f
    1452:	8f 2f       	mov	r24, r31
    1454:	99 27       	eor	r25, r25
    1456:	87 fd       	sbrc	r24, 7
    1458:	90 95       	com	r25
    145a:	35 d0       	rcall	.+106    	; 0x14c6 <fputc>
    145c:	f1 01       	movw	r30, r2
    145e:	83 81       	ldd	r24, Z+3	; 0x03
    1460:	83 ff       	sbrs	r24, 3
    1462:	04 c0       	rjmp	.+8      	; 0x146c <vfprintf+0x4e2>
    1464:	ed 85       	ldd	r30, Y+13	; 0x0d
    1466:	fe 85       	ldd	r31, Y+14	; 0x0e
    1468:	f4 91       	lpm	r31, Z
    146a:	03 c0       	rjmp	.+6      	; 0x1472 <vfprintf+0x4e8>
    146c:	ed 85       	ldd	r30, Y+13	; 0x0d
    146e:	fe 85       	ldd	r31, Y+14	; 0x0e
    1470:	f0 81       	ld	r31, Z
    1472:	ff 87       	std	Y+15, r31	; 0x0f
    1474:	2f 85       	ldd	r18, Y+15	; 0x0f
    1476:	22 23       	and	r18, r18
    1478:	09 f0       	breq	.+2      	; 0x147c <vfprintf+0x4f2>
    147a:	9e cd       	rjmp	.-1220   	; 0xfb8 <vfprintf+0x2e>
    147c:	f1 01       	movw	r30, r2
    147e:	86 81       	ldd	r24, Z+6	; 0x06
    1480:	97 81       	ldd	r25, Z+7	; 0x07
    1482:	e2 e1       	ldi	r30, 0x12	; 18
    1484:	62 96       	adiw	r28, 0x12	; 18
    1486:	1f c2       	rjmp	.+1086   	; 0x18c6 <__epilogue_restores__>

00001488 <strlen_P>:
    1488:	fc 01       	movw	r30, r24
    148a:	05 90       	lpm	r0, Z+
    148c:	00 20       	and	r0, r0
    148e:	e9 f7       	brne	.-6      	; 0x148a <strlen_P+0x2>
    1490:	80 95       	com	r24
    1492:	90 95       	com	r25
    1494:	8e 0f       	add	r24, r30
    1496:	9f 1f       	adc	r25, r31
    1498:	08 95       	ret

0000149a <strnlen_P>:
    149a:	fc 01       	movw	r30, r24
    149c:	05 90       	lpm	r0, Z+
    149e:	61 50       	subi	r22, 0x01	; 1
    14a0:	70 40       	sbci	r23, 0x00	; 0
    14a2:	01 10       	cpse	r0, r1
    14a4:	d8 f7       	brcc	.-10     	; 0x149c <strnlen_P+0x2>
    14a6:	80 95       	com	r24
    14a8:	90 95       	com	r25
    14aa:	8e 0f       	add	r24, r30
    14ac:	9f 1f       	adc	r25, r31
    14ae:	08 95       	ret

000014b0 <strnlen>:
    14b0:	fc 01       	movw	r30, r24
    14b2:	61 50       	subi	r22, 0x01	; 1
    14b4:	70 40       	sbci	r23, 0x00	; 0
    14b6:	01 90       	ld	r0, Z+
    14b8:	01 10       	cpse	r0, r1
    14ba:	d8 f7       	brcc	.-10     	; 0x14b2 <strnlen+0x2>
    14bc:	80 95       	com	r24
    14be:	90 95       	com	r25
    14c0:	8e 0f       	add	r24, r30
    14c2:	9f 1f       	adc	r25, r31
    14c4:	08 95       	ret

000014c6 <fputc>:
    14c6:	0f 93       	push	r16
    14c8:	1f 93       	push	r17
    14ca:	cf 93       	push	r28
    14cc:	df 93       	push	r29
    14ce:	8c 01       	movw	r16, r24
    14d0:	eb 01       	movw	r28, r22
    14d2:	8b 81       	ldd	r24, Y+3	; 0x03
    14d4:	99 27       	eor	r25, r25
    14d6:	81 ff       	sbrs	r24, 1
    14d8:	1c c0       	rjmp	.+56     	; 0x1512 <fputc+0x4c>
    14da:	82 ff       	sbrs	r24, 2
    14dc:	0d c0       	rjmp	.+26     	; 0x14f8 <fputc+0x32>
    14de:	2e 81       	ldd	r18, Y+6	; 0x06
    14e0:	3f 81       	ldd	r19, Y+7	; 0x07
    14e2:	8c 81       	ldd	r24, Y+4	; 0x04
    14e4:	9d 81       	ldd	r25, Y+5	; 0x05
    14e6:	28 17       	cp	r18, r24
    14e8:	39 07       	cpc	r19, r25
    14ea:	64 f4       	brge	.+24     	; 0x1504 <fputc+0x3e>
    14ec:	e8 81       	ld	r30, Y
    14ee:	f9 81       	ldd	r31, Y+1	; 0x01
    14f0:	01 93       	st	Z+, r16
    14f2:	f9 83       	std	Y+1, r31	; 0x01
    14f4:	e8 83       	st	Y, r30
    14f6:	06 c0       	rjmp	.+12     	; 0x1504 <fputc+0x3e>
    14f8:	e8 85       	ldd	r30, Y+8	; 0x08
    14fa:	f9 85       	ldd	r31, Y+9	; 0x09
    14fc:	80 2f       	mov	r24, r16
    14fe:	09 95       	icall
    1500:	89 2b       	or	r24, r25
    1502:	39 f4       	brne	.+14     	; 0x1512 <fputc+0x4c>
    1504:	8e 81       	ldd	r24, Y+6	; 0x06
    1506:	9f 81       	ldd	r25, Y+7	; 0x07
    1508:	01 96       	adiw	r24, 0x01	; 1
    150a:	9f 83       	std	Y+7, r25	; 0x07
    150c:	8e 83       	std	Y+6, r24	; 0x06
    150e:	c8 01       	movw	r24, r16
    1510:	02 c0       	rjmp	.+4      	; 0x1516 <fputc+0x50>
    1512:	8f ef       	ldi	r24, 0xFF	; 255
    1514:	9f ef       	ldi	r25, 0xFF	; 255
    1516:	df 91       	pop	r29
    1518:	cf 91       	pop	r28
    151a:	1f 91       	pop	r17
    151c:	0f 91       	pop	r16
    151e:	08 95       	ret

00001520 <__subsf3>:
    1520:	50 58       	subi	r21, 0x80	; 128

00001522 <__addsf3>:
    1522:	19 2e       	mov	r1, r25
    1524:	08 d1       	rcall	.+528    	; 0x1736 <__fp_split3>
    1526:	01 d0       	rcall	.+2      	; 0x152a <__addsf3x>
    1528:	eb c0       	rjmp	.+470    	; 0x1700 <__fp_merge>

0000152a <__addsf3x>:
    152a:	ba 17       	cp	r27, r26
    152c:	62 07       	cpc	r22, r18
    152e:	73 07       	cpc	r23, r19
    1530:	84 07       	cpc	r24, r20
    1532:	95 07       	cpc	r25, r21
    1534:	b1 f1       	breq	.+108    	; 0x15a2 <__addsf3x+0x78>
    1536:	88 f4       	brcc	.+34     	; 0x155a <__addsf3x+0x30>
    1538:	0e f4       	brtc	.+2      	; 0x153c <__addsf3x+0x12>
    153a:	10 94       	com	r1
    153c:	0b 2e       	mov	r0, r27
    153e:	ba 2f       	mov	r27, r26
    1540:	a0 2d       	mov	r26, r0
    1542:	06 2e       	mov	r0, r22
    1544:	62 2f       	mov	r22, r18
    1546:	20 2d       	mov	r18, r0
    1548:	07 2e       	mov	r0, r23
    154a:	73 2f       	mov	r23, r19
    154c:	30 2d       	mov	r19, r0
    154e:	08 2e       	mov	r0, r24
    1550:	84 2f       	mov	r24, r20
    1552:	40 2d       	mov	r20, r0
    1554:	09 2e       	mov	r0, r25
    1556:	95 2f       	mov	r25, r21
    1558:	50 2d       	mov	r21, r0
    155a:	ff 27       	eor	r31, r31
    155c:	55 23       	and	r21, r21
    155e:	b9 f0       	breq	.+46     	; 0x158e <__addsf3x+0x64>
    1560:	59 1b       	sub	r21, r25
    1562:	49 f0       	breq	.+18     	; 0x1576 <__addsf3x+0x4c>
    1564:	57 3e       	cpi	r21, 0xE7	; 231
    1566:	98 f0       	brcs	.+38     	; 0x158e <__addsf3x+0x64>
    1568:	46 95       	lsr	r20
    156a:	37 95       	ror	r19
    156c:	27 95       	ror	r18
    156e:	a7 95       	ror	r26
    1570:	f0 40       	sbci	r31, 0x00	; 0
    1572:	53 95       	inc	r21
    1574:	c9 f7       	brne	.-14     	; 0x1568 <__addsf3x+0x3e>
    1576:	76 f0       	brts	.+28     	; 0x1594 <__addsf3x+0x6a>
    1578:	ba 0f       	add	r27, r26
    157a:	62 1f       	adc	r22, r18
    157c:	73 1f       	adc	r23, r19
    157e:	84 1f       	adc	r24, r20
    1580:	30 f4       	brcc	.+12     	; 0x158e <__addsf3x+0x64>
    1582:	87 95       	ror	r24
    1584:	77 95       	ror	r23
    1586:	67 95       	ror	r22
    1588:	b7 95       	ror	r27
    158a:	f0 40       	sbci	r31, 0x00	; 0
    158c:	93 95       	inc	r25
    158e:	17 fa       	bst	r1, 7
    1590:	0f 2e       	mov	r0, r31
    1592:	08 95       	ret
    1594:	bf 1b       	sub	r27, r31
    1596:	bb 27       	eor	r27, r27
    1598:	ba 0b       	sbc	r27, r26
    159a:	62 0b       	sbc	r22, r18
    159c:	73 0b       	sbc	r23, r19
    159e:	84 0b       	sbc	r24, r20
    15a0:	f6 cf       	rjmp	.-20     	; 0x158e <__addsf3x+0x64>
    15a2:	de f6       	brtc	.-74     	; 0x155a <__addsf3x+0x30>
    15a4:	f4 c0       	rjmp	.+488    	; 0x178e <__fp_zerox>

000015a6 <__divsf3>:
    15a6:	c7 d0       	rcall	.+398    	; 0x1736 <__fp_split3>
    15a8:	01 d0       	rcall	.+2      	; 0x15ac <__divsf3x>
    15aa:	aa c0       	rjmp	.+340    	; 0x1700 <__fp_merge>

000015ac <__divsf3x>:
    15ac:	55 23       	and	r21, r21
    15ae:	59 f0       	breq	.+22     	; 0x15c6 <__divsf3x+0x1a>
    15b0:	99 23       	and	r25, r25
    15b2:	69 f0       	breq	.+26     	; 0x15ce <__divsf3x+0x22>
    15b4:	9f 57       	subi	r25, 0x7F	; 127
    15b6:	5f 57       	subi	r21, 0x7F	; 127
    15b8:	95 1b       	sub	r25, r21
    15ba:	33 f4       	brvc	.+12     	; 0x15c8 <__divsf3x+0x1c>
    15bc:	42 f4       	brpl	.+16     	; 0x15ce <__divsf3x+0x22>
    15be:	90 38       	cpi	r25, 0x80	; 128
    15c0:	11 f4       	brne	.+4      	; 0x15c6 <__divsf3x+0x1a>
    15c2:	91 58       	subi	r25, 0x81	; 129
    15c4:	05 c0       	rjmp	.+10     	; 0x15d0 <__divsf3x+0x24>
    15c6:	b4 c0       	rjmp	.+360    	; 0x1730 <__fp_nan>
    15c8:	91 58       	subi	r25, 0x81	; 129
    15ca:	9f 3f       	cpi	r25, 0xFF	; 255
    15cc:	09 f4       	brne	.+2      	; 0x15d0 <__divsf3x+0x24>
    15ce:	df c0       	rjmp	.+446    	; 0x178e <__fp_zerox>
    15d0:	bb 27       	eor	r27, r27
    15d2:	11 24       	eor	r1, r1
    15d4:	62 17       	cp	r22, r18
    15d6:	73 07       	cpc	r23, r19
    15d8:	84 07       	cpc	r24, r20
    15da:	30 f4       	brcc	.+12     	; 0x15e8 <__divsf3x+0x3c>
    15dc:	66 0f       	add	r22, r22
    15de:	77 1f       	adc	r23, r23
    15e0:	88 1f       	adc	r24, r24
    15e2:	bb 1f       	adc	r27, r27
    15e4:	91 50       	subi	r25, 0x01	; 1
    15e6:	98 f3       	brcs	.-26     	; 0x15ce <__divsf3x+0x22>
    15e8:	11 d0       	rcall	.+34     	; 0x160c <__divsf3x+0x60>
    15ea:	0f 92       	push	r0
    15ec:	0f d0       	rcall	.+30     	; 0x160c <__divsf3x+0x60>
    15ee:	0f 92       	push	r0
    15f0:	0d d0       	rcall	.+26     	; 0x160c <__divsf3x+0x60>
    15f2:	a0 e8       	ldi	r26, 0x80	; 128
    15f4:	26 17       	cp	r18, r22
    15f6:	37 07       	cpc	r19, r23
    15f8:	48 07       	cpc	r20, r24
    15fa:	1b 06       	cpc	r1, r27
    15fc:	09 f0       	breq	.+2      	; 0x1600 <__divsf3x+0x54>
    15fe:	a0 48       	sbci	r26, 0x80	; 128
    1600:	ba 2f       	mov	r27, r26
    1602:	60 2d       	mov	r22, r0
    1604:	7f 91       	pop	r23
    1606:	8f 91       	pop	r24
    1608:	00 24       	eor	r0, r0
    160a:	08 95       	ret
    160c:	a0 e8       	ldi	r26, 0x80	; 128
    160e:	00 24       	eor	r0, r0
    1610:	62 17       	cp	r22, r18
    1612:	73 07       	cpc	r23, r19
    1614:	84 07       	cpc	r24, r20
    1616:	b1 05       	cpc	r27, r1
    1618:	28 f0       	brcs	.+10     	; 0x1624 <__divsf3x+0x78>
    161a:	62 1b       	sub	r22, r18
    161c:	73 0b       	sbc	r23, r19
    161e:	84 0b       	sbc	r24, r20
    1620:	b1 09       	sbc	r27, r1
    1622:	0a 2a       	or	r0, r26
    1624:	66 0f       	add	r22, r22
    1626:	77 1f       	adc	r23, r23
    1628:	88 1f       	adc	r24, r24
    162a:	bb 1f       	adc	r27, r27
    162c:	a6 95       	lsr	r26
    162e:	81 f7       	brne	.-32     	; 0x1610 <__divsf3x+0x64>
    1630:	08 95       	ret

00001632 <__fixsfsi>:
    1632:	97 fb       	bst	r25, 7
    1634:	8c d0       	rcall	.+280    	; 0x174e <__fp_split1>
    1636:	9f 37       	cpi	r25, 0x7F	; 127
    1638:	38 f0       	brcs	.+14     	; 0x1648 <__fixsfsi+0x16>
    163a:	fe e9       	ldi	r31, 0x9E	; 158
    163c:	f9 1b       	sub	r31, r25
    163e:	98 2f       	mov	r25, r24
    1640:	87 2f       	mov	r24, r23
    1642:	76 2f       	mov	r23, r22
    1644:	6b 2f       	mov	r22, r27
    1646:	05 c0       	rjmp	.+10     	; 0x1652 <__fixsfsi+0x20>
    1648:	9f c0       	rjmp	.+318    	; 0x1788 <__fp_zero>
    164a:	96 95       	lsr	r25
    164c:	87 95       	ror	r24
    164e:	77 95       	ror	r23
    1650:	67 95       	ror	r22
    1652:	f1 50       	subi	r31, 0x01	; 1
    1654:	d0 f7       	brcc	.-12     	; 0x164a <__fixsfsi+0x18>
    1656:	3e f4       	brtc	.+14     	; 0x1666 <__fp_lneg+0xe>

00001658 <__fp_lneg>:
    1658:	90 95       	com	r25
    165a:	80 95       	com	r24
    165c:	70 95       	com	r23
    165e:	61 95       	neg	r22
    1660:	7f 4f       	sbci	r23, 0xFF	; 255
    1662:	8f 4f       	sbci	r24, 0xFF	; 255
    1664:	9f 4f       	sbci	r25, 0xFF	; 255
    1666:	08 95       	ret

00001668 <__floatunssisf>:
    1668:	e8 94       	clt
    166a:	03 c0       	rjmp	.+6      	; 0x1672 <__floatsisf+0x6>

0000166c <__floatsisf>:
    166c:	97 fb       	bst	r25, 7
    166e:	0e f4       	brtc	.+2      	; 0x1672 <__floatsisf+0x6>
    1670:	f3 df       	rcall	.-26     	; 0x1658 <__fp_lneg>
    1672:	b6 2f       	mov	r27, r22
    1674:	67 2f       	mov	r22, r23
    1676:	78 2f       	mov	r23, r24
    1678:	89 2f       	mov	r24, r25
    167a:	9e e9       	ldi	r25, 0x9E	; 158
    167c:	00 24       	eor	r0, r0
    167e:	40 c0       	rjmp	.+128    	; 0x1700 <__fp_merge>

00001680 <floor>:
    1680:	74 d0       	rcall	.+232    	; 0x176a <__fp_split_a>
    1682:	9f 37       	cpi	r25, 0x7F	; 127
    1684:	60 f4       	brcc	.+24     	; 0x169e <floor+0x1e>
    1686:	0e f0       	brts	.+2      	; 0x168a <floor+0xa>
    1688:	7f c0       	rjmp	.+254    	; 0x1788 <__fp_zero>
    168a:	9f eb       	ldi	r25, 0xBF	; 191
    168c:	80 e8       	ldi	r24, 0x80	; 128
    168e:	77 27       	eor	r23, r23
    1690:	66 27       	eor	r22, r22
    1692:	08 95       	ret
    1694:	86 95       	lsr	r24
    1696:	77 95       	ror	r23
    1698:	67 95       	ror	r22
    169a:	b1 1d       	adc	r27, r1
    169c:	93 95       	inc	r25
    169e:	96 39       	cpi	r25, 0x96	; 150
    16a0:	c8 f3       	brcs	.-14     	; 0x1694 <floor+0x14>
    16a2:	2e f4       	brtc	.+10     	; 0x16ae <floor+0x2e>
    16a4:	bb 23       	and	r27, r27
    16a6:	19 f0       	breq	.+6      	; 0x16ae <floor+0x2e>
    16a8:	6f 5f       	subi	r22, 0xFF	; 255
    16aa:	7f 4f       	sbci	r23, 0xFF	; 255
    16ac:	8f 4f       	sbci	r24, 0xFF	; 255
    16ae:	bb 27       	eor	r27, r27
    16b0:	27 c0       	rjmp	.+78     	; 0x1700 <__fp_merge>

000016b2 <__eqsf2>:
    16b2:	0e d0       	rcall	.+28     	; 0x16d0 <.fp_cmp>
    16b4:	5e f0       	brts	.+22     	; 0x16cc <__cmpsf2+0xe>
    16b6:	04 c0       	rjmp	.+8      	; 0x16c0 <__cmpsf2+0x2>

000016b8 <__gesf2>:
    16b8:	0b d0       	rcall	.+22     	; 0x16d0 <.fp_cmp>
    16ba:	26 f0       	brts	.+8      	; 0x16c4 <__cmpsf2+0x6>
    16bc:	01 c0       	rjmp	.+2      	; 0x16c0 <__cmpsf2+0x2>

000016be <__cmpsf2>:
    16be:	08 d0       	rcall	.+16     	; 0x16d0 <.fp_cmp>
    16c0:	19 f0       	breq	.+6      	; 0x16c8 <__cmpsf2+0xa>
    16c2:	20 f4       	brcc	.+8      	; 0x16cc <__cmpsf2+0xe>
    16c4:	8f ef       	ldi	r24, 0xFF	; 255
    16c6:	08 95       	ret
    16c8:	80 e0       	ldi	r24, 0x00	; 0
    16ca:	08 95       	ret
    16cc:	81 e0       	ldi	r24, 0x01	; 1
    16ce:	08 95       	ret

000016d0 <.fp_cmp>:
    16d0:	97 fb       	bst	r25, 7
    16d2:	09 2e       	mov	r0, r25
    16d4:	05 26       	eor	r0, r21
    16d6:	00 f8       	bld	r0, 0
    16d8:	68 94       	set
    16da:	30 d0       	rcall	.+96     	; 0x173c <__fp_split2>
    16dc:	e8 94       	clt
    16de:	07 fc       	sbrc	r0, 7
    16e0:	07 c0       	rjmp	.+14     	; 0x16f0 <.fp_cmp+0x20>
    16e2:	62 17       	cp	r22, r18
    16e4:	73 07       	cpc	r23, r19
    16e6:	84 07       	cpc	r24, r20
    16e8:	95 07       	cpc	r25, r21
    16ea:	21 f0       	breq	.+8      	; 0x16f4 <.fp_cmp+0x24>
    16ec:	08 f4       	brcc	.+2      	; 0x16f0 <.fp_cmp+0x20>
    16ee:	00 94       	com	r0
    16f0:	07 94       	ror	r0
    16f2:	98 94       	clz
    16f4:	08 95       	ret
    16f6:	9a 95       	dec	r25
    16f8:	bb 0f       	add	r27, r27
    16fa:	66 1f       	adc	r22, r22
    16fc:	77 1f       	adc	r23, r23
    16fe:	88 1f       	adc	r24, r24

00001700 <__fp_merge>:
    1700:	11 24       	eor	r1, r1
    1702:	99 23       	and	r25, r25
    1704:	a1 f0       	breq	.+40     	; 0x172e <__fp_merge+0x2e>
    1706:	88 23       	and	r24, r24
    1708:	b2 f7       	brpl	.-20     	; 0x16f6 <.fp_cmp+0x26>
    170a:	9f 3f       	cpi	r25, 0xFF	; 255
    170c:	59 f0       	breq	.+22     	; 0x1724 <__fp_merge+0x24>
    170e:	bb 0f       	add	r27, r27
    1710:	48 f4       	brcc	.+18     	; 0x1724 <__fp_merge+0x24>
    1712:	21 f4       	brne	.+8      	; 0x171c <__fp_merge+0x1c>
    1714:	00 20       	and	r0, r0
    1716:	11 f4       	brne	.+4      	; 0x171c <__fp_merge+0x1c>
    1718:	60 ff       	sbrs	r22, 0
    171a:	04 c0       	rjmp	.+8      	; 0x1724 <__fp_merge+0x24>
    171c:	6f 5f       	subi	r22, 0xFF	; 255
    171e:	7f 4f       	sbci	r23, 0xFF	; 255
    1720:	8f 4f       	sbci	r24, 0xFF	; 255
    1722:	9f 4f       	sbci	r25, 0xFF	; 255
    1724:	88 1f       	adc	r24, r24
    1726:	97 95       	ror	r25
    1728:	87 95       	ror	r24
    172a:	97 f9       	bld	r25, 7
    172c:	08 95       	ret
    172e:	2c c0       	rjmp	.+88     	; 0x1788 <__fp_zero>

00001730 <__fp_nan>:
    1730:	9f ef       	ldi	r25, 0xFF	; 255
    1732:	80 ec       	ldi	r24, 0xC0	; 192
    1734:	08 95       	ret

00001736 <__fp_split3>:
    1736:	05 2e       	mov	r0, r21
    1738:	09 26       	eor	r0, r25
    173a:	07 fa       	bst	r0, 7

0000173c <__fp_split2>:
    173c:	44 0f       	add	r20, r20
    173e:	55 1f       	adc	r21, r21
    1740:	5f 3f       	cpi	r21, 0xFF	; 255
    1742:	79 f0       	breq	.+30     	; 0x1762 <__fp_split1+0x14>
    1744:	aa 27       	eor	r26, r26
    1746:	a5 17       	cp	r26, r21
    1748:	08 f0       	brcs	.+2      	; 0x174c <__fp_split2+0x10>
    174a:	51 e0       	ldi	r21, 0x01	; 1
    174c:	47 95       	ror	r20

0000174e <__fp_split1>:
    174e:	88 0f       	add	r24, r24
    1750:	99 1f       	adc	r25, r25
    1752:	9f 3f       	cpi	r25, 0xFF	; 255
    1754:	31 f0       	breq	.+12     	; 0x1762 <__fp_split1+0x14>
    1756:	bb 27       	eor	r27, r27
    1758:	b9 17       	cp	r27, r25
    175a:	08 f0       	brcs	.+2      	; 0x175e <__fp_split1+0x10>
    175c:	91 e0       	ldi	r25, 0x01	; 1
    175e:	87 95       	ror	r24
    1760:	08 95       	ret
    1762:	9f 91       	pop	r25
    1764:	9f 91       	pop	r25
    1766:	11 24       	eor	r1, r1
    1768:	e3 cf       	rjmp	.-58     	; 0x1730 <__fp_nan>

0000176a <__fp_split_a>:
    176a:	97 fb       	bst	r25, 7
    176c:	88 0f       	add	r24, r24
    176e:	99 1f       	adc	r25, r25
    1770:	9f 3f       	cpi	r25, 0xFF	; 255
    1772:	31 f0       	breq	.+12     	; 0x1780 <__fp_split_a+0x16>
    1774:	bb 27       	eor	r27, r27
    1776:	b9 17       	cp	r27, r25
    1778:	08 f0       	brcs	.+2      	; 0x177c <__fp_split_a+0x12>
    177a:	91 e0       	ldi	r25, 0x01	; 1
    177c:	87 95       	ror	r24
    177e:	08 95       	ret
    1780:	9f 91       	pop	r25
    1782:	9f 91       	pop	r25
    1784:	11 24       	eor	r1, r1
    1786:	d4 cf       	rjmp	.-88     	; 0x1730 <__fp_nan>

00001788 <__fp_zero>:
    1788:	66 27       	eor	r22, r22
    178a:	77 27       	eor	r23, r23
    178c:	88 27       	eor	r24, r24

0000178e <__fp_zerox>:
    178e:	99 27       	eor	r25, r25
    1790:	08 95       	ret

00001792 <__mulsf3>:
    1792:	d1 df       	rcall	.-94     	; 0x1736 <__fp_split3>
    1794:	01 d0       	rcall	.+2      	; 0x1798 <__mulsf3x>
    1796:	b4 cf       	rjmp	.-152    	; 0x1700 <__fp_merge>

00001798 <__mulsf3x>:
    1798:	99 23       	and	r25, r25
    179a:	39 f0       	breq	.+14     	; 0x17aa <__mulsf3x+0x12>
    179c:	55 23       	and	r21, r21
    179e:	29 f0       	breq	.+10     	; 0x17aa <__mulsf3x+0x12>
    17a0:	9f 57       	subi	r25, 0x7F	; 127
    17a2:	5f 57       	subi	r21, 0x7F	; 127
    17a4:	95 0f       	add	r25, r21
    17a6:	13 f4       	brvc	.+4      	; 0x17ac <__mulsf3x+0x14>
    17a8:	9a f1       	brmi	.+102    	; 0x1810 <__mulsf3x+0x78>
    17aa:	f1 cf       	rjmp	.-30     	; 0x178e <__fp_zerox>
    17ac:	91 58       	subi	r25, 0x81	; 129
    17ae:	9f 3f       	cpi	r25, 0xFF	; 255
    17b0:	e1 f3       	breq	.-8      	; 0x17aa <__mulsf3x+0x12>
    17b2:	62 9f       	mul	r22, r18
    17b4:	a1 2d       	mov	r26, r1
    17b6:	0f 92       	push	r0
    17b8:	bb 27       	eor	r27, r27
    17ba:	63 9f       	mul	r22, r19
    17bc:	a0 0d       	add	r26, r0
    17be:	b1 1d       	adc	r27, r1
    17c0:	ee 27       	eor	r30, r30
    17c2:	72 9f       	mul	r23, r18
    17c4:	a0 0d       	add	r26, r0
    17c6:	b1 1d       	adc	r27, r1
    17c8:	ee 1f       	adc	r30, r30
    17ca:	af 93       	push	r26
    17cc:	aa 27       	eor	r26, r26
    17ce:	64 9f       	mul	r22, r20
    17d0:	b0 0d       	add	r27, r0
    17d2:	e1 1d       	adc	r30, r1
    17d4:	73 9f       	mul	r23, r19
    17d6:	b0 0d       	add	r27, r0
    17d8:	e1 1d       	adc	r30, r1
    17da:	aa 1f       	adc	r26, r26
    17dc:	66 27       	eor	r22, r22
    17de:	82 9f       	mul	r24, r18
    17e0:	b0 0d       	add	r27, r0
    17e2:	e1 1d       	adc	r30, r1
    17e4:	a6 1f       	adc	r26, r22
    17e6:	55 27       	eor	r21, r21
    17e8:	74 9f       	mul	r23, r20
    17ea:	e0 0d       	add	r30, r0
    17ec:	a1 1d       	adc	r26, r1
    17ee:	55 1f       	adc	r21, r21
    17f0:	83 9f       	mul	r24, r19
    17f2:	e0 0d       	add	r30, r0
    17f4:	a1 1d       	adc	r26, r1
    17f6:	56 1f       	adc	r21, r22
    17f8:	84 9f       	mul	r24, r20
    17fa:	a0 0d       	add	r26, r0
    17fc:	51 1d       	adc	r21, r1
    17fe:	85 2f       	mov	r24, r21
    1800:	7a 2f       	mov	r23, r26
    1802:	6e 2f       	mov	r22, r30
    1804:	1f 90       	pop	r1
    1806:	0f 90       	pop	r0
    1808:	88 23       	and	r24, r24
    180a:	1a f4       	brpl	.+6      	; 0x1812 <__mulsf3x+0x7a>
    180c:	93 95       	inc	r25
    180e:	39 f4       	brne	.+14     	; 0x181e <__mulsf3x+0x86>
    1810:	8f cf       	rjmp	.-226    	; 0x1730 <__fp_nan>
    1812:	00 0c       	add	r0, r0
    1814:	11 1c       	adc	r1, r1
    1816:	bb 1f       	adc	r27, r27
    1818:	66 1f       	adc	r22, r22
    181a:	77 1f       	adc	r23, r23
    181c:	88 1f       	adc	r24, r24
    181e:	01 28       	or	r0, r1
    1820:	08 95       	ret

00001822 <__udivmodhi4>:
    1822:	aa 1b       	sub	r26, r26
    1824:	bb 1b       	sub	r27, r27
    1826:	51 e1       	ldi	r21, 0x11	; 17
    1828:	07 c0       	rjmp	.+14     	; 0x1838 <__udivmodhi4_ep>

0000182a <__udivmodhi4_loop>:
    182a:	aa 1f       	adc	r26, r26
    182c:	bb 1f       	adc	r27, r27
    182e:	a6 17       	cp	r26, r22
    1830:	b7 07       	cpc	r27, r23
    1832:	10 f0       	brcs	.+4      	; 0x1838 <__udivmodhi4_ep>
    1834:	a6 1b       	sub	r26, r22
    1836:	b7 0b       	sbc	r27, r23

00001838 <__udivmodhi4_ep>:
    1838:	88 1f       	adc	r24, r24
    183a:	99 1f       	adc	r25, r25
    183c:	5a 95       	dec	r21
    183e:	a9 f7       	brne	.-22     	; 0x182a <__udivmodhi4_loop>
    1840:	80 95       	com	r24
    1842:	90 95       	com	r25
    1844:	bc 01       	movw	r22, r24
    1846:	cd 01       	movw	r24, r26
    1848:	08 95       	ret

0000184a <__udivmodsi4>:
    184a:	a1 e2       	ldi	r26, 0x21	; 33
    184c:	1a 2e       	mov	r1, r26
    184e:	aa 1b       	sub	r26, r26
    1850:	bb 1b       	sub	r27, r27
    1852:	fd 01       	movw	r30, r26
    1854:	0d c0       	rjmp	.+26     	; 0x1870 <__udivmodsi4_ep>

00001856 <__udivmodsi4_loop>:
    1856:	aa 1f       	adc	r26, r26
    1858:	bb 1f       	adc	r27, r27
    185a:	ee 1f       	adc	r30, r30
    185c:	ff 1f       	adc	r31, r31
    185e:	a2 17       	cp	r26, r18
    1860:	b3 07       	cpc	r27, r19
    1862:	e4 07       	cpc	r30, r20
    1864:	f5 07       	cpc	r31, r21
    1866:	20 f0       	brcs	.+8      	; 0x1870 <__udivmodsi4_ep>
    1868:	a2 1b       	sub	r26, r18
    186a:	b3 0b       	sbc	r27, r19
    186c:	e4 0b       	sbc	r30, r20
    186e:	f5 0b       	sbc	r31, r21

00001870 <__udivmodsi4_ep>:
    1870:	66 1f       	adc	r22, r22
    1872:	77 1f       	adc	r23, r23
    1874:	88 1f       	adc	r24, r24
    1876:	99 1f       	adc	r25, r25
    1878:	1a 94       	dec	r1
    187a:	69 f7       	brne	.-38     	; 0x1856 <__udivmodsi4_loop>
    187c:	60 95       	com	r22
    187e:	70 95       	com	r23
    1880:	80 95       	com	r24
    1882:	90 95       	com	r25
    1884:	9b 01       	movw	r18, r22
    1886:	ac 01       	movw	r20, r24
    1888:	bd 01       	movw	r22, r26
    188a:	cf 01       	movw	r24, r30
    188c:	08 95       	ret

0000188e <__prologue_saves__>:
    188e:	2f 92       	push	r2
    1890:	3f 92       	push	r3
    1892:	4f 92       	push	r4
    1894:	5f 92       	push	r5
    1896:	6f 92       	push	r6
    1898:	7f 92       	push	r7
    189a:	8f 92       	push	r8
    189c:	9f 92       	push	r9
    189e:	af 92       	push	r10
    18a0:	bf 92       	push	r11
    18a2:	cf 92       	push	r12
    18a4:	df 92       	push	r13
    18a6:	ef 92       	push	r14
    18a8:	ff 92       	push	r15
    18aa:	0f 93       	push	r16
    18ac:	1f 93       	push	r17
    18ae:	cf 93       	push	r28
    18b0:	df 93       	push	r29
    18b2:	cd b7       	in	r28, 0x3d	; 61
    18b4:	de b7       	in	r29, 0x3e	; 62
    18b6:	ca 1b       	sub	r28, r26
    18b8:	db 0b       	sbc	r29, r27
    18ba:	0f b6       	in	r0, 0x3f	; 63
    18bc:	f8 94       	cli
    18be:	de bf       	out	0x3e, r29	; 62
    18c0:	0f be       	out	0x3f, r0	; 63
    18c2:	cd bf       	out	0x3d, r28	; 61
    18c4:	09 94       	ijmp

000018c6 <__epilogue_restores__>:
    18c6:	2a 88       	ldd	r2, Y+18	; 0x12
    18c8:	39 88       	ldd	r3, Y+17	; 0x11
    18ca:	48 88       	ldd	r4, Y+16	; 0x10
    18cc:	5f 84       	ldd	r5, Y+15	; 0x0f
    18ce:	6e 84       	ldd	r6, Y+14	; 0x0e
    18d0:	7d 84       	ldd	r7, Y+13	; 0x0d
    18d2:	8c 84       	ldd	r8, Y+12	; 0x0c
    18d4:	9b 84       	ldd	r9, Y+11	; 0x0b
    18d6:	aa 84       	ldd	r10, Y+10	; 0x0a
    18d8:	b9 84       	ldd	r11, Y+9	; 0x09
    18da:	c8 84       	ldd	r12, Y+8	; 0x08
    18dc:	df 80       	ldd	r13, Y+7	; 0x07
    18de:	ee 80       	ldd	r14, Y+6	; 0x06
    18e0:	fd 80       	ldd	r15, Y+5	; 0x05
    18e2:	0c 81       	ldd	r16, Y+4	; 0x04
    18e4:	1b 81       	ldd	r17, Y+3	; 0x03
    18e6:	aa 81       	ldd	r26, Y+2	; 0x02
    18e8:	b9 81       	ldd	r27, Y+1	; 0x01
    18ea:	ce 0f       	add	r28, r30
    18ec:	d1 1d       	adc	r29, r1
    18ee:	0f b6       	in	r0, 0x3f	; 63
    18f0:	f8 94       	cli
    18f2:	de bf       	out	0x3e, r29	; 62
    18f4:	0f be       	out	0x3f, r0	; 63
    18f6:	cd bf       	out	0x3d, r28	; 61
    18f8:	ed 01       	movw	r28, r26
    18fa:	08 95       	ret
