   1               		.file	"ledmeter.c"
   2               		.arch atmega8535
   3               	__SREG__ = 0x3f
   4               	__SP_H__ = 0x3e
   5               	__SP_L__ = 0x3d
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.global __do_copy_data
   9               		.global __do_clear_bss
  11               		.text
  12               	.Ltext0:
  74               	.global	running_chronometer
  75               	.global	running_chronometer
  76               		.section .bss
  79               	running_chronometer:
  80 0000 0000      		.skip 2,0
  81               		.text
  84               	.global	init_time
  86               	init_time:
   1:ledmeter.c    **** // ***********************************************************
   2:ledmeter.c    **** // Project: OpenChrono
   3:ledmeter.c    **** // Author: Sebastien CELLES
   4:ledmeter.c    **** // Module description: an handhelds device for karts, bike or sport cars
   5:ledmeter.c    **** // ***********************************************************
   6:ledmeter.c    **** 
   7:ledmeter.c    **** #include <avr/io.h>              // Most basic include files
   8:ledmeter.c    **** 
   9:ledmeter.c    **** #include <math.h>
  10:ledmeter.c    **** 
  11:ledmeter.c    **** #define F_CPU 1000000UL  // 1 MHz
  12:ledmeter.c    **** #include <util/delay.h>
  13:ledmeter.c    **** 
  14:ledmeter.c    **** //#include <avr/io.h>              // Most basic include files
  15:ledmeter.c    **** #include <avr/interrupt.h>       // Add the necessary ones
  16:ledmeter.c    **** //#include <avr/signal.h>          // here
  17:ledmeter.c    **** 
  18:ledmeter.c    **** #define TRUE -1
  19:ledmeter.c    **** #define FALSE 0
  20:ledmeter.c    **** 
  21:ledmeter.c    **** //volatile unsigned char a2dCompleteFlag;
  22:ledmeter.c    **** 
  23:ledmeter.c    **** //int channel;
  24:ledmeter.c    **** //unsigned short analog_result;
  25:ledmeter.c    **** //int analog_busy;
  26:ledmeter.c    **** 
  27:ledmeter.c    **** #define Nleds 8  // number of leds connected to the uC
  28:ledmeter.c    **** 
  29:ledmeter.c    **** #define N 50 // number between 0 and 255
  30:ledmeter.c    **** #define Nmax 0xFF
  31:ledmeter.c    **** 
  32:ledmeter.c    **** 
  33:ledmeter.c    **** typedef struct {
  34:ledmeter.c    ****     int hh; //8bits 0-255
  35:ledmeter.c    ****     int mm; //8bits 0-255
  36:ledmeter.c    ****     int ss; //8bits 0-255
  37:ledmeter.c    ****     unsigned short int xx;  //16bits 0-65535
  38:ledmeter.c    **** } time_typ;
  39:ledmeter.c    **** 
  40:ledmeter.c    **** time_typ current_time;
  41:ledmeter.c    **** time_typ last_time;
  42:ledmeter.c    **** time_typ best_time;
  43:ledmeter.c    **** 
  44:ledmeter.c    **** int running_chronometer = FALSE; // 0 false ; -1 true
  45:ledmeter.c    **** 
  46:ledmeter.c    **** void init_time(time_typ time) {
  88               	.LM1:
  89               	/* prologue: frame size=8 */
  90 0000 CF93      		push r28
  91 0002 DF93      		push r29
  92 0004 CDB7      		in r28,__SP_L__
  93 0006 DEB7      		in r29,__SP_H__
  94 0008 2897      		sbiw r28,8
  95 000a 0FB6      		in __tmp_reg__,__SREG__
  96 000c F894      		cli
  97 000e DEBF      		out __SP_H__,r29
  98 0010 0FBE      		out __SREG__,__tmp_reg__
  99 0012 CDBF      		out __SP_L__,r28
 100               	/* prologue end (size=10) */
 101 0014 2983      		std Y+1,r18
 102 0016 3A83      		std Y+2,r19
 103 0018 4B83      		std Y+3,r20
 104 001a 5C83      		std Y+4,r21
 105 001c 6D83      		std Y+5,r22
 106 001e 7E83      		std Y+6,r23
 107 0020 8F83      		std Y+7,r24
 108 0022 9887      		std Y+8,r25
  47:ledmeter.c    ****     time.hh = 0;
 110               	.LM2:
 111 0024 1A82      		std Y+2,__zero_reg__
 112 0026 1982      		std Y+1,__zero_reg__
  48:ledmeter.c    ****     time.mm = 0;
 114               	.LM3:
 115 0028 1C82      		std Y+4,__zero_reg__
 116 002a 1B82      		std Y+3,__zero_reg__
  49:ledmeter.c    ****     time.ss = 0;
 118               	.LM4:
 119 002c 1E82      		std Y+6,__zero_reg__
 120 002e 1D82      		std Y+5,__zero_reg__
  50:ledmeter.c    ****     time.xx = 0;
 122               	.LM5:
 123 0030 1886      		std Y+8,__zero_reg__
 124 0032 1F82      		std Y+7,__zero_reg__
 125               	/* epilogue: frame size=8 */
 126 0034 2896      		adiw r28,8
 127 0036 0FB6      		in __tmp_reg__,__SREG__
 128 0038 F894      		cli
 129 003a DEBF      		out __SP_H__,r29
 130 003c 0FBE      		out __SREG__,__tmp_reg__
 131 003e CDBF      		out __SP_L__,r28
 132 0040 DF91      		pop r29
 133 0042 CF91      		pop r28
 134 0044 0895      		ret
 135               	/* epilogue end (size=9) */
 136               	/* function init_time size 35 (16) */
 138               	.Lscope0:
 142               	.global	copy_time
 144               	copy_time:
  51:ledmeter.c    **** }
  52:ledmeter.c    **** 
  53:ledmeter.c    **** void copy_time(time_typ time_source, time_typ time_dest) { // TO TEST (pointer ?)
 146               	.LM6:
 147               	/* prologue: frame size=16 */
 148 0046 AF92      		push r10
 149 0048 BF92      		push r11
 150 004a CF92      		push r12
 151 004c DF92      		push r13
 152 004e EF92      		push r14
 153 0050 FF92      		push r15
 154 0052 0F93      		push r16
 155 0054 1F93      		push r17
 156 0056 CF93      		push r28
 157 0058 DF93      		push r29
 158 005a CDB7      		in r28,__SP_L__
 159 005c DEB7      		in r29,__SP_H__
 160 005e 6097      		sbiw r28,16
 161 0060 0FB6      		in __tmp_reg__,__SREG__
 162 0062 F894      		cli
 163 0064 DEBF      		out __SP_H__,r29
 164 0066 0FBE      		out __SREG__,__tmp_reg__
 165 0068 CDBF      		out __SP_L__,r28
 166               	/* prologue end (size=18) */
 167 006a 2983      		std Y+1,r18
 168 006c 3A83      		std Y+2,r19
 169 006e 4B83      		std Y+3,r20
 170 0070 5C83      		std Y+4,r21
 171 0072 6D83      		std Y+5,r22
 172 0074 7E83      		std Y+6,r23
 173 0076 8F83      		std Y+7,r24
 174 0078 9887      		std Y+8,r25
 175 007a A986      		std Y+9,r10
 176 007c BA86      		std Y+10,r11
 177 007e CB86      		std Y+11,r12
 178 0080 DC86      		std Y+12,r13
 179 0082 ED86      		std Y+13,r14
 180 0084 FE86      		std Y+14,r15
 181 0086 0F87      		std Y+15,r16
 182 0088 188B      		std Y+16,r17
  54:ledmeter.c    ****     time_dest.hh = time_source.hh;
 184               	.LM7:
 185 008a 8981      		ldd r24,Y+1
 186 008c 9A81      		ldd r25,Y+2
 187 008e 9A87      		std Y+10,r25
 188 0090 8987      		std Y+9,r24
  55:ledmeter.c    ****     time_dest.mm = time_source.mm;
 190               	.LM8:
 191 0092 8B81      		ldd r24,Y+3
 192 0094 9C81      		ldd r25,Y+4
 193 0096 9C87      		std Y+12,r25
 194 0098 8B87      		std Y+11,r24
  56:ledmeter.c    ****     time_dest.ss = time_source.ss;
 196               	.LM9:
 197 009a 8D81      		ldd r24,Y+5
 198 009c 9E81      		ldd r25,Y+6
 199 009e 9E87      		std Y+14,r25
 200 00a0 8D87      		std Y+13,r24
  57:ledmeter.c    ****     time_dest.xx = time_source.xx;
 202               	.LM10:
 203 00a2 8F81      		ldd r24,Y+7
 204 00a4 9885      		ldd r25,Y+8
 205 00a6 988B      		std Y+16,r25
 206 00a8 8F87      		std Y+15,r24
 207               	/* epilogue: frame size=16 */
 208 00aa 6096      		adiw r28,16
 209 00ac 0FB6      		in __tmp_reg__,__SREG__
 210 00ae F894      		cli
 211 00b0 DEBF      		out __SP_H__,r29
 212 00b2 0FBE      		out __SREG__,__tmp_reg__
 213 00b4 CDBF      		out __SP_L__,r28
 214 00b6 DF91      		pop r29
 215 00b8 CF91      		pop r28
 216 00ba 1F91      		pop r17
 217 00bc 0F91      		pop r16
 218 00be FF90      		pop r15
 219 00c0 EF90      		pop r14
 220 00c2 DF90      		pop r13
 221 00c4 CF90      		pop r12
 222 00c6 BF90      		pop r11
 223 00c8 AF90      		pop r10
 224 00ca 0895      		ret
 225               	/* epilogue end (size=17) */
 226               	/* function copy_time size 67 (32) */
 228               	.Lscope1:
 232               	.global	compare_time
 234               	compare_time:
  58:ledmeter.c    **** }
  59:ledmeter.c    **** 
  60:ledmeter.c    **** int compare_time(time_typ time1, time_typ time2) {
 236               	.LM11:
 237               	/* prologue: frame size=16 */
 238 00cc AF92      		push r10
 239 00ce BF92      		push r11
 240 00d0 CF92      		push r12
 241 00d2 DF92      		push r13
 242 00d4 EF92      		push r14
 243 00d6 FF92      		push r15
 244 00d8 0F93      		push r16
 245 00da 1F93      		push r17
 246 00dc CF93      		push r28
 247 00de DF93      		push r29
 248 00e0 CDB7      		in r28,__SP_L__
 249 00e2 DEB7      		in r29,__SP_H__
 250 00e4 6097      		sbiw r28,16
 251 00e6 0FB6      		in __tmp_reg__,__SREG__
 252 00e8 F894      		cli
 253 00ea DEBF      		out __SP_H__,r29
 254 00ec 0FBE      		out __SREG__,__tmp_reg__
 255 00ee CDBF      		out __SP_L__,r28
 256               	/* prologue end (size=18) */
 257 00f0 2983      		std Y+1,r18
 258 00f2 3A83      		std Y+2,r19
 259 00f4 4B83      		std Y+3,r20
 260 00f6 5C83      		std Y+4,r21
 261 00f8 6D83      		std Y+5,r22
 262 00fa 7E83      		std Y+6,r23
 263 00fc 8F83      		std Y+7,r24
 264 00fe 9887      		std Y+8,r25
 265 0100 A986      		std Y+9,r10
 266 0102 BA86      		std Y+10,r11
 267 0104 CB86      		std Y+11,r12
 268 0106 DC86      		std Y+12,r13
 269 0108 ED86      		std Y+13,r14
 270 010a FE86      		std Y+14,r15
 271 010c 0F87      		std Y+15,r16
 272 010e 188B      		std Y+16,r17
  61:ledmeter.c    ****     //  0 time1=time2
  62:ledmeter.c    ****     // -1 time1<time2
  63:ledmeter.c    ****     //  1 time1>time2
  64:ledmeter.c    ****     return 0;
 274               	.LM12:
 275 0110 80E0      		ldi r24,lo8(0)
 276 0112 90E0      		ldi r25,hi8(0)
 277               	/* epilogue: frame size=16 */
 278 0114 6096      		adiw r28,16
 279 0116 0FB6      		in __tmp_reg__,__SREG__
 280 0118 F894      		cli
 281 011a DEBF      		out __SP_H__,r29
 282 011c 0FBE      		out __SREG__,__tmp_reg__
 283 011e CDBF      		out __SP_L__,r28
 284 0120 DF91      		pop r29
 285 0122 CF91      		pop r28
 286 0124 1F91      		pop r17
 287 0126 0F91      		pop r16
 288 0128 FF90      		pop r15
 289 012a EF90      		pop r14
 290 012c DF90      		pop r13
 291 012e CF90      		pop r12
 292 0130 BF90      		pop r11
 293 0132 AF90      		pop r10
 294 0134 0895      		ret
 295               	/* epilogue end (size=17) */
 296               	/* function compare_time size 53 (18) */
 298               	.Lscope2:
 301               	.global	inc_time
 303               	inc_time:
  65:ledmeter.c    **** }
  66:ledmeter.c    **** 
  67:ledmeter.c    **** void inc_time(time_typ time) {
 305               	.LM13:
 306               	/* prologue: frame size=20 */
 307 0136 CF93      		push r28
 308 0138 DF93      		push r29
 309 013a CDB7      		in r28,__SP_L__
 310 013c DEB7      		in r29,__SP_H__
 311 013e 6497      		sbiw r28,20
 312 0140 0FB6      		in __tmp_reg__,__SREG__
 313 0142 F894      		cli
 314 0144 DEBF      		out __SP_H__,r29
 315 0146 0FBE      		out __SREG__,__tmp_reg__
 316 0148 CDBF      		out __SP_L__,r28
 317               	/* prologue end (size=10) */
 318 014a 2983      		std Y+1,r18
 319 014c 3A83      		std Y+2,r19
 320 014e 4B83      		std Y+3,r20
 321 0150 5C83      		std Y+4,r21
 322 0152 6D83      		std Y+5,r22
 323 0154 7E83      		std Y+6,r23
 324 0156 8F83      		std Y+7,r24
 325 0158 9887      		std Y+8,r25
  68:ledmeter.c    ****   if (running_chronometer) {
 327               	.LM14:
 328 015a 8091 0000 		lds r24,running_chronometer
 329 015e 9091 0000 		lds r25,(running_chronometer)+1
 330 0162 0097      		sbiw r24,0
 331 0164 09F4      		brne .+2
 332 0166 7BC0      		rjmp .L4
  69:ledmeter.c    ****     time.xx++;
 334               	.LM15:
 335 0168 8F81      		ldd r24,Y+7
 336 016a 9885      		ldd r25,Y+8
 337 016c 0196      		adiw r24,1
 338 016e 9887      		std Y+8,r25
 339 0170 8F83      		std Y+7,r24
  70:ledmeter.c    ****     if(time.xx >= 1000) {
 341               	.LM16:
 342 0172 8F81      		ldd r24,Y+7
 343 0174 9885      		ldd r25,Y+8
 344 0176 23E0      		ldi r18,hi8(1000)
 345 0178 883E      		cpi r24,lo8(1000)
 346 017a 9207      		cpc r25,r18
 347 017c 30F1      		brlo .L6
  71:ledmeter.c    ****         time.xx = 0;
 349               	.LM17:
 350 017e 1886      		std Y+8,__zero_reg__
 351 0180 1F82      		std Y+7,__zero_reg__
  72:ledmeter.c    ****         time.ss++;
 353               	.LM18:
 354 0182 8D81      		ldd r24,Y+5
 355 0184 9E81      		ldd r25,Y+6
 356 0186 0196      		adiw r24,1
 357 0188 9E83      		std Y+6,r25
 358 018a 8D83      		std Y+5,r24
  73:ledmeter.c    ****         if (time.ss >= 60) {
 360               	.LM19:
 361 018c 8D81      		ldd r24,Y+5
 362 018e 9E81      		ldd r25,Y+6
 363 0190 8C33      		cpi r24,60
 364 0192 9105      		cpc r25,__zero_reg__
 365 0194 D4F0      		brlt .L6
  74:ledmeter.c    ****             time.ss = 0;
 367               	.LM20:
 368 0196 1E82      		std Y+6,__zero_reg__
 369 0198 1D82      		std Y+5,__zero_reg__
  75:ledmeter.c    ****             time.mm++;
 371               	.LM21:
 372 019a 8B81      		ldd r24,Y+3
 373 019c 9C81      		ldd r25,Y+4
 374 019e 0196      		adiw r24,1
 375 01a0 9C83      		std Y+4,r25
 376 01a2 8B83      		std Y+3,r24
  76:ledmeter.c    ****             if (time.mm >= 60) {
 378               	.LM22:
 379 01a4 8B81      		ldd r24,Y+3
 380 01a6 9C81      		ldd r25,Y+4
 381 01a8 8C33      		cpi r24,60
 382 01aa 9105      		cpc r25,__zero_reg__
 383 01ac 74F0      		brlt .L6
  77:ledmeter.c    ****                 time.mm = 0;
 385               	.LM23:
 386 01ae 1C82      		std Y+4,__zero_reg__
 387 01b0 1B82      		std Y+3,__zero_reg__
  78:ledmeter.c    ****                 time.hh++;
 389               	.LM24:
 390 01b2 8981      		ldd r24,Y+1
 391 01b4 9A81      		ldd r25,Y+2
 392 01b6 0196      		adiw r24,1
 393 01b8 9A83      		std Y+2,r25
 394 01ba 8983      		std Y+1,r24
  79:ledmeter.c    ****                 if (time.hh >= 24) {
 396               	.LM25:
 397 01bc 8981      		ldd r24,Y+1
 398 01be 9A81      		ldd r25,Y+2
 399 01c0 8831      		cpi r24,24
 400 01c2 9105      		cpc r25,__zero_reg__
 401 01c4 14F0      		brlt .L6
  80:ledmeter.c    ****                     time.hh = 0;
 403               	.LM26:
 404 01c6 1A82      		std Y+2,__zero_reg__
 405 01c8 1982      		std Y+1,__zero_reg__
 406               	.L6:
 407               	.LBB2:
 409               	.Ltext1:
   1:C:/WinAVR/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:C:/WinAVR/avr/include/util/delay.h ****    Copyright (c) 2004,2005 Joerg Wunsch
   3:C:/WinAVR/avr/include/util/delay.h ****    All rights reserved.
   4:C:/WinAVR/avr/include/util/delay.h **** 
   5:C:/WinAVR/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   6:C:/WinAVR/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   7:C:/WinAVR/avr/include/util/delay.h **** 
   8:C:/WinAVR/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
   9:C:/WinAVR/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  10:C:/WinAVR/avr/include/util/delay.h **** 
  11:C:/WinAVR/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  12:C:/WinAVR/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  13:C:/WinAVR/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  14:C:/WinAVR/avr/include/util/delay.h ****      distribution.
  15:C:/WinAVR/avr/include/util/delay.h **** 
  16:C:/WinAVR/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  17:C:/WinAVR/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  18:C:/WinAVR/avr/include/util/delay.h ****      from this software without specific prior written permission.
  19:C:/WinAVR/avr/include/util/delay.h **** 
  20:C:/WinAVR/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21:C:/WinAVR/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22:C:/WinAVR/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  23:C:/WinAVR/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  24:C:/WinAVR/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  25:C:/WinAVR/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  26:C:/WinAVR/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  27:C:/WinAVR/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  28:C:/WinAVR/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  29:C:/WinAVR/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  30:C:/WinAVR/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  31:C:/WinAVR/avr/include/util/delay.h **** 
  32:C:/WinAVR/avr/include/util/delay.h **** /* $Id: delay.h,v 1.1.2.1 2005/12/12 23:19:49 joerg_wunsch Exp $ */
  33:C:/WinAVR/avr/include/util/delay.h **** 
  34:C:/WinAVR/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  35:C:/WinAVR/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  36:C:/WinAVR/avr/include/util/delay.h **** 
  37:C:/WinAVR/avr/include/util/delay.h **** #include <inttypes.h>
  38:C:/WinAVR/avr/include/util/delay.h **** 
  39:C:/WinAVR/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Busy-wait delay loops
  40:C:/WinAVR/avr/include/util/delay.h ****     \code
  41:C:/WinAVR/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  42:C:/WinAVR/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  43:C:/WinAVR/avr/include/util/delay.h ****     #include <util/delay.h>
  44:C:/WinAVR/avr/include/util/delay.h ****     \endcode
  45:C:/WinAVR/avr/include/util/delay.h **** 
  46:C:/WinAVR/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  47:C:/WinAVR/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  48:C:/WinAVR/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  49:C:/WinAVR/avr/include/util/delay.h ****     used.
  50:C:/WinAVR/avr/include/util/delay.h **** 
  51:C:/WinAVR/avr/include/util/delay.h ****     The functions in this header file implement simple delay loops
  52:C:/WinAVR/avr/include/util/delay.h ****     that perform a busy-waiting.  They are typically used to
  53:C:/WinAVR/avr/include/util/delay.h ****     facilitate short delays in the program execution.  They are
  54:C:/WinAVR/avr/include/util/delay.h ****     implemented as count-down loops with a well-known CPU cycle
  55:C:/WinAVR/avr/include/util/delay.h ****     count per loop iteration.  As such, no other processing can
  56:C:/WinAVR/avr/include/util/delay.h ****     occur simultaneously.  It should be kept in mind that the
  57:C:/WinAVR/avr/include/util/delay.h ****     functions described here do not disable interrupts.
  58:C:/WinAVR/avr/include/util/delay.h **** 
  59:C:/WinAVR/avr/include/util/delay.h ****     In general, for long delays, the use of hardware timers is
  60:C:/WinAVR/avr/include/util/delay.h ****     much preferrable, as they free the CPU, and allow for
  61:C:/WinAVR/avr/include/util/delay.h ****     concurrent processing of other events while the timer is
  62:C:/WinAVR/avr/include/util/delay.h ****     running.  However, in particular for very short delays, the
  63:C:/WinAVR/avr/include/util/delay.h ****     overhead of setting up a hardware timer is too much compared
  64:C:/WinAVR/avr/include/util/delay.h ****     to the overall delay time.
  65:C:/WinAVR/avr/include/util/delay.h **** 
  66:C:/WinAVR/avr/include/util/delay.h ****     Two inline functions are provided for the actual delay algorithms.
  67:C:/WinAVR/avr/include/util/delay.h **** 
  68:C:/WinAVR/avr/include/util/delay.h ****     Two wrapper functions allow the specification of microsecond, and
  69:C:/WinAVR/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  70:C:/WinAVR/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).  These functions
  71:C:/WinAVR/avr/include/util/delay.h ****     operate on double typed arguments, however when optimization is
  72:C:/WinAVR/avr/include/util/delay.h ****     turned on, the entire floating-point calculation will be done at
  73:C:/WinAVR/avr/include/util/delay.h ****     compile-time.
  74:C:/WinAVR/avr/include/util/delay.h **** 
  75:C:/WinAVR/avr/include/util/delay.h ****     \note When using _delay_us() and _delay_ms(), the expressions
  76:C:/WinAVR/avr/include/util/delay.h ****     passed as arguments to these functions shall be compile-time
  77:C:/WinAVR/avr/include/util/delay.h ****     constants, otherwise the floating-point calculations to setup the
  78:C:/WinAVR/avr/include/util/delay.h ****     loops will be done at run-time, thereby drastically increasing
  79:C:/WinAVR/avr/include/util/delay.h ****     both the resulting code size, as well as the time required to
  80:C:/WinAVR/avr/include/util/delay.h ****     setup the loops.
  81:C:/WinAVR/avr/include/util/delay.h **** */
  82:C:/WinAVR/avr/include/util/delay.h **** 
  83:C:/WinAVR/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:C:/WinAVR/avr/include/util/delay.h **** static inline void _delay_loop_1(uint8_t __count) __attribute__((always_inline));
  85:C:/WinAVR/avr/include/util/delay.h **** static inline void _delay_loop_2(uint16_t __count) __attribute__((always_inline));
  86:C:/WinAVR/avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  87:C:/WinAVR/avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  88:C:/WinAVR/avr/include/util/delay.h **** #endif
  89:C:/WinAVR/avr/include/util/delay.h **** 
  90:C:/WinAVR/avr/include/util/delay.h **** /** \ingroup util_delay
  91:C:/WinAVR/avr/include/util/delay.h **** 
  92:C:/WinAVR/avr/include/util/delay.h ****     Delay loop using an 8-bit counter \c __count, so up to 256
  93:C:/WinAVR/avr/include/util/delay.h ****     iterations are possible.  (The value 256 would have to be passed
  94:C:/WinAVR/avr/include/util/delay.h ****     as 0.)  The loop executes three CPU cycles per iteration, not
  95:C:/WinAVR/avr/include/util/delay.h ****     including the overhead the compiler needs to setup the counter
  96:C:/WinAVR/avr/include/util/delay.h ****     register.
  97:C:/WinAVR/avr/include/util/delay.h **** 
  98:C:/WinAVR/avr/include/util/delay.h ****     Thus, at a CPU speed of 1 MHz, delays of up to 768 microseconds
  99:C:/WinAVR/avr/include/util/delay.h ****     can be achieved.
 100:C:/WinAVR/avr/include/util/delay.h **** */
 101:C:/WinAVR/avr/include/util/delay.h **** void
 102:C:/WinAVR/avr/include/util/delay.h **** _delay_loop_1(uint8_t __count)
 103:C:/WinAVR/avr/include/util/delay.h **** {
 104:C:/WinAVR/avr/include/util/delay.h **** 	__asm__ volatile (
 105:C:/WinAVR/avr/include/util/delay.h **** 		"1: dec %0" "\n\t"
 106:C:/WinAVR/avr/include/util/delay.h **** 		"brne 1b"
 107:C:/WinAVR/avr/include/util/delay.h **** 		: "=r" (__count)
 108:C:/WinAVR/avr/include/util/delay.h **** 		: "0" (__count)
 109:C:/WinAVR/avr/include/util/delay.h **** 	);
 110:C:/WinAVR/avr/include/util/delay.h **** }
 111:C:/WinAVR/avr/include/util/delay.h **** 
 112:C:/WinAVR/avr/include/util/delay.h **** /** \ingroup util_delay
 113:C:/WinAVR/avr/include/util/delay.h **** 
 114:C:/WinAVR/avr/include/util/delay.h ****     Delay loop using a 16-bit counter \c __count, so up to 65536
 115:C:/WinAVR/avr/include/util/delay.h ****     iterations are possible.  (The value 65536 would have to be
 116:C:/WinAVR/avr/include/util/delay.h ****     passed as 0.)  The loop executes four CPU cycles per iteration,
 117:C:/WinAVR/avr/include/util/delay.h ****     not including the overhead the compiler requires to setup the
 118:C:/WinAVR/avr/include/util/delay.h ****     counter register pair.
 119:C:/WinAVR/avr/include/util/delay.h **** 
 120:C:/WinAVR/avr/include/util/delay.h ****     Thus, at a CPU speed of 1 MHz, delays of up to about 262.1
 121:C:/WinAVR/avr/include/util/delay.h ****     milliseconds can be achieved.
 122:C:/WinAVR/avr/include/util/delay.h ****  */
 123:C:/WinAVR/avr/include/util/delay.h **** void
 124:C:/WinAVR/avr/include/util/delay.h **** _delay_loop_2(uint16_t __count)
 125:C:/WinAVR/avr/include/util/delay.h **** {
 126:C:/WinAVR/avr/include/util/delay.h **** 	__asm__ volatile (
 127:C:/WinAVR/avr/include/util/delay.h **** 		"1: sbiw %0,1" "\n\t"
 128:C:/WinAVR/avr/include/util/delay.h **** 		"brne 1b"
 129:C:/WinAVR/avr/include/util/delay.h **** 		: "=w" (__count)
 130:C:/WinAVR/avr/include/util/delay.h **** 		: "0" (__count)
 131:C:/WinAVR/avr/include/util/delay.h **** 	);
 132:C:/WinAVR/avr/include/util/delay.h **** }
 133:C:/WinAVR/avr/include/util/delay.h **** 
 134:C:/WinAVR/avr/include/util/delay.h **** #ifndef F_CPU
 135:C:/WinAVR/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
 136:C:/WinAVR/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
 137:C:/WinAVR/avr/include/util/delay.h **** # define F_CPU 1000000UL
 138:C:/WinAVR/avr/include/util/delay.h **** #endif
 139:C:/WinAVR/avr/include/util/delay.h **** 
 140:C:/WinAVR/avr/include/util/delay.h **** /**
 141:C:/WinAVR/avr/include/util/delay.h ****    \ingroup util_delay
 142:C:/WinAVR/avr/include/util/delay.h **** 
 143:C:/WinAVR/avr/include/util/delay.h ****    Perform a delay of \c __us microseconds, using _delay_loop_1().
 144:C:/WinAVR/avr/include/util/delay.h **** 
 145:C:/WinAVR/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 146:C:/WinAVR/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 147:C:/WinAVR/avr/include/util/delay.h **** 
 148:C:/WinAVR/avr/include/util/delay.h ****    The maximal possible delay is 768 us / F_CPU in MHz.
 149:C:/WinAVR/avr/include/util/delay.h ****  */
 150:C:/WinAVR/avr/include/util/delay.h **** void
 151:C:/WinAVR/avr/include/util/delay.h **** _delay_us(double __us)
 152:C:/WinAVR/avr/include/util/delay.h **** {
 153:C:/WinAVR/avr/include/util/delay.h **** 	uint8_t __ticks;
 154:C:/WinAVR/avr/include/util/delay.h **** 	double __tmp = ((F_CPU) / 3e6) * __us;
 155:C:/WinAVR/avr/include/util/delay.h **** 	if (__tmp < 1.0)
 156:C:/WinAVR/avr/include/util/delay.h **** 		__ticks = 1;
 157:C:/WinAVR/avr/include/util/delay.h **** 	else if (__tmp > 255)
 158:C:/WinAVR/avr/include/util/delay.h **** 		__ticks = 0;	/* i.e. 256 */
 159:C:/WinAVR/avr/include/util/delay.h **** 	else
 160:C:/WinAVR/avr/include/util/delay.h **** 		__ticks = (uint8_t)__tmp;
 161:C:/WinAVR/avr/include/util/delay.h **** 	_delay_loop_1(__ticks);
 162:C:/WinAVR/avr/include/util/delay.h **** }
 163:C:/WinAVR/avr/include/util/delay.h **** 
 164:C:/WinAVR/avr/include/util/delay.h **** 
 165:C:/WinAVR/avr/include/util/delay.h **** /**
 166:C:/WinAVR/avr/include/util/delay.h ****    \ingroup util_delay
 167:C:/WinAVR/avr/include/util/delay.h **** 
 168:C:/WinAVR/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 169:C:/WinAVR/avr/include/util/delay.h **** 
 170:C:/WinAVR/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 171:C:/WinAVR/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 172:C:/WinAVR/avr/include/util/delay.h **** 
 173:C:/WinAVR/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 174:C:/WinAVR/avr/include/util/delay.h ****  */
 175:C:/WinAVR/avr/include/util/delay.h **** void
 176:C:/WinAVR/avr/include/util/delay.h **** _delay_ms(double __ms)
 177:C:/WinAVR/avr/include/util/delay.h **** {
 411               	.LM27:
 412 01ca 80E0      		ldi r24,lo8(0x3f800000)
 413 01cc 90E0      		ldi r25,hi8(0x3f800000)
 414 01ce A0E8      		ldi r26,hlo8(0x3f800000)
 415 01d0 BFE3      		ldi r27,hhi8(0x3f800000)
 416 01d2 8987      		std Y+9,r24
 417 01d4 9A87      		std Y+10,r25
 418 01d6 AB87      		std Y+11,r26
 419 01d8 BC87      		std Y+12,r27
 420               	.LBB3:
 178:C:/WinAVR/avr/include/util/delay.h **** 	uint16_t __ticks;
 179:C:/WinAVR/avr/include/util/delay.h **** 	double __tmp = ((F_CPU) / 4e3) * __ms;
 422               	.LM28:
 423 01da 20E0      		ldi r18,lo8(0x437a0000)
 424 01dc 30E0      		ldi r19,hi8(0x437a0000)
 425 01de 4AE7      		ldi r20,hlo8(0x437a0000)
 426 01e0 53E4      		ldi r21,hhi8(0x437a0000)
 427 01e2 6985      		ldd r22,Y+9
 428 01e4 7A85      		ldd r23,Y+10
 429 01e6 8B85      		ldd r24,Y+11
 430 01e8 9C85      		ldd r25,Y+12
 431 01ea 00D0      		rcall __mulsf3
 432 01ec DC01      		movw r26,r24
 433 01ee CB01      		movw r24,r22
 434 01f0 8F87      		std Y+15,r24
 435 01f2 988B      		std Y+16,r25
 436 01f4 A98B      		std Y+17,r26
 437 01f6 BA8B      		std Y+18,r27
 180:C:/WinAVR/avr/include/util/delay.h **** 	if (__tmp < 1.0)
 439               	.LM29:
 440 01f8 20E0      		ldi r18,lo8(0x3f800000)
 441 01fa 30E0      		ldi r19,hi8(0x3f800000)
 442 01fc 40E8      		ldi r20,hlo8(0x3f800000)
 443 01fe 5FE3      		ldi r21,hhi8(0x3f800000)
 444 0200 6F85      		ldd r22,Y+15
 445 0202 7889      		ldd r23,Y+16
 446 0204 8989      		ldd r24,Y+17
 447 0206 9A89      		ldd r25,Y+18
 448 0208 00D0      		rcall __ltsf2
 449 020a 8823      		tst r24
 450 020c 0CF0      		brlt .L11
 451 020e 05C0      		rjmp .L10
 452               	.L11:
 181:C:/WinAVR/avr/include/util/delay.h **** 		__ticks = 1;
 454               	.LM30:
 455 0210 81E0      		ldi r24,lo8(1)
 456 0212 90E0      		ldi r25,hi8(1)
 457 0214 9E87      		std Y+14,r25
 458 0216 8D87      		std Y+13,r24
 459 0218 18C0      		rjmp .L12
 460               	.L10:
 182:C:/WinAVR/avr/include/util/delay.h **** 	else if (__tmp > 65535)
 462               	.LM31:
 463 021a 20E0      		ldi r18,lo8(0x477fff00)
 464 021c 3FEF      		ldi r19,hi8(0x477fff00)
 465 021e 4FE7      		ldi r20,hlo8(0x477fff00)
 466 0220 57E4      		ldi r21,hhi8(0x477fff00)
 467 0222 6F85      		ldd r22,Y+15
 468 0224 7889      		ldd r23,Y+16
 469 0226 8989      		ldd r24,Y+17
 470 0228 9A89      		ldd r25,Y+18
 471 022a 00D0      		rcall __gtsf2
 472 022c 1816      		cp __zero_reg__,r24
 473 022e 0CF0      		brlt .L14
 474 0230 03C0      		rjmp .L13
 475               	.L14:
 183:C:/WinAVR/avr/include/util/delay.h **** 		__ticks = 0;	/* i.e. 65536 */
 477               	.LM32:
 478 0232 1E86      		std Y+14,__zero_reg__
 479 0234 1D86      		std Y+13,__zero_reg__
 480 0236 09C0      		rjmp .L12
 481               	.L13:
 184:C:/WinAVR/avr/include/util/delay.h **** 	else
 185:C:/WinAVR/avr/include/util/delay.h **** 		__ticks = (uint16_t)__tmp;
 483               	.LM33:
 484 0238 6F85      		ldd r22,Y+15
 485 023a 7889      		ldd r23,Y+16
 486 023c 8989      		ldd r24,Y+17
 487 023e 9A89      		ldd r25,Y+18
 488 0240 00D0      		rcall __fixunssfsi
 489 0242 DC01      		movw r26,r24
 490 0244 CB01      		movw r24,r22
 491 0246 9E87      		std Y+14,r25
 492 0248 8D87      		std Y+13,r24
 493               	.L12:
 494               	.LBB4:
 496               	.LM34:
 497 024a 8D85      		ldd r24,Y+13
 498 024c 9E85      		ldd r25,Y+14
 499 024e 9C8B      		std Y+20,r25
 500 0250 8B8B      		std Y+19,r24
 501               	.LBB5:
 503               	.LM35:
 504 0252 8B89      		ldd r24,Y+19
 505 0254 9C89      		ldd r25,Y+20
 506               	/* #APP */
 507 0256 0197      		1: sbiw r24,1
 508 0258 F1F7      		brne 1b
 509               	/* #NOAPP */
 510 025a 9C8B      		std Y+20,r25
 511 025c 8B8B      		std Y+19,r24
 512               	.L4:
 513               	.LBE5:
 514               	.LBE4:
 515               	.LBE3:
 516               	.LBE2:
 517               	/* epilogue: frame size=20 */
 518 025e 6496      		adiw r28,20
 519 0260 0FB6      		in __tmp_reg__,__SREG__
 520 0262 F894      		cli
 521 0264 DEBF      		out __SP_H__,r29
 522 0266 0FBE      		out __SREG__,__tmp_reg__
 523 0268 CDBF      		out __SP_L__,r28
 524 026a DF91      		pop r29
 525 026c CF91      		pop r28
 526 026e 0895      		ret
 527               	/* epilogue end (size=9) */
 528               	/* function inc_time size 159 (140) */
 540               	.Lscope3:
 542               	.global	switch_on_all_leds
 544               	switch_on_all_leds:
 546               	.Ltext2:
  81:ledmeter.c    **** 					 }
  82:ledmeter.c    ****             }
  83:ledmeter.c    ****         }
  84:ledmeter.c    ****     }
  85:ledmeter.c    ****     _delay_ms(1);
  86:ledmeter.c    ****   }
  87:ledmeter.c    **** }
  88:ledmeter.c    **** 
  89:ledmeter.c    **** 
  90:ledmeter.c    **** 
  91:ledmeter.c    **** /*
  92:ledmeter.c    **** void switch_on_all_leds();
  93:ledmeter.c    **** void switch_off_all_leds();
  94:ledmeter.c    **** void switch_on_led(int led);
  95:ledmeter.c    **** void switch_off_led(int led);
  96:ledmeter.c    **** void loop(void);
  97:ledmeter.c    **** void init(void);
  98:ledmeter.c    **** */
  99:ledmeter.c    **** 
 100:ledmeter.c    **** // 1=off
 101:ledmeter.c    **** // 0=on
 102:ledmeter.c    **** 
 103:ledmeter.c    **** /*
 104:ledmeter.c    ****  * switch on all leds
 105:ledmeter.c    ****  */
 106:ledmeter.c    **** void switch_on_all_leds() {
 548               	.LM36:
 549               	/* prologue: frame size=0 */
 550 0270 CF93      		push r28
 551 0272 DF93      		push r29
 552 0274 CDB7      		in r28,__SP_L__
 553 0276 DEB7      		in r29,__SP_H__
 554               	/* prologue end (size=4) */
 107:ledmeter.c    ****     PORTC = 0x00;
 556               	.LM37:
 557 0278 1092 3500 		sts 53,__zero_reg__
 558               	/* epilogue: frame size=0 */
 559 027c DF91      		pop r29
 560 027e CF91      		pop r28
 561 0280 0895      		ret
 562               	/* epilogue end (size=3) */
 563               	/* function switch_on_all_leds size 9 (2) */
 565               	.Lscope4:
 567               	.global	switch_off_all_leds
 569               	switch_off_all_leds:
 108:ledmeter.c    **** }
 109:ledmeter.c    **** 
 110:ledmeter.c    **** /*
 111:ledmeter.c    ****  * switch off all leds
 112:ledmeter.c    ****  */
 113:ledmeter.c    **** void switch_off_all_leds() {
 571               	.LM38:
 572               	/* prologue: frame size=0 */
 573 0282 CF93      		push r28
 574 0284 DF93      		push r29
 575 0286 CDB7      		in r28,__SP_L__
 576 0288 DEB7      		in r29,__SP_H__
 577               	/* prologue end (size=4) */
 114:ledmeter.c    ****     PORTC = 0xFF;
 579               	.LM39:
 580 028a 8FEF      		ldi r24,lo8(-1)
 581 028c 8093 3500 		sts 53,r24
 582               	/* epilogue: frame size=0 */
 583 0290 DF91      		pop r29
 584 0292 CF91      		pop r28
 585 0294 0895      		ret
 586               	/* epilogue end (size=3) */
 587               	/* function switch_off_all_leds size 10 (3) */
 589               	.Lscope5:
 592               	.global	switch_on_led
 594               	switch_on_led:
 115:ledmeter.c    **** }
 116:ledmeter.c    **** 
 117:ledmeter.c    **** // led from 1 to 8 (LEDSNUM)
 118:ledmeter.c    **** // PCx with w from 0 to 7
 119:ledmeter.c    **** 
 120:ledmeter.c    **** /*
 121:ledmeter.c    ****  * switch on the led with the number called "led"
 122:ledmeter.c    ****  */
 123:ledmeter.c    **** void switch_on_led(int led) {
 596               	.LM40:
 597               	/* prologue: frame size=6 */
 598 0296 CF93      		push r28
 599 0298 DF93      		push r29
 600 029a CDB7      		in r28,__SP_L__
 601 029c DEB7      		in r29,__SP_H__
 602 029e 2697      		sbiw r28,6
 603 02a0 0FB6      		in __tmp_reg__,__SREG__
 604 02a2 F894      		cli
 605 02a4 DEBF      		out __SP_H__,r29
 606 02a6 0FBE      		out __SREG__,__tmp_reg__
 607 02a8 CDBF      		out __SP_L__,r28
 608               	/* prologue end (size=10) */
 609 02aa 9A83      		std Y+2,r25
 610 02ac 8983      		std Y+1,r24
 124:ledmeter.c    ****     int pin = led - 1;
 612               	.LM41:
 613 02ae 8981      		ldd r24,Y+1
 614 02b0 9A81      		ldd r25,Y+2
 615 02b2 0197      		sbiw r24,1
 616 02b4 9C83      		std Y+4,r25
 617 02b6 8B83      		std Y+3,r24
 125:ledmeter.c    ****     int mask = ~(1<<pin);
 619               	.LM42:
 620 02b8 81E0      		ldi r24,lo8(1)
 621 02ba 90E0      		ldi r25,hi8(1)
 622 02bc 0B80      		ldd r0,Y+3
 623 02be 02C0      		rjmp 2f
 624 02c0 880F      	1:	lsl r24
 625 02c2 991F      		rol r25
 626 02c4 0A94      	2:	dec r0
 627 02c6 E2F7      		brpl 1b
 628 02c8 8095      		com r24
 629 02ca 9095      		com r25
 630 02cc 9E83      		std Y+6,r25
 631 02ce 8D83      		std Y+5,r24
 126:ledmeter.c    ****     PORTC&=mask;
 633               	.LM43:
 634 02d0 9091 3500 		lds r25,53
 635 02d4 8D81      		ldd r24,Y+5
 636 02d6 8923      		and r24,r25
 637 02d8 8093 3500 		sts 53,r24
 638               	/* epilogue: frame size=6 */
 639 02dc 2696      		adiw r28,6
 640 02de 0FB6      		in __tmp_reg__,__SREG__
 641 02e0 F894      		cli
 642 02e2 DEBF      		out __SP_H__,r29
 643 02e4 0FBE      		out __SREG__,__tmp_reg__
 644 02e6 CDBF      		out __SP_L__,r28
 645 02e8 DF91      		pop r29
 646 02ea CF91      		pop r28
 647 02ec 0895      		ret
 648               	/* epilogue end (size=9) */
 649               	/* function switch_on_led size 44 (25) */
 655               	.Lscope6:
 658               	.global	switch_off_led
 660               	switch_off_led:
 127:ledmeter.c    **** }
 128:ledmeter.c    **** 
 129:ledmeter.c    **** /*
 130:ledmeter.c    ****  * switch off the led with the number called "led"
 131:ledmeter.c    ****  */
 132:ledmeter.c    **** void switch_off_led(int led) {
 662               	.LM44:
 663               	/* prologue: frame size=6 */
 664 02ee CF93      		push r28
 665 02f0 DF93      		push r29
 666 02f2 CDB7      		in r28,__SP_L__
 667 02f4 DEB7      		in r29,__SP_H__
 668 02f6 2697      		sbiw r28,6
 669 02f8 0FB6      		in __tmp_reg__,__SREG__
 670 02fa F894      		cli
 671 02fc DEBF      		out __SP_H__,r29
 672 02fe 0FBE      		out __SREG__,__tmp_reg__
 673 0300 CDBF      		out __SP_L__,r28
 674               	/* prologue end (size=10) */
 675 0302 9A83      		std Y+2,r25
 676 0304 8983      		std Y+1,r24
 133:ledmeter.c    ****     int pin = led - 1;
 678               	.LM45:
 679 0306 8981      		ldd r24,Y+1
 680 0308 9A81      		ldd r25,Y+2
 681 030a 0197      		sbiw r24,1
 682 030c 9C83      		std Y+4,r25
 683 030e 8B83      		std Y+3,r24
 134:ledmeter.c    ****     int mask = (1<<pin);
 685               	.LM46:
 686 0310 81E0      		ldi r24,lo8(1)
 687 0312 90E0      		ldi r25,hi8(1)
 688 0314 0B80      		ldd r0,Y+3
 689 0316 02C0      		rjmp 2f
 690 0318 880F      	1:	lsl r24
 691 031a 991F      		rol r25
 692 031c 0A94      	2:	dec r0
 693 031e E2F7      		brpl 1b
 694 0320 9E83      		std Y+6,r25
 695 0322 8D83      		std Y+5,r24
 135:ledmeter.c    ****     PORTC|=mask;
 697               	.LM47:
 698 0324 9091 3500 		lds r25,53
 699 0328 8D81      		ldd r24,Y+5
 700 032a 892B      		or r24,r25
 701 032c 8093 3500 		sts 53,r24
 702               	/* epilogue: frame size=6 */
 703 0330 2696      		adiw r28,6
 704 0332 0FB6      		in __tmp_reg__,__SREG__
 705 0334 F894      		cli
 706 0336 DEBF      		out __SP_H__,r29
 707 0338 0FBE      		out __SREG__,__tmp_reg__
 708 033a CDBF      		out __SP_L__,r28
 709 033c DF91      		pop r29
 710 033e CF91      		pop r28
 711 0340 0895      		ret
 712               	/* epilogue end (size=9) */
 713               	/* function switch_off_led size 42 (23) */
 719               	.Lscope7:
 722               	.global	switch_on_leds_with_delay
 724               	switch_on_leds_with_delay:
 136:ledmeter.c    **** }
 137:ledmeter.c    **** 
 138:ledmeter.c    **** /*
 139:ledmeter.c    ****  * switch on every leds one after one with a delay (called "delay")
 140:ledmeter.c    ****  */
 141:ledmeter.c    **** void switch_on_leds_with_delay(double delay) {
 726               	.LM48:
 727               	/* prologue: frame size=18 */
 728 0342 CF93      		push r28
 729 0344 DF93      		push r29
 730 0346 CDB7      		in r28,__SP_L__
 731 0348 DEB7      		in r29,__SP_H__
 732 034a 6297      		sbiw r28,18
 733 034c 0FB6      		in __tmp_reg__,__SREG__
 734 034e F894      		cli
 735 0350 DEBF      		out __SP_H__,r29
 736 0352 0FBE      		out __SREG__,__tmp_reg__
 737 0354 CDBF      		out __SP_L__,r28
 738               	/* prologue end (size=10) */
 739 0356 6983      		std Y+1,r22
 740 0358 7A83      		std Y+2,r23
 741 035a 8B83      		std Y+3,r24
 742 035c 9C83      		std Y+4,r25
 142:ledmeter.c    ****     int i;
 143:ledmeter.c    ****     for(i = 1; i<=Nleds; i++) {
 744               	.LM49:
 745 035e 81E0      		ldi r24,lo8(1)
 746 0360 90E0      		ldi r25,hi8(1)
 747 0362 9E83      		std Y+6,r25
 748 0364 8D83      		std Y+5,r24
 749               	.L23:
 751               	.LM50:
 752 0366 8D81      		ldd r24,Y+5
 753 0368 9E81      		ldd r25,Y+6
 754 036a 8930      		cpi r24,9
 755 036c 9105      		cpc r25,__zero_reg__
 756 036e 0CF0      		brlt .+2
 757 0370 53C0      		rjmp .L22
 758               	.LBB6:
 760               	.Ltext3:
 762               	.LM51:
 763 0372 8981      		ldd r24,Y+1
 764 0374 9A81      		ldd r25,Y+2
 765 0376 AB81      		ldd r26,Y+3
 766 0378 BC81      		ldd r27,Y+4
 767 037a 8F83      		std Y+7,r24
 768 037c 9887      		std Y+8,r25
 769 037e A987      		std Y+9,r26
 770 0380 BA87      		std Y+10,r27
 771               	.LBB7:
 773               	.LM52:
 774 0382 20E0      		ldi r18,lo8(0x437a0000)
 775 0384 30E0      		ldi r19,hi8(0x437a0000)
 776 0386 4AE7      		ldi r20,hlo8(0x437a0000)
 777 0388 53E4      		ldi r21,hhi8(0x437a0000)
 778 038a 6F81      		ldd r22,Y+7
 779 038c 7885      		ldd r23,Y+8
 780 038e 8985      		ldd r24,Y+9
 781 0390 9A85      		ldd r25,Y+10
 782 0392 00D0      		rcall __mulsf3
 783 0394 DC01      		movw r26,r24
 784 0396 CB01      		movw r24,r22
 785 0398 8D87      		std Y+13,r24
 786 039a 9E87      		std Y+14,r25
 787 039c AF87      		std Y+15,r26
 788 039e B88B      		std Y+16,r27
 790               	.LM53:
 791 03a0 20E0      		ldi r18,lo8(0x3f800000)
 792 03a2 30E0      		ldi r19,hi8(0x3f800000)
 793 03a4 40E8      		ldi r20,hlo8(0x3f800000)
 794 03a6 5FE3      		ldi r21,hhi8(0x3f800000)
 795 03a8 6D85      		ldd r22,Y+13
 796 03aa 7E85      		ldd r23,Y+14
 797 03ac 8F85      		ldd r24,Y+15
 798 03ae 9889      		ldd r25,Y+16
 799 03b0 00D0      		rcall __ltsf2
 800 03b2 8823      		tst r24
 801 03b4 0CF0      		brlt .L27
 802 03b6 05C0      		rjmp .L26
 803               	.L27:
 805               	.LM54:
 806 03b8 81E0      		ldi r24,lo8(1)
 807 03ba 90E0      		ldi r25,hi8(1)
 808 03bc 9C87      		std Y+12,r25
 809 03be 8B87      		std Y+11,r24
 810 03c0 18C0      		rjmp .L28
 811               	.L26:
 813               	.LM55:
 814 03c2 20E0      		ldi r18,lo8(0x477fff00)
 815 03c4 3FEF      		ldi r19,hi8(0x477fff00)
 816 03c6 4FE7      		ldi r20,hlo8(0x477fff00)
 817 03c8 57E4      		ldi r21,hhi8(0x477fff00)
 818 03ca 6D85      		ldd r22,Y+13
 819 03cc 7E85      		ldd r23,Y+14
 820 03ce 8F85      		ldd r24,Y+15
 821 03d0 9889      		ldd r25,Y+16
 822 03d2 00D0      		rcall __gtsf2
 823 03d4 1816      		cp __zero_reg__,r24
 824 03d6 0CF0      		brlt .L30
 825 03d8 03C0      		rjmp .L29
 826               	.L30:
 828               	.LM56:
 829 03da 1C86      		std Y+12,__zero_reg__
 830 03dc 1B86      		std Y+11,__zero_reg__
 831 03de 09C0      		rjmp .L28
 832               	.L29:
 834               	.LM57:
 835 03e0 6D85      		ldd r22,Y+13
 836 03e2 7E85      		ldd r23,Y+14
 837 03e4 8F85      		ldd r24,Y+15
 838 03e6 9889      		ldd r25,Y+16
 839 03e8 00D0      		rcall __fixunssfsi
 840 03ea DC01      		movw r26,r24
 841 03ec CB01      		movw r24,r22
 842 03ee 9C87      		std Y+12,r25
 843 03f0 8B87      		std Y+11,r24
 844               	.L28:
 845               	.LBB8:
 847               	.LM58:
 848 03f2 8B85      		ldd r24,Y+11
 849 03f4 9C85      		ldd r25,Y+12
 850 03f6 9A8B      		std Y+18,r25
 851 03f8 898B      		std Y+17,r24
 852               	.LBB9:
 854               	.LM59:
 855 03fa 8989      		ldd r24,Y+17
 856 03fc 9A89      		ldd r25,Y+18
 857               	/* #APP */
 858 03fe 0197      		1: sbiw r24,1
 859 0400 F1F7      		brne 1b
 860               	/* #NOAPP */
 861 0402 9A8B      		std Y+18,r25
 862 0404 898B      		std Y+17,r24
 863               	.LBE9:
 864               	.LBE8:
 865               	.LBE7:
 866               	.LBE6:
 868               	.Ltext4:
 144:ledmeter.c    ****         _delay_ms(delay);
 145:ledmeter.c    ****         switch_on_led(i);
 870               	.LM60:
 871 0406 8D81      		ldd r24,Y+5
 872 0408 9E81      		ldd r25,Y+6
 873 040a 45DF      		rcall switch_on_led
 875               	.LM61:
 876 040c 8D81      		ldd r24,Y+5
 877 040e 9E81      		ldd r25,Y+6
 878 0410 0196      		adiw r24,1
 879 0412 9E83      		std Y+6,r25
 880 0414 8D83      		std Y+5,r24
 881 0416 A7CF      		rjmp .L23
 882               	.L22:
 883               	/* epilogue: frame size=18 */
 884 0418 6296      		adiw r28,18
 885 041a 0FB6      		in __tmp_reg__,__SREG__
 886 041c F894      		cli
 887 041e DEBF      		out __SP_H__,r29
 888 0420 0FBE      		out __SREG__,__tmp_reg__
 889 0422 CDBF      		out __SP_L__,r28
 890 0424 DF91      		pop r29
 891 0426 CF91      		pop r28
 892 0428 0895      		ret
 893               	/* epilogue end (size=9) */
 894               	/* function switch_on_leds_with_delay size 118 (99) */
 909               	.Lscope8:
 912               	.global	switch_off_leds_with_delay
 914               	switch_off_leds_with_delay:
 146:ledmeter.c    ****     }
 147:ledmeter.c    **** }
 148:ledmeter.c    **** 
 149:ledmeter.c    **** /*
 150:ledmeter.c    ****  * switch off every leds on after one with a delay (called "delay")
 151:ledmeter.c    ****  */
 152:ledmeter.c    **** void switch_off_leds_with_delay(double delay) {
 916               	.LM62:
 917               	/* prologue: frame size=18 */
 918 042a CF93      		push r28
 919 042c DF93      		push r29
 920 042e CDB7      		in r28,__SP_L__
 921 0430 DEB7      		in r29,__SP_H__
 922 0432 6297      		sbiw r28,18
 923 0434 0FB6      		in __tmp_reg__,__SREG__
 924 0436 F894      		cli
 925 0438 DEBF      		out __SP_H__,r29
 926 043a 0FBE      		out __SREG__,__tmp_reg__
 927 043c CDBF      		out __SP_L__,r28
 928               	/* prologue end (size=10) */
 929 043e 6983      		std Y+1,r22
 930 0440 7A83      		std Y+2,r23
 931 0442 8B83      		std Y+3,r24
 932 0444 9C83      		std Y+4,r25
 153:ledmeter.c    ****     int i;
 154:ledmeter.c    ****     for(i = Nleds; i>=0; i--) {
 934               	.LM63:
 935 0446 88E0      		ldi r24,lo8(8)
 936 0448 90E0      		ldi r25,hi8(8)
 937 044a 9E83      		std Y+6,r25
 938 044c 8D83      		std Y+5,r24
 939               	.L35:
 941               	.LM64:
 942 044e 8D81      		ldd r24,Y+5
 943 0450 9E81      		ldd r25,Y+6
 944 0452 9923      		tst r25
 945 0454 0CF4      		brge .+2
 946 0456 53C0      		rjmp .L34
 947               	.LBB10:
 949               	.Ltext5:
 951               	.LM65:
 952 0458 8981      		ldd r24,Y+1
 953 045a 9A81      		ldd r25,Y+2
 954 045c AB81      		ldd r26,Y+3
 955 045e BC81      		ldd r27,Y+4
 956 0460 8F83      		std Y+7,r24
 957 0462 9887      		std Y+8,r25
 958 0464 A987      		std Y+9,r26
 959 0466 BA87      		std Y+10,r27
 960               	.LBB11:
 962               	.LM66:
 963 0468 20E0      		ldi r18,lo8(0x437a0000)
 964 046a 30E0      		ldi r19,hi8(0x437a0000)
 965 046c 4AE7      		ldi r20,hlo8(0x437a0000)
 966 046e 53E4      		ldi r21,hhi8(0x437a0000)
 967 0470 6F81      		ldd r22,Y+7
 968 0472 7885      		ldd r23,Y+8
 969 0474 8985      		ldd r24,Y+9
 970 0476 9A85      		ldd r25,Y+10
 971 0478 00D0      		rcall __mulsf3
 972 047a DC01      		movw r26,r24
 973 047c CB01      		movw r24,r22
 974 047e 8D87      		std Y+13,r24
 975 0480 9E87      		std Y+14,r25
 976 0482 AF87      		std Y+15,r26
 977 0484 B88B      		std Y+16,r27
 979               	.LM67:
 980 0486 20E0      		ldi r18,lo8(0x3f800000)
 981 0488 30E0      		ldi r19,hi8(0x3f800000)
 982 048a 40E8      		ldi r20,hlo8(0x3f800000)
 983 048c 5FE3      		ldi r21,hhi8(0x3f800000)
 984 048e 6D85      		ldd r22,Y+13
 985 0490 7E85      		ldd r23,Y+14
 986 0492 8F85      		ldd r24,Y+15
 987 0494 9889      		ldd r25,Y+16
 988 0496 00D0      		rcall __ltsf2
 989 0498 8823      		tst r24
 990 049a 0CF0      		brlt .L39
 991 049c 05C0      		rjmp .L38
 992               	.L39:
 994               	.LM68:
 995 049e 81E0      		ldi r24,lo8(1)
 996 04a0 90E0      		ldi r25,hi8(1)
 997 04a2 9C87      		std Y+12,r25
 998 04a4 8B87      		std Y+11,r24
 999 04a6 18C0      		rjmp .L40
 1000               	.L38:
 1002               	.LM69:
 1003 04a8 20E0      		ldi r18,lo8(0x477fff00)
 1004 04aa 3FEF      		ldi r19,hi8(0x477fff00)
 1005 04ac 4FE7      		ldi r20,hlo8(0x477fff00)
 1006 04ae 57E4      		ldi r21,hhi8(0x477fff00)
 1007 04b0 6D85      		ldd r22,Y+13
 1008 04b2 7E85      		ldd r23,Y+14
 1009 04b4 8F85      		ldd r24,Y+15
 1010 04b6 9889      		ldd r25,Y+16
 1011 04b8 00D0      		rcall __gtsf2
 1012 04ba 1816      		cp __zero_reg__,r24
 1013 04bc 0CF0      		brlt .L42
 1014 04be 03C0      		rjmp .L41
 1015               	.L42:
 1017               	.LM70:
 1018 04c0 1C86      		std Y+12,__zero_reg__
 1019 04c2 1B86      		std Y+11,__zero_reg__
 1020 04c4 09C0      		rjmp .L40
 1021               	.L41:
 1023               	.LM71:
 1024 04c6 6D85      		ldd r22,Y+13
 1025 04c8 7E85      		ldd r23,Y+14
 1026 04ca 8F85      		ldd r24,Y+15
 1027 04cc 9889      		ldd r25,Y+16
 1028 04ce 00D0      		rcall __fixunssfsi
 1029 04d0 DC01      		movw r26,r24
 1030 04d2 CB01      		movw r24,r22
 1031 04d4 9C87      		std Y+12,r25
 1032 04d6 8B87      		std Y+11,r24
 1033               	.L40:
 1034               	.LBB12:
 1036               	.LM72:
 1037 04d8 8B85      		ldd r24,Y+11
 1038 04da 9C85      		ldd r25,Y+12
 1039 04dc 9A8B      		std Y+18,r25
 1040 04de 898B      		std Y+17,r24
 1041               	.LBB13:
 1043               	.LM73:
 1044 04e0 8989      		ldd r24,Y+17
 1045 04e2 9A89      		ldd r25,Y+18
 1046               	/* #APP */
 1047 04e4 0197      		1: sbiw r24,1
 1048 04e6 F1F7      		brne 1b
 1049               	/* #NOAPP */
 1050 04e8 9A8B      		std Y+18,r25
 1051 04ea 898B      		std Y+17,r24
 1052               	.LBE13:
 1053               	.LBE12:
 1054               	.LBE11:
 1055               	.LBE10:
 1057               	.Ltext6:
 155:ledmeter.c    ****         _delay_ms(delay);
 156:ledmeter.c    ****         switch_off_led(i);
 1059               	.LM74:
 1060 04ec 8D81      		ldd r24,Y+5
 1061 04ee 9E81      		ldd r25,Y+6
 1062 04f0 FEDE      		rcall switch_off_led
 1064               	.LM75:
 1065 04f2 8D81      		ldd r24,Y+5
 1066 04f4 9E81      		ldd r25,Y+6
 1067 04f6 0197      		sbiw r24,1
 1068 04f8 9E83      		std Y+6,r25
 1069 04fa 8D83      		std Y+5,r24
 1070 04fc A8CF      		rjmp .L35
 1071               	.L34:
 1072               	/* epilogue: frame size=18 */
 1073 04fe 6296      		adiw r28,18
 1074 0500 0FB6      		in __tmp_reg__,__SREG__
 1075 0502 F894      		cli
 1076 0504 DEBF      		out __SP_H__,r29
 1077 0506 0FBE      		out __SREG__,__tmp_reg__
 1078 0508 CDBF      		out __SP_L__,r28
 1079 050a DF91      		pop r29
 1080 050c CF91      		pop r28
 1081 050e 0895      		ret
 1082               	/* epilogue end (size=9) */
 1083               	/* function switch_off_leds_with_delay size 117 (98) */
 1098               	.Lscope9:
 1100               	.global	test_leds
 1102               	test_leds:
 157:ledmeter.c    ****     }
 158:ledmeter.c    **** }
 159:ledmeter.c    **** 
 160:ledmeter.c    **** /*
 161:ledmeter.c    ****  * a function for testing leds that switch on every leds and switch off every leds (one after one)
 162:ledmeter.c    ****  */
 163:ledmeter.c    **** void test_leds() {
 1104               	.LM76:
 1105               	/* prologue: frame size=12 */
 1106 0510 CF93      		push r28
 1107 0512 DF93      		push r29
 1108 0514 CDB7      		in r28,__SP_L__
 1109 0516 DEB7      		in r29,__SP_H__
 1110 0518 2C97      		sbiw r28,12
 1111 051a 0FB6      		in __tmp_reg__,__SREG__
 1112 051c F894      		cli
 1113 051e DEBF      		out __SP_H__,r29
 1114 0520 0FBE      		out __SREG__,__tmp_reg__
 1115 0522 CDBF      		out __SP_L__,r28
 1116               	/* prologue end (size=10) */
 164:ledmeter.c    ****     switch_on_leds_with_delay(100);
 1118               	.LM77:
 1119 0524 60E0      		ldi r22,lo8(0x42c80000)
 1120 0526 70E0      		ldi r23,hi8(0x42c80000)
 1121 0528 88EC      		ldi r24,hlo8(0x42c80000)
 1122 052a 92E4      		ldi r25,hhi8(0x42c80000)
 1123 052c 0ADF      		rcall switch_on_leds_with_delay
 1124               	.LBB14:
 1126               	.Ltext7:
 1128               	.LM78:
 1129 052e 80E0      		ldi r24,lo8(0x42480000)
 1130 0530 90E0      		ldi r25,hi8(0x42480000)
 1131 0532 A8E4      		ldi r26,hlo8(0x42480000)
 1132 0534 B2E4      		ldi r27,hhi8(0x42480000)
 1133 0536 8983      		std Y+1,r24
 1134 0538 9A83      		std Y+2,r25
 1135 053a AB83      		std Y+3,r26
 1136 053c BC83      		std Y+4,r27
 1137               	.LBB15:
 1139               	.LM79:
 1140 053e 20E0      		ldi r18,lo8(0x437a0000)
 1141 0540 30E0      		ldi r19,hi8(0x437a0000)
 1142 0542 4AE7      		ldi r20,hlo8(0x437a0000)
 1143 0544 53E4      		ldi r21,hhi8(0x437a0000)
 1144 0546 6981      		ldd r22,Y+1
 1145 0548 7A81      		ldd r23,Y+2
 1146 054a 8B81      		ldd r24,Y+3
 1147 054c 9C81      		ldd r25,Y+4
 1148 054e 00D0      		rcall __mulsf3
 1149 0550 DC01      		movw r26,r24
 1150 0552 CB01      		movw r24,r22
 1151 0554 8F83      		std Y+7,r24
 1152 0556 9887      		std Y+8,r25
 1153 0558 A987      		std Y+9,r26
 1154 055a BA87      		std Y+10,r27
 1156               	.LM80:
 1157 055c 20E0      		ldi r18,lo8(0x3f800000)
 1158 055e 30E0      		ldi r19,hi8(0x3f800000)
 1159 0560 40E8      		ldi r20,hlo8(0x3f800000)
 1160 0562 5FE3      		ldi r21,hhi8(0x3f800000)
 1161 0564 6F81      		ldd r22,Y+7
 1162 0566 7885      		ldd r23,Y+8
 1163 0568 8985      		ldd r24,Y+9
 1164 056a 9A85      		ldd r25,Y+10
 1165 056c 00D0      		rcall __ltsf2
 1166 056e 8823      		tst r24
 1167 0570 0CF0      		brlt .L48
 1169               	.LM81:
 1170 0572 05C0      		rjmp .L47
 1171               	.L48:
 1173               	.LM82:
 1174 0574 81E0      		ldi r24,lo8(1)
 1175 0576 90E0      		ldi r25,hi8(1)
 1176 0578 9E83      		std Y+6,r25
 1177 057a 8D83      		std Y+5,r24
 1178 057c 18C0      		rjmp .L49
 1179               	.L47:
 1181               	.LM83:
 1182 057e 20E0      		ldi r18,lo8(0x477fff00)
 1183 0580 3FEF      		ldi r19,hi8(0x477fff00)
 1184 0582 4FE7      		ldi r20,hlo8(0x477fff00)
 1185 0584 57E4      		ldi r21,hhi8(0x477fff00)
 1186 0586 6F81      		ldd r22,Y+7
 1187 0588 7885      		ldd r23,Y+8
 1188 058a 8985      		ldd r24,Y+9
 1189 058c 9A85      		ldd r25,Y+10
 1190 058e 00D0      		rcall __gtsf2
 1191 0590 1816      		cp __zero_reg__,r24
 1192 0592 0CF0      		brlt .L51
 1193 0594 03C0      		rjmp .L50
 1194               	.L51:
 1196               	.LM84:
 1197 0596 1E82      		std Y+6,__zero_reg__
 1198 0598 1D82      		std Y+5,__zero_reg__
 1199 059a 09C0      		rjmp .L49
 1200               	.L50:
 1202               	.LM85:
 1203 059c 6F81      		ldd r22,Y+7
 1204 059e 7885      		ldd r23,Y+8
 1205 05a0 8985      		ldd r24,Y+9
 1206 05a2 9A85      		ldd r25,Y+10
 1207 05a4 00D0      		rcall __fixunssfsi
 1208 05a6 DC01      		movw r26,r24
 1209 05a8 CB01      		movw r24,r22
 1210 05aa 9E83      		std Y+6,r25
 1211 05ac 8D83      		std Y+5,r24
 1212               	.L49:
 1213               	.LBB16:
 1215               	.LM86:
 1216 05ae 8D81      		ldd r24,Y+5
 1217 05b0 9E81      		ldd r25,Y+6
 1218 05b2 9C87      		std Y+12,r25
 1219 05b4 8B87      		std Y+11,r24
 1220               	.LBB17:
 1222               	.LM87:
 1223 05b6 8B85      		ldd r24,Y+11
 1224 05b8 9C85      		ldd r25,Y+12
 1225               	/* #APP */
 1226 05ba 0197      		1: sbiw r24,1
 1227 05bc F1F7      		brne 1b
 1228               	/* #NOAPP */
 1229 05be 9C87      		std Y+12,r25
 1230 05c0 8B87      		std Y+11,r24
 1231               	.LBE17:
 1232               	.LBE16:
 1233               	.LBE15:
 1234               	.LBE14:
 1236               	.Ltext8:
 165:ledmeter.c    ****     _delay_ms(50);
 166:ledmeter.c    ****     switch_off_leds_with_delay(100);
 1238               	.LM88:
 1239 05c2 60E0      		ldi r22,lo8(0x42c80000)
 1240 05c4 70E0      		ldi r23,hi8(0x42c80000)
 1241 05c6 88EC      		ldi r24,hlo8(0x42c80000)
 1242 05c8 92E4      		ldi r25,hhi8(0x42c80000)
 1243 05ca 2FDF      		rcall switch_off_leds_with_delay
 1244               	/* epilogue: frame size=12 */
 1245 05cc 2C96      		adiw r28,12
 1246 05ce 0FB6      		in __tmp_reg__,__SREG__
 1247 05d0 F894      		cli
 1248 05d2 DEBF      		out __SP_H__,r29
 1249 05d4 0FBE      		out __SREG__,__tmp_reg__
 1250 05d6 CDBF      		out __SP_L__,r28
 1251 05d8 DF91      		pop r29
 1252 05da CF91      		pop r28
 1253 05dc 0895      		ret
 1254               	/* epilogue end (size=9) */
 1255               	/* function test_leds size 105 (86) */
 1267               	.Lscope10:
 1270               	.global	switch_on_min_dels
 1272               	switch_on_min_dels:
 167:ledmeter.c    **** }
 168:ledmeter.c    **** 
 169:ledmeter.c    **** /*
 170:ledmeter.c    ****  *  switch on every leds (from 0 to n)  (and switch off others)
 171:ledmeter.c    ****  */
 172:ledmeter.c    **** void switch_on_min_dels(int n) {
 1274               	.LM89:
 1275               	/* prologue: frame size=4 */
 1276 05de CF93      		push r28
 1277 05e0 DF93      		push r29
 1278 05e2 CDB7      		in r28,__SP_L__
 1279 05e4 DEB7      		in r29,__SP_H__
 1280 05e6 2497      		sbiw r28,4
 1281 05e8 0FB6      		in __tmp_reg__,__SREG__
 1282 05ea F894      		cli
 1283 05ec DEBF      		out __SP_H__,r29
 1284 05ee 0FBE      		out __SREG__,__tmp_reg__
 1285 05f0 CDBF      		out __SP_L__,r28
 1286               	/* prologue end (size=10) */
 1287 05f2 9A83      		std Y+2,r25
 1288 05f4 8983      		std Y+1,r24
 173:ledmeter.c    ****     int i;
 174:ledmeter.c    ****     for(i = 1; i<=Nleds; i++) {
 1290               	.LM90:
 1291 05f6 81E0      		ldi r24,lo8(1)
 1292 05f8 90E0      		ldi r25,hi8(1)
 1293 05fa 9C83      		std Y+4,r25
 1294 05fc 8B83      		std Y+3,r24
 1295               	.L56:
 1297               	.LM91:
 1298 05fe 8B81      		ldd r24,Y+3
 1299 0600 9C81      		ldd r25,Y+4
 1300 0602 8930      		cpi r24,9
 1301 0604 9105      		cpc r25,__zero_reg__
 1302 0606 A4F4      		brge .L55
 175:ledmeter.c    ****         if (i<=n) {
 1304               	.LM92:
 1305 0608 2B81      		ldd r18,Y+3
 1306 060a 3C81      		ldd r19,Y+4
 1307 060c 8981      		ldd r24,Y+1
 1308 060e 9A81      		ldd r25,Y+2
 1309 0610 8217      		cp r24,r18
 1310 0612 9307      		cpc r25,r19
 1311 0614 24F0      		brlt .L59
 176:ledmeter.c    ****             switch_on_led(i);
 1313               	.LM93:
 1314 0616 8B81      		ldd r24,Y+3
 1315 0618 9C81      		ldd r25,Y+4
 1316 061a 3DDE      		rcall switch_on_led
 1317 061c 03C0      		rjmp .L58
 1318               	.L59:
 177:ledmeter.c    ****         } else {
 178:ledmeter.c    ****             switch_off_led(i);
 1320               	.LM94:
 1321 061e 8B81      		ldd r24,Y+3
 1322 0620 9C81      		ldd r25,Y+4
 1323 0622 65DE      		rcall switch_off_led
 1324               	.L58:
 1326               	.LM95:
 1327 0624 8B81      		ldd r24,Y+3
 1328 0626 9C81      		ldd r25,Y+4
 1329 0628 0196      		adiw r24,1
 1330 062a 9C83      		std Y+4,r25
 1331 062c 8B83      		std Y+3,r24
 1332 062e E7CF      		rjmp .L56
 1333               	.L55:
 1334               	/* epilogue: frame size=4 */
 1335 0630 2496      		adiw r28,4
 1336 0632 0FB6      		in __tmp_reg__,__SREG__
 1337 0634 F894      		cli
 1338 0636 DEBF      		out __SP_H__,r29
 1339 0638 0FBE      		out __SREG__,__tmp_reg__
 1340 063a CDBF      		out __SP_L__,r28
 1341 063c DF91      		pop r29
 1342 063e CF91      		pop r28
 1343 0640 0895      		ret
 1344               	/* epilogue end (size=9) */
 1345               	/* function switch_on_min_dels size 50 (31) */
 1350               	.Lscope11:
 1353               	.global	switch_on_max_dels
 1355               	switch_on_max_dels:
 179:ledmeter.c    ****         }
 180:ledmeter.c    ****     }
 181:ledmeter.c    **** }
 182:ledmeter.c    **** 
 183:ledmeter.c    **** /*
 184:ledmeter.c    ****  *  switch on every leds (from Nleds to n)
 185:ledmeter.c    ****  */
 186:ledmeter.c    **** void switch_on_max_dels(int n) {
 1357               	.LM96:
 1358               	/* prologue: frame size=4 */
 1359 0642 CF93      		push r28
 1360 0644 DF93      		push r29
 1361 0646 CDB7      		in r28,__SP_L__
 1362 0648 DEB7      		in r29,__SP_H__
 1363 064a 2497      		sbiw r28,4
 1364 064c 0FB6      		in __tmp_reg__,__SREG__
 1365 064e F894      		cli
 1366 0650 DEBF      		out __SP_H__,r29
 1367 0652 0FBE      		out __SREG__,__tmp_reg__
 1368 0654 CDBF      		out __SP_L__,r28
 1369               	/* prologue end (size=10) */
 1370 0656 9A83      		std Y+2,r25
 1371 0658 8983      		std Y+1,r24
 187:ledmeter.c    ****     int i;
 188:ledmeter.c    ****     for(i = Nleds; i>=0; i--) {
 1373               	.LM97:
 1374 065a 88E0      		ldi r24,lo8(8)
 1375 065c 90E0      		ldi r25,hi8(8)
 1376 065e 9C83      		std Y+4,r25
 1377 0660 8B83      		std Y+3,r24
 1378               	.L62:
 1380               	.LM98:
 1381 0662 8B81      		ldd r24,Y+3
 1382 0664 9C81      		ldd r25,Y+4
 1383 0666 9923      		tst r25
 1384 0668 C4F0      		brlt .L61
 189:ledmeter.c    ****         if (i>=Nleds-n) {
 1386               	.LM99:
 1387 066a 28E0      		ldi r18,lo8(8)
 1388 066c 30E0      		ldi r19,hi8(8)
 1389 066e 8981      		ldd r24,Y+1
 1390 0670 9A81      		ldd r25,Y+2
 1391 0672 281B      		sub r18,r24
 1392 0674 390B      		sbc r19,r25
 1393 0676 8B81      		ldd r24,Y+3
 1394 0678 9C81      		ldd r25,Y+4
 1395 067a 8217      		cp r24,r18
 1396 067c 9307      		cpc r25,r19
 1397 067e 24F0      		brlt .L65
 190:ledmeter.c    ****             switch_on_led(i);
 1399               	.LM100:
 1400 0680 8B81      		ldd r24,Y+3
 1401 0682 9C81      		ldd r25,Y+4
 1402 0684 08DE      		rcall switch_on_led
 1403 0686 03C0      		rjmp .L64
 1404               	.L65:
 191:ledmeter.c    ****         } else {
 192:ledmeter.c    ****             switch_off_led(i);
 1406               	.LM101:
 1407 0688 8B81      		ldd r24,Y+3
 1408 068a 9C81      		ldd r25,Y+4
 1409 068c 30DE      		rcall switch_off_led
 1410               	.L64:
 1412               	.LM102:
 1413 068e 8B81      		ldd r24,Y+3
 1414 0690 9C81      		ldd r25,Y+4
 1415 0692 0197      		sbiw r24,1
 1416 0694 9C83      		std Y+4,r25
 1417 0696 8B83      		std Y+3,r24
 1418 0698 E4CF      		rjmp .L62
 1419               	.L61:
 1420               	/* epilogue: frame size=4 */
 1421 069a 2496      		adiw r28,4
 1422 069c 0FB6      		in __tmp_reg__,__SREG__
 1423 069e F894      		cli
 1424 06a0 DEBF      		out __SP_H__,r29
 1425 06a2 0FBE      		out __SREG__,__tmp_reg__
 1426 06a4 CDBF      		out __SP_L__,r28
 1427 06a6 DF91      		pop r29
 1428 06a8 CF91      		pop r28
 1429 06aa 0895      		ret
 1430               	/* epilogue end (size=9) */
 1431               	/* function switch_on_max_dels size 53 (34) */
 1436               	.Lscope12:
 1440               	.global	led_alarm
 1442               	led_alarm:
 193:ledmeter.c    ****         }
 194:ledmeter.c    ****     }
 195:ledmeter.c    ****     // TO TEST (switch off)
 196:ledmeter.c    **** }
 197:ledmeter.c    **** 
 198:ledmeter.c    **** /*
 199:ledmeter.c    ****  * switch off every leds, wait and swith them all, n times (a sort of visual alarm)
 200:ledmeter.c    ****  */
 201:ledmeter.c    **** void led_alarm(int n, double delay) {
 1444               	.LM103:
 1445               	/* prologue: frame size=20 */
 1446 06ac CF93      		push r28
 1447 06ae DF93      		push r29
 1448 06b0 CDB7      		in r28,__SP_L__
 1449 06b2 DEB7      		in r29,__SP_H__
 1450 06b4 6497      		sbiw r28,20
 1451 06b6 0FB6      		in __tmp_reg__,__SREG__
 1452 06b8 F894      		cli
 1453 06ba DEBF      		out __SP_H__,r29
 1454 06bc 0FBE      		out __SREG__,__tmp_reg__
 1455 06be CDBF      		out __SP_L__,r28
 1456               	/* prologue end (size=10) */
 1457 06c0 9A83      		std Y+2,r25
 1458 06c2 8983      		std Y+1,r24
 1459 06c4 4B83      		std Y+3,r20
 1460 06c6 5C83      		std Y+4,r21
 1461 06c8 6D83      		std Y+5,r22
 1462 06ca 7E83      		std Y+6,r23
 202:ledmeter.c    ****     int i;
 203:ledmeter.c    ****     for(i = 1; i<=n; i++) {
 1464               	.LM104:
 1465 06cc 81E0      		ldi r24,lo8(1)
 1466 06ce 90E0      		ldi r25,hi8(1)
 1467 06d0 9887      		std Y+8,r25
 1468 06d2 8F83      		std Y+7,r24
 1469               	.L68:
 1471               	.LM105:
 1472 06d4 2F81      		ldd r18,Y+7
 1473 06d6 3885      		ldd r19,Y+8
 1474 06d8 8981      		ldd r24,Y+1
 1475 06da 9A81      		ldd r25,Y+2
 1476 06dc 8217      		cp r24,r18
 1477 06de 9307      		cpc r25,r19
 1478 06e0 0CF4      		brge .+2
 1479 06e2 9CC0      		rjmp .L67
 204:ledmeter.c    ****         switch_off_all_leds();
 1481               	.LM106:
 1482 06e4 CEDD      		rcall switch_off_all_leds
 1483               	.LBB18:
 1485               	.Ltext9:
 1487               	.LM107:
 1488 06e6 8B81      		ldd r24,Y+3
 1489 06e8 9C81      		ldd r25,Y+4
 1490 06ea AD81      		ldd r26,Y+5
 1491 06ec BE81      		ldd r27,Y+6
 1492 06ee 8987      		std Y+9,r24
 1493 06f0 9A87      		std Y+10,r25
 1494 06f2 AB87      		std Y+11,r26
 1495 06f4 BC87      		std Y+12,r27
 1496               	.LBB19:
 1498               	.LM108:
 1499 06f6 20E0      		ldi r18,lo8(0x437a0000)
 1500 06f8 30E0      		ldi r19,hi8(0x437a0000)
 1501 06fa 4AE7      		ldi r20,hlo8(0x437a0000)
 1502 06fc 53E4      		ldi r21,hhi8(0x437a0000)
 1503 06fe 6985      		ldd r22,Y+9
 1504 0700 7A85      		ldd r23,Y+10
 1505 0702 8B85      		ldd r24,Y+11
 1506 0704 9C85      		ldd r25,Y+12
 1507 0706 00D0      		rcall __mulsf3
 1508 0708 DC01      		movw r26,r24
 1509 070a CB01      		movw r24,r22
 1510 070c 8F87      		std Y+15,r24
 1511 070e 988B      		std Y+16,r25
 1512 0710 A98B      		std Y+17,r26
 1513 0712 BA8B      		std Y+18,r27
 1515               	.LM109:
 1516 0714 20E0      		ldi r18,lo8(0x3f800000)
 1517 0716 30E0      		ldi r19,hi8(0x3f800000)
 1518 0718 40E8      		ldi r20,hlo8(0x3f800000)
 1519 071a 5FE3      		ldi r21,hhi8(0x3f800000)
 1520 071c 6F85      		ldd r22,Y+15
 1521 071e 7889      		ldd r23,Y+16
 1522 0720 8989      		ldd r24,Y+17
 1523 0722 9A89      		ldd r25,Y+18
 1524 0724 00D0      		rcall __ltsf2
 1525 0726 8823      		tst r24
 1526 0728 0CF0      		brlt .L72
 1527 072a 05C0      		rjmp .L71
 1528               	.L72:
 1530               	.LM110:
 1531 072c 81E0      		ldi r24,lo8(1)
 1532 072e 90E0      		ldi r25,hi8(1)
 1533 0730 9E87      		std Y+14,r25
 1534 0732 8D87      		std Y+13,r24
 1535 0734 18C0      		rjmp .L73
 1536               	.L71:
 1538               	.LM111:
 1539 0736 20E0      		ldi r18,lo8(0x477fff00)
 1540 0738 3FEF      		ldi r19,hi8(0x477fff00)
 1541 073a 4FE7      		ldi r20,hlo8(0x477fff00)
 1542 073c 57E4      		ldi r21,hhi8(0x477fff00)
 1543 073e 6F85      		ldd r22,Y+15
 1544 0740 7889      		ldd r23,Y+16
 1545 0742 8989      		ldd r24,Y+17
 1546 0744 9A89      		ldd r25,Y+18
 1547 0746 00D0      		rcall __gtsf2
 1548 0748 1816      		cp __zero_reg__,r24
 1549 074a 0CF0      		brlt .L75
 1550 074c 03C0      		rjmp .L74
 1551               	.L75:
 1553               	.LM112:
 1554 074e 1E86      		std Y+14,__zero_reg__
 1555 0750 1D86      		std Y+13,__zero_reg__
 1556 0752 09C0      		rjmp .L73
 1557               	.L74:
 1559               	.LM113:
 1560 0754 6F85      		ldd r22,Y+15
 1561 0756 7889      		ldd r23,Y+16
 1562 0758 8989      		ldd r24,Y+17
 1563 075a 9A89      		ldd r25,Y+18
 1564 075c 00D0      		rcall __fixunssfsi
 1565 075e DC01      		movw r26,r24
 1566 0760 CB01      		movw r24,r22
 1567 0762 9E87      		std Y+14,r25
 1568 0764 8D87      		std Y+13,r24
 1569               	.L73:
 1570               	.LBB20:
 1572               	.LM114:
 1573 0766 8D85      		ldd r24,Y+13
 1574 0768 9E85      		ldd r25,Y+14
 1575 076a 9C8B      		std Y+20,r25
 1576 076c 8B8B      		std Y+19,r24
 1577               	.LBB21:
 1579               	.LM115:
 1580 076e 8B89      		ldd r24,Y+19
 1581 0770 9C89      		ldd r25,Y+20
 1582               	/* #APP */
 1583 0772 0197      		1: sbiw r24,1
 1584 0774 F1F7      		brne 1b
 1585               	/* #NOAPP */
 1586 0776 9C8B      		std Y+20,r25
 1587 0778 8B8B      		std Y+19,r24
 1588               	.LBE21:
 1589               	.LBE20:
 1590               	.LBE19:
 1591               	.LBE18:
 1593               	.Ltext10:
 205:ledmeter.c    ****         _delay_ms(delay);
 206:ledmeter.c    ****         switch_on_all_leds();
 1595               	.LM116:
 1596 077a 7ADD      		rcall switch_on_all_leds
 1597               	.LBB22:
 1599               	.Ltext11:
 1601               	.LM117:
 1602 077c 8B81      		ldd r24,Y+3
 1603 077e 9C81      		ldd r25,Y+4
 1604 0780 AD81      		ldd r26,Y+5
 1605 0782 BE81      		ldd r27,Y+6
 1606 0784 8F87      		std Y+15,r24
 1607 0786 988B      		std Y+16,r25
 1608 0788 A98B      		std Y+17,r26
 1609 078a BA8B      		std Y+18,r27
 1610               	.LBB23:
 1612               	.LM118:
 1613 078c 20E0      		ldi r18,lo8(0x437a0000)
 1614 078e 30E0      		ldi r19,hi8(0x437a0000)
 1615 0790 4AE7      		ldi r20,hlo8(0x437a0000)
 1616 0792 53E4      		ldi r21,hhi8(0x437a0000)
 1617 0794 6F85      		ldd r22,Y+15
 1618 0796 7889      		ldd r23,Y+16
 1619 0798 8989      		ldd r24,Y+17
 1620 079a 9A89      		ldd r25,Y+18
 1621 079c 00D0      		rcall __mulsf3
 1622 079e DC01      		movw r26,r24
 1623 07a0 CB01      		movw r24,r22
 1624 07a2 8987      		std Y+9,r24
 1625 07a4 9A87      		std Y+10,r25
 1626 07a6 AB87      		std Y+11,r26
 1627 07a8 BC87      		std Y+12,r27
 1629               	.LM119:
 1630 07aa 20E0      		ldi r18,lo8(0x3f800000)
 1631 07ac 30E0      		ldi r19,hi8(0x3f800000)
 1632 07ae 40E8      		ldi r20,hlo8(0x3f800000)
 1633 07b0 5FE3      		ldi r21,hhi8(0x3f800000)
 1634 07b2 6985      		ldd r22,Y+9
 1635 07b4 7A85      		ldd r23,Y+10
 1636 07b6 8B85      		ldd r24,Y+11
 1637 07b8 9C85      		ldd r25,Y+12
 1638 07ba 00D0      		rcall __ltsf2
 1639 07bc 8823      		tst r24
 1640 07be 0CF0      		brlt .L80
 1641 07c0 05C0      		rjmp .L79
 1642               	.L80:
 1644               	.LM120:
 1645 07c2 81E0      		ldi r24,lo8(1)
 1646 07c4 90E0      		ldi r25,hi8(1)
 1647 07c6 9C8B      		std Y+20,r25
 1648 07c8 8B8B      		std Y+19,r24
 1649 07ca 18C0      		rjmp .L81
 1650               	.L79:
 1652               	.LM121:
 1653 07cc 20E0      		ldi r18,lo8(0x477fff00)
 1654 07ce 3FEF      		ldi r19,hi8(0x477fff00)
 1655 07d0 4FE7      		ldi r20,hlo8(0x477fff00)
 1656 07d2 57E4      		ldi r21,hhi8(0x477fff00)
 1657 07d4 6985      		ldd r22,Y+9
 1658 07d6 7A85      		ldd r23,Y+10
 1659 07d8 8B85      		ldd r24,Y+11
 1660 07da 9C85      		ldd r25,Y+12
 1661 07dc 00D0      		rcall __gtsf2
 1662 07de 1816      		cp __zero_reg__,r24
 1663 07e0 0CF0      		brlt .L83
 1664 07e2 03C0      		rjmp .L82
 1665               	.L83:
 1667               	.LM122:
 1668 07e4 1C8A      		std Y+20,__zero_reg__
 1669 07e6 1B8A      		std Y+19,__zero_reg__
 1670 07e8 09C0      		rjmp .L81
 1671               	.L82:
 1673               	.LM123:
 1674 07ea 6985      		ldd r22,Y+9
 1675 07ec 7A85      		ldd r23,Y+10
 1676 07ee 8B85      		ldd r24,Y+11
 1677 07f0 9C85      		ldd r25,Y+12
 1678 07f2 00D0      		rcall __fixunssfsi
 1679 07f4 DC01      		movw r26,r24
 1680 07f6 CB01      		movw r24,r22
 1681 07f8 9C8B      		std Y+20,r25
 1682 07fa 8B8B      		std Y+19,r24
 1683               	.L81:
 1684               	.LBB24:
 1686               	.LM124:
 1687 07fc 8B89      		ldd r24,Y+19
 1688 07fe 9C89      		ldd r25,Y+20
 1689 0800 9E87      		std Y+14,r25
 1690 0802 8D87      		std Y+13,r24
 1691               	.LBB25:
 1693               	.LM125:
 1694 0804 8D85      		ldd r24,Y+13
 1695 0806 9E85      		ldd r25,Y+14
 1696               	/* #APP */
 1697 0808 0197      		1: sbiw r24,1
 1698 080a F1F7      		brne 1b
 1699               	/* #NOAPP */
 1700 080c 9E87      		std Y+14,r25
 1701 080e 8D87      		std Y+13,r24
 1702               	.LBE25:
 1703               	.LBE24:
 1704               	.LBE23:
 1705               	.LBE22:
 1707               	.Ltext12:
 1709               	.LM126:
 1710 0810 8F81      		ldd r24,Y+7
 1711 0812 9885      		ldd r25,Y+8
 1712 0814 0196      		adiw r24,1
 1713 0816 9887      		std Y+8,r25
 1714 0818 8F83      		std Y+7,r24
 1715 081a 5CCF      		rjmp .L68
 1716               	.L67:
 1717               	/* epilogue: frame size=20 */
 1718 081c 6496      		adiw r28,20
 1719 081e 0FB6      		in __tmp_reg__,__SREG__
 1720 0820 F894      		cli
 1721 0822 DEBF      		out __SP_H__,r29
 1722 0824 0FBE      		out __SREG__,__tmp_reg__
 1723 0826 CDBF      		out __SP_L__,r28
 1724 0828 DF91      		pop r29
 1725 082a CF91      		pop r28
 1726 082c 0895      		ret
 1727               	/* epilogue end (size=9) */
 1728               	/* function led_alarm size 197 (178) */
 1753               	.Lscope13:
 1756               	.global	roundp
 1758               	roundp:
 207:ledmeter.c    ****         _delay_ms(delay);
 208:ledmeter.c    ****     }
 209:ledmeter.c    **** }
 210:ledmeter.c    **** 
 211:ledmeter.c    **** /*
 212:ledmeter.c    ****  * switch on every dels depending of the percentage p
 213:ledmeter.c    ****  */
 214:ledmeter.c    **** //#define roundp floor
 215:ledmeter.c    **** inline int roundp(double n) {
 1760               	.LM127:
 1761               	/* prologue: frame size=4 */
 1762 082e CF93      		push r28
 1763 0830 DF93      		push r29
 1764 0832 CDB7      		in r28,__SP_L__
 1765 0834 DEB7      		in r29,__SP_H__
 1766 0836 2497      		sbiw r28,4
 1767 0838 0FB6      		in __tmp_reg__,__SREG__
 1768 083a F894      		cli
 1769 083c DEBF      		out __SP_H__,r29
 1770 083e 0FBE      		out __SREG__,__tmp_reg__
 1771 0840 CDBF      		out __SP_L__,r28
 1772               	/* prologue end (size=10) */
 1773 0842 6983      		std Y+1,r22
 1774 0844 7A83      		std Y+2,r23
 1775 0846 8B83      		std Y+3,r24
 1776 0848 9C83      		std Y+4,r25
 216:ledmeter.c    ****     return floor(n+0.5);
 1778               	.LM128:
 1779 084a 20E0      		ldi r18,lo8(0x3f000000)
 1780 084c 30E0      		ldi r19,hi8(0x3f000000)
 1781 084e 40E0      		ldi r20,hlo8(0x3f000000)
 1782 0850 5FE3      		ldi r21,hhi8(0x3f000000)
 1783 0852 6981      		ldd r22,Y+1
 1784 0854 7A81      		ldd r23,Y+2
 1785 0856 8B81      		ldd r24,Y+3
 1786 0858 9C81      		ldd r25,Y+4
 1787 085a 00D0      		rcall __addsf3
 1788 085c DC01      		movw r26,r24
 1789 085e CB01      		movw r24,r22
 1790 0860 BC01      		movw r22,r24
 1791 0862 CD01      		movw r24,r26
 1792 0864 00D0      		rcall floor
 1793 0866 DC01      		movw r26,r24
 1794 0868 CB01      		movw r24,r22
 1795 086a BC01      		movw r22,r24
 1796 086c CD01      		movw r24,r26
 1797 086e 00D0      		rcall __fixsfsi
 1798 0870 DC01      		movw r26,r24
 1799 0872 CB01      		movw r24,r22
 1800               	/* epilogue: frame size=4 */
 1801 0874 2496      		adiw r28,4
 1802 0876 0FB6      		in __tmp_reg__,__SREG__
 1803 0878 F894      		cli
 1804 087a DEBF      		out __SP_H__,r29
 1805 087c 0FBE      		out __SREG__,__tmp_reg__
 1806 087e CDBF      		out __SP_L__,r28
 1807 0880 DF91      		pop r29
 1808 0882 CF91      		pop r28
 1809 0884 0895      		ret
 1810               	/* epilogue end (size=9) */
 1811               	/* function roundp size 44 (25) */
 1813               	.Lscope14:
 1816               	.global	show_percent
 1818               	show_percent:
 217:ledmeter.c    **** }
 218:ledmeter.c    **** 
 219:ledmeter.c    **** // roundp = round for positive number
 220:ledmeter.c    **** void show_percent(double p) {
 1820               	.LM129:
 1821               	/* prologue: frame size=6 */
 1822 0886 CF93      		push r28
 1823 0888 DF93      		push r29
 1824 088a CDB7      		in r28,__SP_L__
 1825 088c DEB7      		in r29,__SP_H__
 1826 088e 2697      		sbiw r28,6
 1827 0890 0FB6      		in __tmp_reg__,__SREG__
 1828 0892 F894      		cli
 1829 0894 DEBF      		out __SP_H__,r29
 1830 0896 0FBE      		out __SREG__,__tmp_reg__
 1831 0898 CDBF      		out __SP_L__,r28
 1832               	/* prologue end (size=10) */
 1833 089a 6983      		std Y+1,r22
 1834 089c 7A83      		std Y+2,r23
 1835 089e 8B83      		std Y+3,r24
 1836 08a0 9C83      		std Y+4,r25
 221:ledmeter.c    ****     // p pourcent
 222:ledmeter.c    ****     int n;
 223:ledmeter.c    ****     //n = 4;
 224:ledmeter.c    ****     n = roundp(p / 100.0 * Nleds); // TO FIX (math.h ceil floor ... round en Java !)
 1838               	.LM130:
 1839 08a2 20E0      		ldi r18,lo8(0x42c80000)
 1840 08a4 30E0      		ldi r19,hi8(0x42c80000)
 1841 08a6 48EC      		ldi r20,hlo8(0x42c80000)
 1842 08a8 52E4      		ldi r21,hhi8(0x42c80000)
 1843 08aa 6981      		ldd r22,Y+1
 1844 08ac 7A81      		ldd r23,Y+2
 1845 08ae 8B81      		ldd r24,Y+3
 1846 08b0 9C81      		ldd r25,Y+4
 1847 08b2 00D0      		rcall __divsf3
 1848 08b4 DC01      		movw r26,r24
 1849 08b6 CB01      		movw r24,r22
 1850 08b8 20E0      		ldi r18,lo8(0x41000000)
 1851 08ba 30E0      		ldi r19,hi8(0x41000000)
 1852 08bc 40E0      		ldi r20,hlo8(0x41000000)
 1853 08be 51E4      		ldi r21,hhi8(0x41000000)
 1854 08c0 BC01      		movw r22,r24
 1855 08c2 CD01      		movw r24,r26
 1856 08c4 00D0      		rcall __mulsf3
 1857 08c6 DC01      		movw r26,r24
 1858 08c8 CB01      		movw r24,r22
 1859 08ca BC01      		movw r22,r24
 1860 08cc CD01      		movw r24,r26
 1861 08ce AFDF      		rcall roundp
 1862 08d0 9E83      		std Y+6,r25
 1863 08d2 8D83      		std Y+5,r24
 225:ledmeter.c    ****     // TO FIX : +0.5 is a very dirty hack
 226:ledmeter.c    ****     switch_on_min_dels(n);
 1865               	.LM131:
 1866 08d4 8D81      		ldd r24,Y+5
 1867 08d6 9E81      		ldd r25,Y+6
 1868 08d8 82DE      		rcall switch_on_min_dels
 1869               	/* epilogue: frame size=6 */
 1870 08da 2696      		adiw r28,6
 1871 08dc 0FB6      		in __tmp_reg__,__SREG__
 1872 08de F894      		cli
 1873 08e0 DEBF      		out __SP_H__,r29
 1874 08e2 0FBE      		out __SREG__,__tmp_reg__
 1875 08e4 CDBF      		out __SP_L__,r28
 1876 08e6 DF91      		pop r29
 1877 08e8 CF91      		pop r28
 1878 08ea 0895      		ret
 1879               	/* epilogue end (size=9) */
 1880               	/* function show_percent size 51 (32) */
 1885               	.Lscope15:
 1889               	.global	beep
 1891               	beep:
 227:ledmeter.c    **** }
 228:ledmeter.c    **** 
 229:ledmeter.c    **** /*
 230:ledmeter.c    ****  * send a sound (on or more beep(s))
 231:ledmeter.c    ****  */
 232:ledmeter.c    **** void beep(int n, double delay) {
 1893               	.LM132:
 1894               	/* prologue: frame size=20 */
 1895 08ec CF93      		push r28
 1896 08ee DF93      		push r29
 1897 08f0 CDB7      		in r28,__SP_L__
 1898 08f2 DEB7      		in r29,__SP_H__
 1899 08f4 6497      		sbiw r28,20
 1900 08f6 0FB6      		in __tmp_reg__,__SREG__
 1901 08f8 F894      		cli
 1902 08fa DEBF      		out __SP_H__,r29
 1903 08fc 0FBE      		out __SREG__,__tmp_reg__
 1904 08fe CDBF      		out __SP_L__,r28
 1905               	/* prologue end (size=10) */
 1906 0900 9A83      		std Y+2,r25
 1907 0902 8983      		std Y+1,r24
 1908 0904 4B83      		std Y+3,r20
 1909 0906 5C83      		std Y+4,r21
 1910 0908 6D83      		std Y+5,r22
 1911 090a 7E83      		std Y+6,r23
 233:ledmeter.c    ****     // TO DO
 234:ledmeter.c    ****     int i;
 235:ledmeter.c    ****     for(i = 1; i<=n; i++) {
 1913               	.LM133:
 1914 090c 81E0      		ldi r24,lo8(1)
 1915 090e 90E0      		ldi r25,hi8(1)
 1916 0910 9887      		std Y+8,r25
 1917 0912 8F83      		std Y+7,r24
 1918               	.L90:
 1920               	.LM134:
 1921 0914 2F81      		ldd r18,Y+7
 1922 0916 3885      		ldd r19,Y+8
 1923 0918 8981      		ldd r24,Y+1
 1924 091a 9A81      		ldd r25,Y+2
 1925 091c 8217      		cp r24,r18
 1926 091e 9307      		cpc r25,r19
 1927 0920 0CF4      		brge .+2
 1928 0922 56C0      		rjmp .L89
 236:ledmeter.c    ****         //TO DO : send a beep
 237:ledmeter.c    ****         if (n>1) {
 1930               	.LM135:
 1931 0924 8981      		ldd r24,Y+1
 1932 0926 9A81      		ldd r25,Y+2
 1933 0928 8230      		cpi r24,2
 1934 092a 9105      		cpc r25,__zero_reg__
 1935 092c 0CF4      		brge .+2
 1936 092e 4AC0      		rjmp .L92
 1937               	.LBB26:
 1939               	.Ltext13:
 1941               	.LM136:
 1942 0930 8B81      		ldd r24,Y+3
 1943 0932 9C81      		ldd r25,Y+4
 1944 0934 AD81      		ldd r26,Y+5
 1945 0936 BE81      		ldd r27,Y+6
 1946 0938 8987      		std Y+9,r24
 1947 093a 9A87      		std Y+10,r25
 1948 093c AB87      		std Y+11,r26
 1949 093e BC87      		std Y+12,r27
 1950               	.LBB27:
 1952               	.LM137:
 1953 0940 20E0      		ldi r18,lo8(0x437a0000)
 1954 0942 30E0      		ldi r19,hi8(0x437a0000)
 1955 0944 4AE7      		ldi r20,hlo8(0x437a0000)
 1956 0946 53E4      		ldi r21,hhi8(0x437a0000)
 1957 0948 6985      		ldd r22,Y+9
 1958 094a 7A85      		ldd r23,Y+10
 1959 094c 8B85      		ldd r24,Y+11
 1960 094e 9C85      		ldd r25,Y+12
 1961 0950 00D0      		rcall __mulsf3
 1962 0952 DC01      		movw r26,r24
 1963 0954 CB01      		movw r24,r22
 1964 0956 8F87      		std Y+15,r24
 1965 0958 988B      		std Y+16,r25
 1966 095a A98B      		std Y+17,r26
 1967 095c BA8B      		std Y+18,r27
 1969               	.LM138:
 1970 095e 20E0      		ldi r18,lo8(0x3f800000)
 1971 0960 30E0      		ldi r19,hi8(0x3f800000)
 1972 0962 40E8      		ldi r20,hlo8(0x3f800000)
 1973 0964 5FE3      		ldi r21,hhi8(0x3f800000)
 1974 0966 6F85      		ldd r22,Y+15
 1975 0968 7889      		ldd r23,Y+16
 1976 096a 8989      		ldd r24,Y+17
 1977 096c 9A89      		ldd r25,Y+18
 1978 096e 00D0      		rcall __ltsf2
 1979 0970 8823      		tst r24
 1980 0972 0CF0      		brlt .L95
 1981 0974 05C0      		rjmp .L94
 1982               	.L95:
 1984               	.LM139:
 1985 0976 81E0      		ldi r24,lo8(1)
 1986 0978 90E0      		ldi r25,hi8(1)
 1987 097a 9E87      		std Y+14,r25
 1988 097c 8D87      		std Y+13,r24
 1989 097e 18C0      		rjmp .L96
 1990               	.L94:
 1992               	.LM140:
 1993 0980 20E0      		ldi r18,lo8(0x477fff00)
 1994 0982 3FEF      		ldi r19,hi8(0x477fff00)
 1995 0984 4FE7      		ldi r20,hlo8(0x477fff00)
 1996 0986 57E4      		ldi r21,hhi8(0x477fff00)
 1997 0988 6F85      		ldd r22,Y+15
 1998 098a 7889      		ldd r23,Y+16
 1999 098c 8989      		ldd r24,Y+17
 2000 098e 9A89      		ldd r25,Y+18
 2001 0990 00D0      		rcall __gtsf2
 2002 0992 1816      		cp __zero_reg__,r24
 2003 0994 0CF0      		brlt .L98
 2004 0996 03C0      		rjmp .L97
 2005               	.L98:
 2007               	.LM141:
 2008 0998 1E86      		std Y+14,__zero_reg__
 2009 099a 1D86      		std Y+13,__zero_reg__
 2010 099c 09C0      		rjmp .L96
 2011               	.L97:
 2013               	.LM142:
 2014 099e 6F85      		ldd r22,Y+15
 2015 09a0 7889      		ldd r23,Y+16
 2016 09a2 8989      		ldd r24,Y+17
 2017 09a4 9A89      		ldd r25,Y+18
 2018 09a6 00D0      		rcall __fixunssfsi
 2019 09a8 DC01      		movw r26,r24
 2020 09aa CB01      		movw r24,r22
 2021 09ac 9E87      		std Y+14,r25
 2022 09ae 8D87      		std Y+13,r24
 2023               	.L96:
 2024               	.LBB28:
 2026               	.LM143:
 2027 09b0 8D85      		ldd r24,Y+13
 2028 09b2 9E85      		ldd r25,Y+14
 2029 09b4 9C8B      		std Y+20,r25
 2030 09b6 8B8B      		std Y+19,r24
 2031               	.LBB29:
 2033               	.LM144:
 2034 09b8 8B89      		ldd r24,Y+19
 2035 09ba 9C89      		ldd r25,Y+20
 2036               	/* #APP */
 2037 09bc 0197      		1: sbiw r24,1
 2038 09be F1F7      		brne 1b
 2039               	/* #NOAPP */
 2040 09c0 9C8B      		std Y+20,r25
 2041 09c2 8B8B      		std Y+19,r24
 2042               	.L92:
 2043               	.LBE29:
 2044               	.LBE28:
 2045               	.LBE27:
 2046               	.LBE26:
 2048               	.Ltext14:
 2050               	.LM145:
 2051 09c4 8F81      		ldd r24,Y+7
 2052 09c6 9885      		ldd r25,Y+8
 2053 09c8 0196      		adiw r24,1
 2054 09ca 9887      		std Y+8,r25
 2055 09cc 8F83      		std Y+7,r24
 2056 09ce A2CF      		rjmp .L90
 2057               	.L89:
 2058               	/* epilogue: frame size=20 */
 2059 09d0 6496      		adiw r28,20
 2060 09d2 0FB6      		in __tmp_reg__,__SREG__
 2061 09d4 F894      		cli
 2062 09d6 DEBF      		out __SP_H__,r29
 2063 09d8 0FBE      		out __SREG__,__tmp_reg__
 2064 09da CDBF      		out __SP_L__,r28
 2065 09dc DF91      		pop r29
 2066 09de CF91      		pop r28
 2067 09e0 0895      		ret
 2068               	/* epilogue end (size=9) */
 2069               	/* function beep size 125 (106) */
 2084               	.Lscope16:
 2086               	.global	StartStopChronometer
 2088               	StartStopChronometer:
 238:ledmeter.c    ****             _delay_ms(delay);
 239:ledmeter.c    ****         }
 240:ledmeter.c    ****     }
 241:ledmeter.c    **** }
 242:ledmeter.c    **** 
 243:ledmeter.c    **** /*
 244:ledmeter.c    ****  * start or stop chronometer
 245:ledmeter.c    ****  */
 246:ledmeter.c    **** inline void StartStopChronometer() {
 2090               	.LM146:
 2091               	/* prologue: frame size=0 */
 2092 09e2 CF93      		push r28
 2093 09e4 DF93      		push r29
 2094 09e6 CDB7      		in r28,__SP_L__
 2095 09e8 DEB7      		in r29,__SP_H__
 2096               	/* prologue end (size=4) */
 247:ledmeter.c    ****     beep(1,100);
 2098               	.LM147:
 2099 09ea 40E0      		ldi r20,lo8(0x42c80000)
 2100 09ec 50E0      		ldi r21,hi8(0x42c80000)
 2101 09ee 68EC      		ldi r22,hlo8(0x42c80000)
 2102 09f0 72E4      		ldi r23,hhi8(0x42c80000)
 2103 09f2 81E0      		ldi r24,lo8(1)
 2104 09f4 90E0      		ldi r25,hi8(1)
 2105 09f6 7ADF      		rcall beep
 248:ledmeter.c    ****     led_alarm(3,50);
 2107               	.LM148:
 2108 09f8 40E0      		ldi r20,lo8(0x42480000)
 2109 09fa 50E0      		ldi r21,hi8(0x42480000)
 2110 09fc 68E4      		ldi r22,hlo8(0x42480000)
 2111 09fe 72E4      		ldi r23,hhi8(0x42480000)
 2112 0a00 83E0      		ldi r24,lo8(3)
 2113 0a02 90E0      		ldi r25,hi8(3)
 2114 0a04 53DE      		rcall led_alarm
 249:ledmeter.c    ****     if (running_chronometer) {
 2116               	.LM149:
 2117 0a06 8091 0000 		lds r24,running_chronometer
 2118 0a0a 9091 0000 		lds r25,(running_chronometer)+1
 2119 0a0e 0097      		sbiw r24,0
 2120 0a10 29F0      		breq .L103
 250:ledmeter.c    ****        running_chronometer = FALSE; // false = 0
 2122               	.LM150:
 2123 0a12 1092 0000 		sts (running_chronometer)+1,__zero_reg__
 2124 0a16 1092 0000 		sts running_chronometer,__zero_reg__
 2125 0a1a 06C0      		rjmp .L102
 2126               	.L103:
 251:ledmeter.c    ****     } else {
 252:ledmeter.c    ****        running_chronometer = TRUE; // true = -1
 2128               	.LM151:
 2129 0a1c 8FEF      		ldi r24,lo8(-1)
 2130 0a1e 9FEF      		ldi r25,hi8(-1)
 2131 0a20 9093 0000 		sts (running_chronometer)+1,r25
 2132 0a24 8093 0000 		sts running_chronometer,r24
 2133               	.L102:
 2134               	/* epilogue: frame size=0 */
 2135 0a28 DF91      		pop r29
 2136 0a2a CF91      		pop r28
 2137 0a2c 0895      		ret
 2138               	/* epilogue end (size=3) */
 2139               	/* function StartStopChronometer size 38 (31) */
 2141               	.Lscope17:
 2143               	.global	TestRunningChronometer
 2145               	TestRunningChronometer:
 253:ledmeter.c    ****     }
 254:ledmeter.c    **** }
 255:ledmeter.c    **** 
 256:ledmeter.c    **** void TestRunningChronometer() {
 2147               	.LM152:
 2148               	/* prologue: frame size=12 */
 2149 0a2e CF93      		push r28
 2150 0a30 DF93      		push r29
 2151 0a32 CDB7      		in r28,__SP_L__
 2152 0a34 DEB7      		in r29,__SP_H__
 2153 0a36 2C97      		sbiw r28,12
 2154 0a38 0FB6      		in __tmp_reg__,__SREG__
 2155 0a3a F894      		cli
 2156 0a3c DEBF      		out __SP_H__,r29
 2157 0a3e 0FBE      		out __SREG__,__tmp_reg__
 2158 0a40 CDBF      		out __SP_L__,r28
 2159               	/* prologue end (size=10) */
 257:ledmeter.c    ****     if (running_chronometer) {
 2161               	.LM153:
 2162 0a42 8091 0000 		lds r24,running_chronometer
 2163 0a46 9091 0000 		lds r25,(running_chronometer)+1
 2164 0a4a 0097      		sbiw r24,0
 2165 0a4c 09F4      		brne .+2
 2166 0a4e 9AC0      		rjmp .L105
 258:ledmeter.c    ****         switch_on_led(8);
 2168               	.LM154:
 2169 0a50 88E0      		ldi r24,lo8(8)
 2170 0a52 90E0      		ldi r25,hi8(8)
 2171 0a54 20DC      		rcall switch_on_led
 2172               	.LBB30:
 2174               	.Ltext15:
 2176               	.LM155:
 2177 0a56 80E0      		ldi r24,lo8(0x42c80000)
 2178 0a58 90E0      		ldi r25,hi8(0x42c80000)
 2179 0a5a A8EC      		ldi r26,hlo8(0x42c80000)
 2180 0a5c B2E4      		ldi r27,hhi8(0x42c80000)
 2181 0a5e 8983      		std Y+1,r24
 2182 0a60 9A83      		std Y+2,r25
 2183 0a62 AB83      		std Y+3,r26
 2184 0a64 BC83      		std Y+4,r27
 2185               	.LBB31:
 2187               	.LM156:
 2188 0a66 20E0      		ldi r18,lo8(0x437a0000)
 2189 0a68 30E0      		ldi r19,hi8(0x437a0000)
 2190 0a6a 4AE7      		ldi r20,hlo8(0x437a0000)
 2191 0a6c 53E4      		ldi r21,hhi8(0x437a0000)
 2192 0a6e 6981      		ldd r22,Y+1
 2193 0a70 7A81      		ldd r23,Y+2
 2194 0a72 8B81      		ldd r24,Y+3
 2195 0a74 9C81      		ldd r25,Y+4
 2196 0a76 00D0      		rcall __mulsf3
 2197 0a78 DC01      		movw r26,r24
 2198 0a7a CB01      		movw r24,r22
 2199 0a7c 8F83      		std Y+7,r24
 2200 0a7e 9887      		std Y+8,r25
 2201 0a80 A987      		std Y+9,r26
 2202 0a82 BA87      		std Y+10,r27
 2204               	.LM157:
 2205 0a84 20E0      		ldi r18,lo8(0x3f800000)
 2206 0a86 30E0      		ldi r19,hi8(0x3f800000)
 2207 0a88 40E8      		ldi r20,hlo8(0x3f800000)
 2208 0a8a 5FE3      		ldi r21,hhi8(0x3f800000)
 2209 0a8c 6F81      		ldd r22,Y+7
 2210 0a8e 7885      		ldd r23,Y+8
 2211 0a90 8985      		ldd r24,Y+9
 2212 0a92 9A85      		ldd r25,Y+10
 2213 0a94 00D0      		rcall __ltsf2
 2214 0a96 8823      		tst r24
 2215 0a98 0CF0      		brlt .L108
 2216 0a9a 05C0      		rjmp .L107
 2217               	.L108:
 2219               	.LM158:
 2220 0a9c 81E0      		ldi r24,lo8(1)
 2221 0a9e 90E0      		ldi r25,hi8(1)
 2222 0aa0 9E83      		std Y+6,r25
 2223 0aa2 8D83      		std Y+5,r24
 2224 0aa4 18C0      		rjmp .L109
 2225               	.L107:
 2227               	.LM159:
 2228 0aa6 20E0      		ldi r18,lo8(0x477fff00)
 2229 0aa8 3FEF      		ldi r19,hi8(0x477fff00)
 2230 0aaa 4FE7      		ldi r20,hlo8(0x477fff00)
 2231 0aac 57E4      		ldi r21,hhi8(0x477fff00)
 2232 0aae 6F81      		ldd r22,Y+7
 2233 0ab0 7885      		ldd r23,Y+8
 2234 0ab2 8985      		ldd r24,Y+9
 2235 0ab4 9A85      		ldd r25,Y+10
 2236 0ab6 00D0      		rcall __gtsf2
 2237 0ab8 1816      		cp __zero_reg__,r24
 2238 0aba 0CF0      		brlt .L111
 2239 0abc 03C0      		rjmp .L110
 2240               	.L111:
 2242               	.LM160:
 2243 0abe 1E82      		std Y+6,__zero_reg__
 2244 0ac0 1D82      		std Y+5,__zero_reg__
 2245 0ac2 09C0      		rjmp .L109
 2246               	.L110:
 2248               	.LM161:
 2249 0ac4 6F81      		ldd r22,Y+7
 2250 0ac6 7885      		ldd r23,Y+8
 2251 0ac8 8985      		ldd r24,Y+9
 2252 0aca 9A85      		ldd r25,Y+10
 2253 0acc 00D0      		rcall __fixunssfsi
 2254 0ace DC01      		movw r26,r24
 2255 0ad0 CB01      		movw r24,r22
 2256 0ad2 9E83      		std Y+6,r25
 2257 0ad4 8D83      		std Y+5,r24
 2258               	.L109:
 2259               	.LBB32:
 2261               	.LM162:
 2262 0ad6 8D81      		ldd r24,Y+5
 2263 0ad8 9E81      		ldd r25,Y+6
 2264 0ada 9C87      		std Y+12,r25
 2265 0adc 8B87      		std Y+11,r24
 2266               	.LBB33:
 2268               	.LM163:
 2269 0ade 8B85      		ldd r24,Y+11
 2270 0ae0 9C85      		ldd r25,Y+12
 2271               	/* #APP */
 2272 0ae2 0197      		1: sbiw r24,1
 2273 0ae4 F1F7      		brne 1b
 2274               	/* #NOAPP */
 2275 0ae6 9C87      		std Y+12,r25
 2276 0ae8 8B87      		std Y+11,r24
 2277               	.LBE33:
 2278               	.LBE32:
 2279               	.LBE31:
 2280               	.LBE30:
 2282               	.Ltext16:
 259:ledmeter.c    ****         _delay_ms(100);
 260:ledmeter.c    ****         switch_off_led(8);
 2284               	.LM164:
 2285 0aea 88E0      		ldi r24,lo8(8)
 2286 0aec 90E0      		ldi r25,hi8(8)
 2287 0aee FFDB      		rcall switch_off_led
 2288               	.LBB34:
 2290               	.Ltext17:
 2292               	.LM165:
 2293 0af0 80E0      		ldi r24,lo8(0x42c80000)
 2294 0af2 90E0      		ldi r25,hi8(0x42c80000)
 2295 0af4 A8EC      		ldi r26,hlo8(0x42c80000)
 2296 0af6 B2E4      		ldi r27,hhi8(0x42c80000)
 2297 0af8 8F83      		std Y+7,r24
 2298 0afa 9887      		std Y+8,r25
 2299 0afc A987      		std Y+9,r26
 2300 0afe BA87      		std Y+10,r27
 2301               	.LBB35:
 2303               	.LM166:
 2304 0b00 20E0      		ldi r18,lo8(0x437a0000)
 2305 0b02 30E0      		ldi r19,hi8(0x437a0000)
 2306 0b04 4AE7      		ldi r20,hlo8(0x437a0000)
 2307 0b06 53E4      		ldi r21,hhi8(0x437a0000)
 2308 0b08 6F81      		ldd r22,Y+7
 2309 0b0a 7885      		ldd r23,Y+8
 2310 0b0c 8985      		ldd r24,Y+9
 2311 0b0e 9A85      		ldd r25,Y+10
 2312 0b10 00D0      		rcall __mulsf3
 2313 0b12 DC01      		movw r26,r24
 2314 0b14 CB01      		movw r24,r22
 2315 0b16 8983      		std Y+1,r24
 2316 0b18 9A83      		std Y+2,r25
 2317 0b1a AB83      		std Y+3,r26
 2318 0b1c BC83      		std Y+4,r27
 2320               	.LM167:
 2321 0b1e 20E0      		ldi r18,lo8(0x3f800000)
 2322 0b20 30E0      		ldi r19,hi8(0x3f800000)
 2323 0b22 40E8      		ldi r20,hlo8(0x3f800000)
 2324 0b24 5FE3      		ldi r21,hhi8(0x3f800000)
 2325 0b26 6981      		ldd r22,Y+1
 2326 0b28 7A81      		ldd r23,Y+2
 2327 0b2a 8B81      		ldd r24,Y+3
 2328 0b2c 9C81      		ldd r25,Y+4
 2329 0b2e 00D0      		rcall __ltsf2
 2330 0b30 8823      		tst r24
 2331 0b32 0CF0      		brlt .L116
 2332 0b34 05C0      		rjmp .L115
 2333               	.L116:
 2335               	.LM168:
 2336 0b36 81E0      		ldi r24,lo8(1)
 2337 0b38 90E0      		ldi r25,hi8(1)
 2338 0b3a 9C87      		std Y+12,r25
 2339 0b3c 8B87      		std Y+11,r24
 2340 0b3e 18C0      		rjmp .L117
 2341               	.L115:
 2343               	.LM169:
 2344 0b40 20E0      		ldi r18,lo8(0x477fff00)
 2345 0b42 3FEF      		ldi r19,hi8(0x477fff00)
 2346 0b44 4FE7      		ldi r20,hlo8(0x477fff00)
 2347 0b46 57E4      		ldi r21,hhi8(0x477fff00)
 2348 0b48 6981      		ldd r22,Y+1
 2349 0b4a 7A81      		ldd r23,Y+2
 2350 0b4c 8B81      		ldd r24,Y+3
 2351 0b4e 9C81      		ldd r25,Y+4
 2352 0b50 00D0      		rcall __gtsf2
 2353 0b52 1816      		cp __zero_reg__,r24
 2354 0b54 0CF0      		brlt .L119
 2355 0b56 03C0      		rjmp .L118
 2356               	.L119:
 2358               	.LM170:
 2359 0b58 1C86      		std Y+12,__zero_reg__
 2360 0b5a 1B86      		std Y+11,__zero_reg__
 2361 0b5c 09C0      		rjmp .L117
 2362               	.L118:
 2364               	.LM171:
 2365 0b5e 6981      		ldd r22,Y+1
 2366 0b60 7A81      		ldd r23,Y+2
 2367 0b62 8B81      		ldd r24,Y+3
 2368 0b64 9C81      		ldd r25,Y+4
 2369 0b66 00D0      		rcall __fixunssfsi
 2370 0b68 DC01      		movw r26,r24
 2371 0b6a CB01      		movw r24,r22
 2372 0b6c 9C87      		std Y+12,r25
 2373 0b6e 8B87      		std Y+11,r24
 2374               	.L117:
 2375               	.LBB36:
 2377               	.LM172:
 2378 0b70 8B85      		ldd r24,Y+11
 2379 0b72 9C85      		ldd r25,Y+12
 2380 0b74 9E83      		std Y+6,r25
 2381 0b76 8D83      		std Y+5,r24
 2382               	.LBB37:
 2384               	.LM173:
 2385 0b78 8D81      		ldd r24,Y+5
 2386 0b7a 9E81      		ldd r25,Y+6
 2387               	/* #APP */
 2388 0b7c 0197      		1: sbiw r24,1
 2389 0b7e F1F7      		brne 1b
 2390               	/* #NOAPP */
 2391 0b80 9E83      		std Y+6,r25
 2392 0b82 8D83      		std Y+5,r24
 2393               	.L105:
 2394               	.LBE37:
 2395               	.LBE36:
 2396               	.LBE35:
 2397               	.LBE34:
 2398               	/* epilogue: frame size=12 */
 2399 0b84 2C96      		adiw r28,12
 2400 0b86 0FB6      		in __tmp_reg__,__SREG__
 2401 0b88 F894      		cli
 2402 0b8a DEBF      		out __SP_H__,r29
 2403 0b8c 0FBE      		out __SREG__,__tmp_reg__
 2404 0b8e CDBF      		out __SP_L__,r28
 2405 0b90 DF91      		pop r29
 2406 0b92 CF91      		pop r28
 2407 0b94 0895      		ret
 2408               	/* epilogue end (size=9) */
 2409               	/* function TestRunningChronometer size 184 (165) */
 2431               	.Lscope18:
 2433               	.global	init
 2435               	init:
 2437               	.Ltext18:
 261:ledmeter.c    ****         _delay_ms(100);
 262:ledmeter.c    ****     }
 263:ledmeter.c    **** }
 264:ledmeter.c    **** 
 265:ledmeter.c    **** 
 266:ledmeter.c    **** /*
 267:ledmeter.c    ****  *  init function
 268:ledmeter.c    ****  */
 269:ledmeter.c    **** void init() {
 2439               	.LM174:
 2440               	/* prologue: frame size=2 */
 2441 0b96 CF93      		push r28
 2442 0b98 DF93      		push r29
 2443 0b9a CDB7      		in r28,__SP_L__
 2444 0b9c DEB7      		in r29,__SP_H__
 2445 0b9e 2297      		sbiw r28,2
 2446 0ba0 0FB6      		in __tmp_reg__,__SREG__
 2447 0ba2 F894      		cli
 2448 0ba4 DEBF      		out __SP_H__,r29
 2449 0ba6 0FBE      		out __SREG__,__tmp_reg__
 2450 0ba8 CDBF      		out __SP_L__,r28
 2451               	/* prologue end (size=10) */
 270:ledmeter.c    ****    // ******************
 271:ledmeter.c    ****    // * WatchDog Timer *
 272:ledmeter.c    ****    // ******************
 273:ledmeter.c    **** 
 274:ledmeter.c    **** 
 275:ledmeter.c    ****    // ********
 276:ledmeter.c    ****    // * LEDs *
 277:ledmeter.c    ****    // ********
 278:ledmeter.c    ****    DDRC=0xFF; // set up PORTD pins 0 to 7 as output
 2453               	.LM175:
 2454 0baa 8FEF      		ldi r24,lo8(-1)
 2455 0bac 8093 3400 		sts 52,r24
 279:ledmeter.c    ****    //switch_on_all_leds();
 280:ledmeter.c    ****    switch_off_all_leds();
 2457               	.LM176:
 2458 0bb0 68DB      		rcall switch_off_all_leds
 281:ledmeter.c    **** 
 282:ledmeter.c    ****    // *********************************
 283:ledmeter.c    ****    // * Start/Stop chronometer (INT0) *
 284:ledmeter.c    ****    // *********************************
 285:ledmeter.c    ****    // Set Pin 6 (PD2) as the pin to use for this example
 286:ledmeter.c    ****    //PCMSK |= (1<<PIND2); // TO FIX
 287:ledmeter.c    ****    //PIND |= (1<<PIND2); // try scls:Error : read-only !!!
 288:ledmeter.c    **** 
 289:ledmeter.c    ****    // interrupt on INT0 pin falling edge (sensor triggered)
 290:ledmeter.c    ****    MCUCR = (1<<ISC01) | (1<<ISC00);
 2460               	.LM177:
 2461 0bb2 83E0      		ldi r24,lo8(3)
 2462 0bb4 8093 5500 		sts 85,r24
 291:ledmeter.c    **** 
 292:ledmeter.c    ****    // turn on interrupts!
 293:ledmeter.c    **** 
 294:ledmeter.c    ****    GICR |= (1<<INT0); //INT0
 2464               	.LM178:
 2465 0bb8 8091 5B00 		lds r24,91
 2466 0bbc 8064      		ori r24,lo8(64)
 2467 0bbe 8093 5B00 		sts 91,r24
 295:ledmeter.c    **** 
 296:ledmeter.c    ****    sei(); // enable interrupts
 2469               	.LM179:
 2470               	/* #APP */
 2471 0bc2 7894      		sei
 297:ledmeter.c    **** 
 298:ledmeter.c    ****    // *************************************************
 299:ledmeter.c    ****    // * Conv Analog to Digital (CAN for RPM and Temp) *
 300:ledmeter.c    ****    // *************************************************
 301:ledmeter.c    **** 
 302:ledmeter.c    ****    //volatile static int analog_result;
 303:ledmeter.c    ****    //volatile static unsigned char analog_busy;
 304:ledmeter.c    **** 
 305:ledmeter.c    ****    //analog_busy=1; // busy mark the ADC function
 306:ledmeter.c    ****    int channel = 0; // measure ADC0
 2473               	.LM180:
 2474               	/* #NOAPP */
 2475 0bc4 1A82      		std Y+2,__zero_reg__
 2476 0bc6 1982      		std Y+1,__zero_reg__
 307:ledmeter.c    **** 
 308:ledmeter.c    ****    // use internal 2.56V ref  REFS1=1 & REFS0=1 (11)
 309:ledmeter.c    ****    // use external ref (01)
 310:ledmeter.c    ****    ADMUX=(0<<REFS1)|(1<<REFS0)|(channel & 0x07); // channel & 0x07
 2478               	.LM181:
 2479 0bc8 8981      		ldd r24,Y+1
 2480 0bca 8770      		andi r24,lo8(7)
 2481 0bcc 8064      		ori r24,lo8(64)
 2482 0bce 8093 2700 		sts 39,r24
 311:ledmeter.c    **** 
 312:ledmeter.c    ****    //ADCSRA=(1<<ADEN)|(1<<ADIE)|(1<<ADIF)|(1<<ADPS2); // interrupt ADIE=1
 313:ledmeter.c    ****    ADCSRA=(1<<ADEN)|(0<<ADIE)|(1<<ADIF)|(1<<ADPS2); // no interrupt ADIE=0
 2484               	.LM182:
 2485 0bd2 84E9      		ldi r24,lo8(-108)
 2486 0bd4 8093 2600 		sts 38,r24
 314:ledmeter.c    **** 
 315:ledmeter.c    ****    ADCSRA |= (1 << (ADSC)); // start conversion
 2488               	.LM183:
 2489 0bd8 8091 2600 		lds r24,38
 2490 0bdc 8064      		ori r24,lo8(64)
 2491 0bde 8093 2600 		sts 38,r24
 316:ledmeter.c    **** 
 317:ledmeter.c    ****    DDRA=0x00;
 2493               	.LM184:
 2494 0be2 1092 3A00 		sts 58,__zero_reg__
 318:ledmeter.c    **** 	// make sure pull-up resistors are turned off
 319:ledmeter.c    **** 	PORTA = 0x00;
 2496               	.LM185:
 2497 0be6 1092 3B00 		sts 59,__zero_reg__
 320:ledmeter.c    **** 	
 321:ledmeter.c    **** 
 322:ledmeter.c    ****    // **********
 323:ledmeter.c    ****    // * Keypad *
 324:ledmeter.c    ****    // **********
 325:ledmeter.c    ****    // 1 joystick button (4 directions, up, down, left, right)
 326:ledmeter.c    ****    // 2 push buttons (ok, cancel)
 327:ledmeter.c    ****    DDRB=0x00;
 2499               	.LM186:
 2500 0bea 1092 3700 		sts 55,__zero_reg__
 328:ledmeter.c    ****    PORTB=0xFF;
 2502               	.LM187:
 2503 0bee 8FEF      		ldi r24,lo8(-1)
 2504 0bf0 8093 3800 		sts 56,r24
 329:ledmeter.c    **** 
 330:ledmeter.c    ****    // ***************
 331:ledmeter.c    ****    // * Graphic LCD *
 332:ledmeter.c    ****    // ***************
 333:ledmeter.c    **** 
 334:ledmeter.c    ****    // Sound
 335:ledmeter.c    ****    beep(3,300);
 2506               	.LM188:
 2507 0bf4 40E0      		ldi r20,lo8(0x43960000)
 2508 0bf6 50E0      		ldi r21,hi8(0x43960000)
 2509 0bf8 66E9      		ldi r22,hlo8(0x43960000)
 2510 0bfa 73E4      		ldi r23,hhi8(0x43960000)
 2511 0bfc 83E0      		ldi r24,lo8(3)
 2512 0bfe 90E0      		ldi r25,hi8(3)
 2513 0c00 75DE      		rcall beep
 336:ledmeter.c    **** 
 337:ledmeter.c    ****    // Time
 338:ledmeter.c    ****    running_chronometer = FALSE;
 2515               	.LM189:
 2516 0c02 1092 0000 		sts (running_chronometer)+1,__zero_reg__
 2517 0c06 1092 0000 		sts running_chronometer,__zero_reg__
 339:ledmeter.c    ****    init_time(current_time);
 2519               	.LM190:
 2520 0c0a 2091 0000 		lds r18,current_time
 2521 0c0e 3091 0000 		lds r19,current_time+1
 2522 0c12 4091 0000 		lds r20,current_time+2
 2523 0c16 5091 0000 		lds r21,current_time+3
 2524 0c1a 6091 0000 		lds r22,current_time+4
 2525 0c1e 7091 0000 		lds r23,current_time+5
 2526 0c22 8091 0000 		lds r24,current_time+6
 2527 0c26 9091 0000 		lds r25,current_time+7
 2528 0c2a EAD9      		rcall init_time
 340:ledmeter.c    ****    init_time(last_time);
 2530               	.LM191:
 2531 0c2c 2091 0000 		lds r18,last_time
 2532 0c30 3091 0000 		lds r19,last_time+1
 2533 0c34 4091 0000 		lds r20,last_time+2
 2534 0c38 5091 0000 		lds r21,last_time+3
 2535 0c3c 6091 0000 		lds r22,last_time+4
 2536 0c40 7091 0000 		lds r23,last_time+5
 2537 0c44 8091 0000 		lds r24,last_time+6
 2538 0c48 9091 0000 		lds r25,last_time+7
 2539 0c4c D9D9      		rcall init_time
 341:ledmeter.c    ****    init_time(best_time);
 2541               	.LM192:
 2542 0c4e 2091 0000 		lds r18,best_time
 2543 0c52 3091 0000 		lds r19,best_time+1
 2544 0c56 4091 0000 		lds r20,best_time+2
 2545 0c5a 5091 0000 		lds r21,best_time+3
 2546 0c5e 6091 0000 		lds r22,best_time+4
 2547 0c62 7091 0000 		lds r23,best_time+5
 2548 0c66 8091 0000 		lds r24,best_time+6
 2549 0c6a 9091 0000 		lds r25,best_time+7
 2550 0c6e C8D9      		rcall init_time
 2551               	/* epilogue: frame size=2 */
 2552 0c70 2296      		adiw r28,2
 2553 0c72 0FB6      		in __tmp_reg__,__SREG__
 2554 0c74 F894      		cli
 2555 0c76 DEBF      		out __SP_H__,r29
 2556 0c78 0FBE      		out __SREG__,__tmp_reg__
 2557 0c7a CDBF      		out __SP_L__,r28
 2558 0c7c DF91      		pop r29
 2559 0c7e CF91      		pop r28
 2560 0c80 0895      		ret
 2561               	/* epilogue end (size=9) */
 2562               	/* function init size 119 (100) */
 2567               	.Lscope19:
 2570               	.global	adcConvert10bit
 2572               	adcConvert10bit:
 342:ledmeter.c    **** 
 343:ledmeter.c    **** }
 344:ledmeter.c    **** 
 345:ledmeter.c    **** /*
 346:ledmeter.c    ****  * convert from analog to digital (10 bits)
 347:ledmeter.c    ****  */
 348:ledmeter.c    **** unsigned short adcConvert10bit(unsigned char ch)
 349:ledmeter.c    **** {
 2574               	.LM193:
 2575               	/* prologue: frame size=1 */
 2576 0c82 CF93      		push r28
 2577 0c84 DF93      		push r29
 2578 0c86 CDB7      		in r28,__SP_L__
 2579 0c88 DEB7      		in r29,__SP_H__
 2580 0c8a 2197      		sbiw r28,1
 2581 0c8c 0FB6      		in __tmp_reg__,__SREG__
 2582 0c8e F894      		cli
 2583 0c90 DEBF      		out __SP_H__,r29
 2584 0c92 0FBE      		out __SREG__,__tmp_reg__
 2585 0c94 CDBF      		out __SP_L__,r28
 2586               	/* prologue end (size=10) */
 2587 0c96 8983      		std Y+1,r24
 350:ledmeter.c    **** 	//a2dCompleteFlag = 0;				// clear conversion complete flag
 351:ledmeter.c    **** 	ADMUX = ((ADMUX) & ~0x1F) | (ch & 0x1F);	// set channel ADC_MUX_MASK=0x1F
 2589               	.LM194:
 2590 0c98 8091 2700 		lds r24,39
 2591 0c9c 982F      		mov r25,r24
 2592 0c9e 907E      		andi r25,lo8(-32)
 2593 0ca0 8981      		ldd r24,Y+1
 2594 0ca2 8F71      		andi r24,lo8(31)
 2595 0ca4 892B      		or r24,r25
 2596 0ca6 8093 2700 		sts 39,r24
 352:ledmeter.c    **** 	ADCSRA |= (_BV(ADIF)); // clear hardware "conversion complete" flag
 2598               	.LM195:
 2599 0caa 8091 2600 		lds r24,38
 2600 0cae 8061      		ori r24,lo8(16)
 2601 0cb0 8093 2600 		sts 38,r24
 353:ledmeter.c    **** 	ADCSRA |= (_BV(ADSC)); // start conversion
 2603               	.LM196:
 2604 0cb4 8091 2600 		lds r24,38
 2605 0cb8 8064      		ori r24,lo8(64)
 2606 0cba 8093 2600 		sts 38,r24
 2607               	.L125:
 354:ledmeter.c    **** 							
 355:ledmeter.c    **** 	//while(!a2dCompleteFlag);				// wait until conversion complete
 356:ledmeter.c    **** 	//while( bit_is_clear(ADCSR, ADIF) );		// wait until conversion complete
 357:ledmeter.c    **** 	while( bit_is_set(ADCSRA, ADSC) );		// wait until conversion complete
 2609               	.LM197:
 2610 0cbe 8091 2600 		lds r24,38
 2611 0cc2 9927      		clr r25
 2612 0cc4 8074      		andi r24,lo8(64)
 2613 0cc6 9070      		andi r25,hi8(64)
 2614 0cc8 0097      		sbiw r24,0
 2615 0cca 09F0      		breq .L126
 2616 0ccc F8CF      		rjmp .L125
 2617               	.L126:
 358:ledmeter.c    **** 
 359:ledmeter.c    **** 	// CAUTION: MUST READ ADCL BEFORE ADCH!!!
 360:ledmeter.c    **** 	return ((ADCL) | ((ADCH)<<8));	// read ADC (full 10 bits);
 2619               	.LM198:
 2620 0cce 8091 2400 		lds r24,36
 2621 0cd2 282F      		mov r18,r24
 2622 0cd4 3327      		clr r19
 2623 0cd6 8091 2500 		lds r24,37
 2624 0cda 9927      		clr r25
 2625 0cdc 982F      		mov r25,r24
 2626 0cde 8827      		clr r24
 2627 0ce0 282B      		or r18,r24
 2628 0ce2 392B      		or r19,r25
 2629 0ce4 C901      		movw r24,r18
 2630               	/* epilogue: frame size=1 */
 2631 0ce6 2196      		adiw r28,1
 2632 0ce8 0FB6      		in __tmp_reg__,__SREG__
 2633 0cea F894      		cli
 2634 0cec DEBF      		out __SP_H__,r29
 2635 0cee 0FBE      		out __SREG__,__tmp_reg__
 2636 0cf0 CDBF      		out __SP_L__,r28
 2637 0cf2 DF91      		pop r29
 2638 0cf4 CF91      		pop r28
 2639 0cf6 0895      		ret
 2640               	/* epilogue end (size=9) */
 2641               	/* function adcConvert10bit size 59 (40) */
 2643               	.Lscope20:
 2646               	.global	adcConvert8bit
 2648               	adcConvert8bit:
 361:ledmeter.c    **** }
 362:ledmeter.c    **** 
 363:ledmeter.c    **** /*
 364:ledmeter.c    ****  * convert from analog to digital (8 bits)
 365:ledmeter.c    ****  * starts conversion, waits until conversion is done, and returns result
 366:ledmeter.c    ****  */
 367:ledmeter.c    **** unsigned char adcConvert8bit(unsigned char ch)
 368:ledmeter.c    **** {
 2650               	.LM199:
 2651               	/* prologue: frame size=1 */
 2652 0cf8 CF93      		push r28
 2653 0cfa DF93      		push r29
 2654 0cfc CDB7      		in r28,__SP_L__
 2655 0cfe DEB7      		in r29,__SP_H__
 2656 0d00 2197      		sbiw r28,1
 2657 0d02 0FB6      		in __tmp_reg__,__SREG__
 2658 0d04 F894      		cli
 2659 0d06 DEBF      		out __SP_H__,r29
 2660 0d08 0FBE      		out __SREG__,__tmp_reg__
 2661 0d0a CDBF      		out __SP_L__,r28
 2662               	/* prologue end (size=10) */
 2663 0d0c 8983      		std Y+1,r24
 369:ledmeter.c    **** 	// do 10-bit conversion and return highest 8 bits
 370:ledmeter.c    **** 	return adcConvert10bit(ch)>>2;			// return ADC MSB byte
 2665               	.LM200:
 2666 0d0e 8981      		ldd r24,Y+1
 2667 0d10 B8DF      		rcall adcConvert10bit
 2668 0d12 9695      		lsr r25
 2669 0d14 8795      		ror r24
 2670 0d16 9695      		lsr r25
 2671 0d18 8795      		ror r24
 2672 0d1a 9927      		clr r25
 2673               	/* epilogue: frame size=1 */
 2674 0d1c 2196      		adiw r28,1
 2675 0d1e 0FB6      		in __tmp_reg__,__SREG__
 2676 0d20 F894      		cli
 2677 0d22 DEBF      		out __SP_H__,r29
 2678 0d24 0FBE      		out __SREG__,__tmp_reg__
 2679 0d26 CDBF      		out __SP_L__,r28
 2680 0d28 DF91      		pop r29
 2681 0d2a CF91      		pop r28
 2682 0d2c 0895      		ret
 2683               	/* epilogue end (size=9) */
 2684               	/* function adcConvert8bit size 27 (8) */
 2686               	.Lscope21:
 2688               	.global	SeekButtons
 2690               	SeekButtons:
 371:ledmeter.c    **** }
 372:ledmeter.c    **** 
 373:ledmeter.c    **** #define Nbuts 6
 374:ledmeter.c    **** #define B_LEFT 0
 375:ledmeter.c    **** #define B_RIGHT 1
 376:ledmeter.c    **** #define B_UP 2
 377:ledmeter.c    **** #define B_DOWN 3
 378:ledmeter.c    **** #define B_OK 4
 379:ledmeter.c    **** #define B_CANCEL 5
 380:ledmeter.c    **** 
 381:ledmeter.c    **** void SeekButtons(void) {
 2692               	.LM201:
 2693               	/* prologue: frame size=4 */
 2694 0d2e CF93      		push r28
 2695 0d30 DF93      		push r29
 2696 0d32 CDB7      		in r28,__SP_L__
 2697 0d34 DEB7      		in r29,__SP_H__
 2698 0d36 2497      		sbiw r28,4
 2699 0d38 0FB6      		in __tmp_reg__,__SREG__
 2700 0d3a F894      		cli
 2701 0d3c DEBF      		out __SP_H__,r29
 2702 0d3e 0FBE      		out __SREG__,__tmp_reg__
 2703 0d40 CDBF      		out __SP_L__,r28
 2704               	/* prologue end (size=10) */
 382:ledmeter.c    ****     int bstate = 0;
 2706               	.LM202:
 2707 0d42 1A82      		std Y+2,__zero_reg__
 2708 0d44 1982      		std Y+1,__zero_reg__
 383:ledmeter.c    ****     int i;
 384:ledmeter.c    **** 	 for (i=0; i<=Nbuts-1; i++) {
 2710               	.LM203:
 2711 0d46 1C82      		std Y+4,__zero_reg__
 2712 0d48 1B82      		std Y+3,__zero_reg__
 2713               	.L129:
 2715               	.LM204:
 2716 0d4a 8B81      		ldd r24,Y+3
 2717 0d4c 9C81      		ldd r25,Y+4
 2718 0d4e 8630      		cpi r24,6
 2719 0d50 9105      		cpc r25,__zero_reg__
 2720 0d52 14F5      		brge .L128
 385:ledmeter.c    **** 	     if ( (PINB>>i) == 0 ) {
 2722               	.LM205:
 2723 0d54 8091 3600 		lds r24,54
 2724 0d58 9927      		clr r25
 2725 0d5a 0B80      		ldd r0,Y+3
 2726 0d5c 02C0      		rjmp 2f
 2727 0d5e 9595      	1:	asr r25
 2728 0d60 8795      		ror r24
 2729 0d62 0A94      	2:	dec r0
 2730 0d64 E2F7      		brpl 1b
 2731 0d66 0097      		sbiw r24,0
 2732 0d68 29F4      		brne .L132
 386:ledmeter.c    **** 	         bstate = TRUE;
 2734               	.LM206:
 2735 0d6a 8FEF      		ldi r24,lo8(-1)
 2736 0d6c 9FEF      		ldi r25,hi8(-1)
 2737 0d6e 9A83      		std Y+2,r25
 2738 0d70 8983      		std Y+1,r24
 2739 0d72 02C0      		rjmp .L133
 2740               	.L132:
 387:ledmeter.c    **** 	     } else {
 388:ledmeter.c    **** 	         bstate = FALSE;
 2742               	.LM207:
 2743 0d74 1A82      		std Y+2,__zero_reg__
 2744 0d76 1982      		std Y+1,__zero_reg__
 2745               	.L133:
 389:ledmeter.c    **** 	     }
 390:ledmeter.c    **** 		
 391:ledmeter.c    **** 	     if ( i==0 && bstate ) { // LEFT
 392:ledmeter.c    **** 
 393:ledmeter.c    **** 	     }
 394:ledmeter.c    **** 	     if ( i==1 && bstate ) { // RIGHT
 395:ledmeter.c    **** 
 396:ledmeter.c    **** 	     }
 397:ledmeter.c    **** 	     if ( i==2 && bstate ) { // UP
 398:ledmeter.c    **** 
 399:ledmeter.c    **** 	     }
 400:ledmeter.c    **** 	     if ( i==3 && bstate ) { // DOWN
 401:ledmeter.c    **** 
 402:ledmeter.c    **** 	     }
 403:ledmeter.c    **** 	     if ( i==4 && bstate ) { // OK
 2747               	.LM208:
 2748 0d78 8B81      		ldd r24,Y+3
 2749 0d7a 9C81      		ldd r25,Y+4
 2750 0d7c 8430      		cpi r24,4
 2751 0d7e 9105      		cpc r25,__zero_reg__
 2752 0d80 29F4      		brne .L138
 2753 0d82 8981      		ldd r24,Y+1
 2754 0d84 9A81      		ldd r25,Y+2
 2755 0d86 0097      		sbiw r24,0
 2756 0d88 09F0      		breq .L138
 404:ledmeter.c    ****             StartStopChronometer();
 2758               	.LM209:
 2759 0d8a 2BDE      		rcall StartStopChronometer
 2760               	.L138:
 2762               	.LM210:
 2763 0d8c 8B81      		ldd r24,Y+3
 2764 0d8e 9C81      		ldd r25,Y+4
 2765 0d90 0196      		adiw r24,1
 2766 0d92 9C83      		std Y+4,r25
 2767 0d94 8B83      		std Y+3,r24
 2768 0d96 D9CF      		rjmp .L129
 2769               	.L128:
 2770               	/* epilogue: frame size=4 */
 2771 0d98 2496      		adiw r28,4
 2772 0d9a 0FB6      		in __tmp_reg__,__SREG__
 2773 0d9c F894      		cli
 2774 0d9e DEBF      		out __SP_H__,r29
 2775 0da0 0FBE      		out __SREG__,__tmp_reg__
 2776 0da2 CDBF      		out __SP_L__,r28
 2777 0da4 DF91      		pop r29
 2778 0da6 CF91      		pop r28
 2779 0da8 0895      		ret
 2780               	/* epilogue end (size=9) */
 2781               	/* function SeekButtons size 62 (43) */
 2787               	.Lscope22:
 2789               	.global	loop
 2791               	loop:
 405:ledmeter.c    **** 	     }
 406:ledmeter.c    **** 	     if ( i==5 && bstate ) { // CANCEL
 407:ledmeter.c    **** 
 408:ledmeter.c    **** 	     }	     	     	     	
 409:ledmeter.c    **** 	}
 410:ledmeter.c    **** }
 411:ledmeter.c    **** 
 412:ledmeter.c    **** /*
 413:ledmeter.c    ****  *  this is the main loop
 414:ledmeter.c    ****  */
 415:ledmeter.c    **** void loop(void) {
 2793               	.LM211:
 2794               	/* prologue: frame size=8 */
 2795 0daa 0F93      		push r16
 2796 0dac 1F93      		push r17
 2797 0dae CF93      		push r28
 2798 0db0 DF93      		push r29
 2799 0db2 CDB7      		in r28,__SP_L__
 2800 0db4 DEB7      		in r29,__SP_H__
 2801 0db6 2897      		sbiw r28,8
 2802 0db8 0FB6      		in __tmp_reg__,__SREG__
 2803 0dba F894      		cli
 2804 0dbc DEBF      		out __SP_H__,r29
 2805 0dbe 0FBE      		out __SREG__,__tmp_reg__
 2806 0dc0 CDBF      		out __SP_L__,r28
 2807               	/* prologue end (size=12) */
 416:ledmeter.c    ****     SeekButtons();
 2809               	.LM212:
 2810 0dc2 B5DF      		rcall SeekButtons
 417:ledmeter.c    **** 
 418:ledmeter.c    ****     double ch0 = adcConvert10bit(0);
 2812               	.LM213:
 2813 0dc4 80E0      		ldi r24,lo8(0)
 2814 0dc6 5DDF      		rcall adcConvert10bit
 2815 0dc8 8C01      		movw r16,r24
 2816 0dca C801      		movw r24,r16
 2817 0dcc AA27      		clr r26
 2818 0dce 97FD      		sbrc r25,7
 2819 0dd0 A095      		com r26
 2820 0dd2 BA2F      		mov r27,r26
 2821 0dd4 BC01      		movw r22,r24
 2822 0dd6 CD01      		movw r24,r26
 2823 0dd8 00D0      		rcall __floatsisf
 2824 0dda 6D83      		std Y+5,r22
 2825 0ddc 7E83      		std Y+6,r23
 2826 0dde 8F83      		std Y+7,r24
 2827 0de0 9887      		std Y+8,r25
 2828 0de2 1123      		tst r17
 2829 0de4 7CF4      		brge .L141
 2831               	.LM214:
 2832 0de6 20E0      		ldi r18,lo8(0x47800000)
 2833 0de8 30E0      		ldi r19,hi8(0x47800000)
 2834 0dea 40E8      		ldi r20,hlo8(0x47800000)
 2835 0dec 57E4      		ldi r21,hhi8(0x47800000)
 2836 0dee 6D81      		ldd r22,Y+5
 2837 0df0 7E81      		ldd r23,Y+6
 2838 0df2 8F81      		ldd r24,Y+7
 2839 0df4 9885      		ldd r25,Y+8
 2840 0df6 00D0      		rcall __addsf3
 2841 0df8 DC01      		movw r26,r24
 2842 0dfa CB01      		movw r24,r22
 2843 0dfc 8D83      		std Y+5,r24
 2844 0dfe 9E83      		std Y+6,r25
 2845 0e00 AF83      		std Y+7,r26
 2846 0e02 B887      		std Y+8,r27
 2847               	.L141:
 2848 0e04 8D81      		ldd r24,Y+5
 2849 0e06 9E81      		ldd r25,Y+6
 2850 0e08 AF81      		ldd r26,Y+7
 2851 0e0a B885      		ldd r27,Y+8
 2852 0e0c 8983      		std Y+1,r24
 2853 0e0e 9A83      		std Y+2,r25
 2854 0e10 AB83      		std Y+3,r26
 2855 0e12 BC83      		std Y+4,r27
 419:ledmeter.c    ****     ch0 *= 0.09765625; // 0.09765625 = 100 / 2^10
 2857               	.LM215:
 2858 0e14 20E0      		ldi r18,lo8(0x3dc80000)
 2859 0e16 30E0      		ldi r19,hi8(0x3dc80000)
 2860 0e18 48EC      		ldi r20,hlo8(0x3dc80000)
 2861 0e1a 5DE3      		ldi r21,hhi8(0x3dc80000)
 2862 0e1c 6981      		ldd r22,Y+1
 2863 0e1e 7A81      		ldd r23,Y+2
 2864 0e20 8B81      		ldd r24,Y+3
 2865 0e22 9C81      		ldd r25,Y+4
 2866 0e24 00D0      		rcall __mulsf3
 2867 0e26 DC01      		movw r26,r24
 2868 0e28 CB01      		movw r24,r22
 2869 0e2a 8983      		std Y+1,r24
 2870 0e2c 9A83      		std Y+2,r25
 2871 0e2e AB83      		std Y+3,r26
 2872 0e30 BC83      		std Y+4,r27
 420:ledmeter.c    ****     show_percent(ch0);
 2874               	.LM216:
 2875 0e32 6981      		ldd r22,Y+1
 2876 0e34 7A81      		ldd r23,Y+2
 2877 0e36 8B81      		ldd r24,Y+3
 2878 0e38 9C81      		ldd r25,Y+4
 2879 0e3a 25DD      		rcall show_percent
 421:ledmeter.c    **** 
 422:ledmeter.c    **** /*
 423:ledmeter.c    ****     _delay_ms(500);
 424:ledmeter.c    **** 
 425:ledmeter.c    ****     double ch1 = adcConvert10bit(1);
 426:ledmeter.c    ****     ch1 *= 0.09765625; // 0.09765625 = 100 / 2^10
 427:ledmeter.c    ****     show_percent(ch1);
 428:ledmeter.c    **** 
 429:ledmeter.c    ****     _delay_ms(500);
 430:ledmeter.c    **** */
 431:ledmeter.c    **** 
 432:ledmeter.c    ****     TestRunningChronometer();
 2881               	.LM217:
 2882 0e3c F8DD      		rcall TestRunningChronometer
 433:ledmeter.c    **** 
 434:ledmeter.c    ****     inc_time(current_time);
 2884               	.LM218:
 2885 0e3e 2091 0000 		lds r18,current_time
 2886 0e42 3091 0000 		lds r19,current_time+1
 2887 0e46 4091 0000 		lds r20,current_time+2
 2888 0e4a 5091 0000 		lds r21,current_time+3
 2889 0e4e 6091 0000 		lds r22,current_time+4
 2890 0e52 7091 0000 		lds r23,current_time+5
 2891 0e56 8091 0000 		lds r24,current_time+6
 2892 0e5a 9091 0000 		lds r25,current_time+7
 2893 0e5e 6BD9      		rcall inc_time
 2894               	/* epilogue: frame size=8 */
 2895 0e60 2896      		adiw r28,8
 2896 0e62 0FB6      		in __tmp_reg__,__SREG__
 2897 0e64 F894      		cli
 2898 0e66 DEBF      		out __SP_H__,r29
 2899 0e68 0FBE      		out __SREG__,__tmp_reg__
 2900 0e6a CDBF      		out __SP_L__,r28
 2901 0e6c DF91      		pop r29
 2902 0e6e CF91      		pop r28
 2903 0e70 1F91      		pop r17
 2904 0e72 0F91      		pop r16
 2905 0e74 0895      		ret
 2906               	/* epilogue end (size=11) */
 2907               	/* function loop size 102 (79) */
 2912               	.Lscope23:
 2914               	.global	main
 2916               	main:
 435:ledmeter.c    **** }
 436:ledmeter.c    **** 
 437:ledmeter.c    **** 
 438:ledmeter.c    **** /*
 439:ledmeter.c    ****  * main program
 440:ledmeter.c    ****  */
 441:ledmeter.c    **** int main(void) {
 2918               	.LM219:
 2919               	/* prologue: frame size=0 */
 2920 0e76 C0E0      		ldi r28,lo8(__stack - 0)
 2921 0e78 D0E0      		ldi r29,hi8(__stack - 0)
 2922 0e7a DEBF      		out __SP_H__,r29
 2923 0e7c CDBF      		out __SP_L__,r28
 2924               	/* prologue end (size=4) */
 442:ledmeter.c    ****     init();
 2926               	.LM220:
 2927 0e7e 8BDE      		rcall init
 2928               	.L143:
 443:ledmeter.c    ****     while(1) { // Infinite loop; define here the
 444:ledmeter.c    ****         loop(); // system behaviour
 2930               	.LM221:
 2931 0e80 94DF      		rcall loop
 2932 0e82 FECF      		rjmp .L143
 2933               	/* epilogue: frame size=0 */
 2934               	/* epilogue: noreturn */
 2935               	/* epilogue end (size=0) */
 2936               	/* function main size 7 (3) */
 2938               	.Lscope24:
 2940               	.global	__vector_1
 2942               	__vector_1:
 445:ledmeter.c    ****     }
 446:ledmeter.c    ****     return 0;
 447:ledmeter.c    **** }
 448:ledmeter.c    **** 
 449:ledmeter.c    **** /*
 450:ledmeter.c    ****  * interrupt handler for INT0
 451:ledmeter.c    ****  */
 452:ledmeter.c    **** SIGNAL(SIG_INTERRUPT0) {
 2944               	.LM222:
 2945               	/* prologue: frame size=0 */
 2946 0e84 1F92      		push __zero_reg__
 2947 0e86 0F92      		push __tmp_reg__
 2948 0e88 0FB6      		in __tmp_reg__,__SREG__
 2949 0e8a 0F92      		push __tmp_reg__
 2950 0e8c 1124      		clr __zero_reg__
 2951 0e8e 2F93      		push r18
 2952 0e90 3F93      		push r19
 2953 0e92 4F93      		push r20
 2954 0e94 5F93      		push r21
 2955 0e96 6F93      		push r22
 2956 0e98 7F93      		push r23
 2957 0e9a 8F93      		push r24
 2958 0e9c 9F93      		push r25
 2959 0e9e AF93      		push r26
 2960 0ea0 BF93      		push r27
 2961 0ea2 EF93      		push r30
 2962 0ea4 FF93      		push r31
 2963 0ea6 CF93      		push r28
 2964 0ea8 DF93      		push r29
 2965 0eaa CDB7      		in r28,__SP_L__
 2966 0eac DEB7      		in r29,__SP_H__
 2967               	/* prologue end (size=21) */
 453:ledmeter.c    ****     StartStopChronometer();
 2969               	.LM223:
 2970 0eae 99DD      		rcall StartStopChronometer
 2971               	/* epilogue: frame size=0 */
 2972 0eb0 DF91      		pop r29
 2973 0eb2 CF91      		pop r28
 2974 0eb4 FF91      		pop r31
 2975 0eb6 EF91      		pop r30
 2976 0eb8 BF91      		pop r27
 2977 0eba AF91      		pop r26
 2978 0ebc 9F91      		pop r25
 2979 0ebe 8F91      		pop r24
 2980 0ec0 7F91      		pop r23
 2981 0ec2 6F91      		pop r22
 2982 0ec4 5F91      		pop r21
 2983 0ec6 4F91      		pop r20
 2984 0ec8 3F91      		pop r19
 2985 0eca 2F91      		pop r18
 2986 0ecc 0F90      		pop __tmp_reg__
 2987 0ece 0FBE      		out __SREG__,__tmp_reg__
 2988 0ed0 0F90      		pop __tmp_reg__
 2989 0ed2 1F90      		pop __zero_reg__
 2990 0ed4 1895      		reti
 2991               	/* epilogue end (size=19) */
 2992               	/* function __vector_1 size 41 (1) */
 2994               	.Lscope25:
 2995               		.comm current_time,8,1
 2996               		.comm last_time,8,1
 2997               		.comm best_time,8,1
 3002               		.text
 3004               	Letext:
 3005               	/* File "ledmeter.c": code 1918 = 0x077e (1418), prologues 265, epilogues 235 */
DEFINED SYMBOLS
                            *ABS*:00000000 ledmeter.c
C:\DOCUME~1\scls\LOCALS~1\Temp/ccemaaaa.s:3      *ABS*:0000003f __SREG__
C:\DOCUME~1\scls\LOCALS~1\Temp/ccemaaaa.s:4      *ABS*:0000003e __SP_H__
C:\DOCUME~1\scls\LOCALS~1\Temp/ccemaaaa.s:5      *ABS*:0000003d __SP_L__
C:\DOCUME~1\scls\LOCALS~1\Temp/ccemaaaa.s:6      *ABS*:00000000 __tmp_reg__
C:\DOCUME~1\scls\LOCALS~1\Temp/ccemaaaa.s:7      *ABS*:00000001 __zero_reg__
C:\DOCUME~1\scls\LOCALS~1\Temp/ccemaaaa.s:79     .bss:00000000 running_chronometer
C:\DOCUME~1\scls\LOCALS~1\Temp/ccemaaaa.s:86     .text:00000000 init_time
C:\DOCUME~1\scls\LOCALS~1\Temp/ccemaaaa.s:144    .text:00000046 copy_time
C:\DOCUME~1\scls\LOCALS~1\Temp/ccemaaaa.s:234    .text:000000cc compare_time
C:\DOCUME~1\scls\LOCALS~1\Temp/ccemaaaa.s:303    .text:00000136 inc_time
C:\DOCUME~1\scls\LOCALS~1\Temp/ccemaaaa.s:544    .text:00000270 switch_on_all_leds
C:\DOCUME~1\scls\LOCALS~1\Temp/ccemaaaa.s:569    .text:00000282 switch_off_all_leds
C:\DOCUME~1\scls\LOCALS~1\Temp/ccemaaaa.s:594    .text:00000296 switch_on_led
C:\DOCUME~1\scls\LOCALS~1\Temp/ccemaaaa.s:660    .text:000002ee switch_off_led
C:\DOCUME~1\scls\LOCALS~1\Temp/ccemaaaa.s:724    .text:00000342 switch_on_leds_with_delay
C:\DOCUME~1\scls\LOCALS~1\Temp/ccemaaaa.s:914    .text:0000042a switch_off_leds_with_delay
C:\DOCUME~1\scls\LOCALS~1\Temp/ccemaaaa.s:1102   .text:00000510 test_leds
C:\DOCUME~1\scls\LOCALS~1\Temp/ccemaaaa.s:1272   .text:000005de switch_on_min_dels
C:\DOCUME~1\scls\LOCALS~1\Temp/ccemaaaa.s:1355   .text:00000642 switch_on_max_dels
C:\DOCUME~1\scls\LOCALS~1\Temp/ccemaaaa.s:1442   .text:000006ac led_alarm
C:\DOCUME~1\scls\LOCALS~1\Temp/ccemaaaa.s:1758   .text:0000082e roundp
C:\DOCUME~1\scls\LOCALS~1\Temp/ccemaaaa.s:1818   .text:00000886 show_percent
C:\DOCUME~1\scls\LOCALS~1\Temp/ccemaaaa.s:1891   .text:000008ec beep
C:\DOCUME~1\scls\LOCALS~1\Temp/ccemaaaa.s:2088   .text:000009e2 StartStopChronometer
C:\DOCUME~1\scls\LOCALS~1\Temp/ccemaaaa.s:2145   .text:00000a2e TestRunningChronometer
C:\DOCUME~1\scls\LOCALS~1\Temp/ccemaaaa.s:2435   .text:00000b96 init
                            *COM*:00000008 current_time
                            *COM*:00000008 last_time
                            *COM*:00000008 best_time
C:\DOCUME~1\scls\LOCALS~1\Temp/ccemaaaa.s:2572   .text:00000c82 adcConvert10bit
C:\DOCUME~1\scls\LOCALS~1\Temp/ccemaaaa.s:2648   .text:00000cf8 adcConvert8bit
C:\DOCUME~1\scls\LOCALS~1\Temp/ccemaaaa.s:2690   .text:00000d2e SeekButtons
C:\DOCUME~1\scls\LOCALS~1\Temp/ccemaaaa.s:2791   .text:00000daa loop
C:\DOCUME~1\scls\LOCALS~1\Temp/ccemaaaa.s:2916   .text:00000e76 main
C:\DOCUME~1\scls\LOCALS~1\Temp/ccemaaaa.s:2942   .text:00000e84 __vector_1
C:\DOCUME~1\scls\LOCALS~1\Temp/ccemaaaa.s:3004   .text:00000ed6 Letext

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
__mulsf3
__ltsf2
__gtsf2
__fixunssfsi
__addsf3
floor
__fixsfsi
__divsf3
__floatsisf
__stack
