   1               		.file	"ledmeter.c"
   2               		.arch atmega8535
   3               	__SREG__ = 0x3f
   4               	__SP_H__ = 0x3e
   5               	__SP_L__ = 0x3d
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.global __do_copy_data
   9               		.global __do_clear_bss
  11               		.text
  12               	.Ltext0:
  83               	.global	running_chronometer
  84               	.global	running_chronometer
  85               		.section .bss
  88               	running_chronometer:
  89 0000 00        		.skip 1,0
  91               		.text
  94               	.global	init_time
  96               	init_time:
   1:ledmeter.c    **** // ***********************************************************
   2:ledmeter.c    **** // Project: OpenChrono
   3:ledmeter.c    **** // Author: Sebastien CELLES
   4:ledmeter.c    **** // Module description: an handhelds device for karts, bike or sport cars
   5:ledmeter.c    **** // ***********************************************************
   6:ledmeter.c    **** 
   7:ledmeter.c    **** #include <avr/io.h> // Most basic include files
   8:ledmeter.c    **** 
   9:ledmeter.c    **** #include <stdint.h> // uint8_t = unsigned char
  10:ledmeter.c    **** 
  11:ledmeter.c    **** #include <stdio.h> // TO FIX (LCD)
  12:ledmeter.c    **** 
  13:ledmeter.c    **** #include <math.h>
  14:ledmeter.c    **** 
  15:ledmeter.c    **** #define F_CPU 1000000UL  // 1 MHz
  16:ledmeter.c    **** #include <util/delay.h>
  17:ledmeter.c    **** 
  18:ledmeter.c    **** //#include <avr/io.h>              // Most basic include files
  19:ledmeter.c    **** #include <avr/interrupt.h>       // Add the necessary ones
  20:ledmeter.c    **** //#include <avr/signal.h>          // here
  21:ledmeter.c    **** 
  22:ledmeter.c    **** #include <stdbool.h>           // boolean
  23:ledmeter.c    **** 
  24:ledmeter.c    **** //volatile unsigned char a2dCompleteFlag;
  25:ledmeter.c    **** 
  26:ledmeter.c    **** //int channel;
  27:ledmeter.c    **** //unsigned short analog_result;
  28:ledmeter.c    **** //int analog_busy;
  29:ledmeter.c    **** 
  30:ledmeter.c    **** #define Nleds 8  // number of leds connected to the uC
  31:ledmeter.c    **** 
  32:ledmeter.c    **** #define N 50 // number between 0 and 255
  33:ledmeter.c    **** #define Nmax 0xFF
  34:ledmeter.c    **** 
  35:ledmeter.c    **** 
  36:ledmeter.c    **** 
  37:ledmeter.c    **** #define CHR_PRECISION 4 // precision 1/10000eme = 1/(10^4)
  38:ledmeter.c    **** #define CHR_DISPLAY 3 // display 1/1000  = 1/(10^3)
  39:ledmeter.c    **** 
  40:ledmeter.c    **** uint8_t running_chronometer = false; // 0 false ; -1 true
  41:ledmeter.c    **** 
  42:ledmeter.c    **** typedef struct {
  43:ledmeter.c    ****     uint8_t hh; //8bits 0-255
  44:ledmeter.c    ****     uint8_t mm; //8bits 0-255
  45:ledmeter.c    ****     uint8_t ss; //8bits 0-255
  46:ledmeter.c    ****     unsigned short int xx;  //16bits 0-65535
  47:ledmeter.c    **** } time_typ;
  48:ledmeter.c    **** 
  49:ledmeter.c    **** time_typ current_time;
  50:ledmeter.c    **** time_typ last_time;
  51:ledmeter.c    **** time_typ best_time;
  52:ledmeter.c    **** 
  53:ledmeter.c    **** void init_time(time_typ * time) {
  98               	.LM1:
  99               	/* prologue: frame size=2 */
 100 0000 CF93      		push r28
 101 0002 DF93      		push r29
 102 0004 CDB7      		in r28,__SP_L__
 103 0006 DEB7      		in r29,__SP_H__
 104 0008 2297      		sbiw r28,2
 105 000a 0FB6      		in __tmp_reg__,__SREG__
 106 000c F894      		cli
 107 000e DEBF      		out __SP_H__,r29
 108 0010 0FBE      		out __SREG__,__tmp_reg__
 109 0012 CDBF      		out __SP_L__,r28
 110               	/* prologue end (size=10) */
 111 0014 9A83      		std Y+2,r25
 112 0016 8983      		std Y+1,r24
  54:ledmeter.c    ****     time->hh = 0;
 114               	.LM2:
 115 0018 E981      		ldd r30,Y+1
 116 001a FA81      		ldd r31,Y+2
 117 001c 1082      		st Z,__zero_reg__
  55:ledmeter.c    ****     time->mm = 0;
 119               	.LM3:
 120 001e E981      		ldd r30,Y+1
 121 0020 FA81      		ldd r31,Y+2
 122 0022 1182      		std Z+1,__zero_reg__
  56:ledmeter.c    ****     time->ss = 0;
 124               	.LM4:
 125 0024 E981      		ldd r30,Y+1
 126 0026 FA81      		ldd r31,Y+2
 127 0028 1282      		std Z+2,__zero_reg__
  57:ledmeter.c    ****     time->xx = 0;
 129               	.LM5:
 130 002a E981      		ldd r30,Y+1
 131 002c FA81      		ldd r31,Y+2
 132 002e 1482      		std Z+4,__zero_reg__
 133 0030 1382      		std Z+3,__zero_reg__
 134               	/* epilogue: frame size=2 */
 135 0032 2296      		adiw r28,2
 136 0034 0FB6      		in __tmp_reg__,__SREG__
 137 0036 F894      		cli
 138 0038 DEBF      		out __SP_H__,r29
 139 003a 0FBE      		out __SREG__,__tmp_reg__
 140 003c CDBF      		out __SP_L__,r28
 141 003e DF91      		pop r29
 142 0040 CF91      		pop r28
 143 0042 0895      		ret
 144               	/* epilogue end (size=9) */
 145               	/* function init_time size 34 (15) */
 147               	.Lscope0:
 154               	.global	def_time
 156               	def_time:
  58:ledmeter.c    **** }
  59:ledmeter.c    **** 
  60:ledmeter.c    **** void def_time(time_typ * time, uint8_t _hh, uint8_t _mm, uint8_t _ss, unsigned short int _xx) {
 158               	.LM6:
 159               	/* prologue: frame size=7 */
 160 0044 0F93      		push r16
 161 0046 1F93      		push r17
 162 0048 CF93      		push r28
 163 004a DF93      		push r29
 164 004c CDB7      		in r28,__SP_L__
 165 004e DEB7      		in r29,__SP_H__
 166 0050 2797      		sbiw r28,7
 167 0052 0FB6      		in __tmp_reg__,__SREG__
 168 0054 F894      		cli
 169 0056 DEBF      		out __SP_H__,r29
 170 0058 0FBE      		out __SREG__,__tmp_reg__
 171 005a CDBF      		out __SP_L__,r28
 172               	/* prologue end (size=12) */
 173 005c 9A83      		std Y+2,r25
 174 005e 8983      		std Y+1,r24
 175 0060 6B83      		std Y+3,r22
 176 0062 4C83      		std Y+4,r20
 177 0064 2D83      		std Y+5,r18
 178 0066 1F83      		std Y+7,r17
 179 0068 0E83      		std Y+6,r16
  61:ledmeter.c    ****     time->hh = _hh;
 181               	.LM7:
 182 006a E981      		ldd r30,Y+1
 183 006c FA81      		ldd r31,Y+2
 184 006e 8B81      		ldd r24,Y+3
 185 0070 8083      		st Z,r24
  62:ledmeter.c    ****     time->mm = _mm;
 187               	.LM8:
 188 0072 E981      		ldd r30,Y+1
 189 0074 FA81      		ldd r31,Y+2
 190 0076 8C81      		ldd r24,Y+4
 191 0078 8183      		std Z+1,r24
  63:ledmeter.c    ****     time->ss = _ss;
 193               	.LM9:
 194 007a E981      		ldd r30,Y+1
 195 007c FA81      		ldd r31,Y+2
 196 007e 8D81      		ldd r24,Y+5
 197 0080 8283      		std Z+2,r24
  64:ledmeter.c    ****     time->xx = _xx;
 199               	.LM10:
 200 0082 E981      		ldd r30,Y+1
 201 0084 FA81      		ldd r31,Y+2
 202 0086 8E81      		ldd r24,Y+6
 203 0088 9F81      		ldd r25,Y+7
 204 008a 9483      		std Z+4,r25
 205 008c 8383      		std Z+3,r24
 206               	/* epilogue: frame size=7 */
 207 008e 2796      		adiw r28,7
 208 0090 0FB6      		in __tmp_reg__,__SREG__
 209 0092 F894      		cli
 210 0094 DEBF      		out __SP_H__,r29
 211 0096 0FBE      		out __SREG__,__tmp_reg__
 212 0098 CDBF      		out __SP_L__,r28
 213 009a DF91      		pop r29
 214 009c CF91      		pop r28
 215 009e 1F91      		pop r17
 216 00a0 0F91      		pop r16
 217 00a2 0895      		ret
 218               	/* epilogue end (size=11) */
 219               	/* function def_time size 48 (25) */
 221               	.Lscope1:
 222               		.data
 223               	.LC0:
 224 0000 3D3D 3D25 		.string	"===%02i:%02i:%02i:%03u===\n"
 224      3032 693A 
 224      2530 3269 
 224      3A25 3032 
 224      693A 2530 
 225               		.text
 228               	.global	print_time
 230               	print_time:
  65:ledmeter.c    **** }
  66:ledmeter.c    **** 
  67:ledmeter.c    **** void print_time(time_typ * t) {
 232               	.LM11:
 233               	/* prologue: frame size=2 */
 234 00a4 CF93      		push r28
 235 00a6 DF93      		push r29
 236 00a8 CDB7      		in r28,__SP_L__
 237 00aa DEB7      		in r29,__SP_H__
 238 00ac 2297      		sbiw r28,2
 239 00ae 0FB6      		in __tmp_reg__,__SREG__
 240 00b0 F894      		cli
 241 00b2 DEBF      		out __SP_H__,r29
 242 00b4 0FBE      		out __SREG__,__tmp_reg__
 243 00b6 CDBF      		out __SP_L__,r28
 244               	/* prologue end (size=10) */
 245 00b8 9A83      		std Y+2,r25
 246 00ba 8983      		std Y+1,r24
  68:ledmeter.c    ****     //printf("===%02i:%02i:%02i:%03u===\n",t->hh,t->mm,t->ss,t->xx/10);
  69:ledmeter.c    ****     printf("===%02i:%02i:%02i:%03u===\n",t->hh,t->mm,t->ss,t->xx/((int) pow(10,CHR_PRECISION-CHR_DI
 248               	.LM12:
 249 00bc E981      		ldd r30,Y+1
 250 00be FA81      		ldd r31,Y+2
 251 00c0 8381      		ldd r24,Z+3
 252 00c2 9481      		ldd r25,Z+4
 253 00c4 2AE0      		ldi r18,lo8(10)
 254 00c6 30E0      		ldi r19,hi8(10)
 255 00c8 B901      		movw r22,r18
 256 00ca 00D0      		rcall __udivmodhi4
 257 00cc CB01      		movw r24,r22
 258 00ce 9F93      		push r25
 259 00d0 8F93      		push r24
 260 00d2 E981      		ldd r30,Y+1
 261 00d4 FA81      		ldd r31,Y+2
 262 00d6 8281      		ldd r24,Z+2
 263 00d8 9927      		clr r25
 264 00da 9F93      		push r25
 265 00dc 8F93      		push r24
 266 00de E981      		ldd r30,Y+1
 267 00e0 FA81      		ldd r31,Y+2
 268 00e2 8181      		ldd r24,Z+1
 269 00e4 9927      		clr r25
 270 00e6 9F93      		push r25
 271 00e8 8F93      		push r24
 272 00ea E981      		ldd r30,Y+1
 273 00ec FA81      		ldd r31,Y+2
 274 00ee 8081      		ld r24,Z
 275 00f0 9927      		clr r25
 276 00f2 9F93      		push r25
 277 00f4 8F93      		push r24
 278 00f6 80E0      		ldi r24,lo8(.LC0)
 279 00f8 90E0      		ldi r25,hi8(.LC0)
 280 00fa 9F93      		push r25
 281 00fc 8F93      		push r24
 282 00fe 00D0      		rcall printf
 283 0100 8DB7      		in r24,__SP_L__
 284 0102 9EB7      		in r25,__SP_H__
 285 0104 0A96      		adiw r24,10
 286 0106 0FB6      		in __tmp_reg__,__SREG__
 287 0108 F894      		cli
 288 010a 9EBF      		out __SP_H__,r25
 289 010c 0FBE      		out __SREG__,__tmp_reg__
 290 010e 8DBF      		out __SP_L__,r24
 291               	/* epilogue: frame size=2 */
 292 0110 2296      		adiw r28,2
 293 0112 0FB6      		in __tmp_reg__,__SREG__
 294 0114 F894      		cli
 295 0116 DEBF      		out __SP_H__,r29
 296 0118 0FBE      		out __SREG__,__tmp_reg__
 297 011a CDBF      		out __SP_L__,r28
 298 011c DF91      		pop r29
 299 011e CF91      		pop r28
 300 0120 0895      		ret
 301               	/* epilogue end (size=9) */
 302               	/* function print_time size 63 (44) */
 304               	.Lscope2:
 307               	.global	inc_time
 309               	inc_time:
  70:ledmeter.c    **** }
  71:ledmeter.c    **** 
  72:ledmeter.c    **** void inc_time(time_typ * time) {
 311               	.LM13:
 312               	/* prologue: frame size=6 */
 313 0122 0F93      		push r16
 314 0124 1F93      		push r17
 315 0126 CF93      		push r28
 316 0128 DF93      		push r29
 317 012a CDB7      		in r28,__SP_L__
 318 012c DEB7      		in r29,__SP_H__
 319 012e 2697      		sbiw r28,6
 320 0130 0FB6      		in __tmp_reg__,__SREG__
 321 0132 F894      		cli
 322 0134 DEBF      		out __SP_H__,r29
 323 0136 0FBE      		out __SREG__,__tmp_reg__
 324 0138 CDBF      		out __SP_L__,r28
 325               	/* prologue end (size=12) */
 326 013a 9A83      		std Y+2,r25
 327 013c 8983      		std Y+1,r24
  73:ledmeter.c    ****   if (running_chronometer) {
 329               	.LM14:
 330 013e 8091 0000 		lds r24,running_chronometer
 331 0142 8823      		tst r24
 332 0144 09F4      		brne .+2
 333 0146 6DC0      		rjmp .L4
  74:ledmeter.c    ****     time->xx++;
 335               	.LM15:
 336 0148 A981      		ldd r26,Y+1
 337 014a BA81      		ldd r27,Y+2
 338 014c E981      		ldd r30,Y+1
 339 014e FA81      		ldd r31,Y+2
 340 0150 8381      		ldd r24,Z+3
 341 0152 9481      		ldd r25,Z+4
 342 0154 0196      		adiw r24,1
 343 0156 FD01      		movw r30,r26
 344 0158 9483      		std Z+4,r25
 345 015a 8383      		std Z+3,r24
  75:ledmeter.c    ****     if(time->xx >= pow(10,CHR_PRECISION)) {
 347               	.LM16:
 348 015c 0981      		ldd r16,Y+1
 349 015e 1A81      		ldd r17,Y+2
 350 0160 F801      		movw r30,r16
 351 0162 8381      		ldd r24,Z+3
 352 0164 9481      		ldd r25,Z+4
 353 0166 AA27      		clr r26
 354 0168 97FD      		sbrc r25,7
 355 016a A095      		com r26
 356 016c BA2F      		mov r27,r26
 357 016e BC01      		movw r22,r24
 358 0170 CD01      		movw r24,r26
 359 0172 00D0      		rcall __floatsisf
 360 0174 6B83      		std Y+3,r22
 361 0176 7C83      		std Y+4,r23
 362 0178 8D83      		std Y+5,r24
 363 017a 9E83      		std Y+6,r25
 364 017c F801      		movw r30,r16
 365 017e 8381      		ldd r24,Z+3
 366 0180 9481      		ldd r25,Z+4
 367 0182 9923      		tst r25
 368 0184 7CF4      		brge .L7
 369 0186 20E0      		ldi r18,lo8(0x47800000)
 370 0188 30E0      		ldi r19,hi8(0x47800000)
 371 018a 40E8      		ldi r20,hlo8(0x47800000)
 372 018c 57E4      		ldi r21,hhi8(0x47800000)
 373 018e 6B81      		ldd r22,Y+3
 374 0190 7C81      		ldd r23,Y+4
 375 0192 8D81      		ldd r24,Y+5
 376 0194 9E81      		ldd r25,Y+6
 377 0196 00D0      		rcall __addsf3
 378 0198 DC01      		movw r26,r24
 379 019a CB01      		movw r24,r22
 380 019c 8B83      		std Y+3,r24
 381 019e 9C83      		std Y+4,r25
 382 01a0 AD83      		std Y+5,r26
 383 01a2 BE83      		std Y+6,r27
 384               	.L7:
 385 01a4 20E0      		ldi r18,lo8(0x461c4000)
 386 01a6 30E4      		ldi r19,hi8(0x461c4000)
 387 01a8 4CE1      		ldi r20,hlo8(0x461c4000)
 388 01aa 56E4      		ldi r21,hhi8(0x461c4000)
 389 01ac 6B81      		ldd r22,Y+3
 390 01ae 7C81      		ldd r23,Y+4
 391 01b0 8D81      		ldd r24,Y+5
 392 01b2 9E81      		ldd r25,Y+6
 393 01b4 00D0      		rcall __gesf2
 394 01b6 8823      		tst r24
 395 01b8 0CF4      		brge .L8
 396 01ba 33C0      		rjmp .L4
 397               	.L8:
  76:ledmeter.c    ****         time->xx = 0;
 399               	.LM17:
 400 01bc E981      		ldd r30,Y+1
 401 01be FA81      		ldd r31,Y+2
 402 01c0 1482      		std Z+4,__zero_reg__
 403 01c2 1382      		std Z+3,__zero_reg__
  77:ledmeter.c    ****         time->ss++;
 405               	.LM18:
 406 01c4 A981      		ldd r26,Y+1
 407 01c6 BA81      		ldd r27,Y+2
 408 01c8 E981      		ldd r30,Y+1
 409 01ca FA81      		ldd r31,Y+2
 410 01cc 8281      		ldd r24,Z+2
 411 01ce 8F5F      		subi r24,lo8(-(1))
 412 01d0 FD01      		movw r30,r26
 413 01d2 8283      		std Z+2,r24
  78:ledmeter.c    ****         if (time->ss >= 60) {
 415               	.LM19:
 416 01d4 E981      		ldd r30,Y+1
 417 01d6 FA81      		ldd r31,Y+2
 418 01d8 8281      		ldd r24,Z+2
 419 01da 8C33      		cpi r24,lo8(60)
 420 01dc 10F1      		brlo .L4
  79:ledmeter.c    ****             time->ss = 0;
 422               	.LM20:
 423 01de E981      		ldd r30,Y+1
 424 01e0 FA81      		ldd r31,Y+2
 425 01e2 1282      		std Z+2,__zero_reg__
  80:ledmeter.c    ****             time->mm++;
 427               	.LM21:
 428 01e4 A981      		ldd r26,Y+1
 429 01e6 BA81      		ldd r27,Y+2
 430 01e8 E981      		ldd r30,Y+1
 431 01ea FA81      		ldd r31,Y+2
 432 01ec 8181      		ldd r24,Z+1
 433 01ee 8F5F      		subi r24,lo8(-(1))
 434 01f0 FD01      		movw r30,r26
 435 01f2 8183      		std Z+1,r24
  81:ledmeter.c    ****             if (time->mm >= 60) {
 437               	.LM22:
 438 01f4 E981      		ldd r30,Y+1
 439 01f6 FA81      		ldd r31,Y+2
 440 01f8 8181      		ldd r24,Z+1
 441 01fa 8C33      		cpi r24,lo8(60)
 442 01fc 90F0      		brlo .L4
  82:ledmeter.c    ****                 time->mm = 0;
 444               	.LM23:
 445 01fe E981      		ldd r30,Y+1
 446 0200 FA81      		ldd r31,Y+2
 447 0202 1182      		std Z+1,__zero_reg__
  83:ledmeter.c    ****                 time->hh++;
 449               	.LM24:
 450 0204 A981      		ldd r26,Y+1
 451 0206 BA81      		ldd r27,Y+2
 452 0208 E981      		ldd r30,Y+1
 453 020a FA81      		ldd r31,Y+2
 454 020c 8081      		ld r24,Z
 455 020e 8F5F      		subi r24,lo8(-(1))
 456 0210 8C93      		st X,r24
  84:ledmeter.c    ****                 if (time->hh >= 24) {
 458               	.LM25:
 459 0212 E981      		ldd r30,Y+1
 460 0214 FA81      		ldd r31,Y+2
 461 0216 8081      		ld r24,Z
 462 0218 8831      		cpi r24,lo8(24)
 463 021a 18F0      		brlo .L4
  85:ledmeter.c    ****                     time->hh = 0;
 465               	.LM26:
 466 021c E981      		ldd r30,Y+1
 467 021e FA81      		ldd r31,Y+2
 468 0220 1082      		st Z,__zero_reg__
 469               	.L4:
 470               	/* epilogue: frame size=6 */
 471 0222 2696      		adiw r28,6
 472 0224 0FB6      		in __tmp_reg__,__SREG__
 473 0226 F894      		cli
 474 0228 DEBF      		out __SP_H__,r29
 475 022a 0FBE      		out __SREG__,__tmp_reg__
 476 022c CDBF      		out __SP_L__,r28
 477 022e DF91      		pop r29
 478 0230 CF91      		pop r28
 479 0232 1F91      		pop r17
 480 0234 0F91      		pop r16
 481 0236 0895      		ret
 482               	/* epilogue end (size=11) */
 483               	/* function inc_time size 139 (116) */
 485               	.Lscope3:
 489               	.global	copy_time
 491               	copy_time:
  86:ledmeter.c    **** 					 }
  87:ledmeter.c    ****             }
  88:ledmeter.c    ****         }
  89:ledmeter.c    ****     }
  90:ledmeter.c    ****     //_delay_ms(1);
  91:ledmeter.c    ****   }
  92:ledmeter.c    **** }
  93:ledmeter.c    **** 
  94:ledmeter.c    **** void copy_time(time_typ * time_source, time_typ * time_dest) { // TO TEST (pointer ?)
 493               	.LM27:
 494               	/* prologue: frame size=4 */
 495 0238 CF93      		push r28
 496 023a DF93      		push r29
 497 023c CDB7      		in r28,__SP_L__
 498 023e DEB7      		in r29,__SP_H__
 499 0240 2497      		sbiw r28,4
 500 0242 0FB6      		in __tmp_reg__,__SREG__
 501 0244 F894      		cli
 502 0246 DEBF      		out __SP_H__,r29
 503 0248 0FBE      		out __SREG__,__tmp_reg__
 504 024a CDBF      		out __SP_L__,r28
 505               	/* prologue end (size=10) */
 506 024c 9A83      		std Y+2,r25
 507 024e 8983      		std Y+1,r24
 508 0250 7C83      		std Y+4,r23
 509 0252 6B83      		std Y+3,r22
  95:ledmeter.c    ****     time_dest->hh = time_source->hh;
 511               	.LM28:
 512 0254 AB81      		ldd r26,Y+3
 513 0256 BC81      		ldd r27,Y+4
 514 0258 E981      		ldd r30,Y+1
 515 025a FA81      		ldd r31,Y+2
 516 025c 8081      		ld r24,Z
 517 025e 8C93      		st X,r24
  96:ledmeter.c    ****     time_dest->mm = time_source->mm;
 519               	.LM29:
 520 0260 AB81      		ldd r26,Y+3
 521 0262 BC81      		ldd r27,Y+4
 522 0264 E981      		ldd r30,Y+1
 523 0266 FA81      		ldd r31,Y+2
 524 0268 8181      		ldd r24,Z+1
 525 026a FD01      		movw r30,r26
 526 026c 8183      		std Z+1,r24
  97:ledmeter.c    ****     time_dest->ss = time_source->ss;
 528               	.LM30:
 529 026e AB81      		ldd r26,Y+3
 530 0270 BC81      		ldd r27,Y+4
 531 0272 E981      		ldd r30,Y+1
 532 0274 FA81      		ldd r31,Y+2
 533 0276 8281      		ldd r24,Z+2
 534 0278 FD01      		movw r30,r26
 535 027a 8283      		std Z+2,r24
  98:ledmeter.c    ****     time_dest->xx = time_source->xx;
 537               	.LM31:
 538 027c AB81      		ldd r26,Y+3
 539 027e BC81      		ldd r27,Y+4
 540 0280 E981      		ldd r30,Y+1
 541 0282 FA81      		ldd r31,Y+2
 542 0284 8381      		ldd r24,Z+3
 543 0286 9481      		ldd r25,Z+4
 544 0288 FD01      		movw r30,r26
 545 028a 9483      		std Z+4,r25
 546 028c 8383      		std Z+3,r24
 547               	/* epilogue: frame size=4 */
 548 028e 2496      		adiw r28,4
 549 0290 0FB6      		in __tmp_reg__,__SREG__
 550 0292 F894      		cli
 551 0294 DEBF      		out __SP_H__,r29
 552 0296 0FBE      		out __SREG__,__tmp_reg__
 553 0298 CDBF      		out __SP_L__,r28
 554 029a DF91      		pop r29
 555 029c CF91      		pop r28
 556 029e 0895      		ret
 557               	/* epilogue end (size=9) */
 558               	/* function copy_time size 52 (33) */
 560               	.Lscope4:
 564               	.global	compare_time
 566               	compare_time:
  99:ledmeter.c    **** }
 100:ledmeter.c    **** 
 101:ledmeter.c    **** uint8_t compare_time(time_typ * time1, time_typ * time2) {
 568               	.LM32:
 569               	/* prologue: frame size=5 */
 570 02a0 CF93      		push r28
 571 02a2 DF93      		push r29
 572 02a4 CDB7      		in r28,__SP_L__
 573 02a6 DEB7      		in r29,__SP_H__
 574 02a8 2597      		sbiw r28,5
 575 02aa 0FB6      		in __tmp_reg__,__SREG__
 576 02ac F894      		cli
 577 02ae DEBF      		out __SP_H__,r29
 578 02b0 0FBE      		out __SREG__,__tmp_reg__
 579 02b2 CDBF      		out __SP_L__,r28
 580               	/* prologue end (size=10) */
 581 02b4 9A83      		std Y+2,r25
 582 02b6 8983      		std Y+1,r24
 583 02b8 7C83      		std Y+4,r23
 584 02ba 6B83      		std Y+3,r22
 102:ledmeter.c    ****     uint8_t result = 0;
 586               	.LM33:
 587 02bc 1D82      		std Y+5,__zero_reg__
 103:ledmeter.c    **** 
 104:ledmeter.c    ****     if (time1->hh > time2->hh) {
 589               	.LM34:
 590 02be E981      		ldd r30,Y+1
 591 02c0 FA81      		ldd r31,Y+2
 592 02c2 AB81      		ldd r26,Y+3
 593 02c4 BC81      		ldd r27,Y+4
 594 02c6 9081      		ld r25,Z
 595 02c8 8C91      		ld r24,X
 596 02ca 8917      		cp r24,r25
 597 02cc 18F4      		brsh .L14
 105:ledmeter.c    ****         result = 2;
 599               	.LM35:
 600 02ce 82E0      		ldi r24,lo8(2)
 601 02d0 8D83      		std Y+5,r24
 602 02d2 5AC0      		rjmp .L15
 603               	.L14:
 106:ledmeter.c    ****     }
 107:ledmeter.c    ****     else if (time1->hh < time2->hh) {
 605               	.LM36:
 606 02d4 E981      		ldd r30,Y+1
 607 02d6 FA81      		ldd r31,Y+2
 608 02d8 AB81      		ldd r26,Y+3
 609 02da BC81      		ldd r27,Y+4
 610 02dc 9081      		ld r25,Z
 611 02de 8C91      		ld r24,X
 612 02e0 9817      		cp r25,r24
 613 02e2 18F4      		brsh .L16
 108:ledmeter.c    ****         result = 1;
 615               	.LM37:
 616 02e4 81E0      		ldi r24,lo8(1)
 617 02e6 8D83      		std Y+5,r24
 618 02e8 4FC0      		rjmp .L15
 619               	.L16:
 109:ledmeter.c    ****     }	
 110:ledmeter.c    ****     else {
 111:ledmeter.c    ****         if (time1->mm > time2->mm) {
 621               	.LM38:
 622 02ea E981      		ldd r30,Y+1
 623 02ec FA81      		ldd r31,Y+2
 624 02ee AB81      		ldd r26,Y+3
 625 02f0 BC81      		ldd r27,Y+4
 626 02f2 9181      		ldd r25,Z+1
 627 02f4 FD01      		movw r30,r26
 628 02f6 8181      		ldd r24,Z+1
 629 02f8 8917      		cp r24,r25
 630 02fa 18F4      		brsh .L18
 112:ledmeter.c    ****             result = 2;
 632               	.LM39:
 633 02fc 82E0      		ldi r24,lo8(2)
 634 02fe 8D83      		std Y+5,r24
 635 0300 43C0      		rjmp .L15
 636               	.L18:
 113:ledmeter.c    ****         }
 114:ledmeter.c    ****         else if (time1->mm < time2->mm) {
 638               	.LM40:
 639 0302 E981      		ldd r30,Y+1
 640 0304 FA81      		ldd r31,Y+2
 641 0306 AB81      		ldd r26,Y+3
 642 0308 BC81      		ldd r27,Y+4
 643 030a 9181      		ldd r25,Z+1
 644 030c FD01      		movw r30,r26
 645 030e 8181      		ldd r24,Z+1
 646 0310 9817      		cp r25,r24
 647 0312 18F4      		brsh .L20
 115:ledmeter.c    ****             result = 1;
 649               	.LM41:
 650 0314 81E0      		ldi r24,lo8(1)
 651 0316 8D83      		std Y+5,r24
 652 0318 37C0      		rjmp .L15
 653               	.L20:
 116:ledmeter.c    ****         }	
 117:ledmeter.c    ****         else {
 118:ledmeter.c    ****             if (time1->ss > time2->ss) {
 655               	.LM42:
 656 031a E981      		ldd r30,Y+1
 657 031c FA81      		ldd r31,Y+2
 658 031e AB81      		ldd r26,Y+3
 659 0320 BC81      		ldd r27,Y+4
 660 0322 9281      		ldd r25,Z+2
 661 0324 FD01      		movw r30,r26
 662 0326 8281      		ldd r24,Z+2
 663 0328 8917      		cp r24,r25
 664 032a 18F4      		brsh .L22
 119:ledmeter.c    ****                 result = 2;
 666               	.LM43:
 667 032c 82E0      		ldi r24,lo8(2)
 668 032e 8D83      		std Y+5,r24
 669 0330 2BC0      		rjmp .L15
 670               	.L22:
 120:ledmeter.c    ****             }
 121:ledmeter.c    ****             else if (time1->ss < time2->ss) {
 672               	.LM44:
 673 0332 E981      		ldd r30,Y+1
 674 0334 FA81      		ldd r31,Y+2
 675 0336 AB81      		ldd r26,Y+3
 676 0338 BC81      		ldd r27,Y+4
 677 033a 9281      		ldd r25,Z+2
 678 033c FD01      		movw r30,r26
 679 033e 8281      		ldd r24,Z+2
 680 0340 9817      		cp r25,r24
 681 0342 18F4      		brsh .L24
 122:ledmeter.c    ****                 result = 1;
 683               	.LM45:
 684 0344 81E0      		ldi r24,lo8(1)
 685 0346 8D83      		std Y+5,r24
 686 0348 1FC0      		rjmp .L15
 687               	.L24:
 123:ledmeter.c    ****             }	
 124:ledmeter.c    ****             else {
 125:ledmeter.c    ****                 if (time1->xx > time2->xx) {
 689               	.LM46:
 690 034a E981      		ldd r30,Y+1
 691 034c FA81      		ldd r31,Y+2
 692 034e AB81      		ldd r26,Y+3
 693 0350 BC81      		ldd r27,Y+4
 694 0352 2381      		ldd r18,Z+3
 695 0354 3481      		ldd r19,Z+4
 696 0356 FD01      		movw r30,r26
 697 0358 8381      		ldd r24,Z+3
 698 035a 9481      		ldd r25,Z+4
 699 035c 8217      		cp r24,r18
 700 035e 9307      		cpc r25,r19
 701 0360 18F4      		brsh .L26
 126:ledmeter.c    ****                     result = 2;
 703               	.LM47:
 704 0362 82E0      		ldi r24,lo8(2)
 705 0364 8D83      		std Y+5,r24
 706 0366 10C0      		rjmp .L15
 707               	.L26:
 127:ledmeter.c    ****                 }
 128:ledmeter.c    ****                 else if (time1->xx < time2->xx) {
 709               	.LM48:
 710 0368 E981      		ldd r30,Y+1
 711 036a FA81      		ldd r31,Y+2
 712 036c AB81      		ldd r26,Y+3
 713 036e BC81      		ldd r27,Y+4
 714 0370 2381      		ldd r18,Z+3
 715 0372 3481      		ldd r19,Z+4
 716 0374 FD01      		movw r30,r26
 717 0376 8381      		ldd r24,Z+3
 718 0378 9481      		ldd r25,Z+4
 719 037a 2817      		cp r18,r24
 720 037c 3907      		cpc r19,r25
 721 037e 18F4      		brsh .L28
 129:ledmeter.c    ****                     result = 1;
 723               	.LM49:
 724 0380 81E0      		ldi r24,lo8(1)
 725 0382 8D83      		std Y+5,r24
 726 0384 01C0      		rjmp .L15
 727               	.L28:
 130:ledmeter.c    ****                 }	
 131:ledmeter.c    ****                 else {
 132:ledmeter.c    ****                     result = 0;
 729               	.LM50:
 730 0386 1D82      		std Y+5,__zero_reg__
 731               	.L15:
 133:ledmeter.c    ****                 }
 134:ledmeter.c    ****             }
 135:ledmeter.c    ****         }
 136:ledmeter.c    ****     }
 137:ledmeter.c    ****     // return the best time (lower)
 138:ledmeter.c    ****     // 0 time1=time2
 139:ledmeter.c    ****     // 1 time1>time2
 140:ledmeter.c    ****     // 2 time1<time2
 141:ledmeter.c    ****     return result;
 733               	.LM51:
 734 0388 8D81      		ldd r24,Y+5
 735 038a 9927      		clr r25
 736               	/* epilogue: frame size=5 */
 737 038c 2596      		adiw r28,5
 738 038e 0FB6      		in __tmp_reg__,__SREG__
 739 0390 F894      		cli
 740 0392 DEBF      		out __SP_H__,r29
 741 0394 0FBE      		out __SREG__,__tmp_reg__
 742 0396 CDBF      		out __SP_L__,r28
 743 0398 DF91      		pop r29
 744 039a CF91      		pop r28
 745 039c 0895      		ret
 746               	/* epilogue end (size=9) */
 747               	/* function compare_time size 127 (108) */
 752               	.Lscope5:
 754               	.global	switch_on_all_leds
 756               	switch_on_all_leds:
 142:ledmeter.c    **** }
 143:ledmeter.c    **** 
 144:ledmeter.c    **** 
 145:ledmeter.c    **** 
 146:ledmeter.c    **** /*
 147:ledmeter.c    **** void switch_on_all_leds();
 148:ledmeter.c    **** void switch_off_all_leds();
 149:ledmeter.c    **** void switch_on_led(uint8_t led);
 150:ledmeter.c    **** void switch_off_led(uint8_t led);
 151:ledmeter.c    **** void loop(void);
 152:ledmeter.c    **** void init(void);
 153:ledmeter.c    **** */
 154:ledmeter.c    **** 
 155:ledmeter.c    **** // 1=off
 156:ledmeter.c    **** // 0=on
 157:ledmeter.c    **** 
 158:ledmeter.c    **** /*
 159:ledmeter.c    ****  * switch on all leds
 160:ledmeter.c    ****  */
 161:ledmeter.c    **** void switch_on_all_leds(void) {
 758               	.LM52:
 759               	/* prologue: frame size=0 */
 760 039e CF93      		push r28
 761 03a0 DF93      		push r29
 762 03a2 CDB7      		in r28,__SP_L__
 763 03a4 DEB7      		in r29,__SP_H__
 764               	/* prologue end (size=4) */
 162:ledmeter.c    ****     PORTC = 0x00;
 766               	.LM53:
 767 03a6 1092 3500 		sts 53,__zero_reg__
 768               	/* epilogue: frame size=0 */
 769 03aa DF91      		pop r29
 770 03ac CF91      		pop r28
 771 03ae 0895      		ret
 772               	/* epilogue end (size=3) */
 773               	/* function switch_on_all_leds size 9 (2) */
 775               	.Lscope6:
 777               	.global	switch_off_all_leds
 779               	switch_off_all_leds:
 163:ledmeter.c    **** }
 164:ledmeter.c    **** 
 165:ledmeter.c    **** /*
 166:ledmeter.c    ****  * switch off all leds
 167:ledmeter.c    ****  */
 168:ledmeter.c    **** void switch_off_all_leds(void) {
 781               	.LM54:
 782               	/* prologue: frame size=0 */
 783 03b0 CF93      		push r28
 784 03b2 DF93      		push r29
 785 03b4 CDB7      		in r28,__SP_L__
 786 03b6 DEB7      		in r29,__SP_H__
 787               	/* prologue end (size=4) */
 169:ledmeter.c    ****     PORTC = 0xFF;
 789               	.LM55:
 790 03b8 8FEF      		ldi r24,lo8(-1)
 791 03ba 8093 3500 		sts 53,r24
 792               	/* epilogue: frame size=0 */
 793 03be DF91      		pop r29
 794 03c0 CF91      		pop r28
 795 03c2 0895      		ret
 796               	/* epilogue end (size=3) */
 797               	/* function switch_off_all_leds size 10 (3) */
 799               	.Lscope7:
 802               	.global	switch_on_led
 804               	switch_on_led:
 170:ledmeter.c    **** }
 171:ledmeter.c    **** 
 172:ledmeter.c    **** // led from 1 to 8 (LEDSNUM)
 173:ledmeter.c    **** // PCx with w from 0 to 7
 174:ledmeter.c    **** 
 175:ledmeter.c    **** /*
 176:ledmeter.c    ****  * switch on the led with the number called "led"
 177:ledmeter.c    ****  */
 178:ledmeter.c    **** void switch_on_led(uint8_t led) {
 806               	.LM56:
 807               	/* prologue: frame size=3 */
 808 03c4 CF93      		push r28
 809 03c6 DF93      		push r29
 810 03c8 CDB7      		in r28,__SP_L__
 811 03ca DEB7      		in r29,__SP_H__
 812 03cc 2397      		sbiw r28,3
 813 03ce 0FB6      		in __tmp_reg__,__SREG__
 814 03d0 F894      		cli
 815 03d2 DEBF      		out __SP_H__,r29
 816 03d4 0FBE      		out __SREG__,__tmp_reg__
 817 03d6 CDBF      		out __SP_L__,r28
 818               	/* prologue end (size=10) */
 819 03d8 8983      		std Y+1,r24
 179:ledmeter.c    ****     uint8_t pin = led - 1;
 821               	.LM57:
 822 03da 8981      		ldd r24,Y+1
 823 03dc 8150      		subi r24,lo8(-(-1))
 824 03de 8A83      		std Y+2,r24
 180:ledmeter.c    ****     uint8_t mask = ~(1<<pin);
 826               	.LM58:
 827 03e0 8A81      		ldd r24,Y+2
 828 03e2 282F      		mov r18,r24
 829 03e4 3327      		clr r19
 830 03e6 81E0      		ldi r24,lo8(1)
 831 03e8 90E0      		ldi r25,hi8(1)
 832 03ea 02C0      		rjmp 2f
 833 03ec 880F      	1:	lsl r24
 834 03ee 991F      		rol r25
 835 03f0 2A95      	2:	dec r18
 836 03f2 E2F7      		brpl 1b
 837 03f4 8095      		com r24
 838 03f6 8B83      		std Y+3,r24
 181:ledmeter.c    ****     PORTC&=mask;
 840               	.LM59:
 841 03f8 9091 3500 		lds r25,53
 842 03fc 8B81      		ldd r24,Y+3
 843 03fe 8923      		and r24,r25
 844 0400 8093 3500 		sts 53,r24
 845               	/* epilogue: frame size=3 */
 846 0404 2396      		adiw r28,3
 847 0406 0FB6      		in __tmp_reg__,__SREG__
 848 0408 F894      		cli
 849 040a DEBF      		out __SP_H__,r29
 850 040c 0FBE      		out __SREG__,__tmp_reg__
 851 040e CDBF      		out __SP_L__,r28
 852 0410 DF91      		pop r29
 853 0412 CF91      		pop r28
 854 0414 0895      		ret
 855               	/* epilogue end (size=9) */
 856               	/* function switch_on_led size 42 (23) */
 862               	.Lscope8:
 865               	.global	switch_off_led
 867               	switch_off_led:
 182:ledmeter.c    **** }
 183:ledmeter.c    **** 
 184:ledmeter.c    **** /*
 185:ledmeter.c    ****  * switch off the led with the number called "led"
 186:ledmeter.c    ****  */
 187:ledmeter.c    **** void switch_off_led(uint8_t led) {
 869               	.LM60:
 870               	/* prologue: frame size=3 */
 871 0416 CF93      		push r28
 872 0418 DF93      		push r29
 873 041a CDB7      		in r28,__SP_L__
 874 041c DEB7      		in r29,__SP_H__
 875 041e 2397      		sbiw r28,3
 876 0420 0FB6      		in __tmp_reg__,__SREG__
 877 0422 F894      		cli
 878 0424 DEBF      		out __SP_H__,r29
 879 0426 0FBE      		out __SREG__,__tmp_reg__
 880 0428 CDBF      		out __SP_L__,r28
 881               	/* prologue end (size=10) */
 882 042a 8983      		std Y+1,r24
 188:ledmeter.c    ****     uint8_t pin = led - 1;
 884               	.LM61:
 885 042c 8981      		ldd r24,Y+1
 886 042e 8150      		subi r24,lo8(-(-1))
 887 0430 8A83      		std Y+2,r24
 189:ledmeter.c    ****     uint8_t mask = (1<<pin);
 889               	.LM62:
 890 0432 8A81      		ldd r24,Y+2
 891 0434 282F      		mov r18,r24
 892 0436 3327      		clr r19
 893 0438 81E0      		ldi r24,lo8(1)
 894 043a 90E0      		ldi r25,hi8(1)
 895 043c 02C0      		rjmp 2f
 896 043e 880F      	1:	lsl r24
 897 0440 991F      		rol r25
 898 0442 2A95      	2:	dec r18
 899 0444 E2F7      		brpl 1b
 900 0446 8B83      		std Y+3,r24
 190:ledmeter.c    ****     PORTC|=mask;
 902               	.LM63:
 903 0448 9091 3500 		lds r25,53
 904 044c 8B81      		ldd r24,Y+3
 905 044e 892B      		or r24,r25
 906 0450 8093 3500 		sts 53,r24
 907               	/* epilogue: frame size=3 */
 908 0454 2396      		adiw r28,3
 909 0456 0FB6      		in __tmp_reg__,__SREG__
 910 0458 F894      		cli
 911 045a DEBF      		out __SP_H__,r29
 912 045c 0FBE      		out __SREG__,__tmp_reg__
 913 045e CDBF      		out __SP_L__,r28
 914 0460 DF91      		pop r29
 915 0462 CF91      		pop r28
 916 0464 0895      		ret
 917               	/* epilogue end (size=9) */
 918               	/* function switch_off_led size 41 (22) */
 924               	.Lscope9:
 927               	.global	switch_on_leds_with_delay
 929               	switch_on_leds_with_delay:
 191:ledmeter.c    **** }
 192:ledmeter.c    **** 
 193:ledmeter.c    **** /*
 194:ledmeter.c    ****  * switch on every leds one after one with a delay (called "delay")
 195:ledmeter.c    ****  */
 196:ledmeter.c    **** void switch_on_leds_with_delay(double delay) {
 931               	.LM64:
 932               	/* prologue: frame size=17 */
 933 0466 CF93      		push r28
 934 0468 DF93      		push r29
 935 046a CDB7      		in r28,__SP_L__
 936 046c DEB7      		in r29,__SP_H__
 937 046e 6197      		sbiw r28,17
 938 0470 0FB6      		in __tmp_reg__,__SREG__
 939 0472 F894      		cli
 940 0474 DEBF      		out __SP_H__,r29
 941 0476 0FBE      		out __SREG__,__tmp_reg__
 942 0478 CDBF      		out __SP_L__,r28
 943               	/* prologue end (size=10) */
 944 047a 6983      		std Y+1,r22
 945 047c 7A83      		std Y+2,r23
 946 047e 8B83      		std Y+3,r24
 947 0480 9C83      		std Y+4,r25
 197:ledmeter.c    ****     uint8_t i;
 198:ledmeter.c    ****     for(i = 1; i<=Nleds; i++) {
 949               	.LM65:
 950 0482 81E0      		ldi r24,lo8(1)
 951 0484 8D83      		std Y+5,r24
 952               	.L35:
 954               	.LM66:
 955 0486 8D81      		ldd r24,Y+5
 956 0488 8930      		cpi r24,lo8(9)
 957 048a 08F0      		brlo .+2
 958 048c 50C0      		rjmp .L34
 959               	.LBB2:
 961               	.Ltext1:
   1:C:/WinAVR/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:C:/WinAVR/avr/include/util/delay.h ****    Copyright (c) 2004,2005 Joerg Wunsch
   3:C:/WinAVR/avr/include/util/delay.h ****    All rights reserved.
   4:C:/WinAVR/avr/include/util/delay.h **** 
   5:C:/WinAVR/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   6:C:/WinAVR/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   7:C:/WinAVR/avr/include/util/delay.h **** 
   8:C:/WinAVR/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
   9:C:/WinAVR/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  10:C:/WinAVR/avr/include/util/delay.h **** 
  11:C:/WinAVR/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  12:C:/WinAVR/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  13:C:/WinAVR/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  14:C:/WinAVR/avr/include/util/delay.h ****      distribution.
  15:C:/WinAVR/avr/include/util/delay.h **** 
  16:C:/WinAVR/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  17:C:/WinAVR/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  18:C:/WinAVR/avr/include/util/delay.h ****      from this software without specific prior written permission.
  19:C:/WinAVR/avr/include/util/delay.h **** 
  20:C:/WinAVR/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21:C:/WinAVR/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22:C:/WinAVR/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  23:C:/WinAVR/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  24:C:/WinAVR/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  25:C:/WinAVR/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  26:C:/WinAVR/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  27:C:/WinAVR/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  28:C:/WinAVR/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  29:C:/WinAVR/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  30:C:/WinAVR/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  31:C:/WinAVR/avr/include/util/delay.h **** 
  32:C:/WinAVR/avr/include/util/delay.h **** /* $Id: delay.h,v 1.1.2.1 2005/12/12 23:19:49 joerg_wunsch Exp $ */
  33:C:/WinAVR/avr/include/util/delay.h **** 
  34:C:/WinAVR/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  35:C:/WinAVR/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  36:C:/WinAVR/avr/include/util/delay.h **** 
  37:C:/WinAVR/avr/include/util/delay.h **** #include <inttypes.h>
  38:C:/WinAVR/avr/include/util/delay.h **** 
  39:C:/WinAVR/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Busy-wait delay loops
  40:C:/WinAVR/avr/include/util/delay.h ****     \code
  41:C:/WinAVR/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  42:C:/WinAVR/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  43:C:/WinAVR/avr/include/util/delay.h ****     #include <util/delay.h>
  44:C:/WinAVR/avr/include/util/delay.h ****     \endcode
  45:C:/WinAVR/avr/include/util/delay.h **** 
  46:C:/WinAVR/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  47:C:/WinAVR/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  48:C:/WinAVR/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  49:C:/WinAVR/avr/include/util/delay.h ****     used.
  50:C:/WinAVR/avr/include/util/delay.h **** 
  51:C:/WinAVR/avr/include/util/delay.h ****     The functions in this header file implement simple delay loops
  52:C:/WinAVR/avr/include/util/delay.h ****     that perform a busy-waiting.  They are typically used to
  53:C:/WinAVR/avr/include/util/delay.h ****     facilitate short delays in the program execution.  They are
  54:C:/WinAVR/avr/include/util/delay.h ****     implemented as count-down loops with a well-known CPU cycle
  55:C:/WinAVR/avr/include/util/delay.h ****     count per loop iteration.  As such, no other processing can
  56:C:/WinAVR/avr/include/util/delay.h ****     occur simultaneously.  It should be kept in mind that the
  57:C:/WinAVR/avr/include/util/delay.h ****     functions described here do not disable interrupts.
  58:C:/WinAVR/avr/include/util/delay.h **** 
  59:C:/WinAVR/avr/include/util/delay.h ****     In general, for long delays, the use of hardware timers is
  60:C:/WinAVR/avr/include/util/delay.h ****     much preferrable, as they free the CPU, and allow for
  61:C:/WinAVR/avr/include/util/delay.h ****     concurrent processing of other events while the timer is
  62:C:/WinAVR/avr/include/util/delay.h ****     running.  However, in particular for very short delays, the
  63:C:/WinAVR/avr/include/util/delay.h ****     overhead of setting up a hardware timer is too much compared
  64:C:/WinAVR/avr/include/util/delay.h ****     to the overall delay time.
  65:C:/WinAVR/avr/include/util/delay.h **** 
  66:C:/WinAVR/avr/include/util/delay.h ****     Two inline functions are provided for the actual delay algorithms.
  67:C:/WinAVR/avr/include/util/delay.h **** 
  68:C:/WinAVR/avr/include/util/delay.h ****     Two wrapper functions allow the specification of microsecond, and
  69:C:/WinAVR/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  70:C:/WinAVR/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).  These functions
  71:C:/WinAVR/avr/include/util/delay.h ****     operate on double typed arguments, however when optimization is
  72:C:/WinAVR/avr/include/util/delay.h ****     turned on, the entire floating-point calculation will be done at
  73:C:/WinAVR/avr/include/util/delay.h ****     compile-time.
  74:C:/WinAVR/avr/include/util/delay.h **** 
  75:C:/WinAVR/avr/include/util/delay.h ****     \note When using _delay_us() and _delay_ms(), the expressions
  76:C:/WinAVR/avr/include/util/delay.h ****     passed as arguments to these functions shall be compile-time
  77:C:/WinAVR/avr/include/util/delay.h ****     constants, otherwise the floating-point calculations to setup the
  78:C:/WinAVR/avr/include/util/delay.h ****     loops will be done at run-time, thereby drastically increasing
  79:C:/WinAVR/avr/include/util/delay.h ****     both the resulting code size, as well as the time required to
  80:C:/WinAVR/avr/include/util/delay.h ****     setup the loops.
  81:C:/WinAVR/avr/include/util/delay.h **** */
  82:C:/WinAVR/avr/include/util/delay.h **** 
  83:C:/WinAVR/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:C:/WinAVR/avr/include/util/delay.h **** static inline void _delay_loop_1(uint8_t __count) __attribute__((always_inline));
  85:C:/WinAVR/avr/include/util/delay.h **** static inline void _delay_loop_2(uint16_t __count) __attribute__((always_inline));
  86:C:/WinAVR/avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  87:C:/WinAVR/avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  88:C:/WinAVR/avr/include/util/delay.h **** #endif
  89:C:/WinAVR/avr/include/util/delay.h **** 
  90:C:/WinAVR/avr/include/util/delay.h **** /** \ingroup util_delay
  91:C:/WinAVR/avr/include/util/delay.h **** 
  92:C:/WinAVR/avr/include/util/delay.h ****     Delay loop using an 8-bit counter \c __count, so up to 256
  93:C:/WinAVR/avr/include/util/delay.h ****     iterations are possible.  (The value 256 would have to be passed
  94:C:/WinAVR/avr/include/util/delay.h ****     as 0.)  The loop executes three CPU cycles per iteration, not
  95:C:/WinAVR/avr/include/util/delay.h ****     including the overhead the compiler needs to setup the counter
  96:C:/WinAVR/avr/include/util/delay.h ****     register.
  97:C:/WinAVR/avr/include/util/delay.h **** 
  98:C:/WinAVR/avr/include/util/delay.h ****     Thus, at a CPU speed of 1 MHz, delays of up to 768 microseconds
  99:C:/WinAVR/avr/include/util/delay.h ****     can be achieved.
 100:C:/WinAVR/avr/include/util/delay.h **** */
 101:C:/WinAVR/avr/include/util/delay.h **** void
 102:C:/WinAVR/avr/include/util/delay.h **** _delay_loop_1(uint8_t __count)
 103:C:/WinAVR/avr/include/util/delay.h **** {
 104:C:/WinAVR/avr/include/util/delay.h **** 	__asm__ volatile (
 105:C:/WinAVR/avr/include/util/delay.h **** 		"1: dec %0" "\n\t"
 106:C:/WinAVR/avr/include/util/delay.h **** 		"brne 1b"
 107:C:/WinAVR/avr/include/util/delay.h **** 		: "=r" (__count)
 108:C:/WinAVR/avr/include/util/delay.h **** 		: "0" (__count)
 109:C:/WinAVR/avr/include/util/delay.h **** 	);
 110:C:/WinAVR/avr/include/util/delay.h **** }
 111:C:/WinAVR/avr/include/util/delay.h **** 
 112:C:/WinAVR/avr/include/util/delay.h **** /** \ingroup util_delay
 113:C:/WinAVR/avr/include/util/delay.h **** 
 114:C:/WinAVR/avr/include/util/delay.h ****     Delay loop using a 16-bit counter \c __count, so up to 65536
 115:C:/WinAVR/avr/include/util/delay.h ****     iterations are possible.  (The value 65536 would have to be
 116:C:/WinAVR/avr/include/util/delay.h ****     passed as 0.)  The loop executes four CPU cycles per iteration,
 117:C:/WinAVR/avr/include/util/delay.h ****     not including the overhead the compiler requires to setup the
 118:C:/WinAVR/avr/include/util/delay.h ****     counter register pair.
 119:C:/WinAVR/avr/include/util/delay.h **** 
 120:C:/WinAVR/avr/include/util/delay.h ****     Thus, at a CPU speed of 1 MHz, delays of up to about 262.1
 121:C:/WinAVR/avr/include/util/delay.h ****     milliseconds can be achieved.
 122:C:/WinAVR/avr/include/util/delay.h ****  */
 123:C:/WinAVR/avr/include/util/delay.h **** void
 124:C:/WinAVR/avr/include/util/delay.h **** _delay_loop_2(uint16_t __count)
 125:C:/WinAVR/avr/include/util/delay.h **** {
 126:C:/WinAVR/avr/include/util/delay.h **** 	__asm__ volatile (
 127:C:/WinAVR/avr/include/util/delay.h **** 		"1: sbiw %0,1" "\n\t"
 128:C:/WinAVR/avr/include/util/delay.h **** 		"brne 1b"
 129:C:/WinAVR/avr/include/util/delay.h **** 		: "=w" (__count)
 130:C:/WinAVR/avr/include/util/delay.h **** 		: "0" (__count)
 131:C:/WinAVR/avr/include/util/delay.h **** 	);
 132:C:/WinAVR/avr/include/util/delay.h **** }
 133:C:/WinAVR/avr/include/util/delay.h **** 
 134:C:/WinAVR/avr/include/util/delay.h **** #ifndef F_CPU
 135:C:/WinAVR/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
 136:C:/WinAVR/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
 137:C:/WinAVR/avr/include/util/delay.h **** # define F_CPU 1000000UL
 138:C:/WinAVR/avr/include/util/delay.h **** #endif
 139:C:/WinAVR/avr/include/util/delay.h **** 
 140:C:/WinAVR/avr/include/util/delay.h **** /**
 141:C:/WinAVR/avr/include/util/delay.h ****    \ingroup util_delay
 142:C:/WinAVR/avr/include/util/delay.h **** 
 143:C:/WinAVR/avr/include/util/delay.h ****    Perform a delay of \c __us microseconds, using _delay_loop_1().
 144:C:/WinAVR/avr/include/util/delay.h **** 
 145:C:/WinAVR/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 146:C:/WinAVR/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 147:C:/WinAVR/avr/include/util/delay.h **** 
 148:C:/WinAVR/avr/include/util/delay.h ****    The maximal possible delay is 768 us / F_CPU in MHz.
 149:C:/WinAVR/avr/include/util/delay.h ****  */
 150:C:/WinAVR/avr/include/util/delay.h **** void
 151:C:/WinAVR/avr/include/util/delay.h **** _delay_us(double __us)
 152:C:/WinAVR/avr/include/util/delay.h **** {
 153:C:/WinAVR/avr/include/util/delay.h **** 	uint8_t __ticks;
 154:C:/WinAVR/avr/include/util/delay.h **** 	double __tmp = ((F_CPU) / 3e6) * __us;
 155:C:/WinAVR/avr/include/util/delay.h **** 	if (__tmp < 1.0)
 156:C:/WinAVR/avr/include/util/delay.h **** 		__ticks = 1;
 157:C:/WinAVR/avr/include/util/delay.h **** 	else if (__tmp > 255)
 158:C:/WinAVR/avr/include/util/delay.h **** 		__ticks = 0;	/* i.e. 256 */
 159:C:/WinAVR/avr/include/util/delay.h **** 	else
 160:C:/WinAVR/avr/include/util/delay.h **** 		__ticks = (uint8_t)__tmp;
 161:C:/WinAVR/avr/include/util/delay.h **** 	_delay_loop_1(__ticks);
 162:C:/WinAVR/avr/include/util/delay.h **** }
 163:C:/WinAVR/avr/include/util/delay.h **** 
 164:C:/WinAVR/avr/include/util/delay.h **** 
 165:C:/WinAVR/avr/include/util/delay.h **** /**
 166:C:/WinAVR/avr/include/util/delay.h ****    \ingroup util_delay
 167:C:/WinAVR/avr/include/util/delay.h **** 
 168:C:/WinAVR/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 169:C:/WinAVR/avr/include/util/delay.h **** 
 170:C:/WinAVR/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 171:C:/WinAVR/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 172:C:/WinAVR/avr/include/util/delay.h **** 
 173:C:/WinAVR/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 174:C:/WinAVR/avr/include/util/delay.h ****  */
 175:C:/WinAVR/avr/include/util/delay.h **** void
 176:C:/WinAVR/avr/include/util/delay.h **** _delay_ms(double __ms)
 177:C:/WinAVR/avr/include/util/delay.h **** {
 963               	.LM67:
 964 048e 8981      		ldd r24,Y+1
 965 0490 9A81      		ldd r25,Y+2
 966 0492 AB81      		ldd r26,Y+3
 967 0494 BC81      		ldd r27,Y+4
 968 0496 8E83      		std Y+6,r24
 969 0498 9F83      		std Y+7,r25
 970 049a A887      		std Y+8,r26
 971 049c B987      		std Y+9,r27
 972               	.LBB3:
 178:C:/WinAVR/avr/include/util/delay.h **** 	uint16_t __ticks;
 179:C:/WinAVR/avr/include/util/delay.h **** 	double __tmp = ((F_CPU) / 4e3) * __ms;
 974               	.LM68:
 975 049e 20E0      		ldi r18,lo8(0x437a0000)
 976 04a0 30E0      		ldi r19,hi8(0x437a0000)
 977 04a2 4AE7      		ldi r20,hlo8(0x437a0000)
 978 04a4 53E4      		ldi r21,hhi8(0x437a0000)
 979 04a6 6E81      		ldd r22,Y+6
 980 04a8 7F81      		ldd r23,Y+7
 981 04aa 8885      		ldd r24,Y+8
 982 04ac 9985      		ldd r25,Y+9
 983 04ae 00D0      		rcall __mulsf3
 984 04b0 DC01      		movw r26,r24
 985 04b2 CB01      		movw r24,r22
 986 04b4 8C87      		std Y+12,r24
 987 04b6 9D87      		std Y+13,r25
 988 04b8 AE87      		std Y+14,r26
 989 04ba BF87      		std Y+15,r27
 180:C:/WinAVR/avr/include/util/delay.h **** 	if (__tmp < 1.0)
 991               	.LM69:
 992 04bc 20E0      		ldi r18,lo8(0x3f800000)
 993 04be 30E0      		ldi r19,hi8(0x3f800000)
 994 04c0 40E8      		ldi r20,hlo8(0x3f800000)
 995 04c2 5FE3      		ldi r21,hhi8(0x3f800000)
 996 04c4 6C85      		ldd r22,Y+12
 997 04c6 7D85      		ldd r23,Y+13
 998 04c8 8E85      		ldd r24,Y+14
 999 04ca 9F85      		ldd r25,Y+15
 1000 04cc 00D0      		rcall __ltsf2
 1001 04ce 8823      		tst r24
 1002 04d0 0CF0      		brlt .L39
 1003 04d2 05C0      		rjmp .L38
 1004               	.L39:
 181:C:/WinAVR/avr/include/util/delay.h **** 		__ticks = 1;
 1006               	.LM70:
 1007 04d4 81E0      		ldi r24,lo8(1)
 1008 04d6 90E0      		ldi r25,hi8(1)
 1009 04d8 9B87      		std Y+11,r25
 1010 04da 8A87      		std Y+10,r24
 1011 04dc 18C0      		rjmp .L40
 1012               	.L38:
 182:C:/WinAVR/avr/include/util/delay.h **** 	else if (__tmp > 65535)
 1014               	.LM71:
 1015 04de 20E0      		ldi r18,lo8(0x477fff00)
 1016 04e0 3FEF      		ldi r19,hi8(0x477fff00)
 1017 04e2 4FE7      		ldi r20,hlo8(0x477fff00)
 1018 04e4 57E4      		ldi r21,hhi8(0x477fff00)
 1019 04e6 6C85      		ldd r22,Y+12
 1020 04e8 7D85      		ldd r23,Y+13
 1021 04ea 8E85      		ldd r24,Y+14
 1022 04ec 9F85      		ldd r25,Y+15
 1023 04ee 00D0      		rcall __gtsf2
 1024 04f0 1816      		cp __zero_reg__,r24
 1025 04f2 0CF0      		brlt .L42
 1026 04f4 03C0      		rjmp .L41
 1027               	.L42:
 183:C:/WinAVR/avr/include/util/delay.h **** 		__ticks = 0;	/* i.e. 65536 */
 1029               	.LM72:
 1030 04f6 1B86      		std Y+11,__zero_reg__
 1031 04f8 1A86      		std Y+10,__zero_reg__
 1032 04fa 09C0      		rjmp .L40
 1033               	.L41:
 184:C:/WinAVR/avr/include/util/delay.h **** 	else
 185:C:/WinAVR/avr/include/util/delay.h **** 		__ticks = (uint16_t)__tmp;
 1035               	.LM73:
 1036 04fc 6C85      		ldd r22,Y+12
 1037 04fe 7D85      		ldd r23,Y+13
 1038 0500 8E85      		ldd r24,Y+14
 1039 0502 9F85      		ldd r25,Y+15
 1040 0504 00D0      		rcall __fixunssfsi
 1041 0506 DC01      		movw r26,r24
 1042 0508 CB01      		movw r24,r22
 1043 050a 9B87      		std Y+11,r25
 1044 050c 8A87      		std Y+10,r24
 1045               	.L40:
 1046               	.LBB4:
 1048               	.LM74:
 1049 050e 8A85      		ldd r24,Y+10
 1050 0510 9B85      		ldd r25,Y+11
 1051 0512 998B      		std Y+17,r25
 1052 0514 888B      		std Y+16,r24
 1053               	.LBB5:
 1055               	.LM75:
 1056 0516 8889      		ldd r24,Y+16
 1057 0518 9989      		ldd r25,Y+17
 1058               	/* #APP */
 1059 051a 0197      		1: sbiw r24,1
 1060 051c F1F7      		brne 1b
 1061               	/* #NOAPP */
 1062 051e 998B      		std Y+17,r25
 1063 0520 888B      		std Y+16,r24
 1064               	.LBE5:
 1065               	.LBE4:
 1066               	.LBE3:
 1067               	.LBE2:
 1069               	.Ltext2:
 199:ledmeter.c    ****         _delay_ms(delay);
 200:ledmeter.c    ****         switch_on_led(i);
 1071               	.LM76:
 1072 0522 8D81      		ldd r24,Y+5
 1073 0524 4FDF      		rcall switch_on_led
 1075               	.LM77:
 1076 0526 8D81      		ldd r24,Y+5
 1077 0528 8F5F      		subi r24,lo8(-(1))
 1078 052a 8D83      		std Y+5,r24
 1079 052c ACCF      		rjmp .L35
 1080               	.L34:
 1081               	/* epilogue: frame size=17 */
 1082 052e 6196      		adiw r28,17
 1083 0530 0FB6      		in __tmp_reg__,__SREG__
 1084 0532 F894      		cli
 1085 0534 DEBF      		out __SP_H__,r29
 1086 0536 0FBE      		out __SREG__,__tmp_reg__
 1087 0538 CDBF      		out __SP_L__,r28
 1088 053a DF91      		pop r29
 1089 053c CF91      		pop r28
 1090 053e 0895      		ret
 1091               	/* epilogue end (size=9) */
 1092               	/* function switch_on_leds_with_delay size 111 (92) */
 1107               	.Lscope10:
 1110               	.global	switch_off_leds_with_delay
 1112               	switch_off_leds_with_delay:
 201:ledmeter.c    ****     }
 202:ledmeter.c    **** }
 203:ledmeter.c    **** 
 204:ledmeter.c    **** /*
 205:ledmeter.c    ****  * switch off every leds on after one with a delay (called "delay")
 206:ledmeter.c    ****  */
 207:ledmeter.c    **** void switch_off_leds_with_delay(double delay) {
 1114               	.LM78:
 1115               	/* prologue: frame size=17 */
 1116 0540 CF93      		push r28
 1117 0542 DF93      		push r29
 1118 0544 CDB7      		in r28,__SP_L__
 1119 0546 DEB7      		in r29,__SP_H__
 1120 0548 6197      		sbiw r28,17
 1121 054a 0FB6      		in __tmp_reg__,__SREG__
 1122 054c F894      		cli
 1123 054e DEBF      		out __SP_H__,r29
 1124 0550 0FBE      		out __SREG__,__tmp_reg__
 1125 0552 CDBF      		out __SP_L__,r28
 1126               	/* prologue end (size=10) */
 1127 0554 6983      		std Y+1,r22
 1128 0556 7A83      		std Y+2,r23
 1129 0558 8B83      		std Y+3,r24
 1130 055a 9C83      		std Y+4,r25
 208:ledmeter.c    ****     uint8_t i;
 209:ledmeter.c    ****     for(i = Nleds; i>=1; i--) {
 1132               	.LM79:
 1133 055c 88E0      		ldi r24,lo8(8)
 1134 055e 8D83      		std Y+5,r24
 1135               	.L47:
 1137               	.LM80:
 1138 0560 8D81      		ldd r24,Y+5
 1139 0562 8823      		tst r24
 1140 0564 09F4      		brne .+2
 1141 0566 50C0      		rjmp .L46
 1142               	.LBB6:
 1144               	.Ltext3:
 1146               	.LM81:
 1147 0568 8981      		ldd r24,Y+1
 1148 056a 9A81      		ldd r25,Y+2
 1149 056c AB81      		ldd r26,Y+3
 1150 056e BC81      		ldd r27,Y+4
 1151 0570 8E83      		std Y+6,r24
 1152 0572 9F83      		std Y+7,r25
 1153 0574 A887      		std Y+8,r26
 1154 0576 B987      		std Y+9,r27
 1155               	.LBB7:
 1157               	.LM82:
 1158 0578 20E0      		ldi r18,lo8(0x437a0000)
 1159 057a 30E0      		ldi r19,hi8(0x437a0000)
 1160 057c 4AE7      		ldi r20,hlo8(0x437a0000)
 1161 057e 53E4      		ldi r21,hhi8(0x437a0000)
 1162 0580 6E81      		ldd r22,Y+6
 1163 0582 7F81      		ldd r23,Y+7
 1164 0584 8885      		ldd r24,Y+8
 1165 0586 9985      		ldd r25,Y+9
 1166 0588 00D0      		rcall __mulsf3
 1167 058a DC01      		movw r26,r24
 1168 058c CB01      		movw r24,r22
 1169 058e 8C87      		std Y+12,r24
 1170 0590 9D87      		std Y+13,r25
 1171 0592 AE87      		std Y+14,r26
 1172 0594 BF87      		std Y+15,r27
 1174               	.LM83:
 1175 0596 20E0      		ldi r18,lo8(0x3f800000)
 1176 0598 30E0      		ldi r19,hi8(0x3f800000)
 1177 059a 40E8      		ldi r20,hlo8(0x3f800000)
 1178 059c 5FE3      		ldi r21,hhi8(0x3f800000)
 1179 059e 6C85      		ldd r22,Y+12
 1180 05a0 7D85      		ldd r23,Y+13
 1181 05a2 8E85      		ldd r24,Y+14
 1182 05a4 9F85      		ldd r25,Y+15
 1183 05a6 00D0      		rcall __ltsf2
 1184 05a8 8823      		tst r24
 1185 05aa 0CF0      		brlt .L51
 1186 05ac 05C0      		rjmp .L50
 1187               	.L51:
 1189               	.LM84:
 1190 05ae 81E0      		ldi r24,lo8(1)
 1191 05b0 90E0      		ldi r25,hi8(1)
 1192 05b2 9B87      		std Y+11,r25
 1193 05b4 8A87      		std Y+10,r24
 1194 05b6 18C0      		rjmp .L52
 1195               	.L50:
 1197               	.LM85:
 1198 05b8 20E0      		ldi r18,lo8(0x477fff00)
 1199 05ba 3FEF      		ldi r19,hi8(0x477fff00)
 1200 05bc 4FE7      		ldi r20,hlo8(0x477fff00)
 1201 05be 57E4      		ldi r21,hhi8(0x477fff00)
 1202 05c0 6C85      		ldd r22,Y+12
 1203 05c2 7D85      		ldd r23,Y+13
 1204 05c4 8E85      		ldd r24,Y+14
 1205 05c6 9F85      		ldd r25,Y+15
 1206 05c8 00D0      		rcall __gtsf2
 1207 05ca 1816      		cp __zero_reg__,r24
 1208 05cc 0CF0      		brlt .L54
 1209 05ce 03C0      		rjmp .L53
 1210               	.L54:
 1212               	.LM86:
 1213 05d0 1B86      		std Y+11,__zero_reg__
 1214 05d2 1A86      		std Y+10,__zero_reg__
 1215 05d4 09C0      		rjmp .L52
 1216               	.L53:
 1218               	.LM87:
 1219 05d6 6C85      		ldd r22,Y+12
 1220 05d8 7D85      		ldd r23,Y+13
 1221 05da 8E85      		ldd r24,Y+14
 1222 05dc 9F85      		ldd r25,Y+15
 1223 05de 00D0      		rcall __fixunssfsi
 1224 05e0 DC01      		movw r26,r24
 1225 05e2 CB01      		movw r24,r22
 1226 05e4 9B87      		std Y+11,r25
 1227 05e6 8A87      		std Y+10,r24
 1228               	.L52:
 1229               	.LBB8:
 1231               	.LM88:
 1232 05e8 8A85      		ldd r24,Y+10
 1233 05ea 9B85      		ldd r25,Y+11
 1234 05ec 998B      		std Y+17,r25
 1235 05ee 888B      		std Y+16,r24
 1236               	.LBB9:
 1238               	.LM89:
 1239 05f0 8889      		ldd r24,Y+16
 1240 05f2 9989      		ldd r25,Y+17
 1241               	/* #APP */
 1242 05f4 0197      		1: sbiw r24,1
 1243 05f6 F1F7      		brne 1b
 1244               	/* #NOAPP */
 1245 05f8 998B      		std Y+17,r25
 1246 05fa 888B      		std Y+16,r24
 1247               	.LBE9:
 1248               	.LBE8:
 1249               	.LBE7:
 1250               	.LBE6:
 1252               	.Ltext4:
 210:ledmeter.c    ****         _delay_ms(delay);
 211:ledmeter.c    ****         switch_off_led(i);
 1254               	.LM90:
 1255 05fc 8D81      		ldd r24,Y+5
 1256 05fe 0BDF      		rcall switch_off_led
 1258               	.LM91:
 1259 0600 8D81      		ldd r24,Y+5
 1260 0602 8150      		subi r24,lo8(-(-1))
 1261 0604 8D83      		std Y+5,r24
 1262 0606 ACCF      		rjmp .L47
 1263               	.L46:
 1264               	/* epilogue: frame size=17 */
 1265 0608 6196      		adiw r28,17
 1266 060a 0FB6      		in __tmp_reg__,__SREG__
 1267 060c F894      		cli
 1268 060e DEBF      		out __SP_H__,r29
 1269 0610 0FBE      		out __SREG__,__tmp_reg__
 1270 0612 CDBF      		out __SP_L__,r28
 1271 0614 DF91      		pop r29
 1272 0616 CF91      		pop r28
 1273 0618 0895      		ret
 1274               	/* epilogue end (size=9) */
 1275               	/* function switch_off_leds_with_delay size 111 (92) */
 1290               	.Lscope11:
 1292               	.global	test_leds_up_down
 1294               	test_leds_up_down:
 212:ledmeter.c    ****     }
 213:ledmeter.c    **** }
 214:ledmeter.c    **** 
 215:ledmeter.c    **** /*
 216:ledmeter.c    ****  * a function for testing leds that switch on every leds and switch off every leds (one after one)
 217:ledmeter.c    ****  */
 218:ledmeter.c    **** void test_leds_up_down(void) {
 1296               	.LM92:
 1297               	/* prologue: frame size=12 */
 1298 061a CF93      		push r28
 1299 061c DF93      		push r29
 1300 061e CDB7      		in r28,__SP_L__
 1301 0620 DEB7      		in r29,__SP_H__
 1302 0622 2C97      		sbiw r28,12
 1303 0624 0FB6      		in __tmp_reg__,__SREG__
 1304 0626 F894      		cli
 1305 0628 DEBF      		out __SP_H__,r29
 1306 062a 0FBE      		out __SREG__,__tmp_reg__
 1307 062c CDBF      		out __SP_L__,r28
 1308               	/* prologue end (size=10) */
 219:ledmeter.c    ****     switch_on_leds_with_delay(50); //100
 1310               	.LM93:
 1311 062e 60E0      		ldi r22,lo8(0x42480000)
 1312 0630 70E0      		ldi r23,hi8(0x42480000)
 1313 0632 88E4      		ldi r24,hlo8(0x42480000)
 1314 0634 92E4      		ldi r25,hhi8(0x42480000)
 1315 0636 17DF      		rcall switch_on_leds_with_delay
 1316               	.LBB10:
 1318               	.Ltext5:
 1320               	.LM94:
 1321 0638 80E0      		ldi r24,lo8(0x42480000)
 1322 063a 90E0      		ldi r25,hi8(0x42480000)
 1323 063c A8E4      		ldi r26,hlo8(0x42480000)
 1324 063e B2E4      		ldi r27,hhi8(0x42480000)
 1325 0640 8983      		std Y+1,r24
 1326 0642 9A83      		std Y+2,r25
 1327 0644 AB83      		std Y+3,r26
 1328 0646 BC83      		std Y+4,r27
 1329               	.LBB11:
 1331               	.LM95:
 1332 0648 20E0      		ldi r18,lo8(0x437a0000)
 1333 064a 30E0      		ldi r19,hi8(0x437a0000)
 1334 064c 4AE7      		ldi r20,hlo8(0x437a0000)
 1335 064e 53E4      		ldi r21,hhi8(0x437a0000)
 1336 0650 6981      		ldd r22,Y+1
 1337 0652 7A81      		ldd r23,Y+2
 1338 0654 8B81      		ldd r24,Y+3
 1339 0656 9C81      		ldd r25,Y+4
 1340 0658 00D0      		rcall __mulsf3
 1341 065a DC01      		movw r26,r24
 1342 065c CB01      		movw r24,r22
 1343 065e 8F83      		std Y+7,r24
 1344 0660 9887      		std Y+8,r25
 1345 0662 A987      		std Y+9,r26
 1346 0664 BA87      		std Y+10,r27
 1348               	.LM96:
 1349 0666 20E0      		ldi r18,lo8(0x3f800000)
 1350 0668 30E0      		ldi r19,hi8(0x3f800000)
 1351 066a 40E8      		ldi r20,hlo8(0x3f800000)
 1352 066c 5FE3      		ldi r21,hhi8(0x3f800000)
 1353 066e 6F81      		ldd r22,Y+7
 1354 0670 7885      		ldd r23,Y+8
 1355 0672 8985      		ldd r24,Y+9
 1356 0674 9A85      		ldd r25,Y+10
 1357 0676 00D0      		rcall __ltsf2
 1358 0678 8823      		tst r24
 1359 067a 0CF0      		brlt .L60
 1361               	.LM97:
 1362 067c 05C0      		rjmp .L59
 1363               	.L60:
 1365               	.LM98:
 1366 067e 81E0      		ldi r24,lo8(1)
 1367 0680 90E0      		ldi r25,hi8(1)
 1368 0682 9E83      		std Y+6,r25
 1369 0684 8D83      		std Y+5,r24
 1370 0686 18C0      		rjmp .L61
 1371               	.L59:
 1373               	.LM99:
 1374 0688 20E0      		ldi r18,lo8(0x477fff00)
 1375 068a 3FEF      		ldi r19,hi8(0x477fff00)
 1376 068c 4FE7      		ldi r20,hlo8(0x477fff00)
 1377 068e 57E4      		ldi r21,hhi8(0x477fff00)
 1378 0690 6F81      		ldd r22,Y+7
 1379 0692 7885      		ldd r23,Y+8
 1380 0694 8985      		ldd r24,Y+9
 1381 0696 9A85      		ldd r25,Y+10
 1382 0698 00D0      		rcall __gtsf2
 1383 069a 1816      		cp __zero_reg__,r24
 1384 069c 0CF0      		brlt .L63
 1385 069e 03C0      		rjmp .L62
 1386               	.L63:
 1388               	.LM100:
 1389 06a0 1E82      		std Y+6,__zero_reg__
 1390 06a2 1D82      		std Y+5,__zero_reg__
 1391 06a4 09C0      		rjmp .L61
 1392               	.L62:
 1394               	.LM101:
 1395 06a6 6F81      		ldd r22,Y+7
 1396 06a8 7885      		ldd r23,Y+8
 1397 06aa 8985      		ldd r24,Y+9
 1398 06ac 9A85      		ldd r25,Y+10
 1399 06ae 00D0      		rcall __fixunssfsi
 1400 06b0 DC01      		movw r26,r24
 1401 06b2 CB01      		movw r24,r22
 1402 06b4 9E83      		std Y+6,r25
 1403 06b6 8D83      		std Y+5,r24
 1404               	.L61:
 1405               	.LBB12:
 1407               	.LM102:
 1408 06b8 8D81      		ldd r24,Y+5
 1409 06ba 9E81      		ldd r25,Y+6
 1410 06bc 9C87      		std Y+12,r25
 1411 06be 8B87      		std Y+11,r24
 1412               	.LBB13:
 1414               	.LM103:
 1415 06c0 8B85      		ldd r24,Y+11
 1416 06c2 9C85      		ldd r25,Y+12
 1417               	/* #APP */
 1418 06c4 0197      		1: sbiw r24,1
 1419 06c6 F1F7      		brne 1b
 1420               	/* #NOAPP */
 1421 06c8 9C87      		std Y+12,r25
 1422 06ca 8B87      		std Y+11,r24
 1423               	.LBE13:
 1424               	.LBE12:
 1425               	.LBE11:
 1426               	.LBE10:
 1428               	.Ltext6:
 220:ledmeter.c    ****     _delay_ms(50); //50
 221:ledmeter.c    ****     switch_off_leds_with_delay(50); //100
 1430               	.LM104:
 1431 06cc 60E0      		ldi r22,lo8(0x42480000)
 1432 06ce 70E0      		ldi r23,hi8(0x42480000)
 1433 06d0 88E4      		ldi r24,hlo8(0x42480000)
 1434 06d2 92E4      		ldi r25,hhi8(0x42480000)
 1435 06d4 35DF      		rcall switch_off_leds_with_delay
 1436               	/* epilogue: frame size=12 */
 1437 06d6 2C96      		adiw r28,12
 1438 06d8 0FB6      		in __tmp_reg__,__SREG__
 1439 06da F894      		cli
 1440 06dc DEBF      		out __SP_H__,r29
 1441 06de 0FBE      		out __SREG__,__tmp_reg__
 1442 06e0 CDBF      		out __SP_L__,r28
 1443 06e2 DF91      		pop r29
 1444 06e4 CF91      		pop r28
 1445 06e6 0895      		ret
 1446               	/* epilogue end (size=9) */
 1447               	/* function test_leds_up_down size 105 (86) */
 1459               	.Lscope12:
 1461               	.global	test_leds_up_off
 1463               	test_leds_up_off:
 222:ledmeter.c    **** }
 223:ledmeter.c    **** 
 224:ledmeter.c    **** void test_leds_up_off(void) {
 1465               	.LM105:
 1466               	/* prologue: frame size=12 */
 1467 06e8 CF93      		push r28
 1468 06ea DF93      		push r29
 1469 06ec CDB7      		in r28,__SP_L__
 1470 06ee DEB7      		in r29,__SP_H__
 1471 06f0 2C97      		sbiw r28,12
 1472 06f2 0FB6      		in __tmp_reg__,__SREG__
 1473 06f4 F894      		cli
 1474 06f6 DEBF      		out __SP_H__,r29
 1475 06f8 0FBE      		out __SREG__,__tmp_reg__
 1476 06fa CDBF      		out __SP_L__,r28
 1477               	/* prologue end (size=10) */
 225:ledmeter.c    ****     switch_on_leds_with_delay(50); //100
 1479               	.LM106:
 1480 06fc 60E0      		ldi r22,lo8(0x42480000)
 1481 06fe 70E0      		ldi r23,hi8(0x42480000)
 1482 0700 88E4      		ldi r24,hlo8(0x42480000)
 1483 0702 92E4      		ldi r25,hhi8(0x42480000)
 1484 0704 B0DE      		rcall switch_on_leds_with_delay
 1485               	.LBB14:
 1487               	.Ltext7:
 1489               	.LM107:
 1490 0706 80E0      		ldi r24,lo8(0x42480000)
 1491 0708 90E0      		ldi r25,hi8(0x42480000)
 1492 070a A8E4      		ldi r26,hlo8(0x42480000)
 1493 070c B2E4      		ldi r27,hhi8(0x42480000)
 1494 070e 8983      		std Y+1,r24
 1495 0710 9A83      		std Y+2,r25
 1496 0712 AB83      		std Y+3,r26
 1497 0714 BC83      		std Y+4,r27
 1498               	.LBB15:
 1500               	.LM108:
 1501 0716 20E0      		ldi r18,lo8(0x437a0000)
 1502 0718 30E0      		ldi r19,hi8(0x437a0000)
 1503 071a 4AE7      		ldi r20,hlo8(0x437a0000)
 1504 071c 53E4      		ldi r21,hhi8(0x437a0000)
 1505 071e 6981      		ldd r22,Y+1
 1506 0720 7A81      		ldd r23,Y+2
 1507 0722 8B81      		ldd r24,Y+3
 1508 0724 9C81      		ldd r25,Y+4
 1509 0726 00D0      		rcall __mulsf3
 1510 0728 DC01      		movw r26,r24
 1511 072a CB01      		movw r24,r22
 1512 072c 8F83      		std Y+7,r24
 1513 072e 9887      		std Y+8,r25
 1514 0730 A987      		std Y+9,r26
 1515 0732 BA87      		std Y+10,r27
 1517               	.LM109:
 1518 0734 20E0      		ldi r18,lo8(0x3f800000)
 1519 0736 30E0      		ldi r19,hi8(0x3f800000)
 1520 0738 40E8      		ldi r20,hlo8(0x3f800000)
 1521 073a 5FE3      		ldi r21,hhi8(0x3f800000)
 1522 073c 6F81      		ldd r22,Y+7
 1523 073e 7885      		ldd r23,Y+8
 1524 0740 8985      		ldd r24,Y+9
 1525 0742 9A85      		ldd r25,Y+10
 1526 0744 00D0      		rcall __ltsf2
 1527 0746 8823      		tst r24
 1528 0748 0CF0      		brlt .L69
 1530               	.LM110:
 1531 074a 05C0      		rjmp .L68
 1532               	.L69:
 1534               	.LM111:
 1535 074c 81E0      		ldi r24,lo8(1)
 1536 074e 90E0      		ldi r25,hi8(1)
 1537 0750 9E83      		std Y+6,r25
 1538 0752 8D83      		std Y+5,r24
 1539 0754 18C0      		rjmp .L70
 1540               	.L68:
 1542               	.LM112:
 1543 0756 20E0      		ldi r18,lo8(0x477fff00)
 1544 0758 3FEF      		ldi r19,hi8(0x477fff00)
 1545 075a 4FE7      		ldi r20,hlo8(0x477fff00)
 1546 075c 57E4      		ldi r21,hhi8(0x477fff00)
 1547 075e 6F81      		ldd r22,Y+7
 1548 0760 7885      		ldd r23,Y+8
 1549 0762 8985      		ldd r24,Y+9
 1550 0764 9A85      		ldd r25,Y+10
 1551 0766 00D0      		rcall __gtsf2
 1552 0768 1816      		cp __zero_reg__,r24
 1553 076a 0CF0      		brlt .L72
 1554 076c 03C0      		rjmp .L71
 1555               	.L72:
 1557               	.LM113:
 1558 076e 1E82      		std Y+6,__zero_reg__
 1559 0770 1D82      		std Y+5,__zero_reg__
 1560 0772 09C0      		rjmp .L70
 1561               	.L71:
 1563               	.LM114:
 1564 0774 6F81      		ldd r22,Y+7
 1565 0776 7885      		ldd r23,Y+8
 1566 0778 8985      		ldd r24,Y+9
 1567 077a 9A85      		ldd r25,Y+10
 1568 077c 00D0      		rcall __fixunssfsi
 1569 077e DC01      		movw r26,r24
 1570 0780 CB01      		movw r24,r22
 1571 0782 9E83      		std Y+6,r25
 1572 0784 8D83      		std Y+5,r24
 1573               	.L70:
 1574               	.LBB16:
 1576               	.LM115:
 1577 0786 8D81      		ldd r24,Y+5
 1578 0788 9E81      		ldd r25,Y+6
 1579 078a 9C87      		std Y+12,r25
 1580 078c 8B87      		std Y+11,r24
 1581               	.LBB17:
 1583               	.LM116:
 1584 078e 8B85      		ldd r24,Y+11
 1585 0790 9C85      		ldd r25,Y+12
 1586               	/* #APP */
 1587 0792 0197      		1: sbiw r24,1
 1588 0794 F1F7      		brne 1b
 1589               	/* #NOAPP */
 1590 0796 9C87      		std Y+12,r25
 1591 0798 8B87      		std Y+11,r24
 1592               	.LBE17:
 1593               	.LBE16:
 1594               	.LBE15:
 1595               	.LBE14:
 1597               	.Ltext8:
 226:ledmeter.c    ****     _delay_ms(50); //50
 227:ledmeter.c    ****     switch_off_all_leds();
 1599               	.LM117:
 1600 079a 0ADE      		rcall switch_off_all_leds
 1601               	/* epilogue: frame size=12 */
 1602 079c 2C96      		adiw r28,12
 1603 079e 0FB6      		in __tmp_reg__,__SREG__
 1604 07a0 F894      		cli
 1605 07a2 DEBF      		out __SP_H__,r29
 1606 07a4 0FBE      		out __SREG__,__tmp_reg__
 1607 07a6 CDBF      		out __SP_L__,r28
 1608 07a8 DF91      		pop r29
 1609 07aa CF91      		pop r28
 1610 07ac 0895      		ret
 1611               	/* epilogue end (size=9) */
 1612               	/* function test_leds_up_off size 101 (82) */
 1624               	.Lscope13:
 1627               	.global	switch_on_min_dels
 1629               	switch_on_min_dels:
 228:ledmeter.c    **** }
 229:ledmeter.c    **** 
 230:ledmeter.c    **** /*
 231:ledmeter.c    ****  *  switch on every leds (from 0 to n)  (and switch off others)
 232:ledmeter.c    ****  */
 233:ledmeter.c    **** void switch_on_min_dels(uint8_t n) {
 1631               	.LM118:
 1632               	/* prologue: frame size=2 */
 1633 07ae CF93      		push r28
 1634 07b0 DF93      		push r29
 1635 07b2 CDB7      		in r28,__SP_L__
 1636 07b4 DEB7      		in r29,__SP_H__
 1637 07b6 2297      		sbiw r28,2
 1638 07b8 0FB6      		in __tmp_reg__,__SREG__
 1639 07ba F894      		cli
 1640 07bc DEBF      		out __SP_H__,r29
 1641 07be 0FBE      		out __SREG__,__tmp_reg__
 1642 07c0 CDBF      		out __SP_L__,r28
 1643               	/* prologue end (size=10) */
 1644 07c2 8983      		std Y+1,r24
 234:ledmeter.c    ****     uint8_t i;
 235:ledmeter.c    ****     for(i = 1; i<=Nleds; i++) {
 1646               	.LM119:
 1647 07c4 81E0      		ldi r24,lo8(1)
 1648 07c6 8A83      		std Y+2,r24
 1649               	.L77:
 1651               	.LM120:
 1652 07c8 8A81      		ldd r24,Y+2
 1653 07ca 8930      		cpi r24,lo8(9)
 1654 07cc 68F4      		brsh .L76
 236:ledmeter.c    ****         if (i<=n) {
 1656               	.LM121:
 1657 07ce 9A81      		ldd r25,Y+2
 1658 07d0 8981      		ldd r24,Y+1
 1659 07d2 8917      		cp r24,r25
 1660 07d4 18F0      		brlo .L80
 237:ledmeter.c    ****             switch_on_led(i);
 1662               	.LM122:
 1663 07d6 8A81      		ldd r24,Y+2
 1664 07d8 F5DD      		rcall switch_on_led
 1665 07da 02C0      		rjmp .L79
 1666               	.L80:
 238:ledmeter.c    ****         } else {
 239:ledmeter.c    ****             switch_off_led(i);
 1668               	.LM123:
 1669 07dc 8A81      		ldd r24,Y+2
 1670 07de 1BDE      		rcall switch_off_led
 1671               	.L79:
 1673               	.LM124:
 1674 07e0 8A81      		ldd r24,Y+2
 1675 07e2 8F5F      		subi r24,lo8(-(1))
 1676 07e4 8A83      		std Y+2,r24
 1677 07e6 F0CF      		rjmp .L77
 1678               	.L76:
 1679               	/* epilogue: frame size=2 */
 1680 07e8 2296      		adiw r28,2
 1681 07ea 0FB6      		in __tmp_reg__,__SREG__
 1682 07ec F894      		cli
 1683 07ee DEBF      		out __SP_H__,r29
 1684 07f0 0FBE      		out __SREG__,__tmp_reg__
 1685 07f2 CDBF      		out __SP_L__,r28
 1686 07f4 DF91      		pop r29
 1687 07f6 CF91      		pop r28
 1688 07f8 0895      		ret
 1689               	/* epilogue end (size=9) */
 1690               	/* function switch_on_min_dels size 38 (19) */
 1695               	.Lscope14:
 1698               	.global	switch_on_max_dels
 1700               	switch_on_max_dels:
 240:ledmeter.c    ****         }
 241:ledmeter.c    ****     }
 242:ledmeter.c    **** }
 243:ledmeter.c    **** 
 244:ledmeter.c    **** /*
 245:ledmeter.c    ****  *  switch on every leds (from Nleds to n)
 246:ledmeter.c    ****  */
 247:ledmeter.c    **** void switch_on_max_dels(uint8_t n) {
 1702               	.LM125:
 1703               	/* prologue: frame size=2 */
 1704 07fa CF93      		push r28
 1705 07fc DF93      		push r29
 1706 07fe CDB7      		in r28,__SP_L__
 1707 0800 DEB7      		in r29,__SP_H__
 1708 0802 2297      		sbiw r28,2
 1709 0804 0FB6      		in __tmp_reg__,__SREG__
 1710 0806 F894      		cli
 1711 0808 DEBF      		out __SP_H__,r29
 1712 080a 0FBE      		out __SREG__,__tmp_reg__
 1713 080c CDBF      		out __SP_L__,r28
 1714               	/* prologue end (size=10) */
 1715 080e 8983      		std Y+1,r24
 248:ledmeter.c    ****     uint8_t i;
 249:ledmeter.c    ****     for(i = Nleds; i>=1; i--) {
 1717               	.LM126:
 1718 0810 88E0      		ldi r24,lo8(8)
 1719 0812 8A83      		std Y+2,r24
 1720               	.L83:
 1722               	.LM127:
 1723 0814 8A81      		ldd r24,Y+2
 1724 0816 8823      		tst r24
 1725 0818 B1F0      		breq .L82
 250:ledmeter.c    ****         if (i>=Nleds-n) {
 1727               	.LM128:
 1728 081a 8A81      		ldd r24,Y+2
 1729 081c 482F      		mov r20,r24
 1730 081e 5527      		clr r21
 1731 0820 8981      		ldd r24,Y+1
 1732 0822 282F      		mov r18,r24
 1733 0824 3327      		clr r19
 1734 0826 88E0      		ldi r24,lo8(8)
 1735 0828 90E0      		ldi r25,hi8(8)
 1736 082a 821B      		sub r24,r18
 1737 082c 930B      		sbc r25,r19
 1738 082e 4817      		cp r20,r24
 1739 0830 5907      		cpc r21,r25
 1740 0832 1CF0      		brlt .L86
 251:ledmeter.c    ****             switch_on_led(i);
 1742               	.LM129:
 1743 0834 8A81      		ldd r24,Y+2
 1744 0836 C6DD      		rcall switch_on_led
 1745 0838 02C0      		rjmp .L85
 1746               	.L86:
 252:ledmeter.c    ****         } else {
 253:ledmeter.c    ****             switch_off_led(i);
 1748               	.LM130:
 1749 083a 8A81      		ldd r24,Y+2
 1750 083c ECDD      		rcall switch_off_led
 1751               	.L85:
 1753               	.LM131:
 1754 083e 8A81      		ldd r24,Y+2
 1755 0840 8150      		subi r24,lo8(-(-1))
 1756 0842 8A83      		std Y+2,r24
 1757 0844 E7CF      		rjmp .L83
 1758               	.L82:
 1759               	/* epilogue: frame size=2 */
 1760 0846 2296      		adiw r28,2
 1761 0848 0FB6      		in __tmp_reg__,__SREG__
 1762 084a F894      		cli
 1763 084c DEBF      		out __SP_H__,r29
 1764 084e 0FBE      		out __SREG__,__tmp_reg__
 1765 0850 CDBF      		out __SP_L__,r28
 1766 0852 DF91      		pop r29
 1767 0854 CF91      		pop r28
 1768 0856 0895      		ret
 1769               	/* epilogue end (size=9) */
 1770               	/* function switch_on_max_dels size 47 (28) */
 1775               	.Lscope15:
 1779               	.global	led_alarm
 1781               	led_alarm:
 254:ledmeter.c    ****         }
 255:ledmeter.c    ****     }
 256:ledmeter.c    ****     // TO TEST (switch off)
 257:ledmeter.c    **** }
 258:ledmeter.c    **** 
 259:ledmeter.c    **** /*
 260:ledmeter.c    ****  * switch off every leds, wait and swith them all, n times (a sort of visual alarm)
 261:ledmeter.c    ****  */
 262:ledmeter.c    **** void led_alarm(uint8_t n, double delay) {
 1783               	.LM132:
 1784               	/* prologue: frame size=18 */
 1785 0858 CF93      		push r28
 1786 085a DF93      		push r29
 1787 085c CDB7      		in r28,__SP_L__
 1788 085e DEB7      		in r29,__SP_H__
 1789 0860 6297      		sbiw r28,18
 1790 0862 0FB6      		in __tmp_reg__,__SREG__
 1791 0864 F894      		cli
 1792 0866 DEBF      		out __SP_H__,r29
 1793 0868 0FBE      		out __SREG__,__tmp_reg__
 1794 086a CDBF      		out __SP_L__,r28
 1795               	/* prologue end (size=10) */
 1796 086c 8983      		std Y+1,r24
 1797 086e 4A83      		std Y+2,r20
 1798 0870 5B83      		std Y+3,r21
 1799 0872 6C83      		std Y+4,r22
 1800 0874 7D83      		std Y+5,r23
 263:ledmeter.c    ****     uint8_t i;
 264:ledmeter.c    ****     for(i = 1; i<=n; i++) {
 1802               	.LM133:
 1803 0876 81E0      		ldi r24,lo8(1)
 1804 0878 8E83      		std Y+6,r24
 1805               	.L89:
 1807               	.LM134:
 1808 087a 9E81      		ldd r25,Y+6
 1809 087c 8981      		ldd r24,Y+1
 1810 087e 8917      		cp r24,r25
 1811 0880 08F4      		brsh .+2
 1812 0882 9AC0      		rjmp .L90
 265:ledmeter.c    ****         switch_off_all_leds();
 1814               	.LM135:
 1815 0884 95DD      		rcall switch_off_all_leds
 1816               	.LBB18:
 1818               	.Ltext9:
 1820               	.LM136:
 1821 0886 8A81      		ldd r24,Y+2
 1822 0888 9B81      		ldd r25,Y+3
 1823 088a AC81      		ldd r26,Y+4
 1824 088c BD81      		ldd r27,Y+5
 1825 088e 8F83      		std Y+7,r24
 1826 0890 9887      		std Y+8,r25
 1827 0892 A987      		std Y+9,r26
 1828 0894 BA87      		std Y+10,r27
 1829               	.LBB19:
 1831               	.LM137:
 1832 0896 20E0      		ldi r18,lo8(0x437a0000)
 1833 0898 30E0      		ldi r19,hi8(0x437a0000)
 1834 089a 4AE7      		ldi r20,hlo8(0x437a0000)
 1835 089c 53E4      		ldi r21,hhi8(0x437a0000)
 1836 089e 6F81      		ldd r22,Y+7
 1837 08a0 7885      		ldd r23,Y+8
 1838 08a2 8985      		ldd r24,Y+9
 1839 08a4 9A85      		ldd r25,Y+10
 1840 08a6 00D0      		rcall __mulsf3
 1841 08a8 DC01      		movw r26,r24
 1842 08aa CB01      		movw r24,r22
 1843 08ac 8D87      		std Y+13,r24
 1844 08ae 9E87      		std Y+14,r25
 1845 08b0 AF87      		std Y+15,r26
 1846 08b2 B88B      		std Y+16,r27
 1848               	.LM138:
 1849 08b4 20E0      		ldi r18,lo8(0x3f800000)
 1850 08b6 30E0      		ldi r19,hi8(0x3f800000)
 1851 08b8 40E8      		ldi r20,hlo8(0x3f800000)
 1852 08ba 5FE3      		ldi r21,hhi8(0x3f800000)
 1853 08bc 6D85      		ldd r22,Y+13
 1854 08be 7E85      		ldd r23,Y+14
 1855 08c0 8F85      		ldd r24,Y+15
 1856 08c2 9889      		ldd r25,Y+16
 1857 08c4 00D0      		rcall __ltsf2
 1858 08c6 8823      		tst r24
 1859 08c8 0CF0      		brlt .L93
 1860 08ca 05C0      		rjmp .L92
 1861               	.L93:
 1863               	.LM139:
 1864 08cc 81E0      		ldi r24,lo8(1)
 1865 08ce 90E0      		ldi r25,hi8(1)
 1866 08d0 9C87      		std Y+12,r25
 1867 08d2 8B87      		std Y+11,r24
 1868 08d4 18C0      		rjmp .L94
 1869               	.L92:
 1871               	.LM140:
 1872 08d6 20E0      		ldi r18,lo8(0x477fff00)
 1873 08d8 3FEF      		ldi r19,hi8(0x477fff00)
 1874 08da 4FE7      		ldi r20,hlo8(0x477fff00)
 1875 08dc 57E4      		ldi r21,hhi8(0x477fff00)
 1876 08de 6D85      		ldd r22,Y+13
 1877 08e0 7E85      		ldd r23,Y+14
 1878 08e2 8F85      		ldd r24,Y+15
 1879 08e4 9889      		ldd r25,Y+16
 1880 08e6 00D0      		rcall __gtsf2
 1881 08e8 1816      		cp __zero_reg__,r24
 1882 08ea 0CF0      		brlt .L96
 1883 08ec 03C0      		rjmp .L95
 1884               	.L96:
 1886               	.LM141:
 1887 08ee 1C86      		std Y+12,__zero_reg__
 1888 08f0 1B86      		std Y+11,__zero_reg__
 1889 08f2 09C0      		rjmp .L94
 1890               	.L95:
 1892               	.LM142:
 1893 08f4 6D85      		ldd r22,Y+13
 1894 08f6 7E85      		ldd r23,Y+14
 1895 08f8 8F85      		ldd r24,Y+15
 1896 08fa 9889      		ldd r25,Y+16
 1897 08fc 00D0      		rcall __fixunssfsi
 1898 08fe DC01      		movw r26,r24
 1899 0900 CB01      		movw r24,r22
 1900 0902 9C87      		std Y+12,r25
 1901 0904 8B87      		std Y+11,r24
 1902               	.L94:
 1903               	.LBB20:
 1905               	.LM143:
 1906 0906 8B85      		ldd r24,Y+11
 1907 0908 9C85      		ldd r25,Y+12
 1908 090a 9A8B      		std Y+18,r25
 1909 090c 898B      		std Y+17,r24
 1910               	.LBB21:
 1912               	.LM144:
 1913 090e 8989      		ldd r24,Y+17
 1914 0910 9A89      		ldd r25,Y+18
 1915               	/* #APP */
 1916 0912 0197      		1: sbiw r24,1
 1917 0914 F1F7      		brne 1b
 1918               	/* #NOAPP */
 1919 0916 9A8B      		std Y+18,r25
 1920 0918 898B      		std Y+17,r24
 1921               	.LBE21:
 1922               	.LBE20:
 1923               	.LBE19:
 1924               	.LBE18:
 1926               	.Ltext10:
 266:ledmeter.c    ****         _delay_ms(delay);
 267:ledmeter.c    ****         switch_on_all_leds();
 1928               	.LM145:
 1929 091a 41DD      		rcall switch_on_all_leds
 1930               	.LBB22:
 1932               	.Ltext11:
 1934               	.LM146:
 1935 091c 8A81      		ldd r24,Y+2
 1936 091e 9B81      		ldd r25,Y+3
 1937 0920 AC81      		ldd r26,Y+4
 1938 0922 BD81      		ldd r27,Y+5
 1939 0924 8D87      		std Y+13,r24
 1940 0926 9E87      		std Y+14,r25
 1941 0928 AF87      		std Y+15,r26
 1942 092a B88B      		std Y+16,r27
 1943               	.LBB23:
 1945               	.LM147:
 1946 092c 20E0      		ldi r18,lo8(0x437a0000)
 1947 092e 30E0      		ldi r19,hi8(0x437a0000)
 1948 0930 4AE7      		ldi r20,hlo8(0x437a0000)
 1949 0932 53E4      		ldi r21,hhi8(0x437a0000)
 1950 0934 6D85      		ldd r22,Y+13
 1951 0936 7E85      		ldd r23,Y+14
 1952 0938 8F85      		ldd r24,Y+15
 1953 093a 9889      		ldd r25,Y+16
 1954 093c 00D0      		rcall __mulsf3
 1955 093e DC01      		movw r26,r24
 1956 0940 CB01      		movw r24,r22
 1957 0942 8F83      		std Y+7,r24
 1958 0944 9887      		std Y+8,r25
 1959 0946 A987      		std Y+9,r26
 1960 0948 BA87      		std Y+10,r27
 1962               	.LM148:
 1963 094a 20E0      		ldi r18,lo8(0x3f800000)
 1964 094c 30E0      		ldi r19,hi8(0x3f800000)
 1965 094e 40E8      		ldi r20,hlo8(0x3f800000)
 1966 0950 5FE3      		ldi r21,hhi8(0x3f800000)
 1967 0952 6F81      		ldd r22,Y+7
 1968 0954 7885      		ldd r23,Y+8
 1969 0956 8985      		ldd r24,Y+9
 1970 0958 9A85      		ldd r25,Y+10
 1971 095a 00D0      		rcall __ltsf2
 1972 095c 8823      		tst r24
 1973 095e 0CF0      		brlt .L101
 1974 0960 05C0      		rjmp .L100
 1975               	.L101:
 1977               	.LM149:
 1978 0962 81E0      		ldi r24,lo8(1)
 1979 0964 90E0      		ldi r25,hi8(1)
 1980 0966 9A8B      		std Y+18,r25
 1981 0968 898B      		std Y+17,r24
 1982 096a 18C0      		rjmp .L102
 1983               	.L100:
 1985               	.LM150:
 1986 096c 20E0      		ldi r18,lo8(0x477fff00)
 1987 096e 3FEF      		ldi r19,hi8(0x477fff00)
 1988 0970 4FE7      		ldi r20,hlo8(0x477fff00)
 1989 0972 57E4      		ldi r21,hhi8(0x477fff00)
 1990 0974 6F81      		ldd r22,Y+7
 1991 0976 7885      		ldd r23,Y+8
 1992 0978 8985      		ldd r24,Y+9
 1993 097a 9A85      		ldd r25,Y+10
 1994 097c 00D0      		rcall __gtsf2
 1995 097e 1816      		cp __zero_reg__,r24
 1996 0980 0CF0      		brlt .L104
 1997 0982 03C0      		rjmp .L103
 1998               	.L104:
 2000               	.LM151:
 2001 0984 1A8A      		std Y+18,__zero_reg__
 2002 0986 198A      		std Y+17,__zero_reg__
 2003 0988 09C0      		rjmp .L102
 2004               	.L103:
 2006               	.LM152:
 2007 098a 6F81      		ldd r22,Y+7
 2008 098c 7885      		ldd r23,Y+8
 2009 098e 8985      		ldd r24,Y+9
 2010 0990 9A85      		ldd r25,Y+10
 2011 0992 00D0      		rcall __fixunssfsi
 2012 0994 DC01      		movw r26,r24
 2013 0996 CB01      		movw r24,r22
 2014 0998 9A8B      		std Y+18,r25
 2015 099a 898B      		std Y+17,r24
 2016               	.L102:
 2017               	.LBB24:
 2019               	.LM153:
 2020 099c 8989      		ldd r24,Y+17
 2021 099e 9A89      		ldd r25,Y+18
 2022 09a0 9C87      		std Y+12,r25
 2023 09a2 8B87      		std Y+11,r24
 2024               	.LBB25:
 2026               	.LM154:
 2027 09a4 8B85      		ldd r24,Y+11
 2028 09a6 9C85      		ldd r25,Y+12
 2029               	/* #APP */
 2030 09a8 0197      		1: sbiw r24,1
 2031 09aa F1F7      		brne 1b
 2032               	/* #NOAPP */
 2033 09ac 9C87      		std Y+12,r25
 2034 09ae 8B87      		std Y+11,r24
 2035               	.LBE25:
 2036               	.LBE24:
 2037               	.LBE23:
 2038               	.LBE22:
 2040               	.Ltext12:
 2042               	.LM155:
 2043 09b0 8E81      		ldd r24,Y+6
 2044 09b2 8F5F      		subi r24,lo8(-(1))
 2045 09b4 8E83      		std Y+6,r24
 2046 09b6 61CF      		rjmp .L89
 2047               	.L90:
 268:ledmeter.c    ****         _delay_ms(delay);
 269:ledmeter.c    ****     }
 270:ledmeter.c    ****     switch_off_all_leds();
 2049               	.LM156:
 2050 09b8 FBDC      		rcall switch_off_all_leds
 2051               	/* epilogue: frame size=18 */
 2052 09ba 6296      		adiw r28,18
 2053 09bc 0FB6      		in __tmp_reg__,__SREG__
 2054 09be F894      		cli
 2055 09c0 DEBF      		out __SP_H__,r29
 2056 09c2 0FBE      		out __SREG__,__tmp_reg__
 2057 09c4 CDBF      		out __SP_L__,r28
 2058 09c6 DF91      		pop r29
 2059 09c8 CF91      		pop r28
 2060 09ca 0895      		ret
 2061               	/* epilogue end (size=9) */
 2062               	/* function led_alarm size 190 (171) */
 2087               	.Lscope16:
 2090               	.global	roundp
 2092               	roundp:
 271:ledmeter.c    **** }
 272:ledmeter.c    **** 
 273:ledmeter.c    **** /*
 274:ledmeter.c    ****  * switch on every dels depending of the percentage p
 275:ledmeter.c    ****  */
 276:ledmeter.c    **** //#define roundp floor
 277:ledmeter.c    **** inline uint8_t roundp(double n) {
 2094               	.LM157:
 2095               	/* prologue: frame size=4 */
 2096 09cc CF93      		push r28
 2097 09ce DF93      		push r29
 2098 09d0 CDB7      		in r28,__SP_L__
 2099 09d2 DEB7      		in r29,__SP_H__
 2100 09d4 2497      		sbiw r28,4
 2101 09d6 0FB6      		in __tmp_reg__,__SREG__
 2102 09d8 F894      		cli
 2103 09da DEBF      		out __SP_H__,r29
 2104 09dc 0FBE      		out __SREG__,__tmp_reg__
 2105 09de CDBF      		out __SP_L__,r28
 2106               	/* prologue end (size=10) */
 2107 09e0 6983      		std Y+1,r22
 2108 09e2 7A83      		std Y+2,r23
 2109 09e4 8B83      		std Y+3,r24
 2110 09e6 9C83      		std Y+4,r25
 278:ledmeter.c    ****     return floor(n+0.5);
 2112               	.LM158:
 2113 09e8 20E0      		ldi r18,lo8(0x3f000000)
 2114 09ea 30E0      		ldi r19,hi8(0x3f000000)
 2115 09ec 40E0      		ldi r20,hlo8(0x3f000000)
 2116 09ee 5FE3      		ldi r21,hhi8(0x3f000000)
 2117 09f0 6981      		ldd r22,Y+1
 2118 09f2 7A81      		ldd r23,Y+2
 2119 09f4 8B81      		ldd r24,Y+3
 2120 09f6 9C81      		ldd r25,Y+4
 2121 09f8 00D0      		rcall __addsf3
 2122 09fa DC01      		movw r26,r24
 2123 09fc CB01      		movw r24,r22
 2124 09fe BC01      		movw r22,r24
 2125 0a00 CD01      		movw r24,r26
 2126 0a02 00D0      		rcall floor
 2127 0a04 DC01      		movw r26,r24
 2128 0a06 CB01      		movw r24,r22
 2129 0a08 BC01      		movw r22,r24
 2130 0a0a CD01      		movw r24,r26
 2131 0a0c 00D0      		rcall __fixunssfsi
 2132 0a0e DC01      		movw r26,r24
 2133 0a10 CB01      		movw r24,r22
 2134 0a12 9927      		clr r25
 2135               	/* epilogue: frame size=4 */
 2136 0a14 2496      		adiw r28,4
 2137 0a16 0FB6      		in __tmp_reg__,__SREG__
 2138 0a18 F894      		cli
 2139 0a1a DEBF      		out __SP_H__,r29
 2140 0a1c 0FBE      		out __SREG__,__tmp_reg__
 2141 0a1e CDBF      		out __SP_L__,r28
 2142 0a20 DF91      		pop r29
 2143 0a22 CF91      		pop r28
 2144 0a24 0895      		ret
 2145               	/* epilogue end (size=9) */
 2146               	/* function roundp size 45 (26) */
 2148               	.Lscope17:
 2151               	.global	show_percent
 2153               	show_percent:
 279:ledmeter.c    **** }
 280:ledmeter.c    **** 
 281:ledmeter.c    **** // roundp = round for positive number
 282:ledmeter.c    **** void show_percent(double p) {
 2155               	.LM159:
 2156               	/* prologue: frame size=5 */
 2157 0a26 CF93      		push r28
 2158 0a28 DF93      		push r29
 2159 0a2a CDB7      		in r28,__SP_L__
 2160 0a2c DEB7      		in r29,__SP_H__
 2161 0a2e 2597      		sbiw r28,5
 2162 0a30 0FB6      		in __tmp_reg__,__SREG__
 2163 0a32 F894      		cli
 2164 0a34 DEBF      		out __SP_H__,r29
 2165 0a36 0FBE      		out __SREG__,__tmp_reg__
 2166 0a38 CDBF      		out __SP_L__,r28
 2167               	/* prologue end (size=10) */
 2168 0a3a 6983      		std Y+1,r22
 2169 0a3c 7A83      		std Y+2,r23
 2170 0a3e 8B83      		std Y+3,r24
 2171 0a40 9C83      		std Y+4,r25
 283:ledmeter.c    ****     // p pourcent
 284:ledmeter.c    ****     uint8_t n;
 285:ledmeter.c    ****     //n = 4;
 286:ledmeter.c    ****     n = roundp(p / 100.0 * Nleds); // TO FIX (math.h ceil floor ... round en Java !)
 2173               	.LM160:
 2174 0a42 20E0      		ldi r18,lo8(0x42c80000)
 2175 0a44 30E0      		ldi r19,hi8(0x42c80000)
 2176 0a46 48EC      		ldi r20,hlo8(0x42c80000)
 2177 0a48 52E4      		ldi r21,hhi8(0x42c80000)
 2178 0a4a 6981      		ldd r22,Y+1
 2179 0a4c 7A81      		ldd r23,Y+2
 2180 0a4e 8B81      		ldd r24,Y+3
 2181 0a50 9C81      		ldd r25,Y+4
 2182 0a52 00D0      		rcall __divsf3
 2183 0a54 DC01      		movw r26,r24
 2184 0a56 CB01      		movw r24,r22
 2185 0a58 20E0      		ldi r18,lo8(0x41000000)
 2186 0a5a 30E0      		ldi r19,hi8(0x41000000)
 2187 0a5c 40E0      		ldi r20,hlo8(0x41000000)
 2188 0a5e 51E4      		ldi r21,hhi8(0x41000000)
 2189 0a60 BC01      		movw r22,r24
 2190 0a62 CD01      		movw r24,r26
 2191 0a64 00D0      		rcall __mulsf3
 2192 0a66 DC01      		movw r26,r24
 2193 0a68 CB01      		movw r24,r22
 2194 0a6a BC01      		movw r22,r24
 2195 0a6c CD01      		movw r24,r26
 2196 0a6e AEDF      		rcall roundp
 2197 0a70 8D83      		std Y+5,r24
 287:ledmeter.c    ****     // TO FIX : +0.5 is a very dirty hack
 288:ledmeter.c    ****     switch_on_min_dels(n);
 2199               	.LM161:
 2200 0a72 8D81      		ldd r24,Y+5
 2201 0a74 9CDE      		rcall switch_on_min_dels
 2202               	/* epilogue: frame size=5 */
 2203 0a76 2596      		adiw r28,5
 2204 0a78 0FB6      		in __tmp_reg__,__SREG__
 2205 0a7a F894      		cli
 2206 0a7c DEBF      		out __SP_H__,r29
 2207 0a7e 0FBE      		out __SREG__,__tmp_reg__
 2208 0a80 CDBF      		out __SP_L__,r28
 2209 0a82 DF91      		pop r29
 2210 0a84 CF91      		pop r28
 2211 0a86 0895      		ret
 2212               	/* epilogue end (size=9) */
 2213               	/* function show_percent size 49 (30) */
 2218               	.Lscope18:
 2222               	.global	beep
 2224               	beep:
 289:ledmeter.c    **** }
 290:ledmeter.c    **** 
 291:ledmeter.c    **** /*
 292:ledmeter.c    ****  * send a sound (on or more beep(s))
 293:ledmeter.c    ****  */
 294:ledmeter.c    **** void beep(uint8_t n, double delay) {
 2226               	.LM162:
 2227               	/* prologue: frame size=18 */
 2228 0a88 CF93      		push r28
 2229 0a8a DF93      		push r29
 2230 0a8c CDB7      		in r28,__SP_L__
 2231 0a8e DEB7      		in r29,__SP_H__
 2232 0a90 6297      		sbiw r28,18
 2233 0a92 0FB6      		in __tmp_reg__,__SREG__
 2234 0a94 F894      		cli
 2235 0a96 DEBF      		out __SP_H__,r29
 2236 0a98 0FBE      		out __SREG__,__tmp_reg__
 2237 0a9a CDBF      		out __SP_L__,r28
 2238               	/* prologue end (size=10) */
 2239 0a9c 8983      		std Y+1,r24
 2240 0a9e 4A83      		std Y+2,r20
 2241 0aa0 5B83      		std Y+3,r21
 2242 0aa2 6C83      		std Y+4,r22
 2243 0aa4 7D83      		std Y+5,r23
 295:ledmeter.c    ****     // TO DO
 296:ledmeter.c    ****     uint8_t i;
 297:ledmeter.c    ****     for(i = 1; i<=n; i++) {
 2245               	.LM163:
 2246 0aa6 81E0      		ldi r24,lo8(1)
 2247 0aa8 8E83      		std Y+6,r24
 2248               	.L111:
 2250               	.LM164:
 2251 0aaa 9E81      		ldd r25,Y+6
 2252 0aac 8981      		ldd r24,Y+1
 2253 0aae 8917      		cp r24,r25
 2254 0ab0 08F4      		brsh .+2
 2255 0ab2 52C0      		rjmp .L110
 298:ledmeter.c    ****         //TO DO : send a beep
 299:ledmeter.c    ****         if (n>1) {
 2257               	.LM165:
 2258 0ab4 8981      		ldd r24,Y+1
 2259 0ab6 8230      		cpi r24,lo8(2)
 2260 0ab8 08F4      		brsh .+2
 2261 0aba 4AC0      		rjmp .L113
 2262               	.LBB26:
 2264               	.Ltext13:
 2266               	.LM166:
 2267 0abc 8A81      		ldd r24,Y+2
 2268 0abe 9B81      		ldd r25,Y+3
 2269 0ac0 AC81      		ldd r26,Y+4
 2270 0ac2 BD81      		ldd r27,Y+5
 2271 0ac4 8F83      		std Y+7,r24
 2272 0ac6 9887      		std Y+8,r25
 2273 0ac8 A987      		std Y+9,r26
 2274 0aca BA87      		std Y+10,r27
 2275               	.LBB27:
 2277               	.LM167:
 2278 0acc 20E0      		ldi r18,lo8(0x437a0000)
 2279 0ace 30E0      		ldi r19,hi8(0x437a0000)
 2280 0ad0 4AE7      		ldi r20,hlo8(0x437a0000)
 2281 0ad2 53E4      		ldi r21,hhi8(0x437a0000)
 2282 0ad4 6F81      		ldd r22,Y+7
 2283 0ad6 7885      		ldd r23,Y+8
 2284 0ad8 8985      		ldd r24,Y+9
 2285 0ada 9A85      		ldd r25,Y+10
 2286 0adc 00D0      		rcall __mulsf3
 2287 0ade DC01      		movw r26,r24
 2288 0ae0 CB01      		movw r24,r22
 2289 0ae2 8D87      		std Y+13,r24
 2290 0ae4 9E87      		std Y+14,r25
 2291 0ae6 AF87      		std Y+15,r26
 2292 0ae8 B88B      		std Y+16,r27
 2294               	.LM168:
 2295 0aea 20E0      		ldi r18,lo8(0x3f800000)
 2296 0aec 30E0      		ldi r19,hi8(0x3f800000)
 2297 0aee 40E8      		ldi r20,hlo8(0x3f800000)
 2298 0af0 5FE3      		ldi r21,hhi8(0x3f800000)
 2299 0af2 6D85      		ldd r22,Y+13
 2300 0af4 7E85      		ldd r23,Y+14
 2301 0af6 8F85      		ldd r24,Y+15
 2302 0af8 9889      		ldd r25,Y+16
 2303 0afa 00D0      		rcall __ltsf2
 2304 0afc 8823      		tst r24
 2305 0afe 0CF0      		brlt .L116
 2306 0b00 05C0      		rjmp .L115
 2307               	.L116:
 2309               	.LM169:
 2310 0b02 81E0      		ldi r24,lo8(1)
 2311 0b04 90E0      		ldi r25,hi8(1)
 2312 0b06 9C87      		std Y+12,r25
 2313 0b08 8B87      		std Y+11,r24
 2314 0b0a 18C0      		rjmp .L117
 2315               	.L115:
 2317               	.LM170:
 2318 0b0c 20E0      		ldi r18,lo8(0x477fff00)
 2319 0b0e 3FEF      		ldi r19,hi8(0x477fff00)
 2320 0b10 4FE7      		ldi r20,hlo8(0x477fff00)
 2321 0b12 57E4      		ldi r21,hhi8(0x477fff00)
 2322 0b14 6D85      		ldd r22,Y+13
 2323 0b16 7E85      		ldd r23,Y+14
 2324 0b18 8F85      		ldd r24,Y+15
 2325 0b1a 9889      		ldd r25,Y+16
 2326 0b1c 00D0      		rcall __gtsf2
 2327 0b1e 1816      		cp __zero_reg__,r24
 2328 0b20 0CF0      		brlt .L119
 2329 0b22 03C0      		rjmp .L118
 2330               	.L119:
 2332               	.LM171:
 2333 0b24 1C86      		std Y+12,__zero_reg__
 2334 0b26 1B86      		std Y+11,__zero_reg__
 2335 0b28 09C0      		rjmp .L117
 2336               	.L118:
 2338               	.LM172:
 2339 0b2a 6D85      		ldd r22,Y+13
 2340 0b2c 7E85      		ldd r23,Y+14
 2341 0b2e 8F85      		ldd r24,Y+15
 2342 0b30 9889      		ldd r25,Y+16
 2343 0b32 00D0      		rcall __fixunssfsi
 2344 0b34 DC01      		movw r26,r24
 2345 0b36 CB01      		movw r24,r22
 2346 0b38 9C87      		std Y+12,r25
 2347 0b3a 8B87      		std Y+11,r24
 2348               	.L117:
 2349               	.LBB28:
 2351               	.LM173:
 2352 0b3c 8B85      		ldd r24,Y+11
 2353 0b3e 9C85      		ldd r25,Y+12
 2354 0b40 9A8B      		std Y+18,r25
 2355 0b42 898B      		std Y+17,r24
 2356               	.LBB29:
 2358               	.LM174:
 2359 0b44 8989      		ldd r24,Y+17
 2360 0b46 9A89      		ldd r25,Y+18
 2361               	/* #APP */
 2362 0b48 0197      		1: sbiw r24,1
 2363 0b4a F1F7      		brne 1b
 2364               	/* #NOAPP */
 2365 0b4c 9A8B      		std Y+18,r25
 2366 0b4e 898B      		std Y+17,r24
 2367               	.L113:
 2368               	.LBE29:
 2369               	.LBE28:
 2370               	.LBE27:
 2371               	.LBE26:
 2373               	.Ltext14:
 2375               	.LM175:
 2376 0b50 8E81      		ldd r24,Y+6
 2377 0b52 8F5F      		subi r24,lo8(-(1))
 2378 0b54 8E83      		std Y+6,r24
 2379 0b56 A9CF      		rjmp .L111
 2380               	.L110:
 2381               	/* epilogue: frame size=18 */
 2382 0b58 6296      		adiw r28,18
 2383 0b5a 0FB6      		in __tmp_reg__,__SREG__
 2384 0b5c F894      		cli
 2385 0b5e DEBF      		out __SP_H__,r29
 2386 0b60 0FBE      		out __SREG__,__tmp_reg__
 2387 0b62 CDBF      		out __SP_L__,r28
 2388 0b64 DF91      		pop r29
 2389 0b66 CF91      		pop r28
 2390 0b68 0895      		ret
 2391               	/* epilogue end (size=9) */
 2392               	/* function beep size 115 (96) */
 2407               	.Lscope19:
 2409               	.global	StartStopChronometer
 2411               	StartStopChronometer:
 300:ledmeter.c    ****             _delay_ms(delay);
 301:ledmeter.c    ****         }
 302:ledmeter.c    ****     }
 303:ledmeter.c    **** }
 304:ledmeter.c    **** 
 305:ledmeter.c    **** /*
 306:ledmeter.c    ****  * start or stop chronometer
 307:ledmeter.c    ****  */
 308:ledmeter.c    **** inline void StartStopChronometer(void) {
 2413               	.LM176:
 2414               	/* prologue: frame size=0 */
 2415 0b6a CF93      		push r28
 2416 0b6c DF93      		push r29
 2417 0b6e CDB7      		in r28,__SP_L__
 2418 0b70 DEB7      		in r29,__SP_H__
 2419               	/* prologue end (size=4) */
 309:ledmeter.c    ****     beep(1,100);
 2421               	.LM177:
 2422 0b72 40E0      		ldi r20,lo8(0x42c80000)
 2423 0b74 50E0      		ldi r21,hi8(0x42c80000)
 2424 0b76 68EC      		ldi r22,hlo8(0x42c80000)
 2425 0b78 72E4      		ldi r23,hhi8(0x42c80000)
 2426 0b7a 81E0      		ldi r24,lo8(1)
 2427 0b7c 85DF      		rcall beep
 310:ledmeter.c    ****     led_alarm(3,50);
 2429               	.LM178:
 2430 0b7e 40E0      		ldi r20,lo8(0x42480000)
 2431 0b80 50E0      		ldi r21,hi8(0x42480000)
 2432 0b82 68E4      		ldi r22,hlo8(0x42480000)
 2433 0b84 72E4      		ldi r23,hhi8(0x42480000)
 2434 0b86 83E0      		ldi r24,lo8(3)
 2435 0b88 67DE      		rcall led_alarm
 311:ledmeter.c    ****     if (running_chronometer) {
 2437               	.LM179:
 2438 0b8a 8091 0000 		lds r24,running_chronometer
 2439 0b8e 8823      		tst r24
 2440 0b90 91F0      		breq .L124
 312:ledmeter.c    ****         //running_chronometer = false; // false = 0
 313:ledmeter.c    ****         if (compare_time(&current_time,&best_time) == 1) {
 2442               	.LM180:
 2443 0b92 60E0      		ldi r22,lo8(best_time)
 2444 0b94 70E0      		ldi r23,hi8(best_time)
 2445 0b96 80E0      		ldi r24,lo8(current_time)
 2446 0b98 90E0      		ldi r25,hi8(current_time)
 2447 0b9a 82DB      		rcall compare_time
 2448 0b9c 8130      		cpi r24,lo8(1)
 2449 0b9e 29F4      		brne .L125
 314:ledmeter.c    ****             copy_time(&current_time,&best_time);
 2451               	.LM181:
 2452 0ba0 60E0      		ldi r22,lo8(best_time)
 2453 0ba2 70E0      		ldi r23,hi8(best_time)
 2454 0ba4 80E0      		ldi r24,lo8(current_time)
 2455 0ba6 90E0      		ldi r25,hi8(current_time)
 2456 0ba8 47DB      		rcall copy_time
 2457               	.L125:
 315:ledmeter.c    ****         }
 316:ledmeter.c    ****         copy_time(&current_time,&last_time);
 2459               	.LM182:
 2460 0baa 60E0      		ldi r22,lo8(last_time)
 2461 0bac 70E0      		ldi r23,hi8(last_time)
 2462 0bae 80E0      		ldi r24,lo8(current_time)
 2463 0bb0 90E0      		ldi r25,hi8(current_time)
 2464 0bb2 42DB      		rcall copy_time
 2465 0bb4 03C0      		rjmp .L123
 2466               	.L124:
 317:ledmeter.c    ****     } else {
 318:ledmeter.c    ****         // this is before first lap (start from pit)
 319:ledmeter.c    ****         running_chronometer = true; // true = -1
 2468               	.LM183:
 2469 0bb6 81E0      		ldi r24,lo8(1)
 2470 0bb8 8093 0000 		sts running_chronometer,r24
 2471               	.L123:
 2472               	/* epilogue: frame size=0 */
 2473 0bbc DF91      		pop r29
 2474 0bbe CF91      		pop r28
 2475 0bc0 0895      		ret
 2476               	/* epilogue end (size=3) */
 2477               	/* function StartStopChronometer size 44 (37) */
 2479               	.Lscope20:
 2481               	.global	TestRunningChronometer
 2483               	TestRunningChronometer:
 320:ledmeter.c    ****         // this is after first lap
 321:ledmeter.c    ****     }
 322:ledmeter.c    **** }
 323:ledmeter.c    **** 
 324:ledmeter.c    **** void TestRunningChronometer(void) {
 2485               	.LM184:
 2486               	/* prologue: frame size=12 */
 2487 0bc2 CF93      		push r28
 2488 0bc4 DF93      		push r29
 2489 0bc6 CDB7      		in r28,__SP_L__
 2490 0bc8 DEB7      		in r29,__SP_H__
 2491 0bca 2C97      		sbiw r28,12
 2492 0bcc 0FB6      		in __tmp_reg__,__SREG__
 2493 0bce F894      		cli
 2494 0bd0 DEBF      		out __SP_H__,r29
 2495 0bd2 0FBE      		out __SREG__,__tmp_reg__
 2496 0bd4 CDBF      		out __SP_L__,r28
 2497               	/* prologue end (size=10) */
 325:ledmeter.c    ****     if (running_chronometer) {
 2499               	.LM185:
 2500 0bd6 8091 0000 		lds r24,running_chronometer
 2501 0bda 8823      		tst r24
 2502 0bdc 09F4      		brne .+2
 2503 0bde 98C0      		rjmp .L127
 326:ledmeter.c    ****         switch_on_led(8);
 2505               	.LM186:
 2506 0be0 88E0      		ldi r24,lo8(8)
 2507 0be2 F0DB      		rcall switch_on_led
 2508               	.LBB30:
 2510               	.Ltext15:
 2512               	.LM187:
 2513 0be4 80E0      		ldi r24,lo8(0x42c80000)
 2514 0be6 90E0      		ldi r25,hi8(0x42c80000)
 2515 0be8 A8EC      		ldi r26,hlo8(0x42c80000)
 2516 0bea B2E4      		ldi r27,hhi8(0x42c80000)
 2517 0bec 8983      		std Y+1,r24
 2518 0bee 9A83      		std Y+2,r25
 2519 0bf0 AB83      		std Y+3,r26
 2520 0bf2 BC83      		std Y+4,r27
 2521               	.LBB31:
 2523               	.LM188:
 2524 0bf4 20E0      		ldi r18,lo8(0x437a0000)
 2525 0bf6 30E0      		ldi r19,hi8(0x437a0000)
 2526 0bf8 4AE7      		ldi r20,hlo8(0x437a0000)
 2527 0bfa 53E4      		ldi r21,hhi8(0x437a0000)
 2528 0bfc 6981      		ldd r22,Y+1
 2529 0bfe 7A81      		ldd r23,Y+2
 2530 0c00 8B81      		ldd r24,Y+3
 2531 0c02 9C81      		ldd r25,Y+4
 2532 0c04 00D0      		rcall __mulsf3
 2533 0c06 DC01      		movw r26,r24
 2534 0c08 CB01      		movw r24,r22
 2535 0c0a 8F83      		std Y+7,r24
 2536 0c0c 9887      		std Y+8,r25
 2537 0c0e A987      		std Y+9,r26
 2538 0c10 BA87      		std Y+10,r27
 2540               	.LM189:
 2541 0c12 20E0      		ldi r18,lo8(0x3f800000)
 2542 0c14 30E0      		ldi r19,hi8(0x3f800000)
 2543 0c16 40E8      		ldi r20,hlo8(0x3f800000)
 2544 0c18 5FE3      		ldi r21,hhi8(0x3f800000)
 2545 0c1a 6F81      		ldd r22,Y+7
 2546 0c1c 7885      		ldd r23,Y+8
 2547 0c1e 8985      		ldd r24,Y+9
 2548 0c20 9A85      		ldd r25,Y+10
 2549 0c22 00D0      		rcall __ltsf2
 2550 0c24 8823      		tst r24
 2551 0c26 0CF0      		brlt .L130
 2552 0c28 05C0      		rjmp .L129
 2553               	.L130:
 2555               	.LM190:
 2556 0c2a 81E0      		ldi r24,lo8(1)
 2557 0c2c 90E0      		ldi r25,hi8(1)
 2558 0c2e 9E83      		std Y+6,r25
 2559 0c30 8D83      		std Y+5,r24
 2560 0c32 18C0      		rjmp .L131
 2561               	.L129:
 2563               	.LM191:
 2564 0c34 20E0      		ldi r18,lo8(0x477fff00)
 2565 0c36 3FEF      		ldi r19,hi8(0x477fff00)
 2566 0c38 4FE7      		ldi r20,hlo8(0x477fff00)
 2567 0c3a 57E4      		ldi r21,hhi8(0x477fff00)
 2568 0c3c 6F81      		ldd r22,Y+7
 2569 0c3e 7885      		ldd r23,Y+8
 2570 0c40 8985      		ldd r24,Y+9
 2571 0c42 9A85      		ldd r25,Y+10
 2572 0c44 00D0      		rcall __gtsf2
 2573 0c46 1816      		cp __zero_reg__,r24
 2574 0c48 0CF0      		brlt .L133
 2575 0c4a 03C0      		rjmp .L132
 2576               	.L133:
 2578               	.LM192:
 2579 0c4c 1E82      		std Y+6,__zero_reg__
 2580 0c4e 1D82      		std Y+5,__zero_reg__
 2581 0c50 09C0      		rjmp .L131
 2582               	.L132:
 2584               	.LM193:
 2585 0c52 6F81      		ldd r22,Y+7
 2586 0c54 7885      		ldd r23,Y+8
 2587 0c56 8985      		ldd r24,Y+9
 2588 0c58 9A85      		ldd r25,Y+10
 2589 0c5a 00D0      		rcall __fixunssfsi
 2590 0c5c DC01      		movw r26,r24
 2591 0c5e CB01      		movw r24,r22
 2592 0c60 9E83      		std Y+6,r25
 2593 0c62 8D83      		std Y+5,r24
 2594               	.L131:
 2595               	.LBB32:
 2597               	.LM194:
 2598 0c64 8D81      		ldd r24,Y+5
 2599 0c66 9E81      		ldd r25,Y+6
 2600 0c68 9C87      		std Y+12,r25
 2601 0c6a 8B87      		std Y+11,r24
 2602               	.LBB33:
 2604               	.LM195:
 2605 0c6c 8B85      		ldd r24,Y+11
 2606 0c6e 9C85      		ldd r25,Y+12
 2607               	/* #APP */
 2608 0c70 0197      		1: sbiw r24,1
 2609 0c72 F1F7      		brne 1b
 2610               	/* #NOAPP */
 2611 0c74 9C87      		std Y+12,r25
 2612 0c76 8B87      		std Y+11,r24
 2613               	.LBE33:
 2614               	.LBE32:
 2615               	.LBE31:
 2616               	.LBE30:
 2618               	.Ltext16:
 327:ledmeter.c    ****         _delay_ms(100);
 328:ledmeter.c    ****         switch_off_led(8);
 2620               	.LM196:
 2621 0c78 88E0      		ldi r24,lo8(8)
 2622 0c7a CDDB      		rcall switch_off_led
 2623               	.LBB34:
 2625               	.Ltext17:
 2627               	.LM197:
 2628 0c7c 80E0      		ldi r24,lo8(0x42c80000)
 2629 0c7e 90E0      		ldi r25,hi8(0x42c80000)
 2630 0c80 A8EC      		ldi r26,hlo8(0x42c80000)
 2631 0c82 B2E4      		ldi r27,hhi8(0x42c80000)
 2632 0c84 8F83      		std Y+7,r24
 2633 0c86 9887      		std Y+8,r25
 2634 0c88 A987      		std Y+9,r26
 2635 0c8a BA87      		std Y+10,r27
 2636               	.LBB35:
 2638               	.LM198:
 2639 0c8c 20E0      		ldi r18,lo8(0x437a0000)
 2640 0c8e 30E0      		ldi r19,hi8(0x437a0000)
 2641 0c90 4AE7      		ldi r20,hlo8(0x437a0000)
 2642 0c92 53E4      		ldi r21,hhi8(0x437a0000)
 2643 0c94 6F81      		ldd r22,Y+7
 2644 0c96 7885      		ldd r23,Y+8
 2645 0c98 8985      		ldd r24,Y+9
 2646 0c9a 9A85      		ldd r25,Y+10
 2647 0c9c 00D0      		rcall __mulsf3
 2648 0c9e DC01      		movw r26,r24
 2649 0ca0 CB01      		movw r24,r22
 2650 0ca2 8983      		std Y+1,r24
 2651 0ca4 9A83      		std Y+2,r25
 2652 0ca6 AB83      		std Y+3,r26
 2653 0ca8 BC83      		std Y+4,r27
 2655               	.LM199:
 2656 0caa 20E0      		ldi r18,lo8(0x3f800000)
 2657 0cac 30E0      		ldi r19,hi8(0x3f800000)
 2658 0cae 40E8      		ldi r20,hlo8(0x3f800000)
 2659 0cb0 5FE3      		ldi r21,hhi8(0x3f800000)
 2660 0cb2 6981      		ldd r22,Y+1
 2661 0cb4 7A81      		ldd r23,Y+2
 2662 0cb6 8B81      		ldd r24,Y+3
 2663 0cb8 9C81      		ldd r25,Y+4
 2664 0cba 00D0      		rcall __ltsf2
 2665 0cbc 8823      		tst r24
 2666 0cbe 0CF0      		brlt .L138
 2667 0cc0 05C0      		rjmp .L137
 2668               	.L138:
 2670               	.LM200:
 2671 0cc2 81E0      		ldi r24,lo8(1)
 2672 0cc4 90E0      		ldi r25,hi8(1)
 2673 0cc6 9C87      		std Y+12,r25
 2674 0cc8 8B87      		std Y+11,r24
 2675 0cca 18C0      		rjmp .L139
 2676               	.L137:
 2678               	.LM201:
 2679 0ccc 20E0      		ldi r18,lo8(0x477fff00)
 2680 0cce 3FEF      		ldi r19,hi8(0x477fff00)
 2681 0cd0 4FE7      		ldi r20,hlo8(0x477fff00)
 2682 0cd2 57E4      		ldi r21,hhi8(0x477fff00)
 2683 0cd4 6981      		ldd r22,Y+1
 2684 0cd6 7A81      		ldd r23,Y+2
 2685 0cd8 8B81      		ldd r24,Y+3
 2686 0cda 9C81      		ldd r25,Y+4
 2687 0cdc 00D0      		rcall __gtsf2
 2688 0cde 1816      		cp __zero_reg__,r24
 2689 0ce0 0CF0      		brlt .L141
 2690 0ce2 03C0      		rjmp .L140
 2691               	.L141:
 2693               	.LM202:
 2694 0ce4 1C86      		std Y+12,__zero_reg__
 2695 0ce6 1B86      		std Y+11,__zero_reg__
 2696 0ce8 09C0      		rjmp .L139
 2697               	.L140:
 2699               	.LM203:
 2700 0cea 6981      		ldd r22,Y+1
 2701 0cec 7A81      		ldd r23,Y+2
 2702 0cee 8B81      		ldd r24,Y+3
 2703 0cf0 9C81      		ldd r25,Y+4
 2704 0cf2 00D0      		rcall __fixunssfsi
 2705 0cf4 DC01      		movw r26,r24
 2706 0cf6 CB01      		movw r24,r22
 2707 0cf8 9C87      		std Y+12,r25
 2708 0cfa 8B87      		std Y+11,r24
 2709               	.L139:
 2710               	.LBB36:
 2712               	.LM204:
 2713 0cfc 8B85      		ldd r24,Y+11
 2714 0cfe 9C85      		ldd r25,Y+12
 2715 0d00 9E83      		std Y+6,r25
 2716 0d02 8D83      		std Y+5,r24
 2717               	.LBB37:
 2719               	.LM205:
 2720 0d04 8D81      		ldd r24,Y+5
 2721 0d06 9E81      		ldd r25,Y+6
 2722               	/* #APP */
 2723 0d08 0197      		1: sbiw r24,1
 2724 0d0a F1F7      		brne 1b
 2725               	/* #NOAPP */
 2726 0d0c 9E83      		std Y+6,r25
 2727 0d0e 8D83      		std Y+5,r24
 2728               	.L127:
 2729               	.LBE37:
 2730               	.LBE36:
 2731               	.LBE35:
 2732               	.LBE34:
 2733               	/* epilogue: frame size=12 */
 2734 0d10 2C96      		adiw r28,12
 2735 0d12 0FB6      		in __tmp_reg__,__SREG__
 2736 0d14 F894      		cli
 2737 0d16 DEBF      		out __SP_H__,r29
 2738 0d18 0FBE      		out __SREG__,__tmp_reg__
 2739 0d1a CDBF      		out __SP_L__,r28
 2740 0d1c DF91      		pop r29
 2741 0d1e CF91      		pop r28
 2742 0d20 0895      		ret
 2743               	/* epilogue end (size=9) */
 2744               	/* function TestRunningChronometer size 180 (161) */
 2766               	.Lscope21:
 2768               	.global	sf_init
 2770               	sf_init:
 2772               	.Ltext18:
 329:ledmeter.c    ****         _delay_ms(100);
 330:ledmeter.c    ****     }
 331:ledmeter.c    **** }
 332:ledmeter.c    **** 
 333:ledmeter.c    **** /*
 334:ledmeter.c    ****  * software init function
 335:ledmeter.c    ****  */
 336:ledmeter.c    **** void sf_init(void) {
 2774               	.LM206:
 2775               	/* prologue: frame size=0 */
 2776 0d22 CF93      		push r28
 2777 0d24 DF93      		push r29
 2778 0d26 CDB7      		in r28,__SP_L__
 2779 0d28 DEB7      		in r29,__SP_H__
 2780               	/* prologue end (size=4) */
 337:ledmeter.c    ****     // Leds
 338:ledmeter.c    ****     //test_leds_up_off(); // uncomment for release or comment for debug
 339:ledmeter.c    **** 
 340:ledmeter.c    ****     // Sound
 341:ledmeter.c    ****     //beep(3,100); // uncomment for release or comment for debug
 342:ledmeter.c    **** 
 343:ledmeter.c    ****     // Time
 344:ledmeter.c    ****     running_chronometer = false;
 2782               	.LM207:
 2783 0d2a 1092 0000 		sts running_chronometer,__zero_reg__
 345:ledmeter.c    ****     init_time(&current_time);
 2785               	.LM208:
 2786 0d2e 80E0      		ldi r24,lo8(current_time)
 2787 0d30 90E0      		ldi r25,hi8(current_time)
 2788 0d32 66D9      		rcall init_time
 346:ledmeter.c    ****     init_time(&last_time);
 2790               	.LM209:
 2791 0d34 80E0      		ldi r24,lo8(last_time)
 2792 0d36 90E0      		ldi r25,hi8(last_time)
 2793 0d38 63D9      		rcall init_time
 347:ledmeter.c    ****     init_time(&best_time);
 2795               	.LM210:
 2796 0d3a 80E0      		ldi r24,lo8(best_time)
 2797 0d3c 90E0      		ldi r25,hi8(best_time)
 2798 0d3e 60D9      		rcall init_time
 2799               	/* epilogue: frame size=0 */
 2800 0d40 DF91      		pop r29
 2801 0d42 CF91      		pop r28
 2802 0d44 0895      		ret
 2803               	/* epilogue end (size=3) */
 2804               	/* function sf_init size 18 (11) */
 2806               	.Lscope22:
 2808               	.global	hw_init
 2810               	hw_init:
 348:ledmeter.c    **** }
 349:ledmeter.c    **** 
 350:ledmeter.c    **** /*
 351:ledmeter.c    ****  *  hardware init function
 352:ledmeter.c    ****  */
 353:ledmeter.c    **** void hw_init(void) {
 2812               	.LM211:
 2813               	/* prologue: frame size=1 */
 2814 0d46 CF93      		push r28
 2815 0d48 DF93      		push r29
 2816 0d4a CDB7      		in r28,__SP_L__
 2817 0d4c DEB7      		in r29,__SP_H__
 2818 0d4e 2197      		sbiw r28,1
 2819 0d50 0FB6      		in __tmp_reg__,__SREG__
 2820 0d52 F894      		cli
 2821 0d54 DEBF      		out __SP_H__,r29
 2822 0d56 0FBE      		out __SREG__,__tmp_reg__
 2823 0d58 CDBF      		out __SP_L__,r28
 2824               	/* prologue end (size=10) */
 354:ledmeter.c    ****    // ******************
 355:ledmeter.c    ****    // * WatchDog Timer *
 356:ledmeter.c    ****    // ******************
 357:ledmeter.c    ****    // disable by default
 358:ledmeter.c    **** 
 359:ledmeter.c    ****    // ********
 360:ledmeter.c    ****    // * LEDs *
 361:ledmeter.c    ****    // ********
 362:ledmeter.c    ****    DDRC=0xFF; // set up PORTD pins 0 to 7 as output
 2826               	.LM212:
 2827 0d5a 8FEF      		ldi r24,lo8(-1)
 2828 0d5c 8093 3400 		sts 52,r24
 363:ledmeter.c    ****    //switch_on_all_leds();
 364:ledmeter.c    ****    switch_off_all_leds();
 2830               	.LM213:
 2831 0d60 27DB      		rcall switch_off_all_leds
 365:ledmeter.c    **** 
 366:ledmeter.c    ****    // *********************************
 367:ledmeter.c    ****    // * Start/Stop chronometer (INT0) *
 368:ledmeter.c    ****    // *********************************
 369:ledmeter.c    ****    // Set Pin 6 (PD2) as the pin to use for this example
 370:ledmeter.c    ****    //PCMSK |= (1<<PIND2); // TO FIX
 371:ledmeter.c    ****    //PIND |= (1<<PIND2); // try scls:Error : read-only !!!
 372:ledmeter.c    **** 
 373:ledmeter.c    ****    // interrupt on INT0 pin falling edge (sensor triggered)
 374:ledmeter.c    ****    MCUCR = (1<<ISC01) | (1<<ISC00);
 2833               	.LM214:
 2834 0d62 83E0      		ldi r24,lo8(3)
 2835 0d64 8093 5500 		sts 85,r24
 375:ledmeter.c    **** 
 376:ledmeter.c    ****    // turn on interrupts!
 377:ledmeter.c    **** 
 378:ledmeter.c    ****    GICR |= (1<<INT0); //INT0
 2837               	.LM215:
 2838 0d68 8091 5B00 		lds r24,91
 2839 0d6c 8064      		ori r24,lo8(64)
 2840 0d6e 8093 5B00 		sts 91,r24
 379:ledmeter.c    **** 
 380:ledmeter.c    ****    sei(); // enable interrupts
 2842               	.LM216:
 2843               	/* #APP */
 2844 0d72 7894      		sei
 381:ledmeter.c    **** 
 382:ledmeter.c    ****    // *************************************************
 383:ledmeter.c    ****    // * Conv Analog to Digital (CAN for RPM and Temp) *
 384:ledmeter.c    ****    // *************************************************
 385:ledmeter.c    **** 
 386:ledmeter.c    ****    //volatile static int analog_result;
 387:ledmeter.c    ****    //volatile static unsigned char analog_busy;
 388:ledmeter.c    **** 
 389:ledmeter.c    ****    //analog_busy=1; // busy mark the ADC function
 390:ledmeter.c    ****    uint8_t channel = 0; // measure ADC0
 2846               	.LM217:
 2847               	/* #NOAPP */
 2848 0d74 1982      		std Y+1,__zero_reg__
 391:ledmeter.c    **** 
 392:ledmeter.c    ****    // use internal 2.56V ref  REFS1=1 & REFS0=1 (11)
 393:ledmeter.c    ****    // use external ref (01)
 394:ledmeter.c    ****    ADMUX=(0<<REFS1)|(1<<REFS0)|(channel & 0x07); // channel & 0x07
 2850               	.LM218:
 2851 0d76 8981      		ldd r24,Y+1
 2852 0d78 8770      		andi r24,lo8(7)
 2853 0d7a 8064      		ori r24,lo8(64)
 2854 0d7c 8093 2700 		sts 39,r24
 395:ledmeter.c    **** 
 396:ledmeter.c    ****    //ADCSRA=(1<<ADEN)|(1<<ADIE)|(1<<ADIF)|(1<<ADPS2); // interrupt ADIE=1
 397:ledmeter.c    ****    ADCSRA=(1<<ADEN)|(0<<ADIE)|(1<<ADIF)|(1<<ADPS2); // no interrupt ADIE=0
 2856               	.LM219:
 2857 0d80 84E9      		ldi r24,lo8(-108)
 2858 0d82 8093 2600 		sts 38,r24
 398:ledmeter.c    **** 
 399:ledmeter.c    ****    ADCSRA |= (1 << (ADSC)); // start conversion
 2860               	.LM220:
 2861 0d86 8091 2600 		lds r24,38
 2862 0d8a 8064      		ori r24,lo8(64)
 2863 0d8c 8093 2600 		sts 38,r24
 400:ledmeter.c    **** 
 401:ledmeter.c    ****    DDRA=0x00;
 2865               	.LM221:
 2866 0d90 1092 3A00 		sts 58,__zero_reg__
 402:ledmeter.c    **** 	// make sure pull-up resistors are turned off
 403:ledmeter.c    **** 	PORTA = 0x00;
 2868               	.LM222:
 2869 0d94 1092 3B00 		sts 59,__zero_reg__
 404:ledmeter.c    **** 	
 405:ledmeter.c    **** 
 406:ledmeter.c    ****    // **********
 407:ledmeter.c    ****    // * Keypad *
 408:ledmeter.c    ****    // **********
 409:ledmeter.c    ****    // 1 joystick button (4 directions, up, down, left, right)
 410:ledmeter.c    ****    // 2 push buttons (ok, cancel)
 411:ledmeter.c    ****    DDRB=0x00;
 2871               	.LM223:
 2872 0d98 1092 3700 		sts 55,__zero_reg__
 412:ledmeter.c    ****    PORTB=0xFF;
 2874               	.LM224:
 2875 0d9c 8FEF      		ldi r24,lo8(-1)
 2876 0d9e 8093 3800 		sts 56,r24
 2877               	/* epilogue: frame size=1 */
 2878 0da2 2196      		adiw r28,1
 2879 0da4 0FB6      		in __tmp_reg__,__SREG__
 2880 0da6 F894      		cli
 2881 0da8 DEBF      		out __SP_H__,r29
 2882 0daa 0FBE      		out __SREG__,__tmp_reg__
 2883 0dac CDBF      		out __SP_L__,r28
 2884 0dae DF91      		pop r29
 2885 0db0 CF91      		pop r28
 2886 0db2 0895      		ret
 2887               	/* epilogue end (size=9) */
 2888               	/* function hw_init size 56 (37) */
 2893               	.Lscope23:
 2895               	.global	init
 2897               	init:
 413:ledmeter.c    **** 
 414:ledmeter.c    ****    // ***************
 415:ledmeter.c    ****    // * Graphic LCD *
 416:ledmeter.c    ****    // ***************
 417:ledmeter.c    **** 
 418:ledmeter.c    ****    // Sound
 419:ledmeter.c    **** 
 420:ledmeter.c    ****    // Time
 421:ledmeter.c    **** }
 422:ledmeter.c    **** 
 423:ledmeter.c    **** /*
 424:ledmeter.c    ****  * init function
 425:ledmeter.c    ****  */
 426:ledmeter.c    **** void init(void) {
 2899               	.LM225:
 2900               	/* prologue: frame size=0 */
 2901 0db4 CF93      		push r28
 2902 0db6 DF93      		push r29
 2903 0db8 CDB7      		in r28,__SP_L__
 2904 0dba DEB7      		in r29,__SP_H__
 2905               	/* prologue end (size=4) */
 427:ledmeter.c    ****     hw_init();
 2907               	.LM226:
 2908 0dbc C4DF      		rcall hw_init
 428:ledmeter.c    ****     sf_init();
 2910               	.LM227:
 2911 0dbe B1DF      		rcall sf_init
 2912               	/* epilogue: frame size=0 */
 2913 0dc0 DF91      		pop r29
 2914 0dc2 CF91      		pop r28
 2915 0dc4 0895      		ret
 2916               	/* epilogue end (size=3) */
 2917               	/* function init size 9 (2) */
 2919               	.Lscope24:
 2922               	.global	adcConvert10bit
 2924               	adcConvert10bit:
 429:ledmeter.c    **** }
 430:ledmeter.c    **** 
 431:ledmeter.c    **** /*
 432:ledmeter.c    ****  * convert from analog to digital (10 bits)
 433:ledmeter.c    ****  */
 434:ledmeter.c    **** unsigned short adcConvert10bit(uint8_t ch)
 435:ledmeter.c    **** {
 2926               	.LM228:
 2927               	/* prologue: frame size=1 */
 2928 0dc6 CF93      		push r28
 2929 0dc8 DF93      		push r29
 2930 0dca CDB7      		in r28,__SP_L__
 2931 0dcc DEB7      		in r29,__SP_H__
 2932 0dce 2197      		sbiw r28,1
 2933 0dd0 0FB6      		in __tmp_reg__,__SREG__
 2934 0dd2 F894      		cli
 2935 0dd4 DEBF      		out __SP_H__,r29
 2936 0dd6 0FBE      		out __SREG__,__tmp_reg__
 2937 0dd8 CDBF      		out __SP_L__,r28
 2938               	/* prologue end (size=10) */
 2939 0dda 8983      		std Y+1,r24
 436:ledmeter.c    **** 	//a2dCompleteFlag = 0;				// clear conversion complete flag
 437:ledmeter.c    **** 	ADMUX = ((ADMUX) & ~0x1F) | (ch & 0x1F);	// set channel ADC_MUX_MASK=0x1F
 2941               	.LM229:
 2942 0ddc 8091 2700 		lds r24,39
 2943 0de0 982F      		mov r25,r24
 2944 0de2 907E      		andi r25,lo8(-32)
 2945 0de4 8981      		ldd r24,Y+1
 2946 0de6 8F71      		andi r24,lo8(31)
 2947 0de8 892B      		or r24,r25
 2948 0dea 8093 2700 		sts 39,r24
 438:ledmeter.c    **** 	ADCSRA |= (_BV(ADIF)); // clear hardware "conversion complete" flag
 2950               	.LM230:
 2951 0dee 8091 2600 		lds r24,38
 2952 0df2 8061      		ori r24,lo8(16)
 2953 0df4 8093 2600 		sts 38,r24
 439:ledmeter.c    **** 	ADCSRA |= (_BV(ADSC)); // start conversion
 2955               	.LM231:
 2956 0df8 8091 2600 		lds r24,38
 2957 0dfc 8064      		ori r24,lo8(64)
 2958 0dfe 8093 2600 		sts 38,r24
 2959               	.L149:
 440:ledmeter.c    **** 							
 441:ledmeter.c    **** 	//while(!a2dCompleteFlag);				// wait until conversion complete
 442:ledmeter.c    **** 	//while( bit_is_clear(ADCSR, ADIF) );		// wait until conversion complete
 443:ledmeter.c    **** 	while( bit_is_set(ADCSRA, ADSC) );		// wait until conversion complete
 2961               	.LM232:
 2962 0e02 8091 2600 		lds r24,38
 2963 0e06 9927      		clr r25
 2964 0e08 8074      		andi r24,lo8(64)
 2965 0e0a 9070      		andi r25,hi8(64)
 2966 0e0c 0097      		sbiw r24,0
 2967 0e0e 09F0      		breq .L150
 2968 0e10 F8CF      		rjmp .L149
 2969               	.L150:
 444:ledmeter.c    **** 
 445:ledmeter.c    **** 	// CAUTION: MUST READ ADCL BEFORE ADCH!!!
 446:ledmeter.c    **** 	return ((ADCL) | ((ADCH)<<8));	// read ADC (full 10 bits);
 2971               	.LM233:
 2972 0e12 8091 2400 		lds r24,36
 2973 0e16 282F      		mov r18,r24
 2974 0e18 3327      		clr r19
 2975 0e1a 8091 2500 		lds r24,37
 2976 0e1e 9927      		clr r25
 2977 0e20 982F      		mov r25,r24
 2978 0e22 8827      		clr r24
 2979 0e24 282B      		or r18,r24
 2980 0e26 392B      		or r19,r25
 2981 0e28 C901      		movw r24,r18
 2982               	/* epilogue: frame size=1 */
 2983 0e2a 2196      		adiw r28,1
 2984 0e2c 0FB6      		in __tmp_reg__,__SREG__
 2985 0e2e F894      		cli
 2986 0e30 DEBF      		out __SP_H__,r29
 2987 0e32 0FBE      		out __SREG__,__tmp_reg__
 2988 0e34 CDBF      		out __SP_L__,r28
 2989 0e36 DF91      		pop r29
 2990 0e38 CF91      		pop r28
 2991 0e3a 0895      		ret
 2992               	/* epilogue end (size=9) */
 2993               	/* function adcConvert10bit size 59 (40) */
 2995               	.Lscope25:
 2998               	.global	adcConvert8bit
 3000               	adcConvert8bit:
 447:ledmeter.c    **** }
 448:ledmeter.c    **** 
 449:ledmeter.c    **** /*
 450:ledmeter.c    ****  * convert from analog to digital (8 bits)
 451:ledmeter.c    ****  * starts conversion, waits until conversion is done, and returns result
 452:ledmeter.c    ****  */
 453:ledmeter.c    **** unsigned char adcConvert8bit(unsigned char ch)
 454:ledmeter.c    **** {
 3002               	.LM234:
 3003               	/* prologue: frame size=1 */
 3004 0e3c CF93      		push r28
 3005 0e3e DF93      		push r29
 3006 0e40 CDB7      		in r28,__SP_L__
 3007 0e42 DEB7      		in r29,__SP_H__
 3008 0e44 2197      		sbiw r28,1
 3009 0e46 0FB6      		in __tmp_reg__,__SREG__
 3010 0e48 F894      		cli
 3011 0e4a DEBF      		out __SP_H__,r29
 3012 0e4c 0FBE      		out __SREG__,__tmp_reg__
 3013 0e4e CDBF      		out __SP_L__,r28
 3014               	/* prologue end (size=10) */
 3015 0e50 8983      		std Y+1,r24
 455:ledmeter.c    **** 	// do 10-bit conversion and return highest 8 bits
 456:ledmeter.c    **** 	return adcConvert10bit(ch)>>2;			// return ADC MSB byte
 3017               	.LM235:
 3018 0e52 8981      		ldd r24,Y+1
 3019 0e54 B8DF      		rcall adcConvert10bit
 3020 0e56 9695      		lsr r25
 3021 0e58 8795      		ror r24
 3022 0e5a 9695      		lsr r25
 3023 0e5c 8795      		ror r24
 3024 0e5e 9927      		clr r25
 3025               	/* epilogue: frame size=1 */
 3026 0e60 2196      		adiw r28,1
 3027 0e62 0FB6      		in __tmp_reg__,__SREG__
 3028 0e64 F894      		cli
 3029 0e66 DEBF      		out __SP_H__,r29
 3030 0e68 0FBE      		out __SREG__,__tmp_reg__
 3031 0e6a CDBF      		out __SP_L__,r28
 3032 0e6c DF91      		pop r29
 3033 0e6e CF91      		pop r28
 3034 0e70 0895      		ret
 3035               	/* epilogue end (size=9) */
 3036               	/* function adcConvert8bit size 27 (8) */
 3038               	.Lscope26:
 3040               	.global	SeekButtons
 3042               	SeekButtons:
 457:ledmeter.c    **** }
 458:ledmeter.c    **** 
 459:ledmeter.c    **** #define Nbuts 6
 460:ledmeter.c    **** #define B_LEFT 0
 461:ledmeter.c    **** #define B_RIGHT 1
 462:ledmeter.c    **** #define B_UP 2
 463:ledmeter.c    **** #define B_DOWN 3
 464:ledmeter.c    **** #define B_OK 4
 465:ledmeter.c    **** #define B_CANCEL 5
 466:ledmeter.c    **** 
 467:ledmeter.c    **** void SeekButtons(void) {
 3044               	.LM236:
 3045               	/* prologue: frame size=2 */
 3046 0e72 CF93      		push r28
 3047 0e74 DF93      		push r29
 3048 0e76 CDB7      		in r28,__SP_L__
 3049 0e78 DEB7      		in r29,__SP_H__
 3050 0e7a 2297      		sbiw r28,2
 3051 0e7c 0FB6      		in __tmp_reg__,__SREG__
 3052 0e7e F894      		cli
 3053 0e80 DEBF      		out __SP_H__,r29
 3054 0e82 0FBE      		out __SREG__,__tmp_reg__
 3055 0e84 CDBF      		out __SP_L__,r28
 3056               	/* prologue end (size=10) */
 468:ledmeter.c    ****     uint8_t bstate = false;
 3058               	.LM237:
 3059 0e86 1982      		std Y+1,__zero_reg__
 469:ledmeter.c    ****     uint8_t i;
 470:ledmeter.c    **** 	 for (i=0; i<=Nbuts-1; i++) {
 3061               	.LM238:
 3062 0e88 1A82      		std Y+2,__zero_reg__
 3063               	.L153:
 3065               	.LM239:
 3066 0e8a 8A81      		ldd r24,Y+2
 3067 0e8c 8630      		cpi r24,lo8(6)
 3068 0e8e E8F4      		brsh .L152
 471:ledmeter.c    **** 	     if (PINB>>i) {
 3070               	.LM240:
 3071 0e90 8091 3600 		lds r24,54
 3072 0e94 282F      		mov r18,r24
 3073 0e96 3327      		clr r19
 3074 0e98 8A81      		ldd r24,Y+2
 3075 0e9a 9927      		clr r25
 3076 0e9c 02C0      		rjmp 2f
 3077 0e9e 3595      	1:	asr r19
 3078 0ea0 2795      		ror r18
 3079 0ea2 8A95      	2:	dec r24
 3080 0ea4 E2F7      		brpl 1b
 3081 0ea6 C901      		movw r24,r18
 3082 0ea8 0097      		sbiw r24,0
 3083 0eaa 11F0      		breq .L156
 472:ledmeter.c    **** 	         bstate = false;
 3085               	.LM241:
 3086 0eac 1982      		std Y+1,__zero_reg__
 3087 0eae 02C0      		rjmp .L157
 3088               	.L156:
 473:ledmeter.c    **** 	     } else {
 474:ledmeter.c    **** 	         bstate = true;
 3090               	.LM242:
 3091 0eb0 81E0      		ldi r24,lo8(1)
 3092 0eb2 8983      		std Y+1,r24
 3093               	.L157:
 475:ledmeter.c    **** 	     }
 476:ledmeter.c    **** 		
 477:ledmeter.c    **** 	     if ( i==B_LEFT && bstate ) { // LEFT
 478:ledmeter.c    **** 
 479:ledmeter.c    **** 	     }
 480:ledmeter.c    **** 	     if ( i==B_RIGHT && bstate ) { // RIGHT
 481:ledmeter.c    **** 
 482:ledmeter.c    **** 	     }
 483:ledmeter.c    **** 	     if ( i==B_UP && bstate ) { // UP
 484:ledmeter.c    **** 
 485:ledmeter.c    **** 	     }
 486:ledmeter.c    **** 	     if ( i==B_DOWN && bstate ) { // DOWN
 487:ledmeter.c    **** 
 488:ledmeter.c    **** 	     }
 489:ledmeter.c    **** 	     if ( i==B_OK && bstate ) { // OK
 3095               	.LM243:
 3096 0eb4 8A81      		ldd r24,Y+2
 3097 0eb6 8430      		cpi r24,lo8(4)
 3098 0eb8 21F4      		brne .L162
 3099 0eba 8981      		ldd r24,Y+1
 3100 0ebc 8823      		tst r24
 3101 0ebe 09F0      		breq .L162
 490:ledmeter.c    ****             StartStopChronometer();
 3103               	.LM244:
 3104 0ec0 54DE      		rcall StartStopChronometer
 3105               	.L162:
 3107               	.LM245:
 3108 0ec2 8A81      		ldd r24,Y+2
 3109 0ec4 8F5F      		subi r24,lo8(-(1))
 3110 0ec6 8A83      		std Y+2,r24
 3111 0ec8 E0CF      		rjmp .L153
 3112               	.L152:
 3113               	/* epilogue: frame size=2 */
 3114 0eca 2296      		adiw r28,2
 3115 0ecc 0FB6      		in __tmp_reg__,__SREG__
 3116 0ece F894      		cli
 3117 0ed0 DEBF      		out __SP_H__,r29
 3118 0ed2 0FBE      		out __SREG__,__tmp_reg__
 3119 0ed4 CDBF      		out __SP_L__,r28
 3120 0ed6 DF91      		pop r29
 3121 0ed8 CF91      		pop r28
 3122 0eda 0895      		ret
 3123               	/* epilogue end (size=9) */
 3124               	/* function SeekButtons size 54 (35) */
 3130               	.Lscope27:
 3132               	.global	loop
 3134               	loop:
 491:ledmeter.c    **** 	     }
 492:ledmeter.c    **** 	     if ( i==B_CANCEL && bstate ) { // CANCEL
 493:ledmeter.c    **** 
 494:ledmeter.c    **** 	     }	     	     	     	
 495:ledmeter.c    **** 	}
 496:ledmeter.c    **** }
 497:ledmeter.c    **** 
 498:ledmeter.c    **** /*
 499:ledmeter.c    ****  *  this is the main loop
 500:ledmeter.c    ****  */
 501:ledmeter.c    **** void loop(void) {
 3136               	.LM246:
 3137               	/* prologue: frame size=8 */
 3138 0edc 0F93      		push r16
 3139 0ede 1F93      		push r17
 3140 0ee0 CF93      		push r28
 3141 0ee2 DF93      		push r29
 3142 0ee4 CDB7      		in r28,__SP_L__
 3143 0ee6 DEB7      		in r29,__SP_H__
 3144 0ee8 2897      		sbiw r28,8
 3145 0eea 0FB6      		in __tmp_reg__,__SREG__
 3146 0eec F894      		cli
 3147 0eee DEBF      		out __SP_H__,r29
 3148 0ef0 0FBE      		out __SREG__,__tmp_reg__
 3149 0ef2 CDBF      		out __SP_L__,r28
 3150               	/* prologue end (size=12) */
 502:ledmeter.c    ****     //SeekButtons(); // use INT1 instead
 503:ledmeter.c    **** 
 504:ledmeter.c    ****     volatile double ch0 = adcConvert10bit(0);
 3152               	.LM247:
 3153 0ef4 80E0      		ldi r24,lo8(0)
 3154 0ef6 67DF      		rcall adcConvert10bit
 3155 0ef8 8C01      		movw r16,r24
 3156 0efa C801      		movw r24,r16
 3157 0efc AA27      		clr r26
 3158 0efe 97FD      		sbrc r25,7
 3159 0f00 A095      		com r26
 3160 0f02 BA2F      		mov r27,r26
 3161 0f04 BC01      		movw r22,r24
 3162 0f06 CD01      		movw r24,r26
 3163 0f08 00D0      		rcall __floatsisf
 3164 0f0a 6D83      		std Y+5,r22
 3165 0f0c 7E83      		std Y+6,r23
 3166 0f0e 8F83      		std Y+7,r24
 3167 0f10 9887      		std Y+8,r25
 3168 0f12 1123      		tst r17
 3169 0f14 7CF4      		brge .L165
 3171               	.LM248:
 3172 0f16 20E0      		ldi r18,lo8(0x47800000)
 3173 0f18 30E0      		ldi r19,hi8(0x47800000)
 3174 0f1a 40E8      		ldi r20,hlo8(0x47800000)
 3175 0f1c 57E4      		ldi r21,hhi8(0x47800000)
 3176 0f1e 6D81      		ldd r22,Y+5
 3177 0f20 7E81      		ldd r23,Y+6
 3178 0f22 8F81      		ldd r24,Y+7
 3179 0f24 9885      		ldd r25,Y+8
 3180 0f26 00D0      		rcall __addsf3
 3181 0f28 DC01      		movw r26,r24
 3182 0f2a CB01      		movw r24,r22
 3183 0f2c 8D83      		std Y+5,r24
 3184 0f2e 9E83      		std Y+6,r25
 3185 0f30 AF83      		std Y+7,r26
 3186 0f32 B887      		std Y+8,r27
 3187               	.L165:
 3188 0f34 8D81      		ldd r24,Y+5
 3189 0f36 9E81      		ldd r25,Y+6
 3190 0f38 AF81      		ldd r26,Y+7
 3191 0f3a B885      		ldd r27,Y+8
 3192 0f3c 8983      		std Y+1,r24
 3193 0f3e 9A83      		std Y+2,r25
 3194 0f40 AB83      		std Y+3,r26
 3195 0f42 BC83      		std Y+4,r27
 505:ledmeter.c    ****     ch0 *= 0.09765625; // 0.09765625 = 100 / 2^10
 3197               	.LM249:
 3198 0f44 20E0      		ldi r18,lo8(0x3dc80000)
 3199 0f46 30E0      		ldi r19,hi8(0x3dc80000)
 3200 0f48 48EC      		ldi r20,hlo8(0x3dc80000)
 3201 0f4a 5DE3      		ldi r21,hhi8(0x3dc80000)
 3202 0f4c 6981      		ldd r22,Y+1
 3203 0f4e 7A81      		ldd r23,Y+2
 3204 0f50 8B81      		ldd r24,Y+3
 3205 0f52 9C81      		ldd r25,Y+4
 3206 0f54 00D0      		rcall __mulsf3
 3207 0f56 DC01      		movw r26,r24
 3208 0f58 CB01      		movw r24,r22
 3209 0f5a 8983      		std Y+1,r24
 3210 0f5c 9A83      		std Y+2,r25
 3211 0f5e AB83      		std Y+3,r26
 3212 0f60 BC83      		std Y+4,r27
 506:ledmeter.c    ****     show_percent(ch0);
 3214               	.LM250:
 3215 0f62 6981      		ldd r22,Y+1
 3216 0f64 7A81      		ldd r23,Y+2
 3217 0f66 8B81      		ldd r24,Y+3
 3218 0f68 9C81      		ldd r25,Y+4
 3219 0f6a 5DDD      		rcall show_percent
 3220               	/* epilogue: frame size=8 */
 3221 0f6c 2896      		adiw r28,8
 3222 0f6e 0FB6      		in __tmp_reg__,__SREG__
 3223 0f70 F894      		cli
 3224 0f72 DEBF      		out __SP_H__,r29
 3225 0f74 0FBE      		out __SREG__,__tmp_reg__
 3226 0f76 CDBF      		out __SP_L__,r28
 3227 0f78 DF91      		pop r29
 3228 0f7a CF91      		pop r28
 3229 0f7c 1F91      		pop r17
 3230 0f7e 0F91      		pop r16
 3231 0f80 0895      		ret
 3232               	/* epilogue end (size=11) */
 3233               	/* function loop size 83 (60) */
 3238               	.Lscope28:
 3240               	.global	main
 3242               	main:
 507:ledmeter.c    **** 
 508:ledmeter.c    **** /*
 509:ledmeter.c    ****     _delay_ms(500);
 510:ledmeter.c    **** 
 511:ledmeter.c    ****     double ch1 = adcConvert10bit(1);
 512:ledmeter.c    ****     ch1 *= 0.09765625; // 0.09765625 = 100 / 2^10
 513:ledmeter.c    ****     show_percent(ch1);
 514:ledmeter.c    **** 
 515:ledmeter.c    ****     _delay_ms(500);
 516:ledmeter.c    **** */
 517:ledmeter.c    **** 
 518:ledmeter.c    ****     //TestRunningChronometer();
 519:ledmeter.c    **** 
 520:ledmeter.c    ****     //inc_time(&current_time);
 521:ledmeter.c    **** }
 522:ledmeter.c    **** 
 523:ledmeter.c    **** 
 524:ledmeter.c    **** /*
 525:ledmeter.c    ****  * main program
 526:ledmeter.c    ****  */
 527:ledmeter.c    **** int main(void) {
 3244               	.LM251:
 3245               	/* prologue: frame size=0 */
 3246 0f82 C0E0      		ldi r28,lo8(__stack - 0)
 3247 0f84 D0E0      		ldi r29,hi8(__stack - 0)
 3248 0f86 DEBF      		out __SP_H__,r29
 3249 0f88 CDBF      		out __SP_L__,r28
 3250               	/* prologue end (size=4) */
 528:ledmeter.c    ****     init();
 3252               	.LM252:
 3253 0f8a 14DF      		rcall init
 3254               	.L167:
 529:ledmeter.c    ****     while(1) { // Infinite loop; define here the
 530:ledmeter.c    ****         loop(); // system behaviour
 3256               	.LM253:
 3257 0f8c A7DF      		rcall loop
 3258 0f8e FECF      		rjmp .L167
 3259               	/* epilogue: frame size=0 */
 3260               	/* epilogue: noreturn */
 3261               	/* epilogue end (size=0) */
 3262               	/* function main size 7 (3) */
 3264               	.Lscope29:
 3266               	.global	__vector_1
 3268               	__vector_1:
 531:ledmeter.c    ****     }
 532:ledmeter.c    ****     return 0;
 533:ledmeter.c    **** }
 534:ledmeter.c    **** 
 535:ledmeter.c    **** /*
 536:ledmeter.c    ****  * interrupt handler for INT0
 537:ledmeter.c    ****  */
 538:ledmeter.c    **** SIGNAL(SIG_INTERRUPT0) {
 3270               	.LM254:
 3271               	/* prologue: frame size=0 */
 3272 0f90 1F92      		push __zero_reg__
 3273 0f92 0F92      		push __tmp_reg__
 3274 0f94 0FB6      		in __tmp_reg__,__SREG__
 3275 0f96 0F92      		push __tmp_reg__
 3276 0f98 1124      		clr __zero_reg__
 3277 0f9a 2F93      		push r18
 3278 0f9c 3F93      		push r19
 3279 0f9e 4F93      		push r20
 3280 0fa0 5F93      		push r21
 3281 0fa2 6F93      		push r22
 3282 0fa4 7F93      		push r23
 3283 0fa6 8F93      		push r24
 3284 0fa8 9F93      		push r25
 3285 0faa AF93      		push r26
 3286 0fac BF93      		push r27
 3287 0fae EF93      		push r30
 3288 0fb0 FF93      		push r31
 3289 0fb2 CF93      		push r28
 3290 0fb4 DF93      		push r29
 3291 0fb6 CDB7      		in r28,__SP_L__
 3292 0fb8 DEB7      		in r29,__SP_H__
 3293               	/* prologue end (size=21) */
 539:ledmeter.c    ****     StartStopChronometer();
 3295               	.LM255:
 3296 0fba D7DD      		rcall StartStopChronometer
 3297               	/* epilogue: frame size=0 */
 3298 0fbc DF91      		pop r29
 3299 0fbe CF91      		pop r28
 3300 0fc0 FF91      		pop r31
 3301 0fc2 EF91      		pop r30
 3302 0fc4 BF91      		pop r27
 3303 0fc6 AF91      		pop r26
 3304 0fc8 9F91      		pop r25
 3305 0fca 8F91      		pop r24
 3306 0fcc 7F91      		pop r23
 3307 0fce 6F91      		pop r22
 3308 0fd0 5F91      		pop r21
 3309 0fd2 4F91      		pop r20
 3310 0fd4 3F91      		pop r19
 3311 0fd6 2F91      		pop r18
 3312 0fd8 0F90      		pop __tmp_reg__
 3313 0fda 0FBE      		out __SREG__,__tmp_reg__
 3314 0fdc 0F90      		pop __tmp_reg__
 3315 0fde 1F90      		pop __zero_reg__
 3316 0fe0 1895      		reti
 3317               	/* epilogue end (size=19) */
 3318               	/* function __vector_1 size 41 (1) */
 3320               	.Lscope30:
 3321               		.comm current_time,5,1
 3322               		.comm last_time,5,1
 3323               		.comm best_time,5,1
 3328               		.text
 3330               	Letext:
 3331               	/* File "ledmeter.c": code 2055 = 0x0807 (1508), prologues 291, epilogues 256 */
DEFINED SYMBOLS
                            *ABS*:00000000 ledmeter.c
C:\DOCUME~1\scls\LOCALS~1\Temp/ccspaaaa.s:3      *ABS*:0000003f __SREG__
C:\DOCUME~1\scls\LOCALS~1\Temp/ccspaaaa.s:4      *ABS*:0000003e __SP_H__
C:\DOCUME~1\scls\LOCALS~1\Temp/ccspaaaa.s:5      *ABS*:0000003d __SP_L__
C:\DOCUME~1\scls\LOCALS~1\Temp/ccspaaaa.s:6      *ABS*:00000000 __tmp_reg__
C:\DOCUME~1\scls\LOCALS~1\Temp/ccspaaaa.s:7      *ABS*:00000001 __zero_reg__
C:\DOCUME~1\scls\LOCALS~1\Temp/ccspaaaa.s:88     .bss:00000000 running_chronometer
C:\DOCUME~1\scls\LOCALS~1\Temp/ccspaaaa.s:96     .text:00000000 init_time
C:\DOCUME~1\scls\LOCALS~1\Temp/ccspaaaa.s:156    .text:00000044 def_time
C:\DOCUME~1\scls\LOCALS~1\Temp/ccspaaaa.s:230    .text:000000a4 print_time
C:\DOCUME~1\scls\LOCALS~1\Temp/ccspaaaa.s:309    .text:00000122 inc_time
C:\DOCUME~1\scls\LOCALS~1\Temp/ccspaaaa.s:491    .text:00000238 copy_time
C:\DOCUME~1\scls\LOCALS~1\Temp/ccspaaaa.s:566    .text:000002a0 compare_time
C:\DOCUME~1\scls\LOCALS~1\Temp/ccspaaaa.s:756    .text:0000039e switch_on_all_leds
C:\DOCUME~1\scls\LOCALS~1\Temp/ccspaaaa.s:779    .text:000003b0 switch_off_all_leds
C:\DOCUME~1\scls\LOCALS~1\Temp/ccspaaaa.s:804    .text:000003c4 switch_on_led
C:\DOCUME~1\scls\LOCALS~1\Temp/ccspaaaa.s:867    .text:00000416 switch_off_led
C:\DOCUME~1\scls\LOCALS~1\Temp/ccspaaaa.s:929    .text:00000466 switch_on_leds_with_delay
C:\DOCUME~1\scls\LOCALS~1\Temp/ccspaaaa.s:1112   .text:00000540 switch_off_leds_with_delay
C:\DOCUME~1\scls\LOCALS~1\Temp/ccspaaaa.s:1294   .text:0000061a test_leds_up_down
C:\DOCUME~1\scls\LOCALS~1\Temp/ccspaaaa.s:1463   .text:000006e8 test_leds_up_off
C:\DOCUME~1\scls\LOCALS~1\Temp/ccspaaaa.s:1629   .text:000007ae switch_on_min_dels
C:\DOCUME~1\scls\LOCALS~1\Temp/ccspaaaa.s:1700   .text:000007fa switch_on_max_dels
C:\DOCUME~1\scls\LOCALS~1\Temp/ccspaaaa.s:1781   .text:00000858 led_alarm
C:\DOCUME~1\scls\LOCALS~1\Temp/ccspaaaa.s:2092   .text:000009cc roundp
C:\DOCUME~1\scls\LOCALS~1\Temp/ccspaaaa.s:2153   .text:00000a26 show_percent
C:\DOCUME~1\scls\LOCALS~1\Temp/ccspaaaa.s:2224   .text:00000a88 beep
C:\DOCUME~1\scls\LOCALS~1\Temp/ccspaaaa.s:2411   .text:00000b6a StartStopChronometer
                            *COM*:00000005 best_time
                            *COM*:00000005 current_time
                            *COM*:00000005 last_time
C:\DOCUME~1\scls\LOCALS~1\Temp/ccspaaaa.s:2483   .text:00000bc2 TestRunningChronometer
C:\DOCUME~1\scls\LOCALS~1\Temp/ccspaaaa.s:2770   .text:00000d22 sf_init
C:\DOCUME~1\scls\LOCALS~1\Temp/ccspaaaa.s:2810   .text:00000d46 hw_init
C:\DOCUME~1\scls\LOCALS~1\Temp/ccspaaaa.s:2897   .text:00000db4 init
C:\DOCUME~1\scls\LOCALS~1\Temp/ccspaaaa.s:2924   .text:00000dc6 adcConvert10bit
C:\DOCUME~1\scls\LOCALS~1\Temp/ccspaaaa.s:3000   .text:00000e3c adcConvert8bit
C:\DOCUME~1\scls\LOCALS~1\Temp/ccspaaaa.s:3042   .text:00000e72 SeekButtons
C:\DOCUME~1\scls\LOCALS~1\Temp/ccspaaaa.s:3134   .text:00000edc loop
C:\DOCUME~1\scls\LOCALS~1\Temp/ccspaaaa.s:3242   .text:00000f82 main
C:\DOCUME~1\scls\LOCALS~1\Temp/ccspaaaa.s:3268   .text:00000f90 __vector_1
C:\DOCUME~1\scls\LOCALS~1\Temp/ccspaaaa.s:3330   .text:00000fe2 Letext

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
__udivmodhi4
printf
__floatsisf
__addsf3
__gesf2
__mulsf3
__ltsf2
__gtsf2
__fixunssfsi
floor
__divsf3
__stack
