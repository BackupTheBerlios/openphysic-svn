   1               		.file	"ledmeter.c"
   2               		.arch atmega8535
   3               	__SREG__ = 0x3f
   4               	__SP_H__ = 0x3e
   5               	__SP_L__ = 0x3d
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.global __do_copy_data
   9               		.global __do_clear_bss
  11               		.text
  12               	.Ltext0:
  83               	.global	running_chronometer
  84               	.global	running_chronometer
  85               		.section .bss
  88               	running_chronometer:
  89 0000 00        		.skip 1,0
  91               		.text
  94               	.global	init_time
  96               	init_time:
   1:ledmeter.c    **** // ***********************************************************
   2:ledmeter.c    **** // Project: OpenChrono
   3:ledmeter.c    **** // Author: Sebastien CELLES
   4:ledmeter.c    **** // Module description: an handhelds device for karts, bike or sport cars
   5:ledmeter.c    **** // ***********************************************************
   6:ledmeter.c    **** 
   7:ledmeter.c    **** #include <avr/io.h> // Most basic include files
   8:ledmeter.c    **** 
   9:ledmeter.c    **** #include <stdint.h> // uint8_t = unsigned char
  10:ledmeter.c    **** 
  11:ledmeter.c    **** #include <stdio.h> // TO FIX (LCD)
  12:ledmeter.c    **** 
  13:ledmeter.c    **** #include <math.h>
  14:ledmeter.c    **** 
  15:ledmeter.c    **** #define F_CPU 1000000UL  // 1 MHz
  16:ledmeter.c    **** #include <util/delay.h>
  17:ledmeter.c    **** 
  18:ledmeter.c    **** //#include <avr/io.h>              // Most basic include files
  19:ledmeter.c    **** #include <avr/interrupt.h>       // Add the necessary ones
  20:ledmeter.c    **** //#include <avr/signal.h>          // here
  21:ledmeter.c    **** 
  22:ledmeter.c    **** #include <stdbool.h>           // boolean
  23:ledmeter.c    **** 
  24:ledmeter.c    **** //volatile unsigned char a2dCompleteFlag;
  25:ledmeter.c    **** 
  26:ledmeter.c    **** //int channel;
  27:ledmeter.c    **** //unsigned short analog_result;
  28:ledmeter.c    **** //int analog_busy;
  29:ledmeter.c    **** 
  30:ledmeter.c    **** #define Nleds 8  // number of leds connected to the uC
  31:ledmeter.c    **** 
  32:ledmeter.c    **** #define N 50 // number between 0 and 255
  33:ledmeter.c    **** #define Nmax 0xFF
  34:ledmeter.c    **** 
  35:ledmeter.c    **** 
  36:ledmeter.c    **** 
  37:ledmeter.c    **** #define CHR_PRECISION 4 // precision 1/10000eme = 1/(10^4)
  38:ledmeter.c    **** #define CHR_DISPLAY 3 // display 1/1000  = 1/(10^3)
  39:ledmeter.c    **** 
  40:ledmeter.c    **** uint8_t running_chronometer = false; // 0 false ; -1 true
  41:ledmeter.c    **** 
  42:ledmeter.c    **** typedef struct {
  43:ledmeter.c    ****     uint8_t hh; //8bits 0-255
  44:ledmeter.c    ****     uint8_t mm; //8bits 0-255
  45:ledmeter.c    ****     uint8_t ss; //8bits 0-255
  46:ledmeter.c    ****     unsigned short int xx;  //16bits 0-65535
  47:ledmeter.c    **** } time_typ;
  48:ledmeter.c    **** 
  49:ledmeter.c    **** time_typ current_time;
  50:ledmeter.c    **** time_typ last_time;
  51:ledmeter.c    **** time_typ best_time;
  52:ledmeter.c    **** 
  53:ledmeter.c    **** void init_time(time_typ * time) {
  98               	.LM1:
  99               	/* prologue: frame size=2 */
 100 0000 CF93      		push r28
 101 0002 DF93      		push r29
 102 0004 CDB7      		in r28,__SP_L__
 103 0006 DEB7      		in r29,__SP_H__
 104 0008 2297      		sbiw r28,2
 105 000a 0FB6      		in __tmp_reg__,__SREG__
 106 000c F894      		cli
 107 000e DEBF      		out __SP_H__,r29
 108 0010 0FBE      		out __SREG__,__tmp_reg__
 109 0012 CDBF      		out __SP_L__,r28
 110               	/* prologue end (size=10) */
 111 0014 9A83      		std Y+2,r25
 112 0016 8983      		std Y+1,r24
  54:ledmeter.c    ****     time->hh = 0;
 114               	.LM2:
 115 0018 E981      		ldd r30,Y+1
 116 001a FA81      		ldd r31,Y+2
 117 001c 1082      		st Z,__zero_reg__
  55:ledmeter.c    ****     time->mm = 0;
 119               	.LM3:
 120 001e E981      		ldd r30,Y+1
 121 0020 FA81      		ldd r31,Y+2
 122 0022 1182      		std Z+1,__zero_reg__
  56:ledmeter.c    ****     time->ss = 0;
 124               	.LM4:
 125 0024 E981      		ldd r30,Y+1
 126 0026 FA81      		ldd r31,Y+2
 127 0028 1282      		std Z+2,__zero_reg__
  57:ledmeter.c    ****     time->xx = 0;
 129               	.LM5:
 130 002a E981      		ldd r30,Y+1
 131 002c FA81      		ldd r31,Y+2
 132 002e 1482      		std Z+4,__zero_reg__
 133 0030 1382      		std Z+3,__zero_reg__
 134               	/* epilogue: frame size=2 */
 135 0032 2296      		adiw r28,2
 136 0034 0FB6      		in __tmp_reg__,__SREG__
 137 0036 F894      		cli
 138 0038 DEBF      		out __SP_H__,r29
 139 003a 0FBE      		out __SREG__,__tmp_reg__
 140 003c CDBF      		out __SP_L__,r28
 141 003e DF91      		pop r29
 142 0040 CF91      		pop r28
 143 0042 0895      		ret
 144               	/* epilogue end (size=9) */
 145               	/* function init_time size 34 (15) */
 147               	.Lscope0:
 154               	.global	def_time
 156               	def_time:
  58:ledmeter.c    **** }
  59:ledmeter.c    **** 
  60:ledmeter.c    **** void def_time(time_typ * time, uint8_t _hh, uint8_t _mm, uint8_t _ss, unsigned short int _xx) {
 158               	.LM6:
 159               	/* prologue: frame size=7 */
 160 0044 0F93      		push r16
 161 0046 1F93      		push r17
 162 0048 CF93      		push r28
 163 004a DF93      		push r29
 164 004c CDB7      		in r28,__SP_L__
 165 004e DEB7      		in r29,__SP_H__
 166 0050 2797      		sbiw r28,7
 167 0052 0FB6      		in __tmp_reg__,__SREG__
 168 0054 F894      		cli
 169 0056 DEBF      		out __SP_H__,r29
 170 0058 0FBE      		out __SREG__,__tmp_reg__
 171 005a CDBF      		out __SP_L__,r28
 172               	/* prologue end (size=12) */
 173 005c 9A83      		std Y+2,r25
 174 005e 8983      		std Y+1,r24
 175 0060 6B83      		std Y+3,r22
 176 0062 4C83      		std Y+4,r20
 177 0064 2D83      		std Y+5,r18
 178 0066 1F83      		std Y+7,r17
 179 0068 0E83      		std Y+6,r16
  61:ledmeter.c    ****     time->hh = _hh;
 181               	.LM7:
 182 006a E981      		ldd r30,Y+1
 183 006c FA81      		ldd r31,Y+2
 184 006e 8B81      		ldd r24,Y+3
 185 0070 8083      		st Z,r24
  62:ledmeter.c    ****     time->mm = _mm;
 187               	.LM8:
 188 0072 E981      		ldd r30,Y+1
 189 0074 FA81      		ldd r31,Y+2
 190 0076 8C81      		ldd r24,Y+4
 191 0078 8183      		std Z+1,r24
  63:ledmeter.c    ****     time->ss = _ss;
 193               	.LM9:
 194 007a E981      		ldd r30,Y+1
 195 007c FA81      		ldd r31,Y+2
 196 007e 8D81      		ldd r24,Y+5
 197 0080 8283      		std Z+2,r24
  64:ledmeter.c    ****     time->xx = _xx;
 199               	.LM10:
 200 0082 E981      		ldd r30,Y+1
 201 0084 FA81      		ldd r31,Y+2
 202 0086 8E81      		ldd r24,Y+6
 203 0088 9F81      		ldd r25,Y+7
 204 008a 9483      		std Z+4,r25
 205 008c 8383      		std Z+3,r24
 206               	/* epilogue: frame size=7 */
 207 008e 2796      		adiw r28,7
 208 0090 0FB6      		in __tmp_reg__,__SREG__
 209 0092 F894      		cli
 210 0094 DEBF      		out __SP_H__,r29
 211 0096 0FBE      		out __SREG__,__tmp_reg__
 212 0098 CDBF      		out __SP_L__,r28
 213 009a DF91      		pop r29
 214 009c CF91      		pop r28
 215 009e 1F91      		pop r17
 216 00a0 0F91      		pop r16
 217 00a2 0895      		ret
 218               	/* epilogue end (size=11) */
 219               	/* function def_time size 48 (25) */
 221               	.Lscope1:
 222               		.data
 223               	.LC0:
 224 0000 3D3D 3D25 		.string	"===%02i:%02i:%02i:%03u===\n"
 224      3032 693A 
 224      2530 3269 
 224      3A25 3032 
 224      693A 2530 
 225               		.text
 228               	.global	print_time
 230               	print_time:
  65:ledmeter.c    **** }
  66:ledmeter.c    **** 
  67:ledmeter.c    **** void print_time(time_typ * t) {
 232               	.LM11:
 233               	/* prologue: frame size=2 */
 234 00a4 CF93      		push r28
 235 00a6 DF93      		push r29
 236 00a8 CDB7      		in r28,__SP_L__
 237 00aa DEB7      		in r29,__SP_H__
 238 00ac 2297      		sbiw r28,2
 239 00ae 0FB6      		in __tmp_reg__,__SREG__
 240 00b0 F894      		cli
 241 00b2 DEBF      		out __SP_H__,r29
 242 00b4 0FBE      		out __SREG__,__tmp_reg__
 243 00b6 CDBF      		out __SP_L__,r28
 244               	/* prologue end (size=10) */
 245 00b8 9A83      		std Y+2,r25
 246 00ba 8983      		std Y+1,r24
  68:ledmeter.c    ****     //printf("===%02i:%02i:%02i:%03u===\n",t->hh,t->mm,t->ss,t->xx/10);
  69:ledmeter.c    ****     printf("===%02i:%02i:%02i:%03u===\n",t->hh,t->mm,t->ss,t->xx/((int) pow(10,CHR_PRECISION-CHR_DI
 248               	.LM12:
 249 00bc E981      		ldd r30,Y+1
 250 00be FA81      		ldd r31,Y+2
 251 00c0 8381      		ldd r24,Z+3
 252 00c2 9481      		ldd r25,Z+4
 253 00c4 2AE0      		ldi r18,lo8(10)
 254 00c6 30E0      		ldi r19,hi8(10)
 255 00c8 B901      		movw r22,r18
 256 00ca 00D0      		rcall __udivmodhi4
 257 00cc CB01      		movw r24,r22
 258 00ce 9F93      		push r25
 259 00d0 8F93      		push r24
 260 00d2 E981      		ldd r30,Y+1
 261 00d4 FA81      		ldd r31,Y+2
 262 00d6 8281      		ldd r24,Z+2
 263 00d8 9927      		clr r25
 264 00da 9F93      		push r25
 265 00dc 8F93      		push r24
 266 00de E981      		ldd r30,Y+1
 267 00e0 FA81      		ldd r31,Y+2
 268 00e2 8181      		ldd r24,Z+1
 269 00e4 9927      		clr r25
 270 00e6 9F93      		push r25
 271 00e8 8F93      		push r24
 272 00ea E981      		ldd r30,Y+1
 273 00ec FA81      		ldd r31,Y+2
 274 00ee 8081      		ld r24,Z
 275 00f0 9927      		clr r25
 276 00f2 9F93      		push r25
 277 00f4 8F93      		push r24
 278 00f6 80E0      		ldi r24,lo8(.LC0)
 279 00f8 90E0      		ldi r25,hi8(.LC0)
 280 00fa 9F93      		push r25
 281 00fc 8F93      		push r24
 282 00fe 00D0      		rcall printf
 283 0100 8DB7      		in r24,__SP_L__
 284 0102 9EB7      		in r25,__SP_H__
 285 0104 0A96      		adiw r24,10
 286 0106 0FB6      		in __tmp_reg__,__SREG__
 287 0108 F894      		cli
 288 010a 9EBF      		out __SP_H__,r25
 289 010c 0FBE      		out __SREG__,__tmp_reg__
 290 010e 8DBF      		out __SP_L__,r24
 291               	/* epilogue: frame size=2 */
 292 0110 2296      		adiw r28,2
 293 0112 0FB6      		in __tmp_reg__,__SREG__
 294 0114 F894      		cli
 295 0116 DEBF      		out __SP_H__,r29
 296 0118 0FBE      		out __SREG__,__tmp_reg__
 297 011a CDBF      		out __SP_L__,r28
 298 011c DF91      		pop r29
 299 011e CF91      		pop r28
 300 0120 0895      		ret
 301               	/* epilogue end (size=9) */
 302               	/* function print_time size 63 (44) */
 304               	.Lscope2:
 307               	.global	inc_time
 309               	inc_time:
  70:ledmeter.c    **** }
  71:ledmeter.c    **** 
  72:ledmeter.c    **** void inc_time(time_typ * time) {
 311               	.LM13:
 312               	/* prologue: frame size=6 */
 313 0122 0F93      		push r16
 314 0124 1F93      		push r17
 315 0126 CF93      		push r28
 316 0128 DF93      		push r29
 317 012a CDB7      		in r28,__SP_L__
 318 012c DEB7      		in r29,__SP_H__
 319 012e 2697      		sbiw r28,6
 320 0130 0FB6      		in __tmp_reg__,__SREG__
 321 0132 F894      		cli
 322 0134 DEBF      		out __SP_H__,r29
 323 0136 0FBE      		out __SREG__,__tmp_reg__
 324 0138 CDBF      		out __SP_L__,r28
 325               	/* prologue end (size=12) */
 326 013a 9A83      		std Y+2,r25
 327 013c 8983      		std Y+1,r24
  73:ledmeter.c    ****   if (running_chronometer) {
 329               	.LM14:
 330 013e 8091 0000 		lds r24,running_chronometer
 331 0142 8823      		tst r24
 332 0144 09F4      		brne .+2
 333 0146 6DC0      		rjmp .L4
  74:ledmeter.c    ****     time->xx++;
 335               	.LM15:
 336 0148 A981      		ldd r26,Y+1
 337 014a BA81      		ldd r27,Y+2
 338 014c E981      		ldd r30,Y+1
 339 014e FA81      		ldd r31,Y+2
 340 0150 8381      		ldd r24,Z+3
 341 0152 9481      		ldd r25,Z+4
 342 0154 0196      		adiw r24,1
 343 0156 FD01      		movw r30,r26
 344 0158 9483      		std Z+4,r25
 345 015a 8383      		std Z+3,r24
  75:ledmeter.c    ****     if(time->xx >= pow(10,CHR_PRECISION)) {
 347               	.LM16:
 348 015c 0981      		ldd r16,Y+1
 349 015e 1A81      		ldd r17,Y+2
 350 0160 F801      		movw r30,r16
 351 0162 8381      		ldd r24,Z+3
 352 0164 9481      		ldd r25,Z+4
 353 0166 AA27      		clr r26
 354 0168 97FD      		sbrc r25,7
 355 016a A095      		com r26
 356 016c BA2F      		mov r27,r26
 357 016e BC01      		movw r22,r24
 358 0170 CD01      		movw r24,r26
 359 0172 00D0      		rcall __floatsisf
 360 0174 6B83      		std Y+3,r22
 361 0176 7C83      		std Y+4,r23
 362 0178 8D83      		std Y+5,r24
 363 017a 9E83      		std Y+6,r25
 364 017c F801      		movw r30,r16
 365 017e 8381      		ldd r24,Z+3
 366 0180 9481      		ldd r25,Z+4
 367 0182 9923      		tst r25
 368 0184 7CF4      		brge .L7
 369 0186 20E0      		ldi r18,lo8(0x47800000)
 370 0188 30E0      		ldi r19,hi8(0x47800000)
 371 018a 40E8      		ldi r20,hlo8(0x47800000)
 372 018c 57E4      		ldi r21,hhi8(0x47800000)
 373 018e 6B81      		ldd r22,Y+3
 374 0190 7C81      		ldd r23,Y+4
 375 0192 8D81      		ldd r24,Y+5
 376 0194 9E81      		ldd r25,Y+6
 377 0196 00D0      		rcall __addsf3
 378 0198 DC01      		movw r26,r24
 379 019a CB01      		movw r24,r22
 380 019c 8B83      		std Y+3,r24
 381 019e 9C83      		std Y+4,r25
 382 01a0 AD83      		std Y+5,r26
 383 01a2 BE83      		std Y+6,r27
 384               	.L7:
 385 01a4 20E0      		ldi r18,lo8(0x461c4000)
 386 01a6 30E4      		ldi r19,hi8(0x461c4000)
 387 01a8 4CE1      		ldi r20,hlo8(0x461c4000)
 388 01aa 56E4      		ldi r21,hhi8(0x461c4000)
 389 01ac 6B81      		ldd r22,Y+3
 390 01ae 7C81      		ldd r23,Y+4
 391 01b0 8D81      		ldd r24,Y+5
 392 01b2 9E81      		ldd r25,Y+6
 393 01b4 00D0      		rcall __gesf2
 394 01b6 8823      		tst r24
 395 01b8 0CF4      		brge .L8
 396 01ba 33C0      		rjmp .L4
 397               	.L8:
  76:ledmeter.c    ****         time->xx = 0;
 399               	.LM17:
 400 01bc E981      		ldd r30,Y+1
 401 01be FA81      		ldd r31,Y+2
 402 01c0 1482      		std Z+4,__zero_reg__
 403 01c2 1382      		std Z+3,__zero_reg__
  77:ledmeter.c    ****         time->ss++;
 405               	.LM18:
 406 01c4 A981      		ldd r26,Y+1
 407 01c6 BA81      		ldd r27,Y+2
 408 01c8 E981      		ldd r30,Y+1
 409 01ca FA81      		ldd r31,Y+2
 410 01cc 8281      		ldd r24,Z+2
 411 01ce 8F5F      		subi r24,lo8(-(1))
 412 01d0 FD01      		movw r30,r26
 413 01d2 8283      		std Z+2,r24
  78:ledmeter.c    ****         if (time->ss >= 60) {
 415               	.LM19:
 416 01d4 E981      		ldd r30,Y+1
 417 01d6 FA81      		ldd r31,Y+2
 418 01d8 8281      		ldd r24,Z+2
 419 01da 8C33      		cpi r24,lo8(60)
 420 01dc 10F1      		brlo .L4
  79:ledmeter.c    ****             time->ss = 0;
 422               	.LM20:
 423 01de E981      		ldd r30,Y+1
 424 01e0 FA81      		ldd r31,Y+2
 425 01e2 1282      		std Z+2,__zero_reg__
  80:ledmeter.c    ****             time->mm++;
 427               	.LM21:
 428 01e4 A981      		ldd r26,Y+1
 429 01e6 BA81      		ldd r27,Y+2
 430 01e8 E981      		ldd r30,Y+1
 431 01ea FA81      		ldd r31,Y+2
 432 01ec 8181      		ldd r24,Z+1
 433 01ee 8F5F      		subi r24,lo8(-(1))
 434 01f0 FD01      		movw r30,r26
 435 01f2 8183      		std Z+1,r24
  81:ledmeter.c    ****             if (time->mm >= 60) {
 437               	.LM22:
 438 01f4 E981      		ldd r30,Y+1
 439 01f6 FA81      		ldd r31,Y+2
 440 01f8 8181      		ldd r24,Z+1
 441 01fa 8C33      		cpi r24,lo8(60)
 442 01fc 90F0      		brlo .L4
  82:ledmeter.c    ****                 time->mm = 0;
 444               	.LM23:
 445 01fe E981      		ldd r30,Y+1
 446 0200 FA81      		ldd r31,Y+2
 447 0202 1182      		std Z+1,__zero_reg__
  83:ledmeter.c    ****                 time->hh++;
 449               	.LM24:
 450 0204 A981      		ldd r26,Y+1
 451 0206 BA81      		ldd r27,Y+2
 452 0208 E981      		ldd r30,Y+1
 453 020a FA81      		ldd r31,Y+2
 454 020c 8081      		ld r24,Z
 455 020e 8F5F      		subi r24,lo8(-(1))
 456 0210 8C93      		st X,r24
  84:ledmeter.c    ****                 if (time->hh >= 24) {
 458               	.LM25:
 459 0212 E981      		ldd r30,Y+1
 460 0214 FA81      		ldd r31,Y+2
 461 0216 8081      		ld r24,Z
 462 0218 8831      		cpi r24,lo8(24)
 463 021a 18F0      		brlo .L4
  85:ledmeter.c    ****                     time->hh = 0;
 465               	.LM26:
 466 021c E981      		ldd r30,Y+1
 467 021e FA81      		ldd r31,Y+2
 468 0220 1082      		st Z,__zero_reg__
 469               	.L4:
 470               	/* epilogue: frame size=6 */
 471 0222 2696      		adiw r28,6
 472 0224 0FB6      		in __tmp_reg__,__SREG__
 473 0226 F894      		cli
 474 0228 DEBF      		out __SP_H__,r29
 475 022a 0FBE      		out __SREG__,__tmp_reg__
 476 022c CDBF      		out __SP_L__,r28
 477 022e DF91      		pop r29
 478 0230 CF91      		pop r28
 479 0232 1F91      		pop r17
 480 0234 0F91      		pop r16
 481 0236 0895      		ret
 482               	/* epilogue end (size=11) */
 483               	/* function inc_time size 139 (116) */
 485               	.Lscope3:
 489               	.global	copy_time
 491               	copy_time:
  86:ledmeter.c    **** 					 }
  87:ledmeter.c    ****             }
  88:ledmeter.c    ****         }
  89:ledmeter.c    ****     }
  90:ledmeter.c    ****     //_delay_ms(1);
  91:ledmeter.c    ****   }
  92:ledmeter.c    **** }
  93:ledmeter.c    **** 
  94:ledmeter.c    **** void copy_time(time_typ * time_source, time_typ * time_dest) { // TO TEST (pointer ?)
 493               	.LM27:
 494               	/* prologue: frame size=4 */
 495 0238 CF93      		push r28
 496 023a DF93      		push r29
 497 023c CDB7      		in r28,__SP_L__
 498 023e DEB7      		in r29,__SP_H__
 499 0240 2497      		sbiw r28,4
 500 0242 0FB6      		in __tmp_reg__,__SREG__
 501 0244 F894      		cli
 502 0246 DEBF      		out __SP_H__,r29
 503 0248 0FBE      		out __SREG__,__tmp_reg__
 504 024a CDBF      		out __SP_L__,r28
 505               	/* prologue end (size=10) */
 506 024c 9A83      		std Y+2,r25
 507 024e 8983      		std Y+1,r24
 508 0250 7C83      		std Y+4,r23
 509 0252 6B83      		std Y+3,r22
  95:ledmeter.c    ****     time_dest->hh = time_source->hh;
 511               	.LM28:
 512 0254 AB81      		ldd r26,Y+3
 513 0256 BC81      		ldd r27,Y+4
 514 0258 E981      		ldd r30,Y+1
 515 025a FA81      		ldd r31,Y+2
 516 025c 8081      		ld r24,Z
 517 025e 8C93      		st X,r24
  96:ledmeter.c    ****     time_dest->mm = time_source->mm;
 519               	.LM29:
 520 0260 AB81      		ldd r26,Y+3
 521 0262 BC81      		ldd r27,Y+4
 522 0264 E981      		ldd r30,Y+1
 523 0266 FA81      		ldd r31,Y+2
 524 0268 8181      		ldd r24,Z+1
 525 026a FD01      		movw r30,r26
 526 026c 8183      		std Z+1,r24
  97:ledmeter.c    ****     time_dest->ss = time_source->ss;
 528               	.LM30:
 529 026e AB81      		ldd r26,Y+3
 530 0270 BC81      		ldd r27,Y+4
 531 0272 E981      		ldd r30,Y+1
 532 0274 FA81      		ldd r31,Y+2
 533 0276 8281      		ldd r24,Z+2
 534 0278 FD01      		movw r30,r26
 535 027a 8283      		std Z+2,r24
  98:ledmeter.c    ****     time_dest->xx = time_source->xx;
 537               	.LM31:
 538 027c AB81      		ldd r26,Y+3
 539 027e BC81      		ldd r27,Y+4
 540 0280 E981      		ldd r30,Y+1
 541 0282 FA81      		ldd r31,Y+2
 542 0284 8381      		ldd r24,Z+3
 543 0286 9481      		ldd r25,Z+4
 544 0288 FD01      		movw r30,r26
 545 028a 9483      		std Z+4,r25
 546 028c 8383      		std Z+3,r24
 547               	/* epilogue: frame size=4 */
 548 028e 2496      		adiw r28,4
 549 0290 0FB6      		in __tmp_reg__,__SREG__
 550 0292 F894      		cli
 551 0294 DEBF      		out __SP_H__,r29
 552 0296 0FBE      		out __SREG__,__tmp_reg__
 553 0298 CDBF      		out __SP_L__,r28
 554 029a DF91      		pop r29
 555 029c CF91      		pop r28
 556 029e 0895      		ret
 557               	/* epilogue end (size=9) */
 558               	/* function copy_time size 52 (33) */
 560               	.Lscope4:
 564               	.global	compare_time
 566               	compare_time:
  99:ledmeter.c    **** }
 100:ledmeter.c    **** 
 101:ledmeter.c    **** uint8_t compare_time(time_typ * time1, time_typ * time2) {
 568               	.LM32:
 569               	/* prologue: frame size=4 */
 570 02a0 CF93      		push r28
 571 02a2 DF93      		push r29
 572 02a4 CDB7      		in r28,__SP_L__
 573 02a6 DEB7      		in r29,__SP_H__
 574 02a8 2497      		sbiw r28,4
 575 02aa 0FB6      		in __tmp_reg__,__SREG__
 576 02ac F894      		cli
 577 02ae DEBF      		out __SP_H__,r29
 578 02b0 0FBE      		out __SREG__,__tmp_reg__
 579 02b2 CDBF      		out __SP_L__,r28
 580               	/* prologue end (size=10) */
 581 02b4 9A83      		std Y+2,r25
 582 02b6 8983      		std Y+1,r24
 583 02b8 7C83      		std Y+4,r23
 584 02ba 6B83      		std Y+3,r22
 102:ledmeter.c    ****     //  0 time1=time2
 103:ledmeter.c    ****     // -1 time1<time2
 104:ledmeter.c    ****     //  1 time1>time2
 105:ledmeter.c    ****     return 0;
 586               	.LM33:
 587 02bc 80E0      		ldi r24,lo8(0)
 588 02be 90E0      		ldi r25,hi8(0)
 589               	/* epilogue: frame size=4 */
 590 02c0 2496      		adiw r28,4
 591 02c2 0FB6      		in __tmp_reg__,__SREG__
 592 02c4 F894      		cli
 593 02c6 DEBF      		out __SP_H__,r29
 594 02c8 0FBE      		out __SREG__,__tmp_reg__
 595 02ca CDBF      		out __SP_L__,r28
 596 02cc DF91      		pop r29
 597 02ce CF91      		pop r28
 598 02d0 0895      		ret
 599               	/* epilogue end (size=9) */
 600               	/* function compare_time size 25 (6) */
 602               	.Lscope5:
 604               	.global	switch_on_all_leds
 606               	switch_on_all_leds:
 106:ledmeter.c    **** }
 107:ledmeter.c    **** 
 108:ledmeter.c    **** 
 109:ledmeter.c    **** 
 110:ledmeter.c    **** 
 111:ledmeter.c    **** /*
 112:ledmeter.c    **** void switch_on_all_leds();
 113:ledmeter.c    **** void switch_off_all_leds();
 114:ledmeter.c    **** void switch_on_led(uint8_t led);
 115:ledmeter.c    **** void switch_off_led(uint8_t led);
 116:ledmeter.c    **** void loop(void);
 117:ledmeter.c    **** void init(void);
 118:ledmeter.c    **** */
 119:ledmeter.c    **** 
 120:ledmeter.c    **** // 1=off
 121:ledmeter.c    **** // 0=on
 122:ledmeter.c    **** 
 123:ledmeter.c    **** /*
 124:ledmeter.c    ****  * switch on all leds
 125:ledmeter.c    ****  */
 126:ledmeter.c    **** void switch_on_all_leds(void) {
 608               	.LM34:
 609               	/* prologue: frame size=0 */
 610 02d2 CF93      		push r28
 611 02d4 DF93      		push r29
 612 02d6 CDB7      		in r28,__SP_L__
 613 02d8 DEB7      		in r29,__SP_H__
 614               	/* prologue end (size=4) */
 127:ledmeter.c    ****     PORTC = 0x00;
 616               	.LM35:
 617 02da 1092 3500 		sts 53,__zero_reg__
 618               	/* epilogue: frame size=0 */
 619 02de DF91      		pop r29
 620 02e0 CF91      		pop r28
 621 02e2 0895      		ret
 622               	/* epilogue end (size=3) */
 623               	/* function switch_on_all_leds size 9 (2) */
 625               	.Lscope6:
 627               	.global	switch_off_all_leds
 629               	switch_off_all_leds:
 128:ledmeter.c    **** }
 129:ledmeter.c    **** 
 130:ledmeter.c    **** /*
 131:ledmeter.c    ****  * switch off all leds
 132:ledmeter.c    ****  */
 133:ledmeter.c    **** void switch_off_all_leds(void) {
 631               	.LM36:
 632               	/* prologue: frame size=0 */
 633 02e4 CF93      		push r28
 634 02e6 DF93      		push r29
 635 02e8 CDB7      		in r28,__SP_L__
 636 02ea DEB7      		in r29,__SP_H__
 637               	/* prologue end (size=4) */
 134:ledmeter.c    ****     PORTC = 0xFF;
 639               	.LM37:
 640 02ec 8FEF      		ldi r24,lo8(-1)
 641 02ee 8093 3500 		sts 53,r24
 642               	/* epilogue: frame size=0 */
 643 02f2 DF91      		pop r29
 644 02f4 CF91      		pop r28
 645 02f6 0895      		ret
 646               	/* epilogue end (size=3) */
 647               	/* function switch_off_all_leds size 10 (3) */
 649               	.Lscope7:
 652               	.global	switch_on_led
 654               	switch_on_led:
 135:ledmeter.c    **** }
 136:ledmeter.c    **** 
 137:ledmeter.c    **** // led from 1 to 8 (LEDSNUM)
 138:ledmeter.c    **** // PCx with w from 0 to 7
 139:ledmeter.c    **** 
 140:ledmeter.c    **** /*
 141:ledmeter.c    ****  * switch on the led with the number called "led"
 142:ledmeter.c    ****  */
 143:ledmeter.c    **** void switch_on_led(uint8_t led) {
 656               	.LM38:
 657               	/* prologue: frame size=3 */
 658 02f8 CF93      		push r28
 659 02fa DF93      		push r29
 660 02fc CDB7      		in r28,__SP_L__
 661 02fe DEB7      		in r29,__SP_H__
 662 0300 2397      		sbiw r28,3
 663 0302 0FB6      		in __tmp_reg__,__SREG__
 664 0304 F894      		cli
 665 0306 DEBF      		out __SP_H__,r29
 666 0308 0FBE      		out __SREG__,__tmp_reg__
 667 030a CDBF      		out __SP_L__,r28
 668               	/* prologue end (size=10) */
 669 030c 8983      		std Y+1,r24
 144:ledmeter.c    ****     uint8_t pin = led - 1;
 671               	.LM39:
 672 030e 8981      		ldd r24,Y+1
 673 0310 8150      		subi r24,lo8(-(-1))
 674 0312 8A83      		std Y+2,r24
 145:ledmeter.c    ****     uint8_t mask = ~(1<<pin);
 676               	.LM40:
 677 0314 8A81      		ldd r24,Y+2
 678 0316 282F      		mov r18,r24
 679 0318 3327      		clr r19
 680 031a 81E0      		ldi r24,lo8(1)
 681 031c 90E0      		ldi r25,hi8(1)
 682 031e 02C0      		rjmp 2f
 683 0320 880F      	1:	lsl r24
 684 0322 991F      		rol r25
 685 0324 2A95      	2:	dec r18
 686 0326 E2F7      		brpl 1b
 687 0328 8095      		com r24
 688 032a 8B83      		std Y+3,r24
 146:ledmeter.c    ****     PORTC&=mask;
 690               	.LM41:
 691 032c 9091 3500 		lds r25,53
 692 0330 8B81      		ldd r24,Y+3
 693 0332 8923      		and r24,r25
 694 0334 8093 3500 		sts 53,r24
 695               	/* epilogue: frame size=3 */
 696 0338 2396      		adiw r28,3
 697 033a 0FB6      		in __tmp_reg__,__SREG__
 698 033c F894      		cli
 699 033e DEBF      		out __SP_H__,r29
 700 0340 0FBE      		out __SREG__,__tmp_reg__
 701 0342 CDBF      		out __SP_L__,r28
 702 0344 DF91      		pop r29
 703 0346 CF91      		pop r28
 704 0348 0895      		ret
 705               	/* epilogue end (size=9) */
 706               	/* function switch_on_led size 42 (23) */
 712               	.Lscope8:
 715               	.global	switch_off_led
 717               	switch_off_led:
 147:ledmeter.c    **** }
 148:ledmeter.c    **** 
 149:ledmeter.c    **** /*
 150:ledmeter.c    ****  * switch off the led with the number called "led"
 151:ledmeter.c    ****  */
 152:ledmeter.c    **** void switch_off_led(uint8_t led) {
 719               	.LM42:
 720               	/* prologue: frame size=3 */
 721 034a CF93      		push r28
 722 034c DF93      		push r29
 723 034e CDB7      		in r28,__SP_L__
 724 0350 DEB7      		in r29,__SP_H__
 725 0352 2397      		sbiw r28,3
 726 0354 0FB6      		in __tmp_reg__,__SREG__
 727 0356 F894      		cli
 728 0358 DEBF      		out __SP_H__,r29
 729 035a 0FBE      		out __SREG__,__tmp_reg__
 730 035c CDBF      		out __SP_L__,r28
 731               	/* prologue end (size=10) */
 732 035e 8983      		std Y+1,r24
 153:ledmeter.c    ****     uint8_t pin = led - 1;
 734               	.LM43:
 735 0360 8981      		ldd r24,Y+1
 736 0362 8150      		subi r24,lo8(-(-1))
 737 0364 8A83      		std Y+2,r24
 154:ledmeter.c    ****     uint8_t mask = (1<<pin);
 739               	.LM44:
 740 0366 8A81      		ldd r24,Y+2
 741 0368 282F      		mov r18,r24
 742 036a 3327      		clr r19
 743 036c 81E0      		ldi r24,lo8(1)
 744 036e 90E0      		ldi r25,hi8(1)
 745 0370 02C0      		rjmp 2f
 746 0372 880F      	1:	lsl r24
 747 0374 991F      		rol r25
 748 0376 2A95      	2:	dec r18
 749 0378 E2F7      		brpl 1b
 750 037a 8B83      		std Y+3,r24
 155:ledmeter.c    ****     PORTC|=mask;
 752               	.LM45:
 753 037c 9091 3500 		lds r25,53
 754 0380 8B81      		ldd r24,Y+3
 755 0382 892B      		or r24,r25
 756 0384 8093 3500 		sts 53,r24
 757               	/* epilogue: frame size=3 */
 758 0388 2396      		adiw r28,3
 759 038a 0FB6      		in __tmp_reg__,__SREG__
 760 038c F894      		cli
 761 038e DEBF      		out __SP_H__,r29
 762 0390 0FBE      		out __SREG__,__tmp_reg__
 763 0392 CDBF      		out __SP_L__,r28
 764 0394 DF91      		pop r29
 765 0396 CF91      		pop r28
 766 0398 0895      		ret
 767               	/* epilogue end (size=9) */
 768               	/* function switch_off_led size 41 (22) */
 774               	.Lscope9:
 777               	.global	switch_on_leds_with_delay
 779               	switch_on_leds_with_delay:
 156:ledmeter.c    **** }
 157:ledmeter.c    **** 
 158:ledmeter.c    **** /*
 159:ledmeter.c    ****  * switch on every leds one after one with a delay (called "delay")
 160:ledmeter.c    ****  */
 161:ledmeter.c    **** void switch_on_leds_with_delay(double delay) {
 781               	.LM46:
 782               	/* prologue: frame size=17 */
 783 039a CF93      		push r28
 784 039c DF93      		push r29
 785 039e CDB7      		in r28,__SP_L__
 786 03a0 DEB7      		in r29,__SP_H__
 787 03a2 6197      		sbiw r28,17
 788 03a4 0FB6      		in __tmp_reg__,__SREG__
 789 03a6 F894      		cli
 790 03a8 DEBF      		out __SP_H__,r29
 791 03aa 0FBE      		out __SREG__,__tmp_reg__
 792 03ac CDBF      		out __SP_L__,r28
 793               	/* prologue end (size=10) */
 794 03ae 6983      		std Y+1,r22
 795 03b0 7A83      		std Y+2,r23
 796 03b2 8B83      		std Y+3,r24
 797 03b4 9C83      		std Y+4,r25
 162:ledmeter.c    ****     uint8_t i;
 163:ledmeter.c    ****     for(i = 1; i<=Nleds; i++) {
 799               	.LM47:
 800 03b6 81E0      		ldi r24,lo8(1)
 801 03b8 8D83      		std Y+5,r24
 802               	.L19:
 804               	.LM48:
 805 03ba 8D81      		ldd r24,Y+5
 806 03bc 8930      		cpi r24,lo8(9)
 807 03be 08F0      		brlo .+2
 808 03c0 50C0      		rjmp .L18
 809               	.LBB2:
 811               	.Ltext1:
   1:C:/WinAVR/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:C:/WinAVR/avr/include/util/delay.h ****    Copyright (c) 2004,2005 Joerg Wunsch
   3:C:/WinAVR/avr/include/util/delay.h ****    All rights reserved.
   4:C:/WinAVR/avr/include/util/delay.h **** 
   5:C:/WinAVR/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   6:C:/WinAVR/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   7:C:/WinAVR/avr/include/util/delay.h **** 
   8:C:/WinAVR/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
   9:C:/WinAVR/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  10:C:/WinAVR/avr/include/util/delay.h **** 
  11:C:/WinAVR/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  12:C:/WinAVR/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  13:C:/WinAVR/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  14:C:/WinAVR/avr/include/util/delay.h ****      distribution.
  15:C:/WinAVR/avr/include/util/delay.h **** 
  16:C:/WinAVR/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  17:C:/WinAVR/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  18:C:/WinAVR/avr/include/util/delay.h ****      from this software without specific prior written permission.
  19:C:/WinAVR/avr/include/util/delay.h **** 
  20:C:/WinAVR/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21:C:/WinAVR/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22:C:/WinAVR/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  23:C:/WinAVR/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  24:C:/WinAVR/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  25:C:/WinAVR/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  26:C:/WinAVR/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  27:C:/WinAVR/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  28:C:/WinAVR/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  29:C:/WinAVR/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  30:C:/WinAVR/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  31:C:/WinAVR/avr/include/util/delay.h **** 
  32:C:/WinAVR/avr/include/util/delay.h **** /* $Id: delay.h,v 1.1.2.1 2005/12/12 23:19:49 joerg_wunsch Exp $ */
  33:C:/WinAVR/avr/include/util/delay.h **** 
  34:C:/WinAVR/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  35:C:/WinAVR/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  36:C:/WinAVR/avr/include/util/delay.h **** 
  37:C:/WinAVR/avr/include/util/delay.h **** #include <inttypes.h>
  38:C:/WinAVR/avr/include/util/delay.h **** 
  39:C:/WinAVR/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Busy-wait delay loops
  40:C:/WinAVR/avr/include/util/delay.h ****     \code
  41:C:/WinAVR/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  42:C:/WinAVR/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  43:C:/WinAVR/avr/include/util/delay.h ****     #include <util/delay.h>
  44:C:/WinAVR/avr/include/util/delay.h ****     \endcode
  45:C:/WinAVR/avr/include/util/delay.h **** 
  46:C:/WinAVR/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  47:C:/WinAVR/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  48:C:/WinAVR/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  49:C:/WinAVR/avr/include/util/delay.h ****     used.
  50:C:/WinAVR/avr/include/util/delay.h **** 
  51:C:/WinAVR/avr/include/util/delay.h ****     The functions in this header file implement simple delay loops
  52:C:/WinAVR/avr/include/util/delay.h ****     that perform a busy-waiting.  They are typically used to
  53:C:/WinAVR/avr/include/util/delay.h ****     facilitate short delays in the program execution.  They are
  54:C:/WinAVR/avr/include/util/delay.h ****     implemented as count-down loops with a well-known CPU cycle
  55:C:/WinAVR/avr/include/util/delay.h ****     count per loop iteration.  As such, no other processing can
  56:C:/WinAVR/avr/include/util/delay.h ****     occur simultaneously.  It should be kept in mind that the
  57:C:/WinAVR/avr/include/util/delay.h ****     functions described here do not disable interrupts.
  58:C:/WinAVR/avr/include/util/delay.h **** 
  59:C:/WinAVR/avr/include/util/delay.h ****     In general, for long delays, the use of hardware timers is
  60:C:/WinAVR/avr/include/util/delay.h ****     much preferrable, as they free the CPU, and allow for
  61:C:/WinAVR/avr/include/util/delay.h ****     concurrent processing of other events while the timer is
  62:C:/WinAVR/avr/include/util/delay.h ****     running.  However, in particular for very short delays, the
  63:C:/WinAVR/avr/include/util/delay.h ****     overhead of setting up a hardware timer is too much compared
  64:C:/WinAVR/avr/include/util/delay.h ****     to the overall delay time.
  65:C:/WinAVR/avr/include/util/delay.h **** 
  66:C:/WinAVR/avr/include/util/delay.h ****     Two inline functions are provided for the actual delay algorithms.
  67:C:/WinAVR/avr/include/util/delay.h **** 
  68:C:/WinAVR/avr/include/util/delay.h ****     Two wrapper functions allow the specification of microsecond, and
  69:C:/WinAVR/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  70:C:/WinAVR/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).  These functions
  71:C:/WinAVR/avr/include/util/delay.h ****     operate on double typed arguments, however when optimization is
  72:C:/WinAVR/avr/include/util/delay.h ****     turned on, the entire floating-point calculation will be done at
  73:C:/WinAVR/avr/include/util/delay.h ****     compile-time.
  74:C:/WinAVR/avr/include/util/delay.h **** 
  75:C:/WinAVR/avr/include/util/delay.h ****     \note When using _delay_us() and _delay_ms(), the expressions
  76:C:/WinAVR/avr/include/util/delay.h ****     passed as arguments to these functions shall be compile-time
  77:C:/WinAVR/avr/include/util/delay.h ****     constants, otherwise the floating-point calculations to setup the
  78:C:/WinAVR/avr/include/util/delay.h ****     loops will be done at run-time, thereby drastically increasing
  79:C:/WinAVR/avr/include/util/delay.h ****     both the resulting code size, as well as the time required to
  80:C:/WinAVR/avr/include/util/delay.h ****     setup the loops.
  81:C:/WinAVR/avr/include/util/delay.h **** */
  82:C:/WinAVR/avr/include/util/delay.h **** 
  83:C:/WinAVR/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:C:/WinAVR/avr/include/util/delay.h **** static inline void _delay_loop_1(uint8_t __count) __attribute__((always_inline));
  85:C:/WinAVR/avr/include/util/delay.h **** static inline void _delay_loop_2(uint16_t __count) __attribute__((always_inline));
  86:C:/WinAVR/avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  87:C:/WinAVR/avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  88:C:/WinAVR/avr/include/util/delay.h **** #endif
  89:C:/WinAVR/avr/include/util/delay.h **** 
  90:C:/WinAVR/avr/include/util/delay.h **** /** \ingroup util_delay
  91:C:/WinAVR/avr/include/util/delay.h **** 
  92:C:/WinAVR/avr/include/util/delay.h ****     Delay loop using an 8-bit counter \c __count, so up to 256
  93:C:/WinAVR/avr/include/util/delay.h ****     iterations are possible.  (The value 256 would have to be passed
  94:C:/WinAVR/avr/include/util/delay.h ****     as 0.)  The loop executes three CPU cycles per iteration, not
  95:C:/WinAVR/avr/include/util/delay.h ****     including the overhead the compiler needs to setup the counter
  96:C:/WinAVR/avr/include/util/delay.h ****     register.
  97:C:/WinAVR/avr/include/util/delay.h **** 
  98:C:/WinAVR/avr/include/util/delay.h ****     Thus, at a CPU speed of 1 MHz, delays of up to 768 microseconds
  99:C:/WinAVR/avr/include/util/delay.h ****     can be achieved.
 100:C:/WinAVR/avr/include/util/delay.h **** */
 101:C:/WinAVR/avr/include/util/delay.h **** void
 102:C:/WinAVR/avr/include/util/delay.h **** _delay_loop_1(uint8_t __count)
 103:C:/WinAVR/avr/include/util/delay.h **** {
 104:C:/WinAVR/avr/include/util/delay.h **** 	__asm__ volatile (
 105:C:/WinAVR/avr/include/util/delay.h **** 		"1: dec %0" "\n\t"
 106:C:/WinAVR/avr/include/util/delay.h **** 		"brne 1b"
 107:C:/WinAVR/avr/include/util/delay.h **** 		: "=r" (__count)
 108:C:/WinAVR/avr/include/util/delay.h **** 		: "0" (__count)
 109:C:/WinAVR/avr/include/util/delay.h **** 	);
 110:C:/WinAVR/avr/include/util/delay.h **** }
 111:C:/WinAVR/avr/include/util/delay.h **** 
 112:C:/WinAVR/avr/include/util/delay.h **** /** \ingroup util_delay
 113:C:/WinAVR/avr/include/util/delay.h **** 
 114:C:/WinAVR/avr/include/util/delay.h ****     Delay loop using a 16-bit counter \c __count, so up to 65536
 115:C:/WinAVR/avr/include/util/delay.h ****     iterations are possible.  (The value 65536 would have to be
 116:C:/WinAVR/avr/include/util/delay.h ****     passed as 0.)  The loop executes four CPU cycles per iteration,
 117:C:/WinAVR/avr/include/util/delay.h ****     not including the overhead the compiler requires to setup the
 118:C:/WinAVR/avr/include/util/delay.h ****     counter register pair.
 119:C:/WinAVR/avr/include/util/delay.h **** 
 120:C:/WinAVR/avr/include/util/delay.h ****     Thus, at a CPU speed of 1 MHz, delays of up to about 262.1
 121:C:/WinAVR/avr/include/util/delay.h ****     milliseconds can be achieved.
 122:C:/WinAVR/avr/include/util/delay.h ****  */
 123:C:/WinAVR/avr/include/util/delay.h **** void
 124:C:/WinAVR/avr/include/util/delay.h **** _delay_loop_2(uint16_t __count)
 125:C:/WinAVR/avr/include/util/delay.h **** {
 126:C:/WinAVR/avr/include/util/delay.h **** 	__asm__ volatile (
 127:C:/WinAVR/avr/include/util/delay.h **** 		"1: sbiw %0,1" "\n\t"
 128:C:/WinAVR/avr/include/util/delay.h **** 		"brne 1b"
 129:C:/WinAVR/avr/include/util/delay.h **** 		: "=w" (__count)
 130:C:/WinAVR/avr/include/util/delay.h **** 		: "0" (__count)
 131:C:/WinAVR/avr/include/util/delay.h **** 	);
 132:C:/WinAVR/avr/include/util/delay.h **** }
 133:C:/WinAVR/avr/include/util/delay.h **** 
 134:C:/WinAVR/avr/include/util/delay.h **** #ifndef F_CPU
 135:C:/WinAVR/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
 136:C:/WinAVR/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
 137:C:/WinAVR/avr/include/util/delay.h **** # define F_CPU 1000000UL
 138:C:/WinAVR/avr/include/util/delay.h **** #endif
 139:C:/WinAVR/avr/include/util/delay.h **** 
 140:C:/WinAVR/avr/include/util/delay.h **** /**
 141:C:/WinAVR/avr/include/util/delay.h ****    \ingroup util_delay
 142:C:/WinAVR/avr/include/util/delay.h **** 
 143:C:/WinAVR/avr/include/util/delay.h ****    Perform a delay of \c __us microseconds, using _delay_loop_1().
 144:C:/WinAVR/avr/include/util/delay.h **** 
 145:C:/WinAVR/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 146:C:/WinAVR/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 147:C:/WinAVR/avr/include/util/delay.h **** 
 148:C:/WinAVR/avr/include/util/delay.h ****    The maximal possible delay is 768 us / F_CPU in MHz.
 149:C:/WinAVR/avr/include/util/delay.h ****  */
 150:C:/WinAVR/avr/include/util/delay.h **** void
 151:C:/WinAVR/avr/include/util/delay.h **** _delay_us(double __us)
 152:C:/WinAVR/avr/include/util/delay.h **** {
 153:C:/WinAVR/avr/include/util/delay.h **** 	uint8_t __ticks;
 154:C:/WinAVR/avr/include/util/delay.h **** 	double __tmp = ((F_CPU) / 3e6) * __us;
 155:C:/WinAVR/avr/include/util/delay.h **** 	if (__tmp < 1.0)
 156:C:/WinAVR/avr/include/util/delay.h **** 		__ticks = 1;
 157:C:/WinAVR/avr/include/util/delay.h **** 	else if (__tmp > 255)
 158:C:/WinAVR/avr/include/util/delay.h **** 		__ticks = 0;	/* i.e. 256 */
 159:C:/WinAVR/avr/include/util/delay.h **** 	else
 160:C:/WinAVR/avr/include/util/delay.h **** 		__ticks = (uint8_t)__tmp;
 161:C:/WinAVR/avr/include/util/delay.h **** 	_delay_loop_1(__ticks);
 162:C:/WinAVR/avr/include/util/delay.h **** }
 163:C:/WinAVR/avr/include/util/delay.h **** 
 164:C:/WinAVR/avr/include/util/delay.h **** 
 165:C:/WinAVR/avr/include/util/delay.h **** /**
 166:C:/WinAVR/avr/include/util/delay.h ****    \ingroup util_delay
 167:C:/WinAVR/avr/include/util/delay.h **** 
 168:C:/WinAVR/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 169:C:/WinAVR/avr/include/util/delay.h **** 
 170:C:/WinAVR/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 171:C:/WinAVR/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 172:C:/WinAVR/avr/include/util/delay.h **** 
 173:C:/WinAVR/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 174:C:/WinAVR/avr/include/util/delay.h ****  */
 175:C:/WinAVR/avr/include/util/delay.h **** void
 176:C:/WinAVR/avr/include/util/delay.h **** _delay_ms(double __ms)
 177:C:/WinAVR/avr/include/util/delay.h **** {
 813               	.LM49:
 814 03c2 8981      		ldd r24,Y+1
 815 03c4 9A81      		ldd r25,Y+2
 816 03c6 AB81      		ldd r26,Y+3
 817 03c8 BC81      		ldd r27,Y+4
 818 03ca 8E83      		std Y+6,r24
 819 03cc 9F83      		std Y+7,r25
 820 03ce A887      		std Y+8,r26
 821 03d0 B987      		std Y+9,r27
 822               	.LBB3:
 178:C:/WinAVR/avr/include/util/delay.h **** 	uint16_t __ticks;
 179:C:/WinAVR/avr/include/util/delay.h **** 	double __tmp = ((F_CPU) / 4e3) * __ms;
 824               	.LM50:
 825 03d2 20E0      		ldi r18,lo8(0x437a0000)
 826 03d4 30E0      		ldi r19,hi8(0x437a0000)
 827 03d6 4AE7      		ldi r20,hlo8(0x437a0000)
 828 03d8 53E4      		ldi r21,hhi8(0x437a0000)
 829 03da 6E81      		ldd r22,Y+6
 830 03dc 7F81      		ldd r23,Y+7
 831 03de 8885      		ldd r24,Y+8
 832 03e0 9985      		ldd r25,Y+9
 833 03e2 00D0      		rcall __mulsf3
 834 03e4 DC01      		movw r26,r24
 835 03e6 CB01      		movw r24,r22
 836 03e8 8C87      		std Y+12,r24
 837 03ea 9D87      		std Y+13,r25
 838 03ec AE87      		std Y+14,r26
 839 03ee BF87      		std Y+15,r27
 180:C:/WinAVR/avr/include/util/delay.h **** 	if (__tmp < 1.0)
 841               	.LM51:
 842 03f0 20E0      		ldi r18,lo8(0x3f800000)
 843 03f2 30E0      		ldi r19,hi8(0x3f800000)
 844 03f4 40E8      		ldi r20,hlo8(0x3f800000)
 845 03f6 5FE3      		ldi r21,hhi8(0x3f800000)
 846 03f8 6C85      		ldd r22,Y+12
 847 03fa 7D85      		ldd r23,Y+13
 848 03fc 8E85      		ldd r24,Y+14
 849 03fe 9F85      		ldd r25,Y+15
 850 0400 00D0      		rcall __ltsf2
 851 0402 8823      		tst r24
 852 0404 0CF0      		brlt .L23
 853 0406 05C0      		rjmp .L22
 854               	.L23:
 181:C:/WinAVR/avr/include/util/delay.h **** 		__ticks = 1;
 856               	.LM52:
 857 0408 81E0      		ldi r24,lo8(1)
 858 040a 90E0      		ldi r25,hi8(1)
 859 040c 9B87      		std Y+11,r25
 860 040e 8A87      		std Y+10,r24
 861 0410 18C0      		rjmp .L24
 862               	.L22:
 182:C:/WinAVR/avr/include/util/delay.h **** 	else if (__tmp > 65535)
 864               	.LM53:
 865 0412 20E0      		ldi r18,lo8(0x477fff00)
 866 0414 3FEF      		ldi r19,hi8(0x477fff00)
 867 0416 4FE7      		ldi r20,hlo8(0x477fff00)
 868 0418 57E4      		ldi r21,hhi8(0x477fff00)
 869 041a 6C85      		ldd r22,Y+12
 870 041c 7D85      		ldd r23,Y+13
 871 041e 8E85      		ldd r24,Y+14
 872 0420 9F85      		ldd r25,Y+15
 873 0422 00D0      		rcall __gtsf2
 874 0424 1816      		cp __zero_reg__,r24
 875 0426 0CF0      		brlt .L26
 876 0428 03C0      		rjmp .L25
 877               	.L26:
 183:C:/WinAVR/avr/include/util/delay.h **** 		__ticks = 0;	/* i.e. 65536 */
 879               	.LM54:
 880 042a 1B86      		std Y+11,__zero_reg__
 881 042c 1A86      		std Y+10,__zero_reg__
 882 042e 09C0      		rjmp .L24
 883               	.L25:
 184:C:/WinAVR/avr/include/util/delay.h **** 	else
 185:C:/WinAVR/avr/include/util/delay.h **** 		__ticks = (uint16_t)__tmp;
 885               	.LM55:
 886 0430 6C85      		ldd r22,Y+12
 887 0432 7D85      		ldd r23,Y+13
 888 0434 8E85      		ldd r24,Y+14
 889 0436 9F85      		ldd r25,Y+15
 890 0438 00D0      		rcall __fixunssfsi
 891 043a DC01      		movw r26,r24
 892 043c CB01      		movw r24,r22
 893 043e 9B87      		std Y+11,r25
 894 0440 8A87      		std Y+10,r24
 895               	.L24:
 896               	.LBB4:
 898               	.LM56:
 899 0442 8A85      		ldd r24,Y+10
 900 0444 9B85      		ldd r25,Y+11
 901 0446 998B      		std Y+17,r25
 902 0448 888B      		std Y+16,r24
 903               	.LBB5:
 905               	.LM57:
 906 044a 8889      		ldd r24,Y+16
 907 044c 9989      		ldd r25,Y+17
 908               	/* #APP */
 909 044e 0197      		1: sbiw r24,1
 910 0450 F1F7      		brne 1b
 911               	/* #NOAPP */
 912 0452 998B      		std Y+17,r25
 913 0454 888B      		std Y+16,r24
 914               	.LBE5:
 915               	.LBE4:
 916               	.LBE3:
 917               	.LBE2:
 919               	.Ltext2:
 164:ledmeter.c    ****         _delay_ms(delay);
 165:ledmeter.c    ****         switch_on_led(i);
 921               	.LM58:
 922 0456 8D81      		ldd r24,Y+5
 923 0458 4FDF      		rcall switch_on_led
 925               	.LM59:
 926 045a 8D81      		ldd r24,Y+5
 927 045c 8F5F      		subi r24,lo8(-(1))
 928 045e 8D83      		std Y+5,r24
 929 0460 ACCF      		rjmp .L19
 930               	.L18:
 931               	/* epilogue: frame size=17 */
 932 0462 6196      		adiw r28,17
 933 0464 0FB6      		in __tmp_reg__,__SREG__
 934 0466 F894      		cli
 935 0468 DEBF      		out __SP_H__,r29
 936 046a 0FBE      		out __SREG__,__tmp_reg__
 937 046c CDBF      		out __SP_L__,r28
 938 046e DF91      		pop r29
 939 0470 CF91      		pop r28
 940 0472 0895      		ret
 941               	/* epilogue end (size=9) */
 942               	/* function switch_on_leds_with_delay size 111 (92) */
 957               	.Lscope10:
 960               	.global	switch_off_leds_with_delay
 962               	switch_off_leds_with_delay:
 166:ledmeter.c    ****     }
 167:ledmeter.c    **** }
 168:ledmeter.c    **** 
 169:ledmeter.c    **** /*
 170:ledmeter.c    ****  * switch off every leds on after one with a delay (called "delay")
 171:ledmeter.c    ****  */
 172:ledmeter.c    **** void switch_off_leds_with_delay(double delay) {
 964               	.LM60:
 965               	/* prologue: frame size=17 */
 966 0474 CF93      		push r28
 967 0476 DF93      		push r29
 968 0478 CDB7      		in r28,__SP_L__
 969 047a DEB7      		in r29,__SP_H__
 970 047c 6197      		sbiw r28,17
 971 047e 0FB6      		in __tmp_reg__,__SREG__
 972 0480 F894      		cli
 973 0482 DEBF      		out __SP_H__,r29
 974 0484 0FBE      		out __SREG__,__tmp_reg__
 975 0486 CDBF      		out __SP_L__,r28
 976               	/* prologue end (size=10) */
 977 0488 6983      		std Y+1,r22
 978 048a 7A83      		std Y+2,r23
 979 048c 8B83      		std Y+3,r24
 980 048e 9C83      		std Y+4,r25
 173:ledmeter.c    ****     uint8_t i;
 174:ledmeter.c    ****     for(i = Nleds; i>=1; i--) {
 982               	.LM61:
 983 0490 88E0      		ldi r24,lo8(8)
 984 0492 8D83      		std Y+5,r24
 985               	.L31:
 987               	.LM62:
 988 0494 8D81      		ldd r24,Y+5
 989 0496 8823      		tst r24
 990 0498 09F4      		brne .+2
 991 049a 50C0      		rjmp .L30
 992               	.LBB6:
 994               	.Ltext3:
 996               	.LM63:
 997 049c 8981      		ldd r24,Y+1
 998 049e 9A81      		ldd r25,Y+2
 999 04a0 AB81      		ldd r26,Y+3
 1000 04a2 BC81      		ldd r27,Y+4
 1001 04a4 8E83      		std Y+6,r24
 1002 04a6 9F83      		std Y+7,r25
 1003 04a8 A887      		std Y+8,r26
 1004 04aa B987      		std Y+9,r27
 1005               	.LBB7:
 1007               	.LM64:
 1008 04ac 20E0      		ldi r18,lo8(0x437a0000)
 1009 04ae 30E0      		ldi r19,hi8(0x437a0000)
 1010 04b0 4AE7      		ldi r20,hlo8(0x437a0000)
 1011 04b2 53E4      		ldi r21,hhi8(0x437a0000)
 1012 04b4 6E81      		ldd r22,Y+6
 1013 04b6 7F81      		ldd r23,Y+7
 1014 04b8 8885      		ldd r24,Y+8
 1015 04ba 9985      		ldd r25,Y+9
 1016 04bc 00D0      		rcall __mulsf3
 1017 04be DC01      		movw r26,r24
 1018 04c0 CB01      		movw r24,r22
 1019 04c2 8C87      		std Y+12,r24
 1020 04c4 9D87      		std Y+13,r25
 1021 04c6 AE87      		std Y+14,r26
 1022 04c8 BF87      		std Y+15,r27
 1024               	.LM65:
 1025 04ca 20E0      		ldi r18,lo8(0x3f800000)
 1026 04cc 30E0      		ldi r19,hi8(0x3f800000)
 1027 04ce 40E8      		ldi r20,hlo8(0x3f800000)
 1028 04d0 5FE3      		ldi r21,hhi8(0x3f800000)
 1029 04d2 6C85      		ldd r22,Y+12
 1030 04d4 7D85      		ldd r23,Y+13
 1031 04d6 8E85      		ldd r24,Y+14
 1032 04d8 9F85      		ldd r25,Y+15
 1033 04da 00D0      		rcall __ltsf2
 1034 04dc 8823      		tst r24
 1035 04de 0CF0      		brlt .L35
 1036 04e0 05C0      		rjmp .L34
 1037               	.L35:
 1039               	.LM66:
 1040 04e2 81E0      		ldi r24,lo8(1)
 1041 04e4 90E0      		ldi r25,hi8(1)
 1042 04e6 9B87      		std Y+11,r25
 1043 04e8 8A87      		std Y+10,r24
 1044 04ea 18C0      		rjmp .L36
 1045               	.L34:
 1047               	.LM67:
 1048 04ec 20E0      		ldi r18,lo8(0x477fff00)
 1049 04ee 3FEF      		ldi r19,hi8(0x477fff00)
 1050 04f0 4FE7      		ldi r20,hlo8(0x477fff00)
 1051 04f2 57E4      		ldi r21,hhi8(0x477fff00)
 1052 04f4 6C85      		ldd r22,Y+12
 1053 04f6 7D85      		ldd r23,Y+13
 1054 04f8 8E85      		ldd r24,Y+14
 1055 04fa 9F85      		ldd r25,Y+15
 1056 04fc 00D0      		rcall __gtsf2
 1057 04fe 1816      		cp __zero_reg__,r24
 1058 0500 0CF0      		brlt .L38
 1059 0502 03C0      		rjmp .L37
 1060               	.L38:
 1062               	.LM68:
 1063 0504 1B86      		std Y+11,__zero_reg__
 1064 0506 1A86      		std Y+10,__zero_reg__
 1065 0508 09C0      		rjmp .L36
 1066               	.L37:
 1068               	.LM69:
 1069 050a 6C85      		ldd r22,Y+12
 1070 050c 7D85      		ldd r23,Y+13
 1071 050e 8E85      		ldd r24,Y+14
 1072 0510 9F85      		ldd r25,Y+15
 1073 0512 00D0      		rcall __fixunssfsi
 1074 0514 DC01      		movw r26,r24
 1075 0516 CB01      		movw r24,r22
 1076 0518 9B87      		std Y+11,r25
 1077 051a 8A87      		std Y+10,r24
 1078               	.L36:
 1079               	.LBB8:
 1081               	.LM70:
 1082 051c 8A85      		ldd r24,Y+10
 1083 051e 9B85      		ldd r25,Y+11
 1084 0520 998B      		std Y+17,r25
 1085 0522 888B      		std Y+16,r24
 1086               	.LBB9:
 1088               	.LM71:
 1089 0524 8889      		ldd r24,Y+16
 1090 0526 9989      		ldd r25,Y+17
 1091               	/* #APP */
 1092 0528 0197      		1: sbiw r24,1
 1093 052a F1F7      		brne 1b
 1094               	/* #NOAPP */
 1095 052c 998B      		std Y+17,r25
 1096 052e 888B      		std Y+16,r24
 1097               	.LBE9:
 1098               	.LBE8:
 1099               	.LBE7:
 1100               	.LBE6:
 1102               	.Ltext4:
 175:ledmeter.c    ****         _delay_ms(delay);
 176:ledmeter.c    ****         switch_off_led(i);
 1104               	.LM72:
 1105 0530 8D81      		ldd r24,Y+5
 1106 0532 0BDF      		rcall switch_off_led
 1108               	.LM73:
 1109 0534 8D81      		ldd r24,Y+5
 1110 0536 8150      		subi r24,lo8(-(-1))
 1111 0538 8D83      		std Y+5,r24
 1112 053a ACCF      		rjmp .L31
 1113               	.L30:
 1114               	/* epilogue: frame size=17 */
 1115 053c 6196      		adiw r28,17
 1116 053e 0FB6      		in __tmp_reg__,__SREG__
 1117 0540 F894      		cli
 1118 0542 DEBF      		out __SP_H__,r29
 1119 0544 0FBE      		out __SREG__,__tmp_reg__
 1120 0546 CDBF      		out __SP_L__,r28
 1121 0548 DF91      		pop r29
 1122 054a CF91      		pop r28
 1123 054c 0895      		ret
 1124               	/* epilogue end (size=9) */
 1125               	/* function switch_off_leds_with_delay size 111 (92) */
 1140               	.Lscope11:
 1142               	.global	test_leds_up_down
 1144               	test_leds_up_down:
 177:ledmeter.c    ****     }
 178:ledmeter.c    **** }
 179:ledmeter.c    **** 
 180:ledmeter.c    **** /*
 181:ledmeter.c    ****  * a function for testing leds that switch on every leds and switch off every leds (one after one)
 182:ledmeter.c    ****  */
 183:ledmeter.c    **** void test_leds_up_down(void) {
 1146               	.LM74:
 1147               	/* prologue: frame size=12 */
 1148 054e CF93      		push r28
 1149 0550 DF93      		push r29
 1150 0552 CDB7      		in r28,__SP_L__
 1151 0554 DEB7      		in r29,__SP_H__
 1152 0556 2C97      		sbiw r28,12
 1153 0558 0FB6      		in __tmp_reg__,__SREG__
 1154 055a F894      		cli
 1155 055c DEBF      		out __SP_H__,r29
 1156 055e 0FBE      		out __SREG__,__tmp_reg__
 1157 0560 CDBF      		out __SP_L__,r28
 1158               	/* prologue end (size=10) */
 184:ledmeter.c    ****     switch_on_leds_with_delay(50); //100
 1160               	.LM75:
 1161 0562 60E0      		ldi r22,lo8(0x42480000)
 1162 0564 70E0      		ldi r23,hi8(0x42480000)
 1163 0566 88E4      		ldi r24,hlo8(0x42480000)
 1164 0568 92E4      		ldi r25,hhi8(0x42480000)
 1165 056a 17DF      		rcall switch_on_leds_with_delay
 1166               	.LBB10:
 1168               	.Ltext5:
 1170               	.LM76:
 1171 056c 80E0      		ldi r24,lo8(0x42480000)
 1172 056e 90E0      		ldi r25,hi8(0x42480000)
 1173 0570 A8E4      		ldi r26,hlo8(0x42480000)
 1174 0572 B2E4      		ldi r27,hhi8(0x42480000)
 1175 0574 8983      		std Y+1,r24
 1176 0576 9A83      		std Y+2,r25
 1177 0578 AB83      		std Y+3,r26
 1178 057a BC83      		std Y+4,r27
 1179               	.LBB11:
 1181               	.LM77:
 1182 057c 20E0      		ldi r18,lo8(0x437a0000)
 1183 057e 30E0      		ldi r19,hi8(0x437a0000)
 1184 0580 4AE7      		ldi r20,hlo8(0x437a0000)
 1185 0582 53E4      		ldi r21,hhi8(0x437a0000)
 1186 0584 6981      		ldd r22,Y+1
 1187 0586 7A81      		ldd r23,Y+2
 1188 0588 8B81      		ldd r24,Y+3
 1189 058a 9C81      		ldd r25,Y+4
 1190 058c 00D0      		rcall __mulsf3
 1191 058e DC01      		movw r26,r24
 1192 0590 CB01      		movw r24,r22
 1193 0592 8F83      		std Y+7,r24
 1194 0594 9887      		std Y+8,r25
 1195 0596 A987      		std Y+9,r26
 1196 0598 BA87      		std Y+10,r27
 1198               	.LM78:
 1199 059a 20E0      		ldi r18,lo8(0x3f800000)
 1200 059c 30E0      		ldi r19,hi8(0x3f800000)
 1201 059e 40E8      		ldi r20,hlo8(0x3f800000)
 1202 05a0 5FE3      		ldi r21,hhi8(0x3f800000)
 1203 05a2 6F81      		ldd r22,Y+7
 1204 05a4 7885      		ldd r23,Y+8
 1205 05a6 8985      		ldd r24,Y+9
 1206 05a8 9A85      		ldd r25,Y+10
 1207 05aa 00D0      		rcall __ltsf2
 1208 05ac 8823      		tst r24
 1209 05ae 0CF0      		brlt .L44
 1211               	.LM79:
 1212 05b0 05C0      		rjmp .L43
 1213               	.L44:
 1215               	.LM80:
 1216 05b2 81E0      		ldi r24,lo8(1)
 1217 05b4 90E0      		ldi r25,hi8(1)
 1218 05b6 9E83      		std Y+6,r25
 1219 05b8 8D83      		std Y+5,r24
 1220 05ba 18C0      		rjmp .L45
 1221               	.L43:
 1223               	.LM81:
 1224 05bc 20E0      		ldi r18,lo8(0x477fff00)
 1225 05be 3FEF      		ldi r19,hi8(0x477fff00)
 1226 05c0 4FE7      		ldi r20,hlo8(0x477fff00)
 1227 05c2 57E4      		ldi r21,hhi8(0x477fff00)
 1228 05c4 6F81      		ldd r22,Y+7
 1229 05c6 7885      		ldd r23,Y+8
 1230 05c8 8985      		ldd r24,Y+9
 1231 05ca 9A85      		ldd r25,Y+10
 1232 05cc 00D0      		rcall __gtsf2
 1233 05ce 1816      		cp __zero_reg__,r24
 1234 05d0 0CF0      		brlt .L47
 1235 05d2 03C0      		rjmp .L46
 1236               	.L47:
 1238               	.LM82:
 1239 05d4 1E82      		std Y+6,__zero_reg__
 1240 05d6 1D82      		std Y+5,__zero_reg__
 1241 05d8 09C0      		rjmp .L45
 1242               	.L46:
 1244               	.LM83:
 1245 05da 6F81      		ldd r22,Y+7
 1246 05dc 7885      		ldd r23,Y+8
 1247 05de 8985      		ldd r24,Y+9
 1248 05e0 9A85      		ldd r25,Y+10
 1249 05e2 00D0      		rcall __fixunssfsi
 1250 05e4 DC01      		movw r26,r24
 1251 05e6 CB01      		movw r24,r22
 1252 05e8 9E83      		std Y+6,r25
 1253 05ea 8D83      		std Y+5,r24
 1254               	.L45:
 1255               	.LBB12:
 1257               	.LM84:
 1258 05ec 8D81      		ldd r24,Y+5
 1259 05ee 9E81      		ldd r25,Y+6
 1260 05f0 9C87      		std Y+12,r25
 1261 05f2 8B87      		std Y+11,r24
 1262               	.LBB13:
 1264               	.LM85:
 1265 05f4 8B85      		ldd r24,Y+11
 1266 05f6 9C85      		ldd r25,Y+12
 1267               	/* #APP */
 1268 05f8 0197      		1: sbiw r24,1
 1269 05fa F1F7      		brne 1b
 1270               	/* #NOAPP */
 1271 05fc 9C87      		std Y+12,r25
 1272 05fe 8B87      		std Y+11,r24
 1273               	.LBE13:
 1274               	.LBE12:
 1275               	.LBE11:
 1276               	.LBE10:
 1278               	.Ltext6:
 185:ledmeter.c    ****     _delay_ms(50); //50
 186:ledmeter.c    ****     switch_off_leds_with_delay(50); //100
 1280               	.LM86:
 1281 0600 60E0      		ldi r22,lo8(0x42480000)
 1282 0602 70E0      		ldi r23,hi8(0x42480000)
 1283 0604 88E4      		ldi r24,hlo8(0x42480000)
 1284 0606 92E4      		ldi r25,hhi8(0x42480000)
 1285 0608 35DF      		rcall switch_off_leds_with_delay
 1286               	/* epilogue: frame size=12 */
 1287 060a 2C96      		adiw r28,12
 1288 060c 0FB6      		in __tmp_reg__,__SREG__
 1289 060e F894      		cli
 1290 0610 DEBF      		out __SP_H__,r29
 1291 0612 0FBE      		out __SREG__,__tmp_reg__
 1292 0614 CDBF      		out __SP_L__,r28
 1293 0616 DF91      		pop r29
 1294 0618 CF91      		pop r28
 1295 061a 0895      		ret
 1296               	/* epilogue end (size=9) */
 1297               	/* function test_leds_up_down size 105 (86) */
 1309               	.Lscope12:
 1311               	.global	test_leds_up_off
 1313               	test_leds_up_off:
 187:ledmeter.c    **** }
 188:ledmeter.c    **** 
 189:ledmeter.c    **** void test_leds_up_off(void) {
 1315               	.LM87:
 1316               	/* prologue: frame size=12 */
 1317 061c CF93      		push r28
 1318 061e DF93      		push r29
 1319 0620 CDB7      		in r28,__SP_L__
 1320 0622 DEB7      		in r29,__SP_H__
 1321 0624 2C97      		sbiw r28,12
 1322 0626 0FB6      		in __tmp_reg__,__SREG__
 1323 0628 F894      		cli
 1324 062a DEBF      		out __SP_H__,r29
 1325 062c 0FBE      		out __SREG__,__tmp_reg__
 1326 062e CDBF      		out __SP_L__,r28
 1327               	/* prologue end (size=10) */
 190:ledmeter.c    ****     switch_on_leds_with_delay(50); //100
 1329               	.LM88:
 1330 0630 60E0      		ldi r22,lo8(0x42480000)
 1331 0632 70E0      		ldi r23,hi8(0x42480000)
 1332 0634 88E4      		ldi r24,hlo8(0x42480000)
 1333 0636 92E4      		ldi r25,hhi8(0x42480000)
 1334 0638 B0DE      		rcall switch_on_leds_with_delay
 1335               	.LBB14:
 1337               	.Ltext7:
 1339               	.LM89:
 1340 063a 80E0      		ldi r24,lo8(0x42480000)
 1341 063c 90E0      		ldi r25,hi8(0x42480000)
 1342 063e A8E4      		ldi r26,hlo8(0x42480000)
 1343 0640 B2E4      		ldi r27,hhi8(0x42480000)
 1344 0642 8983      		std Y+1,r24
 1345 0644 9A83      		std Y+2,r25
 1346 0646 AB83      		std Y+3,r26
 1347 0648 BC83      		std Y+4,r27
 1348               	.LBB15:
 1350               	.LM90:
 1351 064a 20E0      		ldi r18,lo8(0x437a0000)
 1352 064c 30E0      		ldi r19,hi8(0x437a0000)
 1353 064e 4AE7      		ldi r20,hlo8(0x437a0000)
 1354 0650 53E4      		ldi r21,hhi8(0x437a0000)
 1355 0652 6981      		ldd r22,Y+1
 1356 0654 7A81      		ldd r23,Y+2
 1357 0656 8B81      		ldd r24,Y+3
 1358 0658 9C81      		ldd r25,Y+4
 1359 065a 00D0      		rcall __mulsf3
 1360 065c DC01      		movw r26,r24
 1361 065e CB01      		movw r24,r22
 1362 0660 8F83      		std Y+7,r24
 1363 0662 9887      		std Y+8,r25
 1364 0664 A987      		std Y+9,r26
 1365 0666 BA87      		std Y+10,r27
 1367               	.LM91:
 1368 0668 20E0      		ldi r18,lo8(0x3f800000)
 1369 066a 30E0      		ldi r19,hi8(0x3f800000)
 1370 066c 40E8      		ldi r20,hlo8(0x3f800000)
 1371 066e 5FE3      		ldi r21,hhi8(0x3f800000)
 1372 0670 6F81      		ldd r22,Y+7
 1373 0672 7885      		ldd r23,Y+8
 1374 0674 8985      		ldd r24,Y+9
 1375 0676 9A85      		ldd r25,Y+10
 1376 0678 00D0      		rcall __ltsf2
 1377 067a 8823      		tst r24
 1378 067c 0CF0      		brlt .L53
 1380               	.LM92:
 1381 067e 05C0      		rjmp .L52
 1382               	.L53:
 1384               	.LM93:
 1385 0680 81E0      		ldi r24,lo8(1)
 1386 0682 90E0      		ldi r25,hi8(1)
 1387 0684 9E83      		std Y+6,r25
 1388 0686 8D83      		std Y+5,r24
 1389 0688 18C0      		rjmp .L54
 1390               	.L52:
 1392               	.LM94:
 1393 068a 20E0      		ldi r18,lo8(0x477fff00)
 1394 068c 3FEF      		ldi r19,hi8(0x477fff00)
 1395 068e 4FE7      		ldi r20,hlo8(0x477fff00)
 1396 0690 57E4      		ldi r21,hhi8(0x477fff00)
 1397 0692 6F81      		ldd r22,Y+7
 1398 0694 7885      		ldd r23,Y+8
 1399 0696 8985      		ldd r24,Y+9
 1400 0698 9A85      		ldd r25,Y+10
 1401 069a 00D0      		rcall __gtsf2
 1402 069c 1816      		cp __zero_reg__,r24
 1403 069e 0CF0      		brlt .L56
 1404 06a0 03C0      		rjmp .L55
 1405               	.L56:
 1407               	.LM95:
 1408 06a2 1E82      		std Y+6,__zero_reg__
 1409 06a4 1D82      		std Y+5,__zero_reg__
 1410 06a6 09C0      		rjmp .L54
 1411               	.L55:
 1413               	.LM96:
 1414 06a8 6F81      		ldd r22,Y+7
 1415 06aa 7885      		ldd r23,Y+8
 1416 06ac 8985      		ldd r24,Y+9
 1417 06ae 9A85      		ldd r25,Y+10
 1418 06b0 00D0      		rcall __fixunssfsi
 1419 06b2 DC01      		movw r26,r24
 1420 06b4 CB01      		movw r24,r22
 1421 06b6 9E83      		std Y+6,r25
 1422 06b8 8D83      		std Y+5,r24
 1423               	.L54:
 1424               	.LBB16:
 1426               	.LM97:
 1427 06ba 8D81      		ldd r24,Y+5
 1428 06bc 9E81      		ldd r25,Y+6
 1429 06be 9C87      		std Y+12,r25
 1430 06c0 8B87      		std Y+11,r24
 1431               	.LBB17:
 1433               	.LM98:
 1434 06c2 8B85      		ldd r24,Y+11
 1435 06c4 9C85      		ldd r25,Y+12
 1436               	/* #APP */
 1437 06c6 0197      		1: sbiw r24,1
 1438 06c8 F1F7      		brne 1b
 1439               	/* #NOAPP */
 1440 06ca 9C87      		std Y+12,r25
 1441 06cc 8B87      		std Y+11,r24
 1442               	.LBE17:
 1443               	.LBE16:
 1444               	.LBE15:
 1445               	.LBE14:
 1447               	.Ltext8:
 191:ledmeter.c    ****     _delay_ms(50); //50
 192:ledmeter.c    ****     switch_off_all_leds();
 1449               	.LM99:
 1450 06ce 0ADE      		rcall switch_off_all_leds
 1451               	/* epilogue: frame size=12 */
 1452 06d0 2C96      		adiw r28,12
 1453 06d2 0FB6      		in __tmp_reg__,__SREG__
 1454 06d4 F894      		cli
 1455 06d6 DEBF      		out __SP_H__,r29
 1456 06d8 0FBE      		out __SREG__,__tmp_reg__
 1457 06da CDBF      		out __SP_L__,r28
 1458 06dc DF91      		pop r29
 1459 06de CF91      		pop r28
 1460 06e0 0895      		ret
 1461               	/* epilogue end (size=9) */
 1462               	/* function test_leds_up_off size 101 (82) */
 1474               	.Lscope13:
 1477               	.global	switch_on_min_dels
 1479               	switch_on_min_dels:
 193:ledmeter.c    **** }
 194:ledmeter.c    **** 
 195:ledmeter.c    **** /*
 196:ledmeter.c    ****  *  switch on every leds (from 0 to n)  (and switch off others)
 197:ledmeter.c    ****  */
 198:ledmeter.c    **** void switch_on_min_dels(uint8_t n) {
 1481               	.LM100:
 1482               	/* prologue: frame size=2 */
 1483 06e2 CF93      		push r28
 1484 06e4 DF93      		push r29
 1485 06e6 CDB7      		in r28,__SP_L__
 1486 06e8 DEB7      		in r29,__SP_H__
 1487 06ea 2297      		sbiw r28,2
 1488 06ec 0FB6      		in __tmp_reg__,__SREG__
 1489 06ee F894      		cli
 1490 06f0 DEBF      		out __SP_H__,r29
 1491 06f2 0FBE      		out __SREG__,__tmp_reg__
 1492 06f4 CDBF      		out __SP_L__,r28
 1493               	/* prologue end (size=10) */
 1494 06f6 8983      		std Y+1,r24
 199:ledmeter.c    ****     uint8_t i;
 200:ledmeter.c    ****     for(i = 1; i<=Nleds; i++) {
 1496               	.LM101:
 1497 06f8 81E0      		ldi r24,lo8(1)
 1498 06fa 8A83      		std Y+2,r24
 1499               	.L61:
 1501               	.LM102:
 1502 06fc 8A81      		ldd r24,Y+2
 1503 06fe 8930      		cpi r24,lo8(9)
 1504 0700 68F4      		brsh .L60
 201:ledmeter.c    ****         if (i<=n) {
 1506               	.LM103:
 1507 0702 9A81      		ldd r25,Y+2
 1508 0704 8981      		ldd r24,Y+1
 1509 0706 8917      		cp r24,r25
 1510 0708 18F0      		brlo .L64
 202:ledmeter.c    ****             switch_on_led(i);
 1512               	.LM104:
 1513 070a 8A81      		ldd r24,Y+2
 1514 070c F5DD      		rcall switch_on_led
 1515 070e 02C0      		rjmp .L63
 1516               	.L64:
 203:ledmeter.c    ****         } else {
 204:ledmeter.c    ****             switch_off_led(i);
 1518               	.LM105:
 1519 0710 8A81      		ldd r24,Y+2
 1520 0712 1BDE      		rcall switch_off_led
 1521               	.L63:
 1523               	.LM106:
 1524 0714 8A81      		ldd r24,Y+2
 1525 0716 8F5F      		subi r24,lo8(-(1))
 1526 0718 8A83      		std Y+2,r24
 1527 071a F0CF      		rjmp .L61
 1528               	.L60:
 1529               	/* epilogue: frame size=2 */
 1530 071c 2296      		adiw r28,2
 1531 071e 0FB6      		in __tmp_reg__,__SREG__
 1532 0720 F894      		cli
 1533 0722 DEBF      		out __SP_H__,r29
 1534 0724 0FBE      		out __SREG__,__tmp_reg__
 1535 0726 CDBF      		out __SP_L__,r28
 1536 0728 DF91      		pop r29
 1537 072a CF91      		pop r28
 1538 072c 0895      		ret
 1539               	/* epilogue end (size=9) */
 1540               	/* function switch_on_min_dels size 38 (19) */
 1545               	.Lscope14:
 1548               	.global	switch_on_max_dels
 1550               	switch_on_max_dels:
 205:ledmeter.c    ****         }
 206:ledmeter.c    ****     }
 207:ledmeter.c    **** }
 208:ledmeter.c    **** 
 209:ledmeter.c    **** /*
 210:ledmeter.c    ****  *  switch on every leds (from Nleds to n)
 211:ledmeter.c    ****  */
 212:ledmeter.c    **** void switch_on_max_dels(uint8_t n) {
 1552               	.LM107:
 1553               	/* prologue: frame size=2 */
 1554 072e CF93      		push r28
 1555 0730 DF93      		push r29
 1556 0732 CDB7      		in r28,__SP_L__
 1557 0734 DEB7      		in r29,__SP_H__
 1558 0736 2297      		sbiw r28,2
 1559 0738 0FB6      		in __tmp_reg__,__SREG__
 1560 073a F894      		cli
 1561 073c DEBF      		out __SP_H__,r29
 1562 073e 0FBE      		out __SREG__,__tmp_reg__
 1563 0740 CDBF      		out __SP_L__,r28
 1564               	/* prologue end (size=10) */
 1565 0742 8983      		std Y+1,r24
 213:ledmeter.c    ****     uint8_t i;
 214:ledmeter.c    ****     for(i = Nleds; i>=1; i--) {
 1567               	.LM108:
 1568 0744 88E0      		ldi r24,lo8(8)
 1569 0746 8A83      		std Y+2,r24
 1570               	.L67:
 1572               	.LM109:
 1573 0748 8A81      		ldd r24,Y+2
 1574 074a 8823      		tst r24
 1575 074c B1F0      		breq .L66
 215:ledmeter.c    ****         if (i>=Nleds-n) {
 1577               	.LM110:
 1578 074e 8A81      		ldd r24,Y+2
 1579 0750 482F      		mov r20,r24
 1580 0752 5527      		clr r21
 1581 0754 8981      		ldd r24,Y+1
 1582 0756 282F      		mov r18,r24
 1583 0758 3327      		clr r19
 1584 075a 88E0      		ldi r24,lo8(8)
 1585 075c 90E0      		ldi r25,hi8(8)
 1586 075e 821B      		sub r24,r18
 1587 0760 930B      		sbc r25,r19
 1588 0762 4817      		cp r20,r24
 1589 0764 5907      		cpc r21,r25
 1590 0766 1CF0      		brlt .L70
 216:ledmeter.c    ****             switch_on_led(i);
 1592               	.LM111:
 1593 0768 8A81      		ldd r24,Y+2
 1594 076a C6DD      		rcall switch_on_led
 1595 076c 02C0      		rjmp .L69
 1596               	.L70:
 217:ledmeter.c    ****         } else {
 218:ledmeter.c    ****             switch_off_led(i);
 1598               	.LM112:
 1599 076e 8A81      		ldd r24,Y+2
 1600 0770 ECDD      		rcall switch_off_led
 1601               	.L69:
 1603               	.LM113:
 1604 0772 8A81      		ldd r24,Y+2
 1605 0774 8150      		subi r24,lo8(-(-1))
 1606 0776 8A83      		std Y+2,r24
 1607 0778 E7CF      		rjmp .L67
 1608               	.L66:
 1609               	/* epilogue: frame size=2 */
 1610 077a 2296      		adiw r28,2
 1611 077c 0FB6      		in __tmp_reg__,__SREG__
 1612 077e F894      		cli
 1613 0780 DEBF      		out __SP_H__,r29
 1614 0782 0FBE      		out __SREG__,__tmp_reg__
 1615 0784 CDBF      		out __SP_L__,r28
 1616 0786 DF91      		pop r29
 1617 0788 CF91      		pop r28
 1618 078a 0895      		ret
 1619               	/* epilogue end (size=9) */
 1620               	/* function switch_on_max_dels size 47 (28) */
 1625               	.Lscope15:
 1629               	.global	led_alarm
 1631               	led_alarm:
 219:ledmeter.c    ****         }
 220:ledmeter.c    ****     }
 221:ledmeter.c    ****     // TO TEST (switch off)
 222:ledmeter.c    **** }
 223:ledmeter.c    **** 
 224:ledmeter.c    **** /*
 225:ledmeter.c    ****  * switch off every leds, wait and swith them all, n times (a sort of visual alarm)
 226:ledmeter.c    ****  */
 227:ledmeter.c    **** void led_alarm(uint8_t n, double delay) {
 1633               	.LM114:
 1634               	/* prologue: frame size=18 */
 1635 078c CF93      		push r28
 1636 078e DF93      		push r29
 1637 0790 CDB7      		in r28,__SP_L__
 1638 0792 DEB7      		in r29,__SP_H__
 1639 0794 6297      		sbiw r28,18
 1640 0796 0FB6      		in __tmp_reg__,__SREG__
 1641 0798 F894      		cli
 1642 079a DEBF      		out __SP_H__,r29
 1643 079c 0FBE      		out __SREG__,__tmp_reg__
 1644 079e CDBF      		out __SP_L__,r28
 1645               	/* prologue end (size=10) */
 1646 07a0 8983      		std Y+1,r24
 1647 07a2 4A83      		std Y+2,r20
 1648 07a4 5B83      		std Y+3,r21
 1649 07a6 6C83      		std Y+4,r22
 1650 07a8 7D83      		std Y+5,r23
 228:ledmeter.c    ****     uint8_t i;
 229:ledmeter.c    ****     for(i = 1; i<=n; i++) {
 1652               	.LM115:
 1653 07aa 81E0      		ldi r24,lo8(1)
 1654 07ac 8E83      		std Y+6,r24
 1655               	.L73:
 1657               	.LM116:
 1658 07ae 9E81      		ldd r25,Y+6
 1659 07b0 8981      		ldd r24,Y+1
 1660 07b2 8917      		cp r24,r25
 1661 07b4 08F4      		brsh .+2
 1662 07b6 9AC0      		rjmp .L74
 230:ledmeter.c    ****         switch_off_all_leds();
 1664               	.LM117:
 1665 07b8 95DD      		rcall switch_off_all_leds
 1666               	.LBB18:
 1668               	.Ltext9:
 1670               	.LM118:
 1671 07ba 8A81      		ldd r24,Y+2
 1672 07bc 9B81      		ldd r25,Y+3
 1673 07be AC81      		ldd r26,Y+4
 1674 07c0 BD81      		ldd r27,Y+5
 1675 07c2 8F83      		std Y+7,r24
 1676 07c4 9887      		std Y+8,r25
 1677 07c6 A987      		std Y+9,r26
 1678 07c8 BA87      		std Y+10,r27
 1679               	.LBB19:
 1681               	.LM119:
 1682 07ca 20E0      		ldi r18,lo8(0x437a0000)
 1683 07cc 30E0      		ldi r19,hi8(0x437a0000)
 1684 07ce 4AE7      		ldi r20,hlo8(0x437a0000)
 1685 07d0 53E4      		ldi r21,hhi8(0x437a0000)
 1686 07d2 6F81      		ldd r22,Y+7
 1687 07d4 7885      		ldd r23,Y+8
 1688 07d6 8985      		ldd r24,Y+9
 1689 07d8 9A85      		ldd r25,Y+10
 1690 07da 00D0      		rcall __mulsf3
 1691 07dc DC01      		movw r26,r24
 1692 07de CB01      		movw r24,r22
 1693 07e0 8D87      		std Y+13,r24
 1694 07e2 9E87      		std Y+14,r25
 1695 07e4 AF87      		std Y+15,r26
 1696 07e6 B88B      		std Y+16,r27
 1698               	.LM120:
 1699 07e8 20E0      		ldi r18,lo8(0x3f800000)
 1700 07ea 30E0      		ldi r19,hi8(0x3f800000)
 1701 07ec 40E8      		ldi r20,hlo8(0x3f800000)
 1702 07ee 5FE3      		ldi r21,hhi8(0x3f800000)
 1703 07f0 6D85      		ldd r22,Y+13
 1704 07f2 7E85      		ldd r23,Y+14
 1705 07f4 8F85      		ldd r24,Y+15
 1706 07f6 9889      		ldd r25,Y+16
 1707 07f8 00D0      		rcall __ltsf2
 1708 07fa 8823      		tst r24
 1709 07fc 0CF0      		brlt .L77
 1710 07fe 05C0      		rjmp .L76
 1711               	.L77:
 1713               	.LM121:
 1714 0800 81E0      		ldi r24,lo8(1)
 1715 0802 90E0      		ldi r25,hi8(1)
 1716 0804 9C87      		std Y+12,r25
 1717 0806 8B87      		std Y+11,r24
 1718 0808 18C0      		rjmp .L78
 1719               	.L76:
 1721               	.LM122:
 1722 080a 20E0      		ldi r18,lo8(0x477fff00)
 1723 080c 3FEF      		ldi r19,hi8(0x477fff00)
 1724 080e 4FE7      		ldi r20,hlo8(0x477fff00)
 1725 0810 57E4      		ldi r21,hhi8(0x477fff00)
 1726 0812 6D85      		ldd r22,Y+13
 1727 0814 7E85      		ldd r23,Y+14
 1728 0816 8F85      		ldd r24,Y+15
 1729 0818 9889      		ldd r25,Y+16
 1730 081a 00D0      		rcall __gtsf2
 1731 081c 1816      		cp __zero_reg__,r24
 1732 081e 0CF0      		brlt .L80
 1733 0820 03C0      		rjmp .L79
 1734               	.L80:
 1736               	.LM123:
 1737 0822 1C86      		std Y+12,__zero_reg__
 1738 0824 1B86      		std Y+11,__zero_reg__
 1739 0826 09C0      		rjmp .L78
 1740               	.L79:
 1742               	.LM124:
 1743 0828 6D85      		ldd r22,Y+13
 1744 082a 7E85      		ldd r23,Y+14
 1745 082c 8F85      		ldd r24,Y+15
 1746 082e 9889      		ldd r25,Y+16
 1747 0830 00D0      		rcall __fixunssfsi
 1748 0832 DC01      		movw r26,r24
 1749 0834 CB01      		movw r24,r22
 1750 0836 9C87      		std Y+12,r25
 1751 0838 8B87      		std Y+11,r24
 1752               	.L78:
 1753               	.LBB20:
 1755               	.LM125:
 1756 083a 8B85      		ldd r24,Y+11
 1757 083c 9C85      		ldd r25,Y+12
 1758 083e 9A8B      		std Y+18,r25
 1759 0840 898B      		std Y+17,r24
 1760               	.LBB21:
 1762               	.LM126:
 1763 0842 8989      		ldd r24,Y+17
 1764 0844 9A89      		ldd r25,Y+18
 1765               	/* #APP */
 1766 0846 0197      		1: sbiw r24,1
 1767 0848 F1F7      		brne 1b
 1768               	/* #NOAPP */
 1769 084a 9A8B      		std Y+18,r25
 1770 084c 898B      		std Y+17,r24
 1771               	.LBE21:
 1772               	.LBE20:
 1773               	.LBE19:
 1774               	.LBE18:
 1776               	.Ltext10:
 231:ledmeter.c    ****         _delay_ms(delay);
 232:ledmeter.c    ****         switch_on_all_leds();
 1778               	.LM127:
 1779 084e 41DD      		rcall switch_on_all_leds
 1780               	.LBB22:
 1782               	.Ltext11:
 1784               	.LM128:
 1785 0850 8A81      		ldd r24,Y+2
 1786 0852 9B81      		ldd r25,Y+3
 1787 0854 AC81      		ldd r26,Y+4
 1788 0856 BD81      		ldd r27,Y+5
 1789 0858 8D87      		std Y+13,r24
 1790 085a 9E87      		std Y+14,r25
 1791 085c AF87      		std Y+15,r26
 1792 085e B88B      		std Y+16,r27
 1793               	.LBB23:
 1795               	.LM129:
 1796 0860 20E0      		ldi r18,lo8(0x437a0000)
 1797 0862 30E0      		ldi r19,hi8(0x437a0000)
 1798 0864 4AE7      		ldi r20,hlo8(0x437a0000)
 1799 0866 53E4      		ldi r21,hhi8(0x437a0000)
 1800 0868 6D85      		ldd r22,Y+13
 1801 086a 7E85      		ldd r23,Y+14
 1802 086c 8F85      		ldd r24,Y+15
 1803 086e 9889      		ldd r25,Y+16
 1804 0870 00D0      		rcall __mulsf3
 1805 0872 DC01      		movw r26,r24
 1806 0874 CB01      		movw r24,r22
 1807 0876 8F83      		std Y+7,r24
 1808 0878 9887      		std Y+8,r25
 1809 087a A987      		std Y+9,r26
 1810 087c BA87      		std Y+10,r27
 1812               	.LM130:
 1813 087e 20E0      		ldi r18,lo8(0x3f800000)
 1814 0880 30E0      		ldi r19,hi8(0x3f800000)
 1815 0882 40E8      		ldi r20,hlo8(0x3f800000)
 1816 0884 5FE3      		ldi r21,hhi8(0x3f800000)
 1817 0886 6F81      		ldd r22,Y+7
 1818 0888 7885      		ldd r23,Y+8
 1819 088a 8985      		ldd r24,Y+9
 1820 088c 9A85      		ldd r25,Y+10
 1821 088e 00D0      		rcall __ltsf2
 1822 0890 8823      		tst r24
 1823 0892 0CF0      		brlt .L85
 1824 0894 05C0      		rjmp .L84
 1825               	.L85:
 1827               	.LM131:
 1828 0896 81E0      		ldi r24,lo8(1)
 1829 0898 90E0      		ldi r25,hi8(1)
 1830 089a 9A8B      		std Y+18,r25
 1831 089c 898B      		std Y+17,r24
 1832 089e 18C0      		rjmp .L86
 1833               	.L84:
 1835               	.LM132:
 1836 08a0 20E0      		ldi r18,lo8(0x477fff00)
 1837 08a2 3FEF      		ldi r19,hi8(0x477fff00)
 1838 08a4 4FE7      		ldi r20,hlo8(0x477fff00)
 1839 08a6 57E4      		ldi r21,hhi8(0x477fff00)
 1840 08a8 6F81      		ldd r22,Y+7
 1841 08aa 7885      		ldd r23,Y+8
 1842 08ac 8985      		ldd r24,Y+9
 1843 08ae 9A85      		ldd r25,Y+10
 1844 08b0 00D0      		rcall __gtsf2
 1845 08b2 1816      		cp __zero_reg__,r24
 1846 08b4 0CF0      		brlt .L88
 1847 08b6 03C0      		rjmp .L87
 1848               	.L88:
 1850               	.LM133:
 1851 08b8 1A8A      		std Y+18,__zero_reg__
 1852 08ba 198A      		std Y+17,__zero_reg__
 1853 08bc 09C0      		rjmp .L86
 1854               	.L87:
 1856               	.LM134:
 1857 08be 6F81      		ldd r22,Y+7
 1858 08c0 7885      		ldd r23,Y+8
 1859 08c2 8985      		ldd r24,Y+9
 1860 08c4 9A85      		ldd r25,Y+10
 1861 08c6 00D0      		rcall __fixunssfsi
 1862 08c8 DC01      		movw r26,r24
 1863 08ca CB01      		movw r24,r22
 1864 08cc 9A8B      		std Y+18,r25
 1865 08ce 898B      		std Y+17,r24
 1866               	.L86:
 1867               	.LBB24:
 1869               	.LM135:
 1870 08d0 8989      		ldd r24,Y+17
 1871 08d2 9A89      		ldd r25,Y+18
 1872 08d4 9C87      		std Y+12,r25
 1873 08d6 8B87      		std Y+11,r24
 1874               	.LBB25:
 1876               	.LM136:
 1877 08d8 8B85      		ldd r24,Y+11
 1878 08da 9C85      		ldd r25,Y+12
 1879               	/* #APP */
 1880 08dc 0197      		1: sbiw r24,1
 1881 08de F1F7      		brne 1b
 1882               	/* #NOAPP */
 1883 08e0 9C87      		std Y+12,r25
 1884 08e2 8B87      		std Y+11,r24
 1885               	.LBE25:
 1886               	.LBE24:
 1887               	.LBE23:
 1888               	.LBE22:
 1890               	.Ltext12:
 1892               	.LM137:
 1893 08e4 8E81      		ldd r24,Y+6
 1894 08e6 8F5F      		subi r24,lo8(-(1))
 1895 08e8 8E83      		std Y+6,r24
 1896 08ea 61CF      		rjmp .L73
 1897               	.L74:
 233:ledmeter.c    ****         _delay_ms(delay);
 234:ledmeter.c    ****     }
 235:ledmeter.c    ****     switch_off_all_leds();
 1899               	.LM138:
 1900 08ec FBDC      		rcall switch_off_all_leds
 1901               	/* epilogue: frame size=18 */
 1902 08ee 6296      		adiw r28,18
 1903 08f0 0FB6      		in __tmp_reg__,__SREG__
 1904 08f2 F894      		cli
 1905 08f4 DEBF      		out __SP_H__,r29
 1906 08f6 0FBE      		out __SREG__,__tmp_reg__
 1907 08f8 CDBF      		out __SP_L__,r28
 1908 08fa DF91      		pop r29
 1909 08fc CF91      		pop r28
 1910 08fe 0895      		ret
 1911               	/* epilogue end (size=9) */
 1912               	/* function led_alarm size 190 (171) */
 1937               	.Lscope16:
 1940               	.global	roundp
 1942               	roundp:
 236:ledmeter.c    **** }
 237:ledmeter.c    **** 
 238:ledmeter.c    **** /*
 239:ledmeter.c    ****  * switch on every dels depending of the percentage p
 240:ledmeter.c    ****  */
 241:ledmeter.c    **** //#define roundp floor
 242:ledmeter.c    **** inline uint8_t roundp(double n) {
 1944               	.LM139:
 1945               	/* prologue: frame size=4 */
 1946 0900 CF93      		push r28
 1947 0902 DF93      		push r29
 1948 0904 CDB7      		in r28,__SP_L__
 1949 0906 DEB7      		in r29,__SP_H__
 1950 0908 2497      		sbiw r28,4
 1951 090a 0FB6      		in __tmp_reg__,__SREG__
 1952 090c F894      		cli
 1953 090e DEBF      		out __SP_H__,r29
 1954 0910 0FBE      		out __SREG__,__tmp_reg__
 1955 0912 CDBF      		out __SP_L__,r28
 1956               	/* prologue end (size=10) */
 1957 0914 6983      		std Y+1,r22
 1958 0916 7A83      		std Y+2,r23
 1959 0918 8B83      		std Y+3,r24
 1960 091a 9C83      		std Y+4,r25
 243:ledmeter.c    ****     return floor(n+0.5);
 1962               	.LM140:
 1963 091c 20E0      		ldi r18,lo8(0x3f000000)
 1964 091e 30E0      		ldi r19,hi8(0x3f000000)
 1965 0920 40E0      		ldi r20,hlo8(0x3f000000)
 1966 0922 5FE3      		ldi r21,hhi8(0x3f000000)
 1967 0924 6981      		ldd r22,Y+1
 1968 0926 7A81      		ldd r23,Y+2
 1969 0928 8B81      		ldd r24,Y+3
 1970 092a 9C81      		ldd r25,Y+4
 1971 092c 00D0      		rcall __addsf3
 1972 092e DC01      		movw r26,r24
 1973 0930 CB01      		movw r24,r22
 1974 0932 BC01      		movw r22,r24
 1975 0934 CD01      		movw r24,r26
 1976 0936 00D0      		rcall floor
 1977 0938 DC01      		movw r26,r24
 1978 093a CB01      		movw r24,r22
 1979 093c BC01      		movw r22,r24
 1980 093e CD01      		movw r24,r26
 1981 0940 00D0      		rcall __fixunssfsi
 1982 0942 DC01      		movw r26,r24
 1983 0944 CB01      		movw r24,r22
 1984 0946 9927      		clr r25
 1985               	/* epilogue: frame size=4 */
 1986 0948 2496      		adiw r28,4
 1987 094a 0FB6      		in __tmp_reg__,__SREG__
 1988 094c F894      		cli
 1989 094e DEBF      		out __SP_H__,r29
 1990 0950 0FBE      		out __SREG__,__tmp_reg__
 1991 0952 CDBF      		out __SP_L__,r28
 1992 0954 DF91      		pop r29
 1993 0956 CF91      		pop r28
 1994 0958 0895      		ret
 1995               	/* epilogue end (size=9) */
 1996               	/* function roundp size 45 (26) */
 1998               	.Lscope17:
 2001               	.global	show_percent
 2003               	show_percent:
 244:ledmeter.c    **** }
 245:ledmeter.c    **** 
 246:ledmeter.c    **** // roundp = round for positive number
 247:ledmeter.c    **** void show_percent(double p) {
 2005               	.LM141:
 2006               	/* prologue: frame size=5 */
 2007 095a CF93      		push r28
 2008 095c DF93      		push r29
 2009 095e CDB7      		in r28,__SP_L__
 2010 0960 DEB7      		in r29,__SP_H__
 2011 0962 2597      		sbiw r28,5
 2012 0964 0FB6      		in __tmp_reg__,__SREG__
 2013 0966 F894      		cli
 2014 0968 DEBF      		out __SP_H__,r29
 2015 096a 0FBE      		out __SREG__,__tmp_reg__
 2016 096c CDBF      		out __SP_L__,r28
 2017               	/* prologue end (size=10) */
 2018 096e 6983      		std Y+1,r22
 2019 0970 7A83      		std Y+2,r23
 2020 0972 8B83      		std Y+3,r24
 2021 0974 9C83      		std Y+4,r25
 248:ledmeter.c    ****     // p pourcent
 249:ledmeter.c    ****     uint8_t n;
 250:ledmeter.c    ****     //n = 4;
 251:ledmeter.c    ****     n = roundp(p / 100.0 * Nleds); // TO FIX (math.h ceil floor ... round en Java !)
 2023               	.LM142:
 2024 0976 20E0      		ldi r18,lo8(0x42c80000)
 2025 0978 30E0      		ldi r19,hi8(0x42c80000)
 2026 097a 48EC      		ldi r20,hlo8(0x42c80000)
 2027 097c 52E4      		ldi r21,hhi8(0x42c80000)
 2028 097e 6981      		ldd r22,Y+1
 2029 0980 7A81      		ldd r23,Y+2
 2030 0982 8B81      		ldd r24,Y+3
 2031 0984 9C81      		ldd r25,Y+4
 2032 0986 00D0      		rcall __divsf3
 2033 0988 DC01      		movw r26,r24
 2034 098a CB01      		movw r24,r22
 2035 098c 20E0      		ldi r18,lo8(0x41000000)
 2036 098e 30E0      		ldi r19,hi8(0x41000000)
 2037 0990 40E0      		ldi r20,hlo8(0x41000000)
 2038 0992 51E4      		ldi r21,hhi8(0x41000000)
 2039 0994 BC01      		movw r22,r24
 2040 0996 CD01      		movw r24,r26
 2041 0998 00D0      		rcall __mulsf3
 2042 099a DC01      		movw r26,r24
 2043 099c CB01      		movw r24,r22
 2044 099e BC01      		movw r22,r24
 2045 09a0 CD01      		movw r24,r26
 2046 09a2 AEDF      		rcall roundp
 2047 09a4 8D83      		std Y+5,r24
 252:ledmeter.c    ****     // TO FIX : +0.5 is a very dirty hack
 253:ledmeter.c    ****     switch_on_min_dels(n);
 2049               	.LM143:
 2050 09a6 8D81      		ldd r24,Y+5
 2051 09a8 9CDE      		rcall switch_on_min_dels
 2052               	/* epilogue: frame size=5 */
 2053 09aa 2596      		adiw r28,5
 2054 09ac 0FB6      		in __tmp_reg__,__SREG__
 2055 09ae F894      		cli
 2056 09b0 DEBF      		out __SP_H__,r29
 2057 09b2 0FBE      		out __SREG__,__tmp_reg__
 2058 09b4 CDBF      		out __SP_L__,r28
 2059 09b6 DF91      		pop r29
 2060 09b8 CF91      		pop r28
 2061 09ba 0895      		ret
 2062               	/* epilogue end (size=9) */
 2063               	/* function show_percent size 49 (30) */
 2068               	.Lscope18:
 2072               	.global	beep
 2074               	beep:
 254:ledmeter.c    **** }
 255:ledmeter.c    **** 
 256:ledmeter.c    **** /*
 257:ledmeter.c    ****  * send a sound (on or more beep(s))
 258:ledmeter.c    ****  */
 259:ledmeter.c    **** void beep(uint8_t n, double delay) {
 2076               	.LM144:
 2077               	/* prologue: frame size=18 */
 2078 09bc CF93      		push r28
 2079 09be DF93      		push r29
 2080 09c0 CDB7      		in r28,__SP_L__
 2081 09c2 DEB7      		in r29,__SP_H__
 2082 09c4 6297      		sbiw r28,18
 2083 09c6 0FB6      		in __tmp_reg__,__SREG__
 2084 09c8 F894      		cli
 2085 09ca DEBF      		out __SP_H__,r29
 2086 09cc 0FBE      		out __SREG__,__tmp_reg__
 2087 09ce CDBF      		out __SP_L__,r28
 2088               	/* prologue end (size=10) */
 2089 09d0 8983      		std Y+1,r24
 2090 09d2 4A83      		std Y+2,r20
 2091 09d4 5B83      		std Y+3,r21
 2092 09d6 6C83      		std Y+4,r22
 2093 09d8 7D83      		std Y+5,r23
 260:ledmeter.c    ****     // TO DO
 261:ledmeter.c    ****     uint8_t i;
 262:ledmeter.c    ****     for(i = 1; i<=n; i++) {
 2095               	.LM145:
 2096 09da 81E0      		ldi r24,lo8(1)
 2097 09dc 8E83      		std Y+6,r24
 2098               	.L95:
 2100               	.LM146:
 2101 09de 9E81      		ldd r25,Y+6
 2102 09e0 8981      		ldd r24,Y+1
 2103 09e2 8917      		cp r24,r25
 2104 09e4 08F4      		brsh .+2
 2105 09e6 52C0      		rjmp .L94
 263:ledmeter.c    ****         //TO DO : send a beep
 264:ledmeter.c    ****         if (n>1) {
 2107               	.LM147:
 2108 09e8 8981      		ldd r24,Y+1
 2109 09ea 8230      		cpi r24,lo8(2)
 2110 09ec 08F4      		brsh .+2
 2111 09ee 4AC0      		rjmp .L97
 2112               	.LBB26:
 2114               	.Ltext13:
 2116               	.LM148:
 2117 09f0 8A81      		ldd r24,Y+2
 2118 09f2 9B81      		ldd r25,Y+3
 2119 09f4 AC81      		ldd r26,Y+4
 2120 09f6 BD81      		ldd r27,Y+5
 2121 09f8 8F83      		std Y+7,r24
 2122 09fa 9887      		std Y+8,r25
 2123 09fc A987      		std Y+9,r26
 2124 09fe BA87      		std Y+10,r27
 2125               	.LBB27:
 2127               	.LM149:
 2128 0a00 20E0      		ldi r18,lo8(0x437a0000)
 2129 0a02 30E0      		ldi r19,hi8(0x437a0000)
 2130 0a04 4AE7      		ldi r20,hlo8(0x437a0000)
 2131 0a06 53E4      		ldi r21,hhi8(0x437a0000)
 2132 0a08 6F81      		ldd r22,Y+7
 2133 0a0a 7885      		ldd r23,Y+8
 2134 0a0c 8985      		ldd r24,Y+9
 2135 0a0e 9A85      		ldd r25,Y+10
 2136 0a10 00D0      		rcall __mulsf3
 2137 0a12 DC01      		movw r26,r24
 2138 0a14 CB01      		movw r24,r22
 2139 0a16 8D87      		std Y+13,r24
 2140 0a18 9E87      		std Y+14,r25
 2141 0a1a AF87      		std Y+15,r26
 2142 0a1c B88B      		std Y+16,r27
 2144               	.LM150:
 2145 0a1e 20E0      		ldi r18,lo8(0x3f800000)
 2146 0a20 30E0      		ldi r19,hi8(0x3f800000)
 2147 0a22 40E8      		ldi r20,hlo8(0x3f800000)
 2148 0a24 5FE3      		ldi r21,hhi8(0x3f800000)
 2149 0a26 6D85      		ldd r22,Y+13
 2150 0a28 7E85      		ldd r23,Y+14
 2151 0a2a 8F85      		ldd r24,Y+15
 2152 0a2c 9889      		ldd r25,Y+16
 2153 0a2e 00D0      		rcall __ltsf2
 2154 0a30 8823      		tst r24
 2155 0a32 0CF0      		brlt .L100
 2156 0a34 05C0      		rjmp .L99
 2157               	.L100:
 2159               	.LM151:
 2160 0a36 81E0      		ldi r24,lo8(1)
 2161 0a38 90E0      		ldi r25,hi8(1)
 2162 0a3a 9C87      		std Y+12,r25
 2163 0a3c 8B87      		std Y+11,r24
 2164 0a3e 18C0      		rjmp .L101
 2165               	.L99:
 2167               	.LM152:
 2168 0a40 20E0      		ldi r18,lo8(0x477fff00)
 2169 0a42 3FEF      		ldi r19,hi8(0x477fff00)
 2170 0a44 4FE7      		ldi r20,hlo8(0x477fff00)
 2171 0a46 57E4      		ldi r21,hhi8(0x477fff00)
 2172 0a48 6D85      		ldd r22,Y+13
 2173 0a4a 7E85      		ldd r23,Y+14
 2174 0a4c 8F85      		ldd r24,Y+15
 2175 0a4e 9889      		ldd r25,Y+16
 2176 0a50 00D0      		rcall __gtsf2
 2177 0a52 1816      		cp __zero_reg__,r24
 2178 0a54 0CF0      		brlt .L103
 2179 0a56 03C0      		rjmp .L102
 2180               	.L103:
 2182               	.LM153:
 2183 0a58 1C86      		std Y+12,__zero_reg__
 2184 0a5a 1B86      		std Y+11,__zero_reg__
 2185 0a5c 09C0      		rjmp .L101
 2186               	.L102:
 2188               	.LM154:
 2189 0a5e 6D85      		ldd r22,Y+13
 2190 0a60 7E85      		ldd r23,Y+14
 2191 0a62 8F85      		ldd r24,Y+15
 2192 0a64 9889      		ldd r25,Y+16
 2193 0a66 00D0      		rcall __fixunssfsi
 2194 0a68 DC01      		movw r26,r24
 2195 0a6a CB01      		movw r24,r22
 2196 0a6c 9C87      		std Y+12,r25
 2197 0a6e 8B87      		std Y+11,r24
 2198               	.L101:
 2199               	.LBB28:
 2201               	.LM155:
 2202 0a70 8B85      		ldd r24,Y+11
 2203 0a72 9C85      		ldd r25,Y+12
 2204 0a74 9A8B      		std Y+18,r25
 2205 0a76 898B      		std Y+17,r24
 2206               	.LBB29:
 2208               	.LM156:
 2209 0a78 8989      		ldd r24,Y+17
 2210 0a7a 9A89      		ldd r25,Y+18
 2211               	/* #APP */
 2212 0a7c 0197      		1: sbiw r24,1
 2213 0a7e F1F7      		brne 1b
 2214               	/* #NOAPP */
 2215 0a80 9A8B      		std Y+18,r25
 2216 0a82 898B      		std Y+17,r24
 2217               	.L97:
 2218               	.LBE29:
 2219               	.LBE28:
 2220               	.LBE27:
 2221               	.LBE26:
 2223               	.Ltext14:
 2225               	.LM157:
 2226 0a84 8E81      		ldd r24,Y+6
 2227 0a86 8F5F      		subi r24,lo8(-(1))
 2228 0a88 8E83      		std Y+6,r24
 2229 0a8a A9CF      		rjmp .L95
 2230               	.L94:
 2231               	/* epilogue: frame size=18 */
 2232 0a8c 6296      		adiw r28,18
 2233 0a8e 0FB6      		in __tmp_reg__,__SREG__
 2234 0a90 F894      		cli
 2235 0a92 DEBF      		out __SP_H__,r29
 2236 0a94 0FBE      		out __SREG__,__tmp_reg__
 2237 0a96 CDBF      		out __SP_L__,r28
 2238 0a98 DF91      		pop r29
 2239 0a9a CF91      		pop r28
 2240 0a9c 0895      		ret
 2241               	/* epilogue end (size=9) */
 2242               	/* function beep size 115 (96) */
 2257               	.Lscope19:
 2259               	.global	StartStopChronometer
 2261               	StartStopChronometer:
 265:ledmeter.c    ****             _delay_ms(delay);
 266:ledmeter.c    ****         }
 267:ledmeter.c    ****     }
 268:ledmeter.c    **** }
 269:ledmeter.c    **** 
 270:ledmeter.c    **** /*
 271:ledmeter.c    ****  * start or stop chronometer
 272:ledmeter.c    ****  */
 273:ledmeter.c    **** inline void StartStopChronometer(void) {
 2263               	.LM158:
 2264               	/* prologue: frame size=0 */
 2265 0a9e CF93      		push r28
 2266 0aa0 DF93      		push r29
 2267 0aa2 CDB7      		in r28,__SP_L__
 2268 0aa4 DEB7      		in r29,__SP_H__
 2269               	/* prologue end (size=4) */
 274:ledmeter.c    ****     beep(1,100);
 2271               	.LM159:
 2272 0aa6 40E0      		ldi r20,lo8(0x42c80000)
 2273 0aa8 50E0      		ldi r21,hi8(0x42c80000)
 2274 0aaa 68EC      		ldi r22,hlo8(0x42c80000)
 2275 0aac 72E4      		ldi r23,hhi8(0x42c80000)
 2276 0aae 81E0      		ldi r24,lo8(1)
 2277 0ab0 85DF      		rcall beep
 275:ledmeter.c    ****     led_alarm(3,50);
 2279               	.LM160:
 2280 0ab2 40E0      		ldi r20,lo8(0x42480000)
 2281 0ab4 50E0      		ldi r21,hi8(0x42480000)
 2282 0ab6 68E4      		ldi r22,hlo8(0x42480000)
 2283 0ab8 72E4      		ldi r23,hhi8(0x42480000)
 2284 0aba 83E0      		ldi r24,lo8(3)
 2285 0abc 67DE      		rcall led_alarm
 276:ledmeter.c    ****     if (running_chronometer) {
 2287               	.LM161:
 2288 0abe 8091 0000 		lds r24,running_chronometer
 2289 0ac2 8823      		tst r24
 2290 0ac4 19F0      		breq .L108
 277:ledmeter.c    ****        running_chronometer = false; // false = 0
 2292               	.LM162:
 2293 0ac6 1092 0000 		sts running_chronometer,__zero_reg__
 2294 0aca 03C0      		rjmp .L107
 2295               	.L108:
 278:ledmeter.c    ****     } else {
 279:ledmeter.c    ****        running_chronometer = true; // true = -1
 2297               	.LM163:
 2298 0acc 81E0      		ldi r24,lo8(1)
 2299 0ace 8093 0000 		sts running_chronometer,r24
 2300               	.L107:
 2301               	/* epilogue: frame size=0 */
 2302 0ad2 DF91      		pop r29
 2303 0ad4 CF91      		pop r28
 2304 0ad6 0895      		ret
 2305               	/* epilogue end (size=3) */
 2306               	/* function StartStopChronometer size 29 (22) */
 2308               	.Lscope20:
 2310               	.global	TestRunningChronometer
 2312               	TestRunningChronometer:
 280:ledmeter.c    ****     }
 281:ledmeter.c    **** }
 282:ledmeter.c    **** 
 283:ledmeter.c    **** void TestRunningChronometer(void) {
 2314               	.LM164:
 2315               	/* prologue: frame size=12 */
 2316 0ad8 CF93      		push r28
 2317 0ada DF93      		push r29
 2318 0adc CDB7      		in r28,__SP_L__
 2319 0ade DEB7      		in r29,__SP_H__
 2320 0ae0 2C97      		sbiw r28,12
 2321 0ae2 0FB6      		in __tmp_reg__,__SREG__
 2322 0ae4 F894      		cli
 2323 0ae6 DEBF      		out __SP_H__,r29
 2324 0ae8 0FBE      		out __SREG__,__tmp_reg__
 2325 0aea CDBF      		out __SP_L__,r28
 2326               	/* prologue end (size=10) */
 284:ledmeter.c    ****     if (running_chronometer) {
 2328               	.LM165:
 2329 0aec 8091 0000 		lds r24,running_chronometer
 2330 0af0 8823      		tst r24
 2331 0af2 09F4      		brne .+2
 2332 0af4 98C0      		rjmp .L110
 285:ledmeter.c    ****         switch_on_led(8);
 2334               	.LM166:
 2335 0af6 88E0      		ldi r24,lo8(8)
 2336 0af8 FFDB      		rcall switch_on_led
 2337               	.LBB30:
 2339               	.Ltext15:
 2341               	.LM167:
 2342 0afa 80E0      		ldi r24,lo8(0x42c80000)
 2343 0afc 90E0      		ldi r25,hi8(0x42c80000)
 2344 0afe A8EC      		ldi r26,hlo8(0x42c80000)
 2345 0b00 B2E4      		ldi r27,hhi8(0x42c80000)
 2346 0b02 8983      		std Y+1,r24
 2347 0b04 9A83      		std Y+2,r25
 2348 0b06 AB83      		std Y+3,r26
 2349 0b08 BC83      		std Y+4,r27
 2350               	.LBB31:
 2352               	.LM168:
 2353 0b0a 20E0      		ldi r18,lo8(0x437a0000)
 2354 0b0c 30E0      		ldi r19,hi8(0x437a0000)
 2355 0b0e 4AE7      		ldi r20,hlo8(0x437a0000)
 2356 0b10 53E4      		ldi r21,hhi8(0x437a0000)
 2357 0b12 6981      		ldd r22,Y+1
 2358 0b14 7A81      		ldd r23,Y+2
 2359 0b16 8B81      		ldd r24,Y+3
 2360 0b18 9C81      		ldd r25,Y+4
 2361 0b1a 00D0      		rcall __mulsf3
 2362 0b1c DC01      		movw r26,r24
 2363 0b1e CB01      		movw r24,r22
 2364 0b20 8F83      		std Y+7,r24
 2365 0b22 9887      		std Y+8,r25
 2366 0b24 A987      		std Y+9,r26
 2367 0b26 BA87      		std Y+10,r27
 2369               	.LM169:
 2370 0b28 20E0      		ldi r18,lo8(0x3f800000)
 2371 0b2a 30E0      		ldi r19,hi8(0x3f800000)
 2372 0b2c 40E8      		ldi r20,hlo8(0x3f800000)
 2373 0b2e 5FE3      		ldi r21,hhi8(0x3f800000)
 2374 0b30 6F81      		ldd r22,Y+7
 2375 0b32 7885      		ldd r23,Y+8
 2376 0b34 8985      		ldd r24,Y+9
 2377 0b36 9A85      		ldd r25,Y+10
 2378 0b38 00D0      		rcall __ltsf2
 2379 0b3a 8823      		tst r24
 2380 0b3c 0CF0      		brlt .L113
 2381 0b3e 05C0      		rjmp .L112
 2382               	.L113:
 2384               	.LM170:
 2385 0b40 81E0      		ldi r24,lo8(1)
 2386 0b42 90E0      		ldi r25,hi8(1)
 2387 0b44 9E83      		std Y+6,r25
 2388 0b46 8D83      		std Y+5,r24
 2389 0b48 18C0      		rjmp .L114
 2390               	.L112:
 2392               	.LM171:
 2393 0b4a 20E0      		ldi r18,lo8(0x477fff00)
 2394 0b4c 3FEF      		ldi r19,hi8(0x477fff00)
 2395 0b4e 4FE7      		ldi r20,hlo8(0x477fff00)
 2396 0b50 57E4      		ldi r21,hhi8(0x477fff00)
 2397 0b52 6F81      		ldd r22,Y+7
 2398 0b54 7885      		ldd r23,Y+8
 2399 0b56 8985      		ldd r24,Y+9
 2400 0b58 9A85      		ldd r25,Y+10
 2401 0b5a 00D0      		rcall __gtsf2
 2402 0b5c 1816      		cp __zero_reg__,r24
 2403 0b5e 0CF0      		brlt .L116
 2404 0b60 03C0      		rjmp .L115
 2405               	.L116:
 2407               	.LM172:
 2408 0b62 1E82      		std Y+6,__zero_reg__
 2409 0b64 1D82      		std Y+5,__zero_reg__
 2410 0b66 09C0      		rjmp .L114
 2411               	.L115:
 2413               	.LM173:
 2414 0b68 6F81      		ldd r22,Y+7
 2415 0b6a 7885      		ldd r23,Y+8
 2416 0b6c 8985      		ldd r24,Y+9
 2417 0b6e 9A85      		ldd r25,Y+10
 2418 0b70 00D0      		rcall __fixunssfsi
 2419 0b72 DC01      		movw r26,r24
 2420 0b74 CB01      		movw r24,r22
 2421 0b76 9E83      		std Y+6,r25
 2422 0b78 8D83      		std Y+5,r24
 2423               	.L114:
 2424               	.LBB32:
 2426               	.LM174:
 2427 0b7a 8D81      		ldd r24,Y+5
 2428 0b7c 9E81      		ldd r25,Y+6
 2429 0b7e 9C87      		std Y+12,r25
 2430 0b80 8B87      		std Y+11,r24
 2431               	.LBB33:
 2433               	.LM175:
 2434 0b82 8B85      		ldd r24,Y+11
 2435 0b84 9C85      		ldd r25,Y+12
 2436               	/* #APP */
 2437 0b86 0197      		1: sbiw r24,1
 2438 0b88 F1F7      		brne 1b
 2439               	/* #NOAPP */
 2440 0b8a 9C87      		std Y+12,r25
 2441 0b8c 8B87      		std Y+11,r24
 2442               	.LBE33:
 2443               	.LBE32:
 2444               	.LBE31:
 2445               	.LBE30:
 2447               	.Ltext16:
 286:ledmeter.c    ****         _delay_ms(100);
 287:ledmeter.c    ****         switch_off_led(8);
 2449               	.LM176:
 2450 0b8e 88E0      		ldi r24,lo8(8)
 2451 0b90 DCDB      		rcall switch_off_led
 2452               	.LBB34:
 2454               	.Ltext17:
 2456               	.LM177:
 2457 0b92 80E0      		ldi r24,lo8(0x42c80000)
 2458 0b94 90E0      		ldi r25,hi8(0x42c80000)
 2459 0b96 A8EC      		ldi r26,hlo8(0x42c80000)
 2460 0b98 B2E4      		ldi r27,hhi8(0x42c80000)
 2461 0b9a 8F83      		std Y+7,r24
 2462 0b9c 9887      		std Y+8,r25
 2463 0b9e A987      		std Y+9,r26
 2464 0ba0 BA87      		std Y+10,r27
 2465               	.LBB35:
 2467               	.LM178:
 2468 0ba2 20E0      		ldi r18,lo8(0x437a0000)
 2469 0ba4 30E0      		ldi r19,hi8(0x437a0000)
 2470 0ba6 4AE7      		ldi r20,hlo8(0x437a0000)
 2471 0ba8 53E4      		ldi r21,hhi8(0x437a0000)
 2472 0baa 6F81      		ldd r22,Y+7
 2473 0bac 7885      		ldd r23,Y+8
 2474 0bae 8985      		ldd r24,Y+9
 2475 0bb0 9A85      		ldd r25,Y+10
 2476 0bb2 00D0      		rcall __mulsf3
 2477 0bb4 DC01      		movw r26,r24
 2478 0bb6 CB01      		movw r24,r22
 2479 0bb8 8983      		std Y+1,r24
 2480 0bba 9A83      		std Y+2,r25
 2481 0bbc AB83      		std Y+3,r26
 2482 0bbe BC83      		std Y+4,r27
 2484               	.LM179:
 2485 0bc0 20E0      		ldi r18,lo8(0x3f800000)
 2486 0bc2 30E0      		ldi r19,hi8(0x3f800000)
 2487 0bc4 40E8      		ldi r20,hlo8(0x3f800000)
 2488 0bc6 5FE3      		ldi r21,hhi8(0x3f800000)
 2489 0bc8 6981      		ldd r22,Y+1
 2490 0bca 7A81      		ldd r23,Y+2
 2491 0bcc 8B81      		ldd r24,Y+3
 2492 0bce 9C81      		ldd r25,Y+4
 2493 0bd0 00D0      		rcall __ltsf2
 2494 0bd2 8823      		tst r24
 2495 0bd4 0CF0      		brlt .L121
 2496 0bd6 05C0      		rjmp .L120
 2497               	.L121:
 2499               	.LM180:
 2500 0bd8 81E0      		ldi r24,lo8(1)
 2501 0bda 90E0      		ldi r25,hi8(1)
 2502 0bdc 9C87      		std Y+12,r25
 2503 0bde 8B87      		std Y+11,r24
 2504 0be0 18C0      		rjmp .L122
 2505               	.L120:
 2507               	.LM181:
 2508 0be2 20E0      		ldi r18,lo8(0x477fff00)
 2509 0be4 3FEF      		ldi r19,hi8(0x477fff00)
 2510 0be6 4FE7      		ldi r20,hlo8(0x477fff00)
 2511 0be8 57E4      		ldi r21,hhi8(0x477fff00)
 2512 0bea 6981      		ldd r22,Y+1
 2513 0bec 7A81      		ldd r23,Y+2
 2514 0bee 8B81      		ldd r24,Y+3
 2515 0bf0 9C81      		ldd r25,Y+4
 2516 0bf2 00D0      		rcall __gtsf2
 2517 0bf4 1816      		cp __zero_reg__,r24
 2518 0bf6 0CF0      		brlt .L124
 2519 0bf8 03C0      		rjmp .L123
 2520               	.L124:
 2522               	.LM182:
 2523 0bfa 1C86      		std Y+12,__zero_reg__
 2524 0bfc 1B86      		std Y+11,__zero_reg__
 2525 0bfe 09C0      		rjmp .L122
 2526               	.L123:
 2528               	.LM183:
 2529 0c00 6981      		ldd r22,Y+1
 2530 0c02 7A81      		ldd r23,Y+2
 2531 0c04 8B81      		ldd r24,Y+3
 2532 0c06 9C81      		ldd r25,Y+4
 2533 0c08 00D0      		rcall __fixunssfsi
 2534 0c0a DC01      		movw r26,r24
 2535 0c0c CB01      		movw r24,r22
 2536 0c0e 9C87      		std Y+12,r25
 2537 0c10 8B87      		std Y+11,r24
 2538               	.L122:
 2539               	.LBB36:
 2541               	.LM184:
 2542 0c12 8B85      		ldd r24,Y+11
 2543 0c14 9C85      		ldd r25,Y+12
 2544 0c16 9E83      		std Y+6,r25
 2545 0c18 8D83      		std Y+5,r24
 2546               	.LBB37:
 2548               	.LM185:
 2549 0c1a 8D81      		ldd r24,Y+5
 2550 0c1c 9E81      		ldd r25,Y+6
 2551               	/* #APP */
 2552 0c1e 0197      		1: sbiw r24,1
 2553 0c20 F1F7      		brne 1b
 2554               	/* #NOAPP */
 2555 0c22 9E83      		std Y+6,r25
 2556 0c24 8D83      		std Y+5,r24
 2557               	.L110:
 2558               	.LBE37:
 2559               	.LBE36:
 2560               	.LBE35:
 2561               	.LBE34:
 2562               	/* epilogue: frame size=12 */
 2563 0c26 2C96      		adiw r28,12
 2564 0c28 0FB6      		in __tmp_reg__,__SREG__
 2565 0c2a F894      		cli
 2566 0c2c DEBF      		out __SP_H__,r29
 2567 0c2e 0FBE      		out __SREG__,__tmp_reg__
 2568 0c30 CDBF      		out __SP_L__,r28
 2569 0c32 DF91      		pop r29
 2570 0c34 CF91      		pop r28
 2571 0c36 0895      		ret
 2572               	/* epilogue end (size=9) */
 2573               	/* function TestRunningChronometer size 180 (161) */
 2595               	.Lscope21:
 2597               	.global	sf_init
 2599               	sf_init:
 2601               	.Ltext18:
 288:ledmeter.c    ****         _delay_ms(100);
 289:ledmeter.c    ****     }
 290:ledmeter.c    **** }
 291:ledmeter.c    **** 
 292:ledmeter.c    **** /*
 293:ledmeter.c    ****  * software init function
 294:ledmeter.c    ****  */
 295:ledmeter.c    **** void sf_init(void) {
 2603               	.LM186:
 2604               	/* prologue: frame size=0 */
 2605 0c38 CF93      		push r28
 2606 0c3a DF93      		push r29
 2607 0c3c CDB7      		in r28,__SP_L__
 2608 0c3e DEB7      		in r29,__SP_H__
 2609               	/* prologue end (size=4) */
 296:ledmeter.c    ****     // Leds
 297:ledmeter.c    ****     //test_leds_up_off(); // uncomment for release or comment for debug
 298:ledmeter.c    **** 
 299:ledmeter.c    ****     // Sound
 300:ledmeter.c    ****     //beep(3,100); // uncomment for release or comment for debug
 301:ledmeter.c    **** 
 302:ledmeter.c    ****     // Time
 303:ledmeter.c    ****     running_chronometer = false;
 2611               	.LM187:
 2612 0c40 1092 0000 		sts running_chronometer,__zero_reg__
 304:ledmeter.c    ****     init_time(&current_time);
 2614               	.LM188:
 2615 0c44 80E0      		ldi r24,lo8(current_time)
 2616 0c46 90E0      		ldi r25,hi8(current_time)
 2617 0c48 DBD9      		rcall init_time
 305:ledmeter.c    ****     init_time(&last_time);
 2619               	.LM189:
 2620 0c4a 80E0      		ldi r24,lo8(last_time)
 2621 0c4c 90E0      		ldi r25,hi8(last_time)
 2622 0c4e D8D9      		rcall init_time
 306:ledmeter.c    ****     init_time(&best_time);
 2624               	.LM190:
 2625 0c50 80E0      		ldi r24,lo8(best_time)
 2626 0c52 90E0      		ldi r25,hi8(best_time)
 2627 0c54 D5D9      		rcall init_time
 2628               	/* epilogue: frame size=0 */
 2629 0c56 DF91      		pop r29
 2630 0c58 CF91      		pop r28
 2631 0c5a 0895      		ret
 2632               	/* epilogue end (size=3) */
 2633               	/* function sf_init size 18 (11) */
 2635               	.Lscope22:
 2637               	.global	hw_init
 2639               	hw_init:
 307:ledmeter.c    **** }
 308:ledmeter.c    **** 
 309:ledmeter.c    **** /*
 310:ledmeter.c    ****  *  hardware init function
 311:ledmeter.c    ****  */
 312:ledmeter.c    **** void hw_init(void) {
 2641               	.LM191:
 2642               	/* prologue: frame size=1 */
 2643 0c5c CF93      		push r28
 2644 0c5e DF93      		push r29
 2645 0c60 CDB7      		in r28,__SP_L__
 2646 0c62 DEB7      		in r29,__SP_H__
 2647 0c64 2197      		sbiw r28,1
 2648 0c66 0FB6      		in __tmp_reg__,__SREG__
 2649 0c68 F894      		cli
 2650 0c6a DEBF      		out __SP_H__,r29
 2651 0c6c 0FBE      		out __SREG__,__tmp_reg__
 2652 0c6e CDBF      		out __SP_L__,r28
 2653               	/* prologue end (size=10) */
 313:ledmeter.c    ****    // ******************
 314:ledmeter.c    ****    // * WatchDog Timer *
 315:ledmeter.c    ****    // ******************
 316:ledmeter.c    ****    // disable by default
 317:ledmeter.c    **** 
 318:ledmeter.c    ****    // ********
 319:ledmeter.c    ****    // * LEDs *
 320:ledmeter.c    ****    // ********
 321:ledmeter.c    ****    DDRC=0xFF; // set up PORTD pins 0 to 7 as output
 2655               	.LM192:
 2656 0c70 8FEF      		ldi r24,lo8(-1)
 2657 0c72 8093 3400 		sts 52,r24
 322:ledmeter.c    ****    //switch_on_all_leds();
 323:ledmeter.c    ****    switch_off_all_leds();
 2659               	.LM193:
 2660 0c76 36DB      		rcall switch_off_all_leds
 324:ledmeter.c    **** 
 325:ledmeter.c    ****    // *********************************
 326:ledmeter.c    ****    // * Start/Stop chronometer (INT0) *
 327:ledmeter.c    ****    // *********************************
 328:ledmeter.c    ****    // Set Pin 6 (PD2) as the pin to use for this example
 329:ledmeter.c    ****    //PCMSK |= (1<<PIND2); // TO FIX
 330:ledmeter.c    ****    //PIND |= (1<<PIND2); // try scls:Error : read-only !!!
 331:ledmeter.c    **** 
 332:ledmeter.c    ****    // interrupt on INT0 pin falling edge (sensor triggered)
 333:ledmeter.c    ****    MCUCR = (1<<ISC01) | (1<<ISC00);
 2662               	.LM194:
 2663 0c78 83E0      		ldi r24,lo8(3)
 2664 0c7a 8093 5500 		sts 85,r24
 334:ledmeter.c    **** 
 335:ledmeter.c    ****    // turn on interrupts!
 336:ledmeter.c    **** 
 337:ledmeter.c    ****    GICR |= (1<<INT0); //INT0
 2666               	.LM195:
 2667 0c7e 8091 5B00 		lds r24,91
 2668 0c82 8064      		ori r24,lo8(64)
 2669 0c84 8093 5B00 		sts 91,r24
 338:ledmeter.c    **** 
 339:ledmeter.c    ****    sei(); // enable interrupts
 2671               	.LM196:
 2672               	/* #APP */
 2673 0c88 7894      		sei
 340:ledmeter.c    **** 
 341:ledmeter.c    ****    // *************************************************
 342:ledmeter.c    ****    // * Conv Analog to Digital (CAN for RPM and Temp) *
 343:ledmeter.c    ****    // *************************************************
 344:ledmeter.c    **** 
 345:ledmeter.c    ****    //volatile static int analog_result;
 346:ledmeter.c    ****    //volatile static unsigned char analog_busy;
 347:ledmeter.c    **** 
 348:ledmeter.c    ****    //analog_busy=1; // busy mark the ADC function
 349:ledmeter.c    ****    uint8_t channel = 0; // measure ADC0
 2675               	.LM197:
 2676               	/* #NOAPP */
 2677 0c8a 1982      		std Y+1,__zero_reg__
 350:ledmeter.c    **** 
 351:ledmeter.c    ****    // use internal 2.56V ref  REFS1=1 & REFS0=1 (11)
 352:ledmeter.c    ****    // use external ref (01)
 353:ledmeter.c    ****    ADMUX=(0<<REFS1)|(1<<REFS0)|(channel & 0x07); // channel & 0x07
 2679               	.LM198:
 2680 0c8c 8981      		ldd r24,Y+1
 2681 0c8e 8770      		andi r24,lo8(7)
 2682 0c90 8064      		ori r24,lo8(64)
 2683 0c92 8093 2700 		sts 39,r24
 354:ledmeter.c    **** 
 355:ledmeter.c    ****    //ADCSRA=(1<<ADEN)|(1<<ADIE)|(1<<ADIF)|(1<<ADPS2); // interrupt ADIE=1
 356:ledmeter.c    ****    ADCSRA=(1<<ADEN)|(0<<ADIE)|(1<<ADIF)|(1<<ADPS2); // no interrupt ADIE=0
 2685               	.LM199:
 2686 0c96 84E9      		ldi r24,lo8(-108)
 2687 0c98 8093 2600 		sts 38,r24
 357:ledmeter.c    **** 
 358:ledmeter.c    ****    ADCSRA |= (1 << (ADSC)); // start conversion
 2689               	.LM200:
 2690 0c9c 8091 2600 		lds r24,38
 2691 0ca0 8064      		ori r24,lo8(64)
 2692 0ca2 8093 2600 		sts 38,r24
 359:ledmeter.c    **** 
 360:ledmeter.c    ****    DDRA=0x00;
 2694               	.LM201:
 2695 0ca6 1092 3A00 		sts 58,__zero_reg__
 361:ledmeter.c    **** 	// make sure pull-up resistors are turned off
 362:ledmeter.c    **** 	PORTA = 0x00;
 2697               	.LM202:
 2698 0caa 1092 3B00 		sts 59,__zero_reg__
 363:ledmeter.c    **** 	
 364:ledmeter.c    **** 
 365:ledmeter.c    ****    // **********
 366:ledmeter.c    ****    // * Keypad *
 367:ledmeter.c    ****    // **********
 368:ledmeter.c    ****    // 1 joystick button (4 directions, up, down, left, right)
 369:ledmeter.c    ****    // 2 push buttons (ok, cancel)
 370:ledmeter.c    ****    DDRB=0x00;
 2700               	.LM203:
 2701 0cae 1092 3700 		sts 55,__zero_reg__
 371:ledmeter.c    ****    PORTB=0xFF;
 2703               	.LM204:
 2704 0cb2 8FEF      		ldi r24,lo8(-1)
 2705 0cb4 8093 3800 		sts 56,r24
 2706               	/* epilogue: frame size=1 */
 2707 0cb8 2196      		adiw r28,1
 2708 0cba 0FB6      		in __tmp_reg__,__SREG__
 2709 0cbc F894      		cli
 2710 0cbe DEBF      		out __SP_H__,r29
 2711 0cc0 0FBE      		out __SREG__,__tmp_reg__
 2712 0cc2 CDBF      		out __SP_L__,r28
 2713 0cc4 DF91      		pop r29
 2714 0cc6 CF91      		pop r28
 2715 0cc8 0895      		ret
 2716               	/* epilogue end (size=9) */
 2717               	/* function hw_init size 56 (37) */
 2722               	.Lscope23:
 2724               	.global	init
 2726               	init:
 372:ledmeter.c    **** 
 373:ledmeter.c    ****    // ***************
 374:ledmeter.c    ****    // * Graphic LCD *
 375:ledmeter.c    ****    // ***************
 376:ledmeter.c    **** 
 377:ledmeter.c    ****    // Sound
 378:ledmeter.c    **** 
 379:ledmeter.c    ****    // Time
 380:ledmeter.c    **** }
 381:ledmeter.c    **** 
 382:ledmeter.c    **** /*
 383:ledmeter.c    ****  * init function
 384:ledmeter.c    ****  */
 385:ledmeter.c    **** void init(void) {
 2728               	.LM205:
 2729               	/* prologue: frame size=0 */
 2730 0cca CF93      		push r28
 2731 0ccc DF93      		push r29
 2732 0cce CDB7      		in r28,__SP_L__
 2733 0cd0 DEB7      		in r29,__SP_H__
 2734               	/* prologue end (size=4) */
 386:ledmeter.c    ****     hw_init();
 2736               	.LM206:
 2737 0cd2 C4DF      		rcall hw_init
 387:ledmeter.c    ****     sf_init();
 2739               	.LM207:
 2740 0cd4 B1DF      		rcall sf_init
 2741               	/* epilogue: frame size=0 */
 2742 0cd6 DF91      		pop r29
 2743 0cd8 CF91      		pop r28
 2744 0cda 0895      		ret
 2745               	/* epilogue end (size=3) */
 2746               	/* function init size 9 (2) */
 2748               	.Lscope24:
 2751               	.global	adcConvert10bit
 2753               	adcConvert10bit:
 388:ledmeter.c    **** }
 389:ledmeter.c    **** 
 390:ledmeter.c    **** /*
 391:ledmeter.c    ****  * convert from analog to digital (10 bits)
 392:ledmeter.c    ****  */
 393:ledmeter.c    **** unsigned short adcConvert10bit(uint8_t ch)
 394:ledmeter.c    **** {
 2755               	.LM208:
 2756               	/* prologue: frame size=1 */
 2757 0cdc CF93      		push r28
 2758 0cde DF93      		push r29
 2759 0ce0 CDB7      		in r28,__SP_L__
 2760 0ce2 DEB7      		in r29,__SP_H__
 2761 0ce4 2197      		sbiw r28,1
 2762 0ce6 0FB6      		in __tmp_reg__,__SREG__
 2763 0ce8 F894      		cli
 2764 0cea DEBF      		out __SP_H__,r29
 2765 0cec 0FBE      		out __SREG__,__tmp_reg__
 2766 0cee CDBF      		out __SP_L__,r28
 2767               	/* prologue end (size=10) */
 2768 0cf0 8983      		std Y+1,r24
 395:ledmeter.c    **** 	//a2dCompleteFlag = 0;				// clear conversion complete flag
 396:ledmeter.c    **** 	ADMUX = ((ADMUX) & ~0x1F) | (ch & 0x1F);	// set channel ADC_MUX_MASK=0x1F
 2770               	.LM209:
 2771 0cf2 8091 2700 		lds r24,39
 2772 0cf6 982F      		mov r25,r24
 2773 0cf8 907E      		andi r25,lo8(-32)
 2774 0cfa 8981      		ldd r24,Y+1
 2775 0cfc 8F71      		andi r24,lo8(31)
 2776 0cfe 892B      		or r24,r25
 2777 0d00 8093 2700 		sts 39,r24
 397:ledmeter.c    **** 	ADCSRA |= (_BV(ADIF)); // clear hardware "conversion complete" flag
 2779               	.LM210:
 2780 0d04 8091 2600 		lds r24,38
 2781 0d08 8061      		ori r24,lo8(16)
 2782 0d0a 8093 2600 		sts 38,r24
 398:ledmeter.c    **** 	ADCSRA |= (_BV(ADSC)); // start conversion
 2784               	.LM211:
 2785 0d0e 8091 2600 		lds r24,38
 2786 0d12 8064      		ori r24,lo8(64)
 2787 0d14 8093 2600 		sts 38,r24
 2788               	.L132:
 399:ledmeter.c    **** 							
 400:ledmeter.c    **** 	//while(!a2dCompleteFlag);				// wait until conversion complete
 401:ledmeter.c    **** 	//while( bit_is_clear(ADCSR, ADIF) );		// wait until conversion complete
 402:ledmeter.c    **** 	while( bit_is_set(ADCSRA, ADSC) );		// wait until conversion complete
 2790               	.LM212:
 2791 0d18 8091 2600 		lds r24,38
 2792 0d1c 9927      		clr r25
 2793 0d1e 8074      		andi r24,lo8(64)
 2794 0d20 9070      		andi r25,hi8(64)
 2795 0d22 0097      		sbiw r24,0
 2796 0d24 09F0      		breq .L133
 2797 0d26 F8CF      		rjmp .L132
 2798               	.L133:
 403:ledmeter.c    **** 
 404:ledmeter.c    **** 	// CAUTION: MUST READ ADCL BEFORE ADCH!!!
 405:ledmeter.c    **** 	return ((ADCL) | ((ADCH)<<8));	// read ADC (full 10 bits);
 2800               	.LM213:
 2801 0d28 8091 2400 		lds r24,36
 2802 0d2c 282F      		mov r18,r24
 2803 0d2e 3327      		clr r19
 2804 0d30 8091 2500 		lds r24,37
 2805 0d34 9927      		clr r25
 2806 0d36 982F      		mov r25,r24
 2807 0d38 8827      		clr r24
 2808 0d3a 282B      		or r18,r24
 2809 0d3c 392B      		or r19,r25
 2810 0d3e C901      		movw r24,r18
 2811               	/* epilogue: frame size=1 */
 2812 0d40 2196      		adiw r28,1
 2813 0d42 0FB6      		in __tmp_reg__,__SREG__
 2814 0d44 F894      		cli
 2815 0d46 DEBF      		out __SP_H__,r29
 2816 0d48 0FBE      		out __SREG__,__tmp_reg__
 2817 0d4a CDBF      		out __SP_L__,r28
 2818 0d4c DF91      		pop r29
 2819 0d4e CF91      		pop r28
 2820 0d50 0895      		ret
 2821               	/* epilogue end (size=9) */
 2822               	/* function adcConvert10bit size 59 (40) */
 2824               	.Lscope25:
 2827               	.global	adcConvert8bit
 2829               	adcConvert8bit:
 406:ledmeter.c    **** }
 407:ledmeter.c    **** 
 408:ledmeter.c    **** /*
 409:ledmeter.c    ****  * convert from analog to digital (8 bits)
 410:ledmeter.c    ****  * starts conversion, waits until conversion is done, and returns result
 411:ledmeter.c    ****  */
 412:ledmeter.c    **** unsigned char adcConvert8bit(unsigned char ch)
 413:ledmeter.c    **** {
 2831               	.LM214:
 2832               	/* prologue: frame size=1 */
 2833 0d52 CF93      		push r28
 2834 0d54 DF93      		push r29
 2835 0d56 CDB7      		in r28,__SP_L__
 2836 0d58 DEB7      		in r29,__SP_H__
 2837 0d5a 2197      		sbiw r28,1
 2838 0d5c 0FB6      		in __tmp_reg__,__SREG__
 2839 0d5e F894      		cli
 2840 0d60 DEBF      		out __SP_H__,r29
 2841 0d62 0FBE      		out __SREG__,__tmp_reg__
 2842 0d64 CDBF      		out __SP_L__,r28
 2843               	/* prologue end (size=10) */
 2844 0d66 8983      		std Y+1,r24
 414:ledmeter.c    **** 	// do 10-bit conversion and return highest 8 bits
 415:ledmeter.c    **** 	return adcConvert10bit(ch)>>2;			// return ADC MSB byte
 2846               	.LM215:
 2847 0d68 8981      		ldd r24,Y+1
 2848 0d6a B8DF      		rcall adcConvert10bit
 2849 0d6c 9695      		lsr r25
 2850 0d6e 8795      		ror r24
 2851 0d70 9695      		lsr r25
 2852 0d72 8795      		ror r24
 2853 0d74 9927      		clr r25
 2854               	/* epilogue: frame size=1 */
 2855 0d76 2196      		adiw r28,1
 2856 0d78 0FB6      		in __tmp_reg__,__SREG__
 2857 0d7a F894      		cli
 2858 0d7c DEBF      		out __SP_H__,r29
 2859 0d7e 0FBE      		out __SREG__,__tmp_reg__
 2860 0d80 CDBF      		out __SP_L__,r28
 2861 0d82 DF91      		pop r29
 2862 0d84 CF91      		pop r28
 2863 0d86 0895      		ret
 2864               	/* epilogue end (size=9) */
 2865               	/* function adcConvert8bit size 27 (8) */
 2867               	.Lscope26:
 2869               	.global	SeekButtons
 2871               	SeekButtons:
 416:ledmeter.c    **** }
 417:ledmeter.c    **** 
 418:ledmeter.c    **** #define Nbuts 6
 419:ledmeter.c    **** #define B_LEFT 0
 420:ledmeter.c    **** #define B_RIGHT 1
 421:ledmeter.c    **** #define B_UP 2
 422:ledmeter.c    **** #define B_DOWN 3
 423:ledmeter.c    **** #define B_OK 4
 424:ledmeter.c    **** #define B_CANCEL 5
 425:ledmeter.c    **** 
 426:ledmeter.c    **** void SeekButtons(void) {
 2873               	.LM216:
 2874               	/* prologue: frame size=2 */
 2875 0d88 CF93      		push r28
 2876 0d8a DF93      		push r29
 2877 0d8c CDB7      		in r28,__SP_L__
 2878 0d8e DEB7      		in r29,__SP_H__
 2879 0d90 2297      		sbiw r28,2
 2880 0d92 0FB6      		in __tmp_reg__,__SREG__
 2881 0d94 F894      		cli
 2882 0d96 DEBF      		out __SP_H__,r29
 2883 0d98 0FBE      		out __SREG__,__tmp_reg__
 2884 0d9a CDBF      		out __SP_L__,r28
 2885               	/* prologue end (size=10) */
 427:ledmeter.c    ****     uint8_t bstate = false;
 2887               	.LM217:
 2888 0d9c 1982      		std Y+1,__zero_reg__
 428:ledmeter.c    ****     uint8_t i;
 429:ledmeter.c    **** 	 for (i=0; i<=Nbuts-1; i++) {
 2890               	.LM218:
 2891 0d9e 1A82      		std Y+2,__zero_reg__
 2892               	.L136:
 2894               	.LM219:
 2895 0da0 8A81      		ldd r24,Y+2
 2896 0da2 8630      		cpi r24,lo8(6)
 2897 0da4 E8F4      		brsh .L135
 430:ledmeter.c    **** 	     if (PINB>>i) {
 2899               	.LM220:
 2900 0da6 8091 3600 		lds r24,54
 2901 0daa 282F      		mov r18,r24
 2902 0dac 3327      		clr r19
 2903 0dae 8A81      		ldd r24,Y+2
 2904 0db0 9927      		clr r25
 2905 0db2 02C0      		rjmp 2f
 2906 0db4 3595      	1:	asr r19
 2907 0db6 2795      		ror r18
 2908 0db8 8A95      	2:	dec r24
 2909 0dba E2F7      		brpl 1b
 2910 0dbc C901      		movw r24,r18
 2911 0dbe 0097      		sbiw r24,0
 2912 0dc0 11F0      		breq .L139
 431:ledmeter.c    **** 	         bstate = false;
 2914               	.LM221:
 2915 0dc2 1982      		std Y+1,__zero_reg__
 2916 0dc4 02C0      		rjmp .L140
 2917               	.L139:
 432:ledmeter.c    **** 	     } else {
 433:ledmeter.c    **** 	         bstate = true;
 2919               	.LM222:
 2920 0dc6 81E0      		ldi r24,lo8(1)
 2921 0dc8 8983      		std Y+1,r24
 2922               	.L140:
 434:ledmeter.c    **** 	     }
 435:ledmeter.c    **** 		
 436:ledmeter.c    **** 	     if ( i==B_LEFT && bstate ) { // LEFT
 437:ledmeter.c    **** 
 438:ledmeter.c    **** 	     }
 439:ledmeter.c    **** 	     if ( i==B_RIGHT && bstate ) { // RIGHT
 440:ledmeter.c    **** 
 441:ledmeter.c    **** 	     }
 442:ledmeter.c    **** 	     if ( i==B_UP && bstate ) { // UP
 443:ledmeter.c    **** 
 444:ledmeter.c    **** 	     }
 445:ledmeter.c    **** 	     if ( i==B_DOWN && bstate ) { // DOWN
 446:ledmeter.c    **** 
 447:ledmeter.c    **** 	     }
 448:ledmeter.c    **** 	     if ( i==B_OK && bstate ) { // OK
 2924               	.LM223:
 2925 0dca 8A81      		ldd r24,Y+2
 2926 0dcc 8430      		cpi r24,lo8(4)
 2927 0dce 21F4      		brne .L145
 2928 0dd0 8981      		ldd r24,Y+1
 2929 0dd2 8823      		tst r24
 2930 0dd4 09F0      		breq .L145
 449:ledmeter.c    ****             StartStopChronometer();
 2932               	.LM224:
 2933 0dd6 63DE      		rcall StartStopChronometer
 2934               	.L145:
 2936               	.LM225:
 2937 0dd8 8A81      		ldd r24,Y+2
 2938 0dda 8F5F      		subi r24,lo8(-(1))
 2939 0ddc 8A83      		std Y+2,r24
 2940 0dde E0CF      		rjmp .L136
 2941               	.L135:
 2942               	/* epilogue: frame size=2 */
 2943 0de0 2296      		adiw r28,2
 2944 0de2 0FB6      		in __tmp_reg__,__SREG__
 2945 0de4 F894      		cli
 2946 0de6 DEBF      		out __SP_H__,r29
 2947 0de8 0FBE      		out __SREG__,__tmp_reg__
 2948 0dea CDBF      		out __SP_L__,r28
 2949 0dec DF91      		pop r29
 2950 0dee CF91      		pop r28
 2951 0df0 0895      		ret
 2952               	/* epilogue end (size=9) */
 2953               	/* function SeekButtons size 54 (35) */
 2959               	.Lscope27:
 2961               	.global	loop
 2963               	loop:
 450:ledmeter.c    **** 	     }
 451:ledmeter.c    **** 	     if ( i==B_CANCEL && bstate ) { // CANCEL
 452:ledmeter.c    **** 
 453:ledmeter.c    **** 	     }	     	     	     	
 454:ledmeter.c    **** 	}
 455:ledmeter.c    **** }
 456:ledmeter.c    **** 
 457:ledmeter.c    **** /*
 458:ledmeter.c    ****  *  this is the main loop
 459:ledmeter.c    ****  */
 460:ledmeter.c    **** void loop(void) {
 2965               	.LM226:
 2966               	/* prologue: frame size=8 */
 2967 0df2 0F93      		push r16
 2968 0df4 1F93      		push r17
 2969 0df6 CF93      		push r28
 2970 0df8 DF93      		push r29
 2971 0dfa CDB7      		in r28,__SP_L__
 2972 0dfc DEB7      		in r29,__SP_H__
 2973 0dfe 2897      		sbiw r28,8
 2974 0e00 0FB6      		in __tmp_reg__,__SREG__
 2975 0e02 F894      		cli
 2976 0e04 DEBF      		out __SP_H__,r29
 2977 0e06 0FBE      		out __SREG__,__tmp_reg__
 2978 0e08 CDBF      		out __SP_L__,r28
 2979               	/* prologue end (size=12) */
 461:ledmeter.c    ****     SeekButtons();
 2981               	.LM227:
 2982 0e0a BEDF      		rcall SeekButtons
 462:ledmeter.c    **** 
 463:ledmeter.c    ****     volatile double ch0 = adcConvert10bit(0);
 2984               	.LM228:
 2985 0e0c 80E0      		ldi r24,lo8(0)
 2986 0e0e 66DF      		rcall adcConvert10bit
 2987 0e10 8C01      		movw r16,r24
 2988 0e12 C801      		movw r24,r16
 2989 0e14 AA27      		clr r26
 2990 0e16 97FD      		sbrc r25,7
 2991 0e18 A095      		com r26
 2992 0e1a BA2F      		mov r27,r26
 2993 0e1c BC01      		movw r22,r24
 2994 0e1e CD01      		movw r24,r26
 2995 0e20 00D0      		rcall __floatsisf
 2996 0e22 6D83      		std Y+5,r22
 2997 0e24 7E83      		std Y+6,r23
 2998 0e26 8F83      		std Y+7,r24
 2999 0e28 9887      		std Y+8,r25
 3000 0e2a 1123      		tst r17
 3001 0e2c 7CF4      		brge .L148
 3003               	.LM229:
 3004 0e2e 20E0      		ldi r18,lo8(0x47800000)
 3005 0e30 30E0      		ldi r19,hi8(0x47800000)
 3006 0e32 40E8      		ldi r20,hlo8(0x47800000)
 3007 0e34 57E4      		ldi r21,hhi8(0x47800000)
 3008 0e36 6D81      		ldd r22,Y+5
 3009 0e38 7E81      		ldd r23,Y+6
 3010 0e3a 8F81      		ldd r24,Y+7
 3011 0e3c 9885      		ldd r25,Y+8
 3012 0e3e 00D0      		rcall __addsf3
 3013 0e40 DC01      		movw r26,r24
 3014 0e42 CB01      		movw r24,r22
 3015 0e44 8D83      		std Y+5,r24
 3016 0e46 9E83      		std Y+6,r25
 3017 0e48 AF83      		std Y+7,r26
 3018 0e4a B887      		std Y+8,r27
 3019               	.L148:
 3020 0e4c 8D81      		ldd r24,Y+5
 3021 0e4e 9E81      		ldd r25,Y+6
 3022 0e50 AF81      		ldd r26,Y+7
 3023 0e52 B885      		ldd r27,Y+8
 3024 0e54 8983      		std Y+1,r24
 3025 0e56 9A83      		std Y+2,r25
 3026 0e58 AB83      		std Y+3,r26
 3027 0e5a BC83      		std Y+4,r27
 464:ledmeter.c    ****     ch0 *= 0.09765625; // 0.09765625 = 100 / 2^10
 3029               	.LM230:
 3030 0e5c 20E0      		ldi r18,lo8(0x3dc80000)
 3031 0e5e 30E0      		ldi r19,hi8(0x3dc80000)
 3032 0e60 48EC      		ldi r20,hlo8(0x3dc80000)
 3033 0e62 5DE3      		ldi r21,hhi8(0x3dc80000)
 3034 0e64 6981      		ldd r22,Y+1
 3035 0e66 7A81      		ldd r23,Y+2
 3036 0e68 8B81      		ldd r24,Y+3
 3037 0e6a 9C81      		ldd r25,Y+4
 3038 0e6c 00D0      		rcall __mulsf3
 3039 0e6e DC01      		movw r26,r24
 3040 0e70 CB01      		movw r24,r22
 3041 0e72 8983      		std Y+1,r24
 3042 0e74 9A83      		std Y+2,r25
 3043 0e76 AB83      		std Y+3,r26
 3044 0e78 BC83      		std Y+4,r27
 465:ledmeter.c    ****     show_percent(ch0);
 3046               	.LM231:
 3047 0e7a 6981      		ldd r22,Y+1
 3048 0e7c 7A81      		ldd r23,Y+2
 3049 0e7e 8B81      		ldd r24,Y+3
 3050 0e80 9C81      		ldd r25,Y+4
 3051 0e82 6BDD      		rcall show_percent
 466:ledmeter.c    **** 
 467:ledmeter.c    **** /*
 468:ledmeter.c    ****     _delay_ms(500);
 469:ledmeter.c    **** 
 470:ledmeter.c    ****     double ch1 = adcConvert10bit(1);
 471:ledmeter.c    ****     ch1 *= 0.09765625; // 0.09765625 = 100 / 2^10
 472:ledmeter.c    ****     show_percent(ch1);
 473:ledmeter.c    **** 
 474:ledmeter.c    ****     _delay_ms(500);
 475:ledmeter.c    **** */
 476:ledmeter.c    **** 
 477:ledmeter.c    ****     TestRunningChronometer();
 3053               	.LM232:
 3054 0e84 29DE      		rcall TestRunningChronometer
 478:ledmeter.c    **** 
 479:ledmeter.c    ****     inc_time(&current_time);
 3056               	.LM233:
 3057 0e86 80E0      		ldi r24,lo8(current_time)
 3058 0e88 90E0      		ldi r25,hi8(current_time)
 3059 0e8a 4BD9      		rcall inc_time
 3060               	/* epilogue: frame size=8 */
 3061 0e8c 2896      		adiw r28,8
 3062 0e8e 0FB6      		in __tmp_reg__,__SREG__
 3063 0e90 F894      		cli
 3064 0e92 DEBF      		out __SP_H__,r29
 3065 0e94 0FBE      		out __SREG__,__tmp_reg__
 3066 0e96 CDBF      		out __SP_L__,r28
 3067 0e98 DF91      		pop r29
 3068 0e9a CF91      		pop r28
 3069 0e9c 1F91      		pop r17
 3070 0e9e 0F91      		pop r16
 3071 0ea0 0895      		ret
 3072               	/* epilogue end (size=11) */
 3073               	/* function loop size 88 (65) */
 3078               	.Lscope28:
 3080               	.global	main
 3082               	main:
 480:ledmeter.c    **** }
 481:ledmeter.c    **** 
 482:ledmeter.c    **** 
 483:ledmeter.c    **** /*
 484:ledmeter.c    ****  * main program
 485:ledmeter.c    ****  */
 486:ledmeter.c    **** int main(void) {
 3084               	.LM234:
 3085               	/* prologue: frame size=0 */
 3086 0ea2 C0E0      		ldi r28,lo8(__stack - 0)
 3087 0ea4 D0E0      		ldi r29,hi8(__stack - 0)
 3088 0ea6 DEBF      		out __SP_H__,r29
 3089 0ea8 CDBF      		out __SP_L__,r28
 3090               	/* prologue end (size=4) */
 487:ledmeter.c    ****     init();
 3092               	.LM235:
 3093 0eaa 0FDF      		rcall init
 3094               	.L150:
 488:ledmeter.c    ****     while(1) { // Infinite loop; define here the
 489:ledmeter.c    ****         loop(); // system behaviour
 3096               	.LM236:
 3097 0eac A2DF      		rcall loop
 3098 0eae FECF      		rjmp .L150
 3099               	/* epilogue: frame size=0 */
 3100               	/* epilogue: noreturn */
 3101               	/* epilogue end (size=0) */
 3102               	/* function main size 7 (3) */
 3104               	.Lscope29:
 3106               	.global	__vector_1
 3108               	__vector_1:
 490:ledmeter.c    ****     }
 491:ledmeter.c    ****     return 0;
 492:ledmeter.c    **** }
 493:ledmeter.c    **** 
 494:ledmeter.c    **** /*
 495:ledmeter.c    ****  * interrupt handler for INT0
 496:ledmeter.c    ****  */
 497:ledmeter.c    **** SIGNAL(SIG_INTERRUPT0) {
 3110               	.LM237:
 3111               	/* prologue: frame size=0 */
 3112 0eb0 1F92      		push __zero_reg__
 3113 0eb2 0F92      		push __tmp_reg__
 3114 0eb4 0FB6      		in __tmp_reg__,__SREG__
 3115 0eb6 0F92      		push __tmp_reg__
 3116 0eb8 1124      		clr __zero_reg__
 3117 0eba 2F93      		push r18
 3118 0ebc 3F93      		push r19
 3119 0ebe 4F93      		push r20
 3120 0ec0 5F93      		push r21
 3121 0ec2 6F93      		push r22
 3122 0ec4 7F93      		push r23
 3123 0ec6 8F93      		push r24
 3124 0ec8 9F93      		push r25
 3125 0eca AF93      		push r26
 3126 0ecc BF93      		push r27
 3127 0ece EF93      		push r30
 3128 0ed0 FF93      		push r31
 3129 0ed2 CF93      		push r28
 3130 0ed4 DF93      		push r29
 3131 0ed6 CDB7      		in r28,__SP_L__
 3132 0ed8 DEB7      		in r29,__SP_H__
 3133               	/* prologue end (size=21) */
 498:ledmeter.c    ****     StartStopChronometer();
 3135               	.LM238:
 3136 0eda E1DD      		rcall StartStopChronometer
 3137               	/* epilogue: frame size=0 */
 3138 0edc DF91      		pop r29
 3139 0ede CF91      		pop r28
 3140 0ee0 FF91      		pop r31
 3141 0ee2 EF91      		pop r30
 3142 0ee4 BF91      		pop r27
 3143 0ee6 AF91      		pop r26
 3144 0ee8 9F91      		pop r25
 3145 0eea 8F91      		pop r24
 3146 0eec 7F91      		pop r23
 3147 0eee 6F91      		pop r22
 3148 0ef0 5F91      		pop r21
 3149 0ef2 4F91      		pop r20
 3150 0ef4 3F91      		pop r19
 3151 0ef6 2F91      		pop r18
 3152 0ef8 0F90      		pop __tmp_reg__
 3153 0efa 0FBE      		out __SREG__,__tmp_reg__
 3154 0efc 0F90      		pop __tmp_reg__
 3155 0efe 1F90      		pop __zero_reg__
 3156 0f00 1895      		reti
 3157               	/* epilogue end (size=19) */
 3158               	/* function __vector_1 size 41 (1) */
 3160               	.Lscope30:
 3161               		.comm current_time,5,1
 3162               		.comm last_time,5,1
 3163               		.comm best_time,5,1
 3168               		.text
 3170               	Letext:
 3171               	/* File "ledmeter.c": code 1943 = 0x0797 (1396), prologues 291, epilogues 256 */
DEFINED SYMBOLS
                            *ABS*:00000000 ledmeter.c
C:\DOCUME~1\scls\LOCALS~1\Temp/ccwtaaaa.s:3      *ABS*:0000003f __SREG__
C:\DOCUME~1\scls\LOCALS~1\Temp/ccwtaaaa.s:4      *ABS*:0000003e __SP_H__
C:\DOCUME~1\scls\LOCALS~1\Temp/ccwtaaaa.s:5      *ABS*:0000003d __SP_L__
C:\DOCUME~1\scls\LOCALS~1\Temp/ccwtaaaa.s:6      *ABS*:00000000 __tmp_reg__
C:\DOCUME~1\scls\LOCALS~1\Temp/ccwtaaaa.s:7      *ABS*:00000001 __zero_reg__
C:\DOCUME~1\scls\LOCALS~1\Temp/ccwtaaaa.s:88     .bss:00000000 running_chronometer
C:\DOCUME~1\scls\LOCALS~1\Temp/ccwtaaaa.s:96     .text:00000000 init_time
C:\DOCUME~1\scls\LOCALS~1\Temp/ccwtaaaa.s:156    .text:00000044 def_time
C:\DOCUME~1\scls\LOCALS~1\Temp/ccwtaaaa.s:230    .text:000000a4 print_time
C:\DOCUME~1\scls\LOCALS~1\Temp/ccwtaaaa.s:309    .text:00000122 inc_time
C:\DOCUME~1\scls\LOCALS~1\Temp/ccwtaaaa.s:491    .text:00000238 copy_time
C:\DOCUME~1\scls\LOCALS~1\Temp/ccwtaaaa.s:566    .text:000002a0 compare_time
C:\DOCUME~1\scls\LOCALS~1\Temp/ccwtaaaa.s:606    .text:000002d2 switch_on_all_leds
C:\DOCUME~1\scls\LOCALS~1\Temp/ccwtaaaa.s:629    .text:000002e4 switch_off_all_leds
C:\DOCUME~1\scls\LOCALS~1\Temp/ccwtaaaa.s:654    .text:000002f8 switch_on_led
C:\DOCUME~1\scls\LOCALS~1\Temp/ccwtaaaa.s:717    .text:0000034a switch_off_led
C:\DOCUME~1\scls\LOCALS~1\Temp/ccwtaaaa.s:779    .text:0000039a switch_on_leds_with_delay
C:\DOCUME~1\scls\LOCALS~1\Temp/ccwtaaaa.s:962    .text:00000474 switch_off_leds_with_delay
C:\DOCUME~1\scls\LOCALS~1\Temp/ccwtaaaa.s:1144   .text:0000054e test_leds_up_down
C:\DOCUME~1\scls\LOCALS~1\Temp/ccwtaaaa.s:1313   .text:0000061c test_leds_up_off
C:\DOCUME~1\scls\LOCALS~1\Temp/ccwtaaaa.s:1479   .text:000006e2 switch_on_min_dels
C:\DOCUME~1\scls\LOCALS~1\Temp/ccwtaaaa.s:1550   .text:0000072e switch_on_max_dels
C:\DOCUME~1\scls\LOCALS~1\Temp/ccwtaaaa.s:1631   .text:0000078c led_alarm
C:\DOCUME~1\scls\LOCALS~1\Temp/ccwtaaaa.s:1942   .text:00000900 roundp
C:\DOCUME~1\scls\LOCALS~1\Temp/ccwtaaaa.s:2003   .text:0000095a show_percent
C:\DOCUME~1\scls\LOCALS~1\Temp/ccwtaaaa.s:2074   .text:000009bc beep
C:\DOCUME~1\scls\LOCALS~1\Temp/ccwtaaaa.s:2261   .text:00000a9e StartStopChronometer
C:\DOCUME~1\scls\LOCALS~1\Temp/ccwtaaaa.s:2312   .text:00000ad8 TestRunningChronometer
C:\DOCUME~1\scls\LOCALS~1\Temp/ccwtaaaa.s:2599   .text:00000c38 sf_init
                            *COM*:00000005 current_time
                            *COM*:00000005 last_time
                            *COM*:00000005 best_time
C:\DOCUME~1\scls\LOCALS~1\Temp/ccwtaaaa.s:2639   .text:00000c5c hw_init
C:\DOCUME~1\scls\LOCALS~1\Temp/ccwtaaaa.s:2726   .text:00000cca init
C:\DOCUME~1\scls\LOCALS~1\Temp/ccwtaaaa.s:2753   .text:00000cdc adcConvert10bit
C:\DOCUME~1\scls\LOCALS~1\Temp/ccwtaaaa.s:2829   .text:00000d52 adcConvert8bit
C:\DOCUME~1\scls\LOCALS~1\Temp/ccwtaaaa.s:2871   .text:00000d88 SeekButtons
C:\DOCUME~1\scls\LOCALS~1\Temp/ccwtaaaa.s:2963   .text:00000df2 loop
C:\DOCUME~1\scls\LOCALS~1\Temp/ccwtaaaa.s:3082   .text:00000ea2 main
C:\DOCUME~1\scls\LOCALS~1\Temp/ccwtaaaa.s:3108   .text:00000eb0 __vector_1
C:\DOCUME~1\scls\LOCALS~1\Temp/ccwtaaaa.s:3170   .text:00000f02 Letext

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
__udivmodhi4
printf
__floatsisf
__addsf3
__gesf2
__mulsf3
__ltsf2
__gtsf2
__fixunssfsi
floor
__divsf3
__stack
