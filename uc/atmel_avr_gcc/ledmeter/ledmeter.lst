   1               		.file	"ledmeter.c"
   2               		.arch atmega8535
   3               	__SREG__ = 0x3f
   4               	__SP_H__ = 0x3e
   5               	__SP_L__ = 0x3d
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.global __do_copy_data
   9               		.global __do_clear_bss
  11               		.text
  12               	.Ltext0:
  73               	.global	running_chronometer
  74               	.global	running_chronometer
  75               		.section .bss
  78               	running_chronometer:
  79 0000 0000      		.skip 2,0
  81               		.text
  84               	.global	init_time
  86               	init_time:
   1:ledmeter.c    **** // ***********************************************************
   2:ledmeter.c    **** // Project: OpenChrono
   3:ledmeter.c    **** // Author: Sebastien CELLES
   4:ledmeter.c    **** // Module description: an handhelds device for karts, bike or sport cars
   5:ledmeter.c    **** // ***********************************************************
   6:ledmeter.c    **** 
   7:ledmeter.c    **** #include <avr/io.h>              // Most basic include files
   8:ledmeter.c    **** 
   9:ledmeter.c    **** #include <math.h>
  10:ledmeter.c    **** 
  11:ledmeter.c    **** #define F_CPU 1000000UL  // 1 MHz
  12:ledmeter.c    **** #include <util/delay.h>
  13:ledmeter.c    **** 
  14:ledmeter.c    **** //#include <avr/io.h>              // Most basic include files
  15:ledmeter.c    **** #include <avr/interrupt.h>       // Add the necessary ones
  16:ledmeter.c    **** //#include <avr/signal.h>          // here
  17:ledmeter.c    **** 
  18:ledmeter.c    **** #define TRUE -1
  19:ledmeter.c    **** #define FALSE 0
  20:ledmeter.c    **** 
  21:ledmeter.c    **** //volatile unsigned char a2dCompleteFlag;
  22:ledmeter.c    **** 
  23:ledmeter.c    **** //int channel;
  24:ledmeter.c    **** //unsigned short analog_result;
  25:ledmeter.c    **** //int analog_busy;
  26:ledmeter.c    **** 
  27:ledmeter.c    **** #define Nleds 8  // number of leds connected to the uC
  28:ledmeter.c    **** 
  29:ledmeter.c    **** #define N 50 // number between 0 and 255
  30:ledmeter.c    **** #define Nmax 0xFF
  31:ledmeter.c    **** 
  32:ledmeter.c    **** 
  33:ledmeter.c    **** int running_chronometer = FALSE; // 0 false ; -1 true
  34:ledmeter.c    **** 
  35:ledmeter.c    **** typedef struct {
  36:ledmeter.c    ****     int hh; //8bits 0-255
  37:ledmeter.c    ****     int mm; //8bits 0-255
  38:ledmeter.c    ****     int ss; //8bits 0-255
  39:ledmeter.c    ****     unsigned short int xx;  //16bits 0-65535
  40:ledmeter.c    **** } time_typ;
  41:ledmeter.c    **** 
  42:ledmeter.c    **** time_typ current_time;
  43:ledmeter.c    **** time_typ last_time;
  44:ledmeter.c    **** time_typ best_time;
  45:ledmeter.c    **** 
  46:ledmeter.c    **** void init_time(time_typ * time) {
  88               	.LM1:
  89               	/* prologue: frame size=2 */
  90 0000 CF93      		push r28
  91 0002 DF93      		push r29
  92 0004 CDB7      		in r28,__SP_L__
  93 0006 DEB7      		in r29,__SP_H__
  94 0008 2297      		sbiw r28,2
  95 000a 0FB6      		in __tmp_reg__,__SREG__
  96 000c F894      		cli
  97 000e DEBF      		out __SP_H__,r29
  98 0010 0FBE      		out __SREG__,__tmp_reg__
  99 0012 CDBF      		out __SP_L__,r28
 100               	/* prologue end (size=10) */
 101 0014 9A83      		std Y+2,r25
 102 0016 8983      		std Y+1,r24
  47:ledmeter.c    ****     time->hh = 0;
 104               	.LM2:
 105 0018 E981      		ldd r30,Y+1
 106 001a FA81      		ldd r31,Y+2
 107 001c 1182      		std Z+1,__zero_reg__
 108 001e 1082      		st Z,__zero_reg__
  48:ledmeter.c    ****     time->mm = 0;
 110               	.LM3:
 111 0020 E981      		ldd r30,Y+1
 112 0022 FA81      		ldd r31,Y+2
 113 0024 1382      		std Z+3,__zero_reg__
 114 0026 1282      		std Z+2,__zero_reg__
  49:ledmeter.c    ****     time->ss = 0;
 116               	.LM4:
 117 0028 E981      		ldd r30,Y+1
 118 002a FA81      		ldd r31,Y+2
 119 002c 1582      		std Z+5,__zero_reg__
 120 002e 1482      		std Z+4,__zero_reg__
  50:ledmeter.c    ****     time->xx = 0;
 122               	.LM5:
 123 0030 E981      		ldd r30,Y+1
 124 0032 FA81      		ldd r31,Y+2
 125 0034 1782      		std Z+7,__zero_reg__
 126 0036 1682      		std Z+6,__zero_reg__
 127               	/* epilogue: frame size=2 */
 128 0038 2296      		adiw r28,2
 129 003a 0FB6      		in __tmp_reg__,__SREG__
 130 003c F894      		cli
 131 003e DEBF      		out __SP_H__,r29
 132 0040 0FBE      		out __SREG__,__tmp_reg__
 133 0042 CDBF      		out __SP_L__,r28
 134 0044 DF91      		pop r29
 135 0046 CF91      		pop r28
 136 0048 0895      		ret
 137               	/* epilogue end (size=9) */
 138               	/* function init_time size 37 (18) */
 140               	.Lscope0:
 141               		.data
 142               	.LC0:
 143 0000 3D3D 3D25 		.string	"===%02i:%02i:%02i:%03u===\n"
 143      3032 693A 
 143      2530 3269 
 143      3A25 3032 
 143      693A 2530 
 144               		.text
 147               	.global	print_time
 149               	print_time:
  51:ledmeter.c    **** }
  52:ledmeter.c    **** 
  53:ledmeter.c    **** void print_time(time_typ * t) {
 151               	.LM6:
 152               	/* prologue: frame size=2 */
 153 004a CF93      		push r28
 154 004c DF93      		push r29
 155 004e CDB7      		in r28,__SP_L__
 156 0050 DEB7      		in r29,__SP_H__
 157 0052 2297      		sbiw r28,2
 158 0054 0FB6      		in __tmp_reg__,__SREG__
 159 0056 F894      		cli
 160 0058 DEBF      		out __SP_H__,r29
 161 005a 0FBE      		out __SREG__,__tmp_reg__
 162 005c CDBF      		out __SP_L__,r28
 163               	/* prologue end (size=10) */
 164 005e 9A83      		std Y+2,r25
 165 0060 8983      		std Y+1,r24
  54:ledmeter.c    ****     printf("===%02i:%02i:%02i:%03u===\n",t->hh,t->mm,t->ss,t->xx);
 167               	.LM7:
 168 0062 E981      		ldd r30,Y+1
 169 0064 FA81      		ldd r31,Y+2
 170 0066 8681      		ldd r24,Z+6
 171 0068 9781      		ldd r25,Z+7
 172 006a 9F93      		push r25
 173 006c 8F93      		push r24
 174 006e E981      		ldd r30,Y+1
 175 0070 FA81      		ldd r31,Y+2
 176 0072 8481      		ldd r24,Z+4
 177 0074 9581      		ldd r25,Z+5
 178 0076 9F93      		push r25
 179 0078 8F93      		push r24
 180 007a E981      		ldd r30,Y+1
 181 007c FA81      		ldd r31,Y+2
 182 007e 8281      		ldd r24,Z+2
 183 0080 9381      		ldd r25,Z+3
 184 0082 9F93      		push r25
 185 0084 8F93      		push r24
 186 0086 E981      		ldd r30,Y+1
 187 0088 FA81      		ldd r31,Y+2
 188 008a 8081      		ld r24,Z
 189 008c 9181      		ldd r25,Z+1
 190 008e 9F93      		push r25
 191 0090 8F93      		push r24
 192 0092 80E0      		ldi r24,lo8(.LC0)
 193 0094 90E0      		ldi r25,hi8(.LC0)
 194 0096 9F93      		push r25
 195 0098 8F93      		push r24
 196 009a 00D0      		rcall printf
 197 009c 8DB7      		in r24,__SP_L__
 198 009e 9EB7      		in r25,__SP_H__
 199 00a0 0A96      		adiw r24,10
 200 00a2 0FB6      		in __tmp_reg__,__SREG__
 201 00a4 F894      		cli
 202 00a6 9EBF      		out __SP_H__,r25
 203 00a8 0FBE      		out __SREG__,__tmp_reg__
 204 00aa 8DBF      		out __SP_L__,r24
 205               	/* epilogue: frame size=2 */
 206 00ac 2296      		adiw r28,2
 207 00ae 0FB6      		in __tmp_reg__,__SREG__
 208 00b0 F894      		cli
 209 00b2 DEBF      		out __SP_H__,r29
 210 00b4 0FBE      		out __SREG__,__tmp_reg__
 211 00b6 CDBF      		out __SP_L__,r28
 212 00b8 DF91      		pop r29
 213 00ba CF91      		pop r28
 214 00bc 0895      		ret
 215               	/* epilogue end (size=9) */
 216               	/* function print_time size 58 (39) */
 218               	.Lscope1:
 222               	.global	copy_time
 224               	copy_time:
  55:ledmeter.c    **** }
  56:ledmeter.c    **** 
  57:ledmeter.c    **** void copy_time(time_typ * time_source, time_typ * time_dest) { // TO TEST (pointer ?)
 226               	.LM8:
 227               	/* prologue: frame size=4 */
 228 00be CF93      		push r28
 229 00c0 DF93      		push r29
 230 00c2 CDB7      		in r28,__SP_L__
 231 00c4 DEB7      		in r29,__SP_H__
 232 00c6 2497      		sbiw r28,4
 233 00c8 0FB6      		in __tmp_reg__,__SREG__
 234 00ca F894      		cli
 235 00cc DEBF      		out __SP_H__,r29
 236 00ce 0FBE      		out __SREG__,__tmp_reg__
 237 00d0 CDBF      		out __SP_L__,r28
 238               	/* prologue end (size=10) */
 239 00d2 9A83      		std Y+2,r25
 240 00d4 8983      		std Y+1,r24
 241 00d6 7C83      		std Y+4,r23
 242 00d8 6B83      		std Y+3,r22
  58:ledmeter.c    ****     time_dest->hh = time_source->hh;
 244               	.LM9:
 245 00da AB81      		ldd r26,Y+3
 246 00dc BC81      		ldd r27,Y+4
 247 00de E981      		ldd r30,Y+1
 248 00e0 FA81      		ldd r31,Y+2
 249 00e2 8081      		ld r24,Z
 250 00e4 9181      		ldd r25,Z+1
 251 00e6 8D93      		st X+,r24
 252 00e8 9C93      		st X,r25
  59:ledmeter.c    ****     time_dest->mm = time_source->mm;
 254               	.LM10:
 255 00ea AB81      		ldd r26,Y+3
 256 00ec BC81      		ldd r27,Y+4
 257 00ee E981      		ldd r30,Y+1
 258 00f0 FA81      		ldd r31,Y+2
 259 00f2 8281      		ldd r24,Z+2
 260 00f4 9381      		ldd r25,Z+3
 261 00f6 FD01      		movw r30,r26
 262 00f8 9383      		std Z+3,r25
 263 00fa 8283      		std Z+2,r24
  60:ledmeter.c    ****     time_dest->ss = time_source->ss;
 265               	.LM11:
 266 00fc AB81      		ldd r26,Y+3
 267 00fe BC81      		ldd r27,Y+4
 268 0100 E981      		ldd r30,Y+1
 269 0102 FA81      		ldd r31,Y+2
 270 0104 8481      		ldd r24,Z+4
 271 0106 9581      		ldd r25,Z+5
 272 0108 FD01      		movw r30,r26
 273 010a 9583      		std Z+5,r25
 274 010c 8483      		std Z+4,r24
  61:ledmeter.c    ****     time_dest->xx = time_source->xx;
 276               	.LM12:
 277 010e AB81      		ldd r26,Y+3
 278 0110 BC81      		ldd r27,Y+4
 279 0112 E981      		ldd r30,Y+1
 280 0114 FA81      		ldd r31,Y+2
 281 0116 8681      		ldd r24,Z+6
 282 0118 9781      		ldd r25,Z+7
 283 011a FD01      		movw r30,r26
 284 011c 9783      		std Z+7,r25
 285 011e 8683      		std Z+6,r24
 286               	/* epilogue: frame size=4 */
 287 0120 2496      		adiw r28,4
 288 0122 0FB6      		in __tmp_reg__,__SREG__
 289 0124 F894      		cli
 290 0126 DEBF      		out __SP_H__,r29
 291 0128 0FBE      		out __SREG__,__tmp_reg__
 292 012a CDBF      		out __SP_L__,r28
 293 012c DF91      		pop r29
 294 012e CF91      		pop r28
 295 0130 0895      		ret
 296               	/* epilogue end (size=9) */
 297               	/* function copy_time size 58 (39) */
 299               	.Lscope2:
 303               	.global	compare_time
 305               	compare_time:
  62:ledmeter.c    **** }
  63:ledmeter.c    **** 
  64:ledmeter.c    **** int compare_time(time_typ * time1, time_typ * time2) {
 307               	.LM13:
 308               	/* prologue: frame size=4 */
 309 0132 CF93      		push r28
 310 0134 DF93      		push r29
 311 0136 CDB7      		in r28,__SP_L__
 312 0138 DEB7      		in r29,__SP_H__
 313 013a 2497      		sbiw r28,4
 314 013c 0FB6      		in __tmp_reg__,__SREG__
 315 013e F894      		cli
 316 0140 DEBF      		out __SP_H__,r29
 317 0142 0FBE      		out __SREG__,__tmp_reg__
 318 0144 CDBF      		out __SP_L__,r28
 319               	/* prologue end (size=10) */
 320 0146 9A83      		std Y+2,r25
 321 0148 8983      		std Y+1,r24
 322 014a 7C83      		std Y+4,r23
 323 014c 6B83      		std Y+3,r22
  65:ledmeter.c    ****     //  0 time1=time2
  66:ledmeter.c    ****     // -1 time1<time2
  67:ledmeter.c    ****     //  1 time1>time2
  68:ledmeter.c    ****     return 0;
 325               	.LM14:
 326 014e 80E0      		ldi r24,lo8(0)
 327 0150 90E0      		ldi r25,hi8(0)
 328               	/* epilogue: frame size=4 */
 329 0152 2496      		adiw r28,4
 330 0154 0FB6      		in __tmp_reg__,__SREG__
 331 0156 F894      		cli
 332 0158 DEBF      		out __SP_H__,r29
 333 015a 0FBE      		out __SREG__,__tmp_reg__
 334 015c CDBF      		out __SP_L__,r28
 335 015e DF91      		pop r29
 336 0160 CF91      		pop r28
 337 0162 0895      		ret
 338               	/* epilogue end (size=9) */
 339               	/* function compare_time size 25 (6) */
 341               	.Lscope3:
 344               	.global	inc_time
 346               	inc_time:
  69:ledmeter.c    **** }
  70:ledmeter.c    **** 
  71:ledmeter.c    **** void inc_time(time_typ * time) {
 348               	.LM15:
 349               	/* prologue: frame size=14 */
 350 0164 CF93      		push r28
 351 0166 DF93      		push r29
 352 0168 CDB7      		in r28,__SP_L__
 353 016a DEB7      		in r29,__SP_H__
 354 016c 2E97      		sbiw r28,14
 355 016e 0FB6      		in __tmp_reg__,__SREG__
 356 0170 F894      		cli
 357 0172 DEBF      		out __SP_H__,r29
 358 0174 0FBE      		out __SREG__,__tmp_reg__
 359 0176 CDBF      		out __SP_L__,r28
 360               	/* prologue end (size=10) */
 361 0178 9A83      		std Y+2,r25
 362 017a 8983      		std Y+1,r24
  72:ledmeter.c    ****   if (running_chronometer) {
 364               	.LM16:
 365 017c 8091 0000 		lds r24,running_chronometer
 366 0180 9091 0000 		lds r25,(running_chronometer)+1
 367 0184 0097      		sbiw r24,0
 368 0186 09F4      		brne .+2
 369 0188 A0C0      		rjmp .L5
  73:ledmeter.c    ****     time->xx++;
 371               	.LM17:
 372 018a A981      		ldd r26,Y+1
 373 018c BA81      		ldd r27,Y+2
 374 018e E981      		ldd r30,Y+1
 375 0190 FA81      		ldd r31,Y+2
 376 0192 8681      		ldd r24,Z+6
 377 0194 9781      		ldd r25,Z+7
 378 0196 0196      		adiw r24,1
 379 0198 FD01      		movw r30,r26
 380 019a 9783      		std Z+7,r25
 381 019c 8683      		std Z+6,r24
  74:ledmeter.c    ****     if(time->xx >= 1000) {
 383               	.LM18:
 384 019e E981      		ldd r30,Y+1
 385 01a0 FA81      		ldd r31,Y+2
 386 01a2 8681      		ldd r24,Z+6
 387 01a4 9781      		ldd r25,Z+7
 388 01a6 F3E0      		ldi r31,hi8(1000)
 389 01a8 883E      		cpi r24,lo8(1000)
 390 01aa 9F07      		cpc r25,r31
 391 01ac 08F4      		brsh .+2
 392 01ae 43C0      		rjmp .L7
  75:ledmeter.c    ****         time->xx = 0;
 394               	.LM19:
 395 01b0 E981      		ldd r30,Y+1
 396 01b2 FA81      		ldd r31,Y+2
 397 01b4 1782      		std Z+7,__zero_reg__
 398 01b6 1682      		std Z+6,__zero_reg__
  76:ledmeter.c    ****         time->ss++;
 400               	.LM20:
 401 01b8 A981      		ldd r26,Y+1
 402 01ba BA81      		ldd r27,Y+2
 403 01bc E981      		ldd r30,Y+1
 404 01be FA81      		ldd r31,Y+2
 405 01c0 8481      		ldd r24,Z+4
 406 01c2 9581      		ldd r25,Z+5
 407 01c4 0196      		adiw r24,1
 408 01c6 FD01      		movw r30,r26
 409 01c8 9583      		std Z+5,r25
 410 01ca 8483      		std Z+4,r24
  77:ledmeter.c    ****         if (time->ss >= 60) {
 412               	.LM21:
 413 01cc E981      		ldd r30,Y+1
 414 01ce FA81      		ldd r31,Y+2
 415 01d0 8481      		ldd r24,Z+4
 416 01d2 9581      		ldd r25,Z+5
 417 01d4 8C33      		cpi r24,60
 418 01d6 9105      		cpc r25,__zero_reg__
 419 01d8 74F1      		brlt .L7
  78:ledmeter.c    ****             time->ss = 0;
 421               	.LM22:
 422 01da E981      		ldd r30,Y+1
 423 01dc FA81      		ldd r31,Y+2
 424 01de 1582      		std Z+5,__zero_reg__
 425 01e0 1482      		std Z+4,__zero_reg__
  79:ledmeter.c    ****             time->mm++;
 427               	.LM23:
 428 01e2 A981      		ldd r26,Y+1
 429 01e4 BA81      		ldd r27,Y+2
 430 01e6 E981      		ldd r30,Y+1
 431 01e8 FA81      		ldd r31,Y+2
 432 01ea 8281      		ldd r24,Z+2
 433 01ec 9381      		ldd r25,Z+3
 434 01ee 0196      		adiw r24,1
 435 01f0 FD01      		movw r30,r26
 436 01f2 9383      		std Z+3,r25
 437 01f4 8283      		std Z+2,r24
  80:ledmeter.c    ****             if (time->mm >= 60) {
 439               	.LM24:
 440 01f6 E981      		ldd r30,Y+1
 441 01f8 FA81      		ldd r31,Y+2
 442 01fa 8281      		ldd r24,Z+2
 443 01fc 9381      		ldd r25,Z+3
 444 01fe 8C33      		cpi r24,60
 445 0200 9105      		cpc r25,__zero_reg__
 446 0202 CCF0      		brlt .L7
  81:ledmeter.c    ****                 time->mm = 0;
 448               	.LM25:
 449 0204 E981      		ldd r30,Y+1
 450 0206 FA81      		ldd r31,Y+2
 451 0208 1382      		std Z+3,__zero_reg__
 452 020a 1282      		std Z+2,__zero_reg__
  82:ledmeter.c    ****                 time->hh++;
 454               	.LM26:
 455 020c A981      		ldd r26,Y+1
 456 020e BA81      		ldd r27,Y+2
 457 0210 E981      		ldd r30,Y+1
 458 0212 FA81      		ldd r31,Y+2
 459 0214 8081      		ld r24,Z
 460 0216 9181      		ldd r25,Z+1
 461 0218 0196      		adiw r24,1
 462 021a 1196      		adiw r26,1
 463 021c 9C93      		st X,r25
 464 021e 8E93      		st -X,r24
  83:ledmeter.c    ****                 if (time->hh >= 24) {
 466               	.LM27:
 467 0220 E981      		ldd r30,Y+1
 468 0222 FA81      		ldd r31,Y+2
 469 0224 8081      		ld r24,Z
 470 0226 9181      		ldd r25,Z+1
 471 0228 8831      		cpi r24,24
 472 022a 9105      		cpc r25,__zero_reg__
 473 022c 24F0      		brlt .L7
  84:ledmeter.c    ****                     time->hh = 0;
 475               	.LM28:
 476 022e E981      		ldd r30,Y+1
 477 0230 FA81      		ldd r31,Y+2
 478 0232 1182      		std Z+1,__zero_reg__
 479 0234 1082      		st Z,__zero_reg__
 480               	.L7:
 481               	.LBB2:
 483               	.Ltext1:
   1:C:/WinAVR/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:C:/WinAVR/avr/include/util/delay.h ****    Copyright (c) 2004,2005 Joerg Wunsch
   3:C:/WinAVR/avr/include/util/delay.h ****    All rights reserved.
   4:C:/WinAVR/avr/include/util/delay.h **** 
   5:C:/WinAVR/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   6:C:/WinAVR/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   7:C:/WinAVR/avr/include/util/delay.h **** 
   8:C:/WinAVR/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
   9:C:/WinAVR/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  10:C:/WinAVR/avr/include/util/delay.h **** 
  11:C:/WinAVR/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  12:C:/WinAVR/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  13:C:/WinAVR/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  14:C:/WinAVR/avr/include/util/delay.h ****      distribution.
  15:C:/WinAVR/avr/include/util/delay.h **** 
  16:C:/WinAVR/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  17:C:/WinAVR/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  18:C:/WinAVR/avr/include/util/delay.h ****      from this software without specific prior written permission.
  19:C:/WinAVR/avr/include/util/delay.h **** 
  20:C:/WinAVR/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21:C:/WinAVR/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22:C:/WinAVR/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  23:C:/WinAVR/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  24:C:/WinAVR/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  25:C:/WinAVR/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  26:C:/WinAVR/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  27:C:/WinAVR/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  28:C:/WinAVR/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  29:C:/WinAVR/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  30:C:/WinAVR/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  31:C:/WinAVR/avr/include/util/delay.h **** 
  32:C:/WinAVR/avr/include/util/delay.h **** /* $Id: delay.h,v 1.1.2.1 2005/12/12 23:19:49 joerg_wunsch Exp $ */
  33:C:/WinAVR/avr/include/util/delay.h **** 
  34:C:/WinAVR/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  35:C:/WinAVR/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  36:C:/WinAVR/avr/include/util/delay.h **** 
  37:C:/WinAVR/avr/include/util/delay.h **** #include <inttypes.h>
  38:C:/WinAVR/avr/include/util/delay.h **** 
  39:C:/WinAVR/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Busy-wait delay loops
  40:C:/WinAVR/avr/include/util/delay.h ****     \code
  41:C:/WinAVR/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  42:C:/WinAVR/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  43:C:/WinAVR/avr/include/util/delay.h ****     #include <util/delay.h>
  44:C:/WinAVR/avr/include/util/delay.h ****     \endcode
  45:C:/WinAVR/avr/include/util/delay.h **** 
  46:C:/WinAVR/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  47:C:/WinAVR/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  48:C:/WinAVR/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  49:C:/WinAVR/avr/include/util/delay.h ****     used.
  50:C:/WinAVR/avr/include/util/delay.h **** 
  51:C:/WinAVR/avr/include/util/delay.h ****     The functions in this header file implement simple delay loops
  52:C:/WinAVR/avr/include/util/delay.h ****     that perform a busy-waiting.  They are typically used to
  53:C:/WinAVR/avr/include/util/delay.h ****     facilitate short delays in the program execution.  They are
  54:C:/WinAVR/avr/include/util/delay.h ****     implemented as count-down loops with a well-known CPU cycle
  55:C:/WinAVR/avr/include/util/delay.h ****     count per loop iteration.  As such, no other processing can
  56:C:/WinAVR/avr/include/util/delay.h ****     occur simultaneously.  It should be kept in mind that the
  57:C:/WinAVR/avr/include/util/delay.h ****     functions described here do not disable interrupts.
  58:C:/WinAVR/avr/include/util/delay.h **** 
  59:C:/WinAVR/avr/include/util/delay.h ****     In general, for long delays, the use of hardware timers is
  60:C:/WinAVR/avr/include/util/delay.h ****     much preferrable, as they free the CPU, and allow for
  61:C:/WinAVR/avr/include/util/delay.h ****     concurrent processing of other events while the timer is
  62:C:/WinAVR/avr/include/util/delay.h ****     running.  However, in particular for very short delays, the
  63:C:/WinAVR/avr/include/util/delay.h ****     overhead of setting up a hardware timer is too much compared
  64:C:/WinAVR/avr/include/util/delay.h ****     to the overall delay time.
  65:C:/WinAVR/avr/include/util/delay.h **** 
  66:C:/WinAVR/avr/include/util/delay.h ****     Two inline functions are provided for the actual delay algorithms.
  67:C:/WinAVR/avr/include/util/delay.h **** 
  68:C:/WinAVR/avr/include/util/delay.h ****     Two wrapper functions allow the specification of microsecond, and
  69:C:/WinAVR/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  70:C:/WinAVR/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).  These functions
  71:C:/WinAVR/avr/include/util/delay.h ****     operate on double typed arguments, however when optimization is
  72:C:/WinAVR/avr/include/util/delay.h ****     turned on, the entire floating-point calculation will be done at
  73:C:/WinAVR/avr/include/util/delay.h ****     compile-time.
  74:C:/WinAVR/avr/include/util/delay.h **** 
  75:C:/WinAVR/avr/include/util/delay.h ****     \note When using _delay_us() and _delay_ms(), the expressions
  76:C:/WinAVR/avr/include/util/delay.h ****     passed as arguments to these functions shall be compile-time
  77:C:/WinAVR/avr/include/util/delay.h ****     constants, otherwise the floating-point calculations to setup the
  78:C:/WinAVR/avr/include/util/delay.h ****     loops will be done at run-time, thereby drastically increasing
  79:C:/WinAVR/avr/include/util/delay.h ****     both the resulting code size, as well as the time required to
  80:C:/WinAVR/avr/include/util/delay.h ****     setup the loops.
  81:C:/WinAVR/avr/include/util/delay.h **** */
  82:C:/WinAVR/avr/include/util/delay.h **** 
  83:C:/WinAVR/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:C:/WinAVR/avr/include/util/delay.h **** static inline void _delay_loop_1(uint8_t __count) __attribute__((always_inline));
  85:C:/WinAVR/avr/include/util/delay.h **** static inline void _delay_loop_2(uint16_t __count) __attribute__((always_inline));
  86:C:/WinAVR/avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  87:C:/WinAVR/avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  88:C:/WinAVR/avr/include/util/delay.h **** #endif
  89:C:/WinAVR/avr/include/util/delay.h **** 
  90:C:/WinAVR/avr/include/util/delay.h **** /** \ingroup util_delay
  91:C:/WinAVR/avr/include/util/delay.h **** 
  92:C:/WinAVR/avr/include/util/delay.h ****     Delay loop using an 8-bit counter \c __count, so up to 256
  93:C:/WinAVR/avr/include/util/delay.h ****     iterations are possible.  (The value 256 would have to be passed
  94:C:/WinAVR/avr/include/util/delay.h ****     as 0.)  The loop executes three CPU cycles per iteration, not
  95:C:/WinAVR/avr/include/util/delay.h ****     including the overhead the compiler needs to setup the counter
  96:C:/WinAVR/avr/include/util/delay.h ****     register.
  97:C:/WinAVR/avr/include/util/delay.h **** 
  98:C:/WinAVR/avr/include/util/delay.h ****     Thus, at a CPU speed of 1 MHz, delays of up to 768 microseconds
  99:C:/WinAVR/avr/include/util/delay.h ****     can be achieved.
 100:C:/WinAVR/avr/include/util/delay.h **** */
 101:C:/WinAVR/avr/include/util/delay.h **** void
 102:C:/WinAVR/avr/include/util/delay.h **** _delay_loop_1(uint8_t __count)
 103:C:/WinAVR/avr/include/util/delay.h **** {
 104:C:/WinAVR/avr/include/util/delay.h **** 	__asm__ volatile (
 105:C:/WinAVR/avr/include/util/delay.h **** 		"1: dec %0" "\n\t"
 106:C:/WinAVR/avr/include/util/delay.h **** 		"brne 1b"
 107:C:/WinAVR/avr/include/util/delay.h **** 		: "=r" (__count)
 108:C:/WinAVR/avr/include/util/delay.h **** 		: "0" (__count)
 109:C:/WinAVR/avr/include/util/delay.h **** 	);
 110:C:/WinAVR/avr/include/util/delay.h **** }
 111:C:/WinAVR/avr/include/util/delay.h **** 
 112:C:/WinAVR/avr/include/util/delay.h **** /** \ingroup util_delay
 113:C:/WinAVR/avr/include/util/delay.h **** 
 114:C:/WinAVR/avr/include/util/delay.h ****     Delay loop using a 16-bit counter \c __count, so up to 65536
 115:C:/WinAVR/avr/include/util/delay.h ****     iterations are possible.  (The value 65536 would have to be
 116:C:/WinAVR/avr/include/util/delay.h ****     passed as 0.)  The loop executes four CPU cycles per iteration,
 117:C:/WinAVR/avr/include/util/delay.h ****     not including the overhead the compiler requires to setup the
 118:C:/WinAVR/avr/include/util/delay.h ****     counter register pair.
 119:C:/WinAVR/avr/include/util/delay.h **** 
 120:C:/WinAVR/avr/include/util/delay.h ****     Thus, at a CPU speed of 1 MHz, delays of up to about 262.1
 121:C:/WinAVR/avr/include/util/delay.h ****     milliseconds can be achieved.
 122:C:/WinAVR/avr/include/util/delay.h ****  */
 123:C:/WinAVR/avr/include/util/delay.h **** void
 124:C:/WinAVR/avr/include/util/delay.h **** _delay_loop_2(uint16_t __count)
 125:C:/WinAVR/avr/include/util/delay.h **** {
 126:C:/WinAVR/avr/include/util/delay.h **** 	__asm__ volatile (
 127:C:/WinAVR/avr/include/util/delay.h **** 		"1: sbiw %0,1" "\n\t"
 128:C:/WinAVR/avr/include/util/delay.h **** 		"brne 1b"
 129:C:/WinAVR/avr/include/util/delay.h **** 		: "=w" (__count)
 130:C:/WinAVR/avr/include/util/delay.h **** 		: "0" (__count)
 131:C:/WinAVR/avr/include/util/delay.h **** 	);
 132:C:/WinAVR/avr/include/util/delay.h **** }
 133:C:/WinAVR/avr/include/util/delay.h **** 
 134:C:/WinAVR/avr/include/util/delay.h **** #ifndef F_CPU
 135:C:/WinAVR/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
 136:C:/WinAVR/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
 137:C:/WinAVR/avr/include/util/delay.h **** # define F_CPU 1000000UL
 138:C:/WinAVR/avr/include/util/delay.h **** #endif
 139:C:/WinAVR/avr/include/util/delay.h **** 
 140:C:/WinAVR/avr/include/util/delay.h **** /**
 141:C:/WinAVR/avr/include/util/delay.h ****    \ingroup util_delay
 142:C:/WinAVR/avr/include/util/delay.h **** 
 143:C:/WinAVR/avr/include/util/delay.h ****    Perform a delay of \c __us microseconds, using _delay_loop_1().
 144:C:/WinAVR/avr/include/util/delay.h **** 
 145:C:/WinAVR/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 146:C:/WinAVR/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 147:C:/WinAVR/avr/include/util/delay.h **** 
 148:C:/WinAVR/avr/include/util/delay.h ****    The maximal possible delay is 768 us / F_CPU in MHz.
 149:C:/WinAVR/avr/include/util/delay.h ****  */
 150:C:/WinAVR/avr/include/util/delay.h **** void
 151:C:/WinAVR/avr/include/util/delay.h **** _delay_us(double __us)
 152:C:/WinAVR/avr/include/util/delay.h **** {
 153:C:/WinAVR/avr/include/util/delay.h **** 	uint8_t __ticks;
 154:C:/WinAVR/avr/include/util/delay.h **** 	double __tmp = ((F_CPU) / 3e6) * __us;
 155:C:/WinAVR/avr/include/util/delay.h **** 	if (__tmp < 1.0)
 156:C:/WinAVR/avr/include/util/delay.h **** 		__ticks = 1;
 157:C:/WinAVR/avr/include/util/delay.h **** 	else if (__tmp > 255)
 158:C:/WinAVR/avr/include/util/delay.h **** 		__ticks = 0;	/* i.e. 256 */
 159:C:/WinAVR/avr/include/util/delay.h **** 	else
 160:C:/WinAVR/avr/include/util/delay.h **** 		__ticks = (uint8_t)__tmp;
 161:C:/WinAVR/avr/include/util/delay.h **** 	_delay_loop_1(__ticks);
 162:C:/WinAVR/avr/include/util/delay.h **** }
 163:C:/WinAVR/avr/include/util/delay.h **** 
 164:C:/WinAVR/avr/include/util/delay.h **** 
 165:C:/WinAVR/avr/include/util/delay.h **** /**
 166:C:/WinAVR/avr/include/util/delay.h ****    \ingroup util_delay
 167:C:/WinAVR/avr/include/util/delay.h **** 
 168:C:/WinAVR/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 169:C:/WinAVR/avr/include/util/delay.h **** 
 170:C:/WinAVR/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 171:C:/WinAVR/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 172:C:/WinAVR/avr/include/util/delay.h **** 
 173:C:/WinAVR/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 174:C:/WinAVR/avr/include/util/delay.h ****  */
 175:C:/WinAVR/avr/include/util/delay.h **** void
 176:C:/WinAVR/avr/include/util/delay.h **** _delay_ms(double __ms)
 177:C:/WinAVR/avr/include/util/delay.h **** {
 485               	.LM29:
 486 0236 80E0      		ldi r24,lo8(0x3f800000)
 487 0238 90E0      		ldi r25,hi8(0x3f800000)
 488 023a A0E8      		ldi r26,hlo8(0x3f800000)
 489 023c BFE3      		ldi r27,hhi8(0x3f800000)
 490 023e 8B83      		std Y+3,r24
 491 0240 9C83      		std Y+4,r25
 492 0242 AD83      		std Y+5,r26
 493 0244 BE83      		std Y+6,r27
 494               	.LBB3:
 178:C:/WinAVR/avr/include/util/delay.h **** 	uint16_t __ticks;
 179:C:/WinAVR/avr/include/util/delay.h **** 	double __tmp = ((F_CPU) / 4e3) * __ms;
 496               	.LM30:
 497 0246 20E0      		ldi r18,lo8(0x437a0000)
 498 0248 30E0      		ldi r19,hi8(0x437a0000)
 499 024a 4AE7      		ldi r20,hlo8(0x437a0000)
 500 024c 53E4      		ldi r21,hhi8(0x437a0000)
 501 024e 6B81      		ldd r22,Y+3
 502 0250 7C81      		ldd r23,Y+4
 503 0252 8D81      		ldd r24,Y+5
 504 0254 9E81      		ldd r25,Y+6
 505 0256 00D0      		rcall __mulsf3
 506 0258 DC01      		movw r26,r24
 507 025a CB01      		movw r24,r22
 508 025c 8987      		std Y+9,r24
 509 025e 9A87      		std Y+10,r25
 510 0260 AB87      		std Y+11,r26
 511 0262 BC87      		std Y+12,r27
 180:C:/WinAVR/avr/include/util/delay.h **** 	if (__tmp < 1.0)
 513               	.LM31:
 514 0264 20E0      		ldi r18,lo8(0x3f800000)
 515 0266 30E0      		ldi r19,hi8(0x3f800000)
 516 0268 40E8      		ldi r20,hlo8(0x3f800000)
 517 026a 5FE3      		ldi r21,hhi8(0x3f800000)
 518 026c 6985      		ldd r22,Y+9
 519 026e 7A85      		ldd r23,Y+10
 520 0270 8B85      		ldd r24,Y+11
 521 0272 9C85      		ldd r25,Y+12
 522 0274 00D0      		rcall __ltsf2
 523 0276 8823      		tst r24
 524 0278 0CF0      		brlt .L12
 525 027a 05C0      		rjmp .L11
 526               	.L12:
 181:C:/WinAVR/avr/include/util/delay.h **** 		__ticks = 1;
 528               	.LM32:
 529 027c 81E0      		ldi r24,lo8(1)
 530 027e 90E0      		ldi r25,hi8(1)
 531 0280 9887      		std Y+8,r25
 532 0282 8F83      		std Y+7,r24
 533 0284 18C0      		rjmp .L13
 534               	.L11:
 182:C:/WinAVR/avr/include/util/delay.h **** 	else if (__tmp > 65535)
 536               	.LM33:
 537 0286 20E0      		ldi r18,lo8(0x477fff00)
 538 0288 3FEF      		ldi r19,hi8(0x477fff00)
 539 028a 4FE7      		ldi r20,hlo8(0x477fff00)
 540 028c 57E4      		ldi r21,hhi8(0x477fff00)
 541 028e 6985      		ldd r22,Y+9
 542 0290 7A85      		ldd r23,Y+10
 543 0292 8B85      		ldd r24,Y+11
 544 0294 9C85      		ldd r25,Y+12
 545 0296 00D0      		rcall __gtsf2
 546 0298 1816      		cp __zero_reg__,r24
 547 029a 0CF0      		brlt .L15
 548 029c 03C0      		rjmp .L14
 549               	.L15:
 183:C:/WinAVR/avr/include/util/delay.h **** 		__ticks = 0;	/* i.e. 65536 */
 551               	.LM34:
 552 029e 1886      		std Y+8,__zero_reg__
 553 02a0 1F82      		std Y+7,__zero_reg__
 554 02a2 09C0      		rjmp .L13
 555               	.L14:
 184:C:/WinAVR/avr/include/util/delay.h **** 	else
 185:C:/WinAVR/avr/include/util/delay.h **** 		__ticks = (uint16_t)__tmp;
 557               	.LM35:
 558 02a4 6985      		ldd r22,Y+9
 559 02a6 7A85      		ldd r23,Y+10
 560 02a8 8B85      		ldd r24,Y+11
 561 02aa 9C85      		ldd r25,Y+12
 562 02ac 00D0      		rcall __fixunssfsi
 563 02ae DC01      		movw r26,r24
 564 02b0 CB01      		movw r24,r22
 565 02b2 9887      		std Y+8,r25
 566 02b4 8F83      		std Y+7,r24
 567               	.L13:
 568               	.LBB4:
 570               	.LM36:
 571 02b6 8F81      		ldd r24,Y+7
 572 02b8 9885      		ldd r25,Y+8
 573 02ba 9E87      		std Y+14,r25
 574 02bc 8D87      		std Y+13,r24
 575               	.LBB5:
 577               	.LM37:
 578 02be 8D85      		ldd r24,Y+13
 579 02c0 9E85      		ldd r25,Y+14
 580               	/* #APP */
 581 02c2 0197      		1: sbiw r24,1
 582 02c4 F1F7      		brne 1b
 583               	/* #NOAPP */
 584 02c6 9E87      		std Y+14,r25
 585 02c8 8D87      		std Y+13,r24
 586               	.L5:
 587               	.LBE5:
 588               	.LBE4:
 589               	.LBE3:
 590               	.LBE2:
 591               	/* epilogue: frame size=14 */
 592 02ca 2E96      		adiw r28,14
 593 02cc 0FB6      		in __tmp_reg__,__SREG__
 594 02ce F894      		cli
 595 02d0 DEBF      		out __SP_H__,r29
 596 02d2 0FBE      		out __SREG__,__tmp_reg__
 597 02d4 CDBF      		out __SP_L__,r28
 598 02d6 DF91      		pop r29
 599 02d8 CF91      		pop r28
 600 02da 0895      		ret
 601               	/* epilogue end (size=9) */
 602               	/* function inc_time size 190 (171) */
 614               	.Lscope4:
 616               	.global	switch_on_all_leds
 618               	switch_on_all_leds:
 620               	.Ltext2:
  85:ledmeter.c    **** 					 }
  86:ledmeter.c    ****             }
  87:ledmeter.c    ****         }
  88:ledmeter.c    ****     }
  89:ledmeter.c    ****     _delay_ms(1);
  90:ledmeter.c    ****   }
  91:ledmeter.c    **** }
  92:ledmeter.c    **** 
  93:ledmeter.c    **** 
  94:ledmeter.c    **** 
  95:ledmeter.c    **** /*
  96:ledmeter.c    **** void switch_on_all_leds();
  97:ledmeter.c    **** void switch_off_all_leds();
  98:ledmeter.c    **** void switch_on_led(int led);
  99:ledmeter.c    **** void switch_off_led(int led);
 100:ledmeter.c    **** void loop(void);
 101:ledmeter.c    **** void init(void);
 102:ledmeter.c    **** */
 103:ledmeter.c    **** 
 104:ledmeter.c    **** // 1=off
 105:ledmeter.c    **** // 0=on
 106:ledmeter.c    **** 
 107:ledmeter.c    **** /*
 108:ledmeter.c    ****  * switch on all leds
 109:ledmeter.c    ****  */
 110:ledmeter.c    **** void switch_on_all_leds() {
 622               	.LM38:
 623               	/* prologue: frame size=0 */
 624 02dc CF93      		push r28
 625 02de DF93      		push r29
 626 02e0 CDB7      		in r28,__SP_L__
 627 02e2 DEB7      		in r29,__SP_H__
 628               	/* prologue end (size=4) */
 111:ledmeter.c    ****     PORTC = 0x00;
 630               	.LM39:
 631 02e4 1092 3500 		sts 53,__zero_reg__
 632               	/* epilogue: frame size=0 */
 633 02e8 DF91      		pop r29
 634 02ea CF91      		pop r28
 635 02ec 0895      		ret
 636               	/* epilogue end (size=3) */
 637               	/* function switch_on_all_leds size 9 (2) */
 639               	.Lscope5:
 641               	.global	switch_off_all_leds
 643               	switch_off_all_leds:
 112:ledmeter.c    **** }
 113:ledmeter.c    **** 
 114:ledmeter.c    **** /*
 115:ledmeter.c    ****  * switch off all leds
 116:ledmeter.c    ****  */
 117:ledmeter.c    **** void switch_off_all_leds() {
 645               	.LM40:
 646               	/* prologue: frame size=0 */
 647 02ee CF93      		push r28
 648 02f0 DF93      		push r29
 649 02f2 CDB7      		in r28,__SP_L__
 650 02f4 DEB7      		in r29,__SP_H__
 651               	/* prologue end (size=4) */
 118:ledmeter.c    ****     PORTC = 0xFF;
 653               	.LM41:
 654 02f6 8FEF      		ldi r24,lo8(-1)
 655 02f8 8093 3500 		sts 53,r24
 656               	/* epilogue: frame size=0 */
 657 02fc DF91      		pop r29
 658 02fe CF91      		pop r28
 659 0300 0895      		ret
 660               	/* epilogue end (size=3) */
 661               	/* function switch_off_all_leds size 10 (3) */
 663               	.Lscope6:
 666               	.global	switch_on_led
 668               	switch_on_led:
 119:ledmeter.c    **** }
 120:ledmeter.c    **** 
 121:ledmeter.c    **** // led from 1 to 8 (LEDSNUM)
 122:ledmeter.c    **** // PCx with w from 0 to 7
 123:ledmeter.c    **** 
 124:ledmeter.c    **** /*
 125:ledmeter.c    ****  * switch on the led with the number called "led"
 126:ledmeter.c    ****  */
 127:ledmeter.c    **** void switch_on_led(int led) {
 670               	.LM42:
 671               	/* prologue: frame size=6 */
 672 0302 CF93      		push r28
 673 0304 DF93      		push r29
 674 0306 CDB7      		in r28,__SP_L__
 675 0308 DEB7      		in r29,__SP_H__
 676 030a 2697      		sbiw r28,6
 677 030c 0FB6      		in __tmp_reg__,__SREG__
 678 030e F894      		cli
 679 0310 DEBF      		out __SP_H__,r29
 680 0312 0FBE      		out __SREG__,__tmp_reg__
 681 0314 CDBF      		out __SP_L__,r28
 682               	/* prologue end (size=10) */
 683 0316 9A83      		std Y+2,r25
 684 0318 8983      		std Y+1,r24
 128:ledmeter.c    ****     int pin = led - 1;
 686               	.LM43:
 687 031a 8981      		ldd r24,Y+1
 688 031c 9A81      		ldd r25,Y+2
 689 031e 0197      		sbiw r24,1
 690 0320 9C83      		std Y+4,r25
 691 0322 8B83      		std Y+3,r24
 129:ledmeter.c    ****     int mask = ~(1<<pin);
 693               	.LM44:
 694 0324 81E0      		ldi r24,lo8(1)
 695 0326 90E0      		ldi r25,hi8(1)
 696 0328 0B80      		ldd r0,Y+3
 697 032a 02C0      		rjmp 2f
 698 032c 880F      	1:	lsl r24
 699 032e 991F      		rol r25
 700 0330 0A94      	2:	dec r0
 701 0332 E2F7      		brpl 1b
 702 0334 8095      		com r24
 703 0336 9095      		com r25
 704 0338 9E83      		std Y+6,r25
 705 033a 8D83      		std Y+5,r24
 130:ledmeter.c    ****     PORTC&=mask;
 707               	.LM45:
 708 033c 9091 3500 		lds r25,53
 709 0340 8D81      		ldd r24,Y+5
 710 0342 8923      		and r24,r25
 711 0344 8093 3500 		sts 53,r24
 712               	/* epilogue: frame size=6 */
 713 0348 2696      		adiw r28,6
 714 034a 0FB6      		in __tmp_reg__,__SREG__
 715 034c F894      		cli
 716 034e DEBF      		out __SP_H__,r29
 717 0350 0FBE      		out __SREG__,__tmp_reg__
 718 0352 CDBF      		out __SP_L__,r28
 719 0354 DF91      		pop r29
 720 0356 CF91      		pop r28
 721 0358 0895      		ret
 722               	/* epilogue end (size=9) */
 723               	/* function switch_on_led size 44 (25) */
 729               	.Lscope7:
 732               	.global	switch_off_led
 734               	switch_off_led:
 131:ledmeter.c    **** }
 132:ledmeter.c    **** 
 133:ledmeter.c    **** /*
 134:ledmeter.c    ****  * switch off the led with the number called "led"
 135:ledmeter.c    ****  */
 136:ledmeter.c    **** void switch_off_led(int led) {
 736               	.LM46:
 737               	/* prologue: frame size=6 */
 738 035a CF93      		push r28
 739 035c DF93      		push r29
 740 035e CDB7      		in r28,__SP_L__
 741 0360 DEB7      		in r29,__SP_H__
 742 0362 2697      		sbiw r28,6
 743 0364 0FB6      		in __tmp_reg__,__SREG__
 744 0366 F894      		cli
 745 0368 DEBF      		out __SP_H__,r29
 746 036a 0FBE      		out __SREG__,__tmp_reg__
 747 036c CDBF      		out __SP_L__,r28
 748               	/* prologue end (size=10) */
 749 036e 9A83      		std Y+2,r25
 750 0370 8983      		std Y+1,r24
 137:ledmeter.c    ****     int pin = led - 1;
 752               	.LM47:
 753 0372 8981      		ldd r24,Y+1
 754 0374 9A81      		ldd r25,Y+2
 755 0376 0197      		sbiw r24,1
 756 0378 9C83      		std Y+4,r25
 757 037a 8B83      		std Y+3,r24
 138:ledmeter.c    ****     int mask = (1<<pin);
 759               	.LM48:
 760 037c 81E0      		ldi r24,lo8(1)
 761 037e 90E0      		ldi r25,hi8(1)
 762 0380 0B80      		ldd r0,Y+3
 763 0382 02C0      		rjmp 2f
 764 0384 880F      	1:	lsl r24
 765 0386 991F      		rol r25
 766 0388 0A94      	2:	dec r0
 767 038a E2F7      		brpl 1b
 768 038c 9E83      		std Y+6,r25
 769 038e 8D83      		std Y+5,r24
 139:ledmeter.c    ****     PORTC|=mask;
 771               	.LM49:
 772 0390 9091 3500 		lds r25,53
 773 0394 8D81      		ldd r24,Y+5
 774 0396 892B      		or r24,r25
 775 0398 8093 3500 		sts 53,r24
 776               	/* epilogue: frame size=6 */
 777 039c 2696      		adiw r28,6
 778 039e 0FB6      		in __tmp_reg__,__SREG__
 779 03a0 F894      		cli
 780 03a2 DEBF      		out __SP_H__,r29
 781 03a4 0FBE      		out __SREG__,__tmp_reg__
 782 03a6 CDBF      		out __SP_L__,r28
 783 03a8 DF91      		pop r29
 784 03aa CF91      		pop r28
 785 03ac 0895      		ret
 786               	/* epilogue end (size=9) */
 787               	/* function switch_off_led size 42 (23) */
 793               	.Lscope8:
 796               	.global	switch_on_leds_with_delay
 798               	switch_on_leds_with_delay:
 140:ledmeter.c    **** }
 141:ledmeter.c    **** 
 142:ledmeter.c    **** /*
 143:ledmeter.c    ****  * switch on every leds one after one with a delay (called "delay")
 144:ledmeter.c    ****  */
 145:ledmeter.c    **** void switch_on_leds_with_delay(double delay) {
 800               	.LM50:
 801               	/* prologue: frame size=18 */
 802 03ae CF93      		push r28
 803 03b0 DF93      		push r29
 804 03b2 CDB7      		in r28,__SP_L__
 805 03b4 DEB7      		in r29,__SP_H__
 806 03b6 6297      		sbiw r28,18
 807 03b8 0FB6      		in __tmp_reg__,__SREG__
 808 03ba F894      		cli
 809 03bc DEBF      		out __SP_H__,r29
 810 03be 0FBE      		out __SREG__,__tmp_reg__
 811 03c0 CDBF      		out __SP_L__,r28
 812               	/* prologue end (size=10) */
 813 03c2 6983      		std Y+1,r22
 814 03c4 7A83      		std Y+2,r23
 815 03c6 8B83      		std Y+3,r24
 816 03c8 9C83      		std Y+4,r25
 146:ledmeter.c    ****     int i;
 147:ledmeter.c    ****     for(i = 1; i<=Nleds; i++) {
 818               	.LM51:
 819 03ca 81E0      		ldi r24,lo8(1)
 820 03cc 90E0      		ldi r25,hi8(1)
 821 03ce 9E83      		std Y+6,r25
 822 03d0 8D83      		std Y+5,r24
 823               	.L24:
 825               	.LM52:
 826 03d2 8D81      		ldd r24,Y+5
 827 03d4 9E81      		ldd r25,Y+6
 828 03d6 8930      		cpi r24,9
 829 03d8 9105      		cpc r25,__zero_reg__
 830 03da 0CF0      		brlt .+2
 831 03dc 53C0      		rjmp .L23
 832               	.LBB6:
 834               	.Ltext3:
 836               	.LM53:
 837 03de 8981      		ldd r24,Y+1
 838 03e0 9A81      		ldd r25,Y+2
 839 03e2 AB81      		ldd r26,Y+3
 840 03e4 BC81      		ldd r27,Y+4
 841 03e6 8F83      		std Y+7,r24
 842 03e8 9887      		std Y+8,r25
 843 03ea A987      		std Y+9,r26
 844 03ec BA87      		std Y+10,r27
 845               	.LBB7:
 847               	.LM54:
 848 03ee 20E0      		ldi r18,lo8(0x437a0000)
 849 03f0 30E0      		ldi r19,hi8(0x437a0000)
 850 03f2 4AE7      		ldi r20,hlo8(0x437a0000)
 851 03f4 53E4      		ldi r21,hhi8(0x437a0000)
 852 03f6 6F81      		ldd r22,Y+7
 853 03f8 7885      		ldd r23,Y+8
 854 03fa 8985      		ldd r24,Y+9
 855 03fc 9A85      		ldd r25,Y+10
 856 03fe 00D0      		rcall __mulsf3
 857 0400 DC01      		movw r26,r24
 858 0402 CB01      		movw r24,r22
 859 0404 8D87      		std Y+13,r24
 860 0406 9E87      		std Y+14,r25
 861 0408 AF87      		std Y+15,r26
 862 040a B88B      		std Y+16,r27
 864               	.LM55:
 865 040c 20E0      		ldi r18,lo8(0x3f800000)
 866 040e 30E0      		ldi r19,hi8(0x3f800000)
 867 0410 40E8      		ldi r20,hlo8(0x3f800000)
 868 0412 5FE3      		ldi r21,hhi8(0x3f800000)
 869 0414 6D85      		ldd r22,Y+13
 870 0416 7E85      		ldd r23,Y+14
 871 0418 8F85      		ldd r24,Y+15
 872 041a 9889      		ldd r25,Y+16
 873 041c 00D0      		rcall __ltsf2
 874 041e 8823      		tst r24
 875 0420 0CF0      		brlt .L28
 876 0422 05C0      		rjmp .L27
 877               	.L28:
 879               	.LM56:
 880 0424 81E0      		ldi r24,lo8(1)
 881 0426 90E0      		ldi r25,hi8(1)
 882 0428 9C87      		std Y+12,r25
 883 042a 8B87      		std Y+11,r24
 884 042c 18C0      		rjmp .L29
 885               	.L27:
 887               	.LM57:
 888 042e 20E0      		ldi r18,lo8(0x477fff00)
 889 0430 3FEF      		ldi r19,hi8(0x477fff00)
 890 0432 4FE7      		ldi r20,hlo8(0x477fff00)
 891 0434 57E4      		ldi r21,hhi8(0x477fff00)
 892 0436 6D85      		ldd r22,Y+13
 893 0438 7E85      		ldd r23,Y+14
 894 043a 8F85      		ldd r24,Y+15
 895 043c 9889      		ldd r25,Y+16
 896 043e 00D0      		rcall __gtsf2
 897 0440 1816      		cp __zero_reg__,r24
 898 0442 0CF0      		brlt .L31
 899 0444 03C0      		rjmp .L30
 900               	.L31:
 902               	.LM58:
 903 0446 1C86      		std Y+12,__zero_reg__
 904 0448 1B86      		std Y+11,__zero_reg__
 905 044a 09C0      		rjmp .L29
 906               	.L30:
 908               	.LM59:
 909 044c 6D85      		ldd r22,Y+13
 910 044e 7E85      		ldd r23,Y+14
 911 0450 8F85      		ldd r24,Y+15
 912 0452 9889      		ldd r25,Y+16
 913 0454 00D0      		rcall __fixunssfsi
 914 0456 DC01      		movw r26,r24
 915 0458 CB01      		movw r24,r22
 916 045a 9C87      		std Y+12,r25
 917 045c 8B87      		std Y+11,r24
 918               	.L29:
 919               	.LBB8:
 921               	.LM60:
 922 045e 8B85      		ldd r24,Y+11
 923 0460 9C85      		ldd r25,Y+12
 924 0462 9A8B      		std Y+18,r25
 925 0464 898B      		std Y+17,r24
 926               	.LBB9:
 928               	.LM61:
 929 0466 8989      		ldd r24,Y+17
 930 0468 9A89      		ldd r25,Y+18
 931               	/* #APP */
 932 046a 0197      		1: sbiw r24,1
 933 046c F1F7      		brne 1b
 934               	/* #NOAPP */
 935 046e 9A8B      		std Y+18,r25
 936 0470 898B      		std Y+17,r24
 937               	.LBE9:
 938               	.LBE8:
 939               	.LBE7:
 940               	.LBE6:
 942               	.Ltext4:
 148:ledmeter.c    ****         _delay_ms(delay);
 149:ledmeter.c    ****         switch_on_led(i);
 944               	.LM62:
 945 0472 8D81      		ldd r24,Y+5
 946 0474 9E81      		ldd r25,Y+6
 947 0476 45DF      		rcall switch_on_led
 949               	.LM63:
 950 0478 8D81      		ldd r24,Y+5
 951 047a 9E81      		ldd r25,Y+6
 952 047c 0196      		adiw r24,1
 953 047e 9E83      		std Y+6,r25
 954 0480 8D83      		std Y+5,r24
 955 0482 A7CF      		rjmp .L24
 956               	.L23:
 957               	/* epilogue: frame size=18 */
 958 0484 6296      		adiw r28,18
 959 0486 0FB6      		in __tmp_reg__,__SREG__
 960 0488 F894      		cli
 961 048a DEBF      		out __SP_H__,r29
 962 048c 0FBE      		out __SREG__,__tmp_reg__
 963 048e CDBF      		out __SP_L__,r28
 964 0490 DF91      		pop r29
 965 0492 CF91      		pop r28
 966 0494 0895      		ret
 967               	/* epilogue end (size=9) */
 968               	/* function switch_on_leds_with_delay size 118 (99) */
 983               	.Lscope9:
 986               	.global	switch_off_leds_with_delay
 988               	switch_off_leds_with_delay:
 150:ledmeter.c    ****     }
 151:ledmeter.c    **** }
 152:ledmeter.c    **** 
 153:ledmeter.c    **** /*
 154:ledmeter.c    ****  * switch off every leds on after one with a delay (called "delay")
 155:ledmeter.c    ****  */
 156:ledmeter.c    **** void switch_off_leds_with_delay(double delay) {
 990               	.LM64:
 991               	/* prologue: frame size=18 */
 992 0496 CF93      		push r28
 993 0498 DF93      		push r29
 994 049a CDB7      		in r28,__SP_L__
 995 049c DEB7      		in r29,__SP_H__
 996 049e 6297      		sbiw r28,18
 997 04a0 0FB6      		in __tmp_reg__,__SREG__
 998 04a2 F894      		cli
 999 04a4 DEBF      		out __SP_H__,r29
 1000 04a6 0FBE      		out __SREG__,__tmp_reg__
 1001 04a8 CDBF      		out __SP_L__,r28
 1002               	/* prologue end (size=10) */
 1003 04aa 6983      		std Y+1,r22
 1004 04ac 7A83      		std Y+2,r23
 1005 04ae 8B83      		std Y+3,r24
 1006 04b0 9C83      		std Y+4,r25
 157:ledmeter.c    ****     int i;
 158:ledmeter.c    ****     for(i = Nleds; i>=0; i--) {
 1008               	.LM65:
 1009 04b2 88E0      		ldi r24,lo8(8)
 1010 04b4 90E0      		ldi r25,hi8(8)
 1011 04b6 9E83      		std Y+6,r25
 1012 04b8 8D83      		std Y+5,r24
 1013               	.L36:
 1015               	.LM66:
 1016 04ba 8D81      		ldd r24,Y+5
 1017 04bc 9E81      		ldd r25,Y+6
 1018 04be 9923      		tst r25
 1019 04c0 0CF4      		brge .+2
 1020 04c2 53C0      		rjmp .L35
 1021               	.LBB10:
 1023               	.Ltext5:
 1025               	.LM67:
 1026 04c4 8981      		ldd r24,Y+1
 1027 04c6 9A81      		ldd r25,Y+2
 1028 04c8 AB81      		ldd r26,Y+3
 1029 04ca BC81      		ldd r27,Y+4
 1030 04cc 8F83      		std Y+7,r24
 1031 04ce 9887      		std Y+8,r25
 1032 04d0 A987      		std Y+9,r26
 1033 04d2 BA87      		std Y+10,r27
 1034               	.LBB11:
 1036               	.LM68:
 1037 04d4 20E0      		ldi r18,lo8(0x437a0000)
 1038 04d6 30E0      		ldi r19,hi8(0x437a0000)
 1039 04d8 4AE7      		ldi r20,hlo8(0x437a0000)
 1040 04da 53E4      		ldi r21,hhi8(0x437a0000)
 1041 04dc 6F81      		ldd r22,Y+7
 1042 04de 7885      		ldd r23,Y+8
 1043 04e0 8985      		ldd r24,Y+9
 1044 04e2 9A85      		ldd r25,Y+10
 1045 04e4 00D0      		rcall __mulsf3
 1046 04e6 DC01      		movw r26,r24
 1047 04e8 CB01      		movw r24,r22
 1048 04ea 8D87      		std Y+13,r24
 1049 04ec 9E87      		std Y+14,r25
 1050 04ee AF87      		std Y+15,r26
 1051 04f0 B88B      		std Y+16,r27
 1053               	.LM69:
 1054 04f2 20E0      		ldi r18,lo8(0x3f800000)
 1055 04f4 30E0      		ldi r19,hi8(0x3f800000)
 1056 04f6 40E8      		ldi r20,hlo8(0x3f800000)
 1057 04f8 5FE3      		ldi r21,hhi8(0x3f800000)
 1058 04fa 6D85      		ldd r22,Y+13
 1059 04fc 7E85      		ldd r23,Y+14
 1060 04fe 8F85      		ldd r24,Y+15
 1061 0500 9889      		ldd r25,Y+16
 1062 0502 00D0      		rcall __ltsf2
 1063 0504 8823      		tst r24
 1064 0506 0CF0      		brlt .L40
 1065 0508 05C0      		rjmp .L39
 1066               	.L40:
 1068               	.LM70:
 1069 050a 81E0      		ldi r24,lo8(1)
 1070 050c 90E0      		ldi r25,hi8(1)
 1071 050e 9C87      		std Y+12,r25
 1072 0510 8B87      		std Y+11,r24
 1073 0512 18C0      		rjmp .L41
 1074               	.L39:
 1076               	.LM71:
 1077 0514 20E0      		ldi r18,lo8(0x477fff00)
 1078 0516 3FEF      		ldi r19,hi8(0x477fff00)
 1079 0518 4FE7      		ldi r20,hlo8(0x477fff00)
 1080 051a 57E4      		ldi r21,hhi8(0x477fff00)
 1081 051c 6D85      		ldd r22,Y+13
 1082 051e 7E85      		ldd r23,Y+14
 1083 0520 8F85      		ldd r24,Y+15
 1084 0522 9889      		ldd r25,Y+16
 1085 0524 00D0      		rcall __gtsf2
 1086 0526 1816      		cp __zero_reg__,r24
 1087 0528 0CF0      		brlt .L43
 1088 052a 03C0      		rjmp .L42
 1089               	.L43:
 1091               	.LM72:
 1092 052c 1C86      		std Y+12,__zero_reg__
 1093 052e 1B86      		std Y+11,__zero_reg__
 1094 0530 09C0      		rjmp .L41
 1095               	.L42:
 1097               	.LM73:
 1098 0532 6D85      		ldd r22,Y+13
 1099 0534 7E85      		ldd r23,Y+14
 1100 0536 8F85      		ldd r24,Y+15
 1101 0538 9889      		ldd r25,Y+16
 1102 053a 00D0      		rcall __fixunssfsi
 1103 053c DC01      		movw r26,r24
 1104 053e CB01      		movw r24,r22
 1105 0540 9C87      		std Y+12,r25
 1106 0542 8B87      		std Y+11,r24
 1107               	.L41:
 1108               	.LBB12:
 1110               	.LM74:
 1111 0544 8B85      		ldd r24,Y+11
 1112 0546 9C85      		ldd r25,Y+12
 1113 0548 9A8B      		std Y+18,r25
 1114 054a 898B      		std Y+17,r24
 1115               	.LBB13:
 1117               	.LM75:
 1118 054c 8989      		ldd r24,Y+17
 1119 054e 9A89      		ldd r25,Y+18
 1120               	/* #APP */
 1121 0550 0197      		1: sbiw r24,1
 1122 0552 F1F7      		brne 1b
 1123               	/* #NOAPP */
 1124 0554 9A8B      		std Y+18,r25
 1125 0556 898B      		std Y+17,r24
 1126               	.LBE13:
 1127               	.LBE12:
 1128               	.LBE11:
 1129               	.LBE10:
 1131               	.Ltext6:
 159:ledmeter.c    ****         _delay_ms(delay);
 160:ledmeter.c    ****         switch_off_led(i);
 1133               	.LM76:
 1134 0558 8D81      		ldd r24,Y+5
 1135 055a 9E81      		ldd r25,Y+6
 1136 055c FEDE      		rcall switch_off_led
 1138               	.LM77:
 1139 055e 8D81      		ldd r24,Y+5
 1140 0560 9E81      		ldd r25,Y+6
 1141 0562 0197      		sbiw r24,1
 1142 0564 9E83      		std Y+6,r25
 1143 0566 8D83      		std Y+5,r24
 1144 0568 A8CF      		rjmp .L36
 1145               	.L35:
 1146               	/* epilogue: frame size=18 */
 1147 056a 6296      		adiw r28,18
 1148 056c 0FB6      		in __tmp_reg__,__SREG__
 1149 056e F894      		cli
 1150 0570 DEBF      		out __SP_H__,r29
 1151 0572 0FBE      		out __SREG__,__tmp_reg__
 1152 0574 CDBF      		out __SP_L__,r28
 1153 0576 DF91      		pop r29
 1154 0578 CF91      		pop r28
 1155 057a 0895      		ret
 1156               	/* epilogue end (size=9) */
 1157               	/* function switch_off_leds_with_delay size 117 (98) */
 1172               	.Lscope10:
 1174               	.global	test_leds
 1176               	test_leds:
 161:ledmeter.c    ****     }
 162:ledmeter.c    **** }
 163:ledmeter.c    **** 
 164:ledmeter.c    **** /*
 165:ledmeter.c    ****  * a function for testing leds that switch on every leds and switch off every leds (one after one)
 166:ledmeter.c    ****  */
 167:ledmeter.c    **** void test_leds() {
 1178               	.LM78:
 1179               	/* prologue: frame size=12 */
 1180 057c CF93      		push r28
 1181 057e DF93      		push r29
 1182 0580 CDB7      		in r28,__SP_L__
 1183 0582 DEB7      		in r29,__SP_H__
 1184 0584 2C97      		sbiw r28,12
 1185 0586 0FB6      		in __tmp_reg__,__SREG__
 1186 0588 F894      		cli
 1187 058a DEBF      		out __SP_H__,r29
 1188 058c 0FBE      		out __SREG__,__tmp_reg__
 1189 058e CDBF      		out __SP_L__,r28
 1190               	/* prologue end (size=10) */
 168:ledmeter.c    ****     switch_on_leds_with_delay(100);
 1192               	.LM79:
 1193 0590 60E0      		ldi r22,lo8(0x42c80000)
 1194 0592 70E0      		ldi r23,hi8(0x42c80000)
 1195 0594 88EC      		ldi r24,hlo8(0x42c80000)
 1196 0596 92E4      		ldi r25,hhi8(0x42c80000)
 1197 0598 0ADF      		rcall switch_on_leds_with_delay
 1198               	.LBB14:
 1200               	.Ltext7:
 1202               	.LM80:
 1203 059a 80E0      		ldi r24,lo8(0x42480000)
 1204 059c 90E0      		ldi r25,hi8(0x42480000)
 1205 059e A8E4      		ldi r26,hlo8(0x42480000)
 1206 05a0 B2E4      		ldi r27,hhi8(0x42480000)
 1207 05a2 8983      		std Y+1,r24
 1208 05a4 9A83      		std Y+2,r25
 1209 05a6 AB83      		std Y+3,r26
 1210 05a8 BC83      		std Y+4,r27
 1211               	.LBB15:
 1213               	.LM81:
 1214 05aa 20E0      		ldi r18,lo8(0x437a0000)
 1215 05ac 30E0      		ldi r19,hi8(0x437a0000)
 1216 05ae 4AE7      		ldi r20,hlo8(0x437a0000)
 1217 05b0 53E4      		ldi r21,hhi8(0x437a0000)
 1218 05b2 6981      		ldd r22,Y+1
 1219 05b4 7A81      		ldd r23,Y+2
 1220 05b6 8B81      		ldd r24,Y+3
 1221 05b8 9C81      		ldd r25,Y+4
 1222 05ba 00D0      		rcall __mulsf3
 1223 05bc DC01      		movw r26,r24
 1224 05be CB01      		movw r24,r22
 1225 05c0 8F83      		std Y+7,r24
 1226 05c2 9887      		std Y+8,r25
 1227 05c4 A987      		std Y+9,r26
 1228 05c6 BA87      		std Y+10,r27
 1230               	.LM82:
 1231 05c8 20E0      		ldi r18,lo8(0x3f800000)
 1232 05ca 30E0      		ldi r19,hi8(0x3f800000)
 1233 05cc 40E8      		ldi r20,hlo8(0x3f800000)
 1234 05ce 5FE3      		ldi r21,hhi8(0x3f800000)
 1235 05d0 6F81      		ldd r22,Y+7
 1236 05d2 7885      		ldd r23,Y+8
 1237 05d4 8985      		ldd r24,Y+9
 1238 05d6 9A85      		ldd r25,Y+10
 1239 05d8 00D0      		rcall __ltsf2
 1240 05da 8823      		tst r24
 1241 05dc 0CF0      		brlt .L49
 1243               	.LM83:
 1244 05de 05C0      		rjmp .L48
 1245               	.L49:
 1247               	.LM84:
 1248 05e0 81E0      		ldi r24,lo8(1)
 1249 05e2 90E0      		ldi r25,hi8(1)
 1250 05e4 9E83      		std Y+6,r25
 1251 05e6 8D83      		std Y+5,r24
 1252 05e8 18C0      		rjmp .L50
 1253               	.L48:
 1255               	.LM85:
 1256 05ea 20E0      		ldi r18,lo8(0x477fff00)
 1257 05ec 3FEF      		ldi r19,hi8(0x477fff00)
 1258 05ee 4FE7      		ldi r20,hlo8(0x477fff00)
 1259 05f0 57E4      		ldi r21,hhi8(0x477fff00)
 1260 05f2 6F81      		ldd r22,Y+7
 1261 05f4 7885      		ldd r23,Y+8
 1262 05f6 8985      		ldd r24,Y+9
 1263 05f8 9A85      		ldd r25,Y+10
 1264 05fa 00D0      		rcall __gtsf2
 1265 05fc 1816      		cp __zero_reg__,r24
 1266 05fe 0CF0      		brlt .L52
 1267 0600 03C0      		rjmp .L51
 1268               	.L52:
 1270               	.LM86:
 1271 0602 1E82      		std Y+6,__zero_reg__
 1272 0604 1D82      		std Y+5,__zero_reg__
 1273 0606 09C0      		rjmp .L50
 1274               	.L51:
 1276               	.LM87:
 1277 0608 6F81      		ldd r22,Y+7
 1278 060a 7885      		ldd r23,Y+8
 1279 060c 8985      		ldd r24,Y+9
 1280 060e 9A85      		ldd r25,Y+10
 1281 0610 00D0      		rcall __fixunssfsi
 1282 0612 DC01      		movw r26,r24
 1283 0614 CB01      		movw r24,r22
 1284 0616 9E83      		std Y+6,r25
 1285 0618 8D83      		std Y+5,r24
 1286               	.L50:
 1287               	.LBB16:
 1289               	.LM88:
 1290 061a 8D81      		ldd r24,Y+5
 1291 061c 9E81      		ldd r25,Y+6
 1292 061e 9C87      		std Y+12,r25
 1293 0620 8B87      		std Y+11,r24
 1294               	.LBB17:
 1296               	.LM89:
 1297 0622 8B85      		ldd r24,Y+11
 1298 0624 9C85      		ldd r25,Y+12
 1299               	/* #APP */
 1300 0626 0197      		1: sbiw r24,1
 1301 0628 F1F7      		brne 1b
 1302               	/* #NOAPP */
 1303 062a 9C87      		std Y+12,r25
 1304 062c 8B87      		std Y+11,r24
 1305               	.LBE17:
 1306               	.LBE16:
 1307               	.LBE15:
 1308               	.LBE14:
 1310               	.Ltext8:
 169:ledmeter.c    ****     _delay_ms(50);
 170:ledmeter.c    ****     switch_off_leds_with_delay(100);
 1312               	.LM90:
 1313 062e 60E0      		ldi r22,lo8(0x42c80000)
 1314 0630 70E0      		ldi r23,hi8(0x42c80000)
 1315 0632 88EC      		ldi r24,hlo8(0x42c80000)
 1316 0634 92E4      		ldi r25,hhi8(0x42c80000)
 1317 0636 2FDF      		rcall switch_off_leds_with_delay
 1318               	/* epilogue: frame size=12 */
 1319 0638 2C96      		adiw r28,12
 1320 063a 0FB6      		in __tmp_reg__,__SREG__
 1321 063c F894      		cli
 1322 063e DEBF      		out __SP_H__,r29
 1323 0640 0FBE      		out __SREG__,__tmp_reg__
 1324 0642 CDBF      		out __SP_L__,r28
 1325 0644 DF91      		pop r29
 1326 0646 CF91      		pop r28
 1327 0648 0895      		ret
 1328               	/* epilogue end (size=9) */
 1329               	/* function test_leds size 105 (86) */
 1341               	.Lscope11:
 1344               	.global	switch_on_min_dels
 1346               	switch_on_min_dels:
 171:ledmeter.c    **** }
 172:ledmeter.c    **** 
 173:ledmeter.c    **** /*
 174:ledmeter.c    ****  *  switch on every leds (from 0 to n)  (and switch off others)
 175:ledmeter.c    ****  */
 176:ledmeter.c    **** void switch_on_min_dels(int n) {
 1348               	.LM91:
 1349               	/* prologue: frame size=4 */
 1350 064a CF93      		push r28
 1351 064c DF93      		push r29
 1352 064e CDB7      		in r28,__SP_L__
 1353 0650 DEB7      		in r29,__SP_H__
 1354 0652 2497      		sbiw r28,4
 1355 0654 0FB6      		in __tmp_reg__,__SREG__
 1356 0656 F894      		cli
 1357 0658 DEBF      		out __SP_H__,r29
 1358 065a 0FBE      		out __SREG__,__tmp_reg__
 1359 065c CDBF      		out __SP_L__,r28
 1360               	/* prologue end (size=10) */
 1361 065e 9A83      		std Y+2,r25
 1362 0660 8983      		std Y+1,r24
 177:ledmeter.c    ****     int i;
 178:ledmeter.c    ****     for(i = 1; i<=Nleds; i++) {
 1364               	.LM92:
 1365 0662 81E0      		ldi r24,lo8(1)
 1366 0664 90E0      		ldi r25,hi8(1)
 1367 0666 9C83      		std Y+4,r25
 1368 0668 8B83      		std Y+3,r24
 1369               	.L57:
 1371               	.LM93:
 1372 066a 8B81      		ldd r24,Y+3
 1373 066c 9C81      		ldd r25,Y+4
 1374 066e 8930      		cpi r24,9
 1375 0670 9105      		cpc r25,__zero_reg__
 1376 0672 A4F4      		brge .L56
 179:ledmeter.c    ****         if (i<=n) {
 1378               	.LM94:
 1379 0674 2B81      		ldd r18,Y+3
 1380 0676 3C81      		ldd r19,Y+4
 1381 0678 8981      		ldd r24,Y+1
 1382 067a 9A81      		ldd r25,Y+2
 1383 067c 8217      		cp r24,r18
 1384 067e 9307      		cpc r25,r19
 1385 0680 24F0      		brlt .L60
 180:ledmeter.c    ****             switch_on_led(i);
 1387               	.LM95:
 1388 0682 8B81      		ldd r24,Y+3
 1389 0684 9C81      		ldd r25,Y+4
 1390 0686 3DDE      		rcall switch_on_led
 1391 0688 03C0      		rjmp .L59
 1392               	.L60:
 181:ledmeter.c    ****         } else {
 182:ledmeter.c    ****             switch_off_led(i);
 1394               	.LM96:
 1395 068a 8B81      		ldd r24,Y+3
 1396 068c 9C81      		ldd r25,Y+4
 1397 068e 65DE      		rcall switch_off_led
 1398               	.L59:
 1400               	.LM97:
 1401 0690 8B81      		ldd r24,Y+3
 1402 0692 9C81      		ldd r25,Y+4
 1403 0694 0196      		adiw r24,1
 1404 0696 9C83      		std Y+4,r25
 1405 0698 8B83      		std Y+3,r24
 1406 069a E7CF      		rjmp .L57
 1407               	.L56:
 1408               	/* epilogue: frame size=4 */
 1409 069c 2496      		adiw r28,4
 1410 069e 0FB6      		in __tmp_reg__,__SREG__
 1411 06a0 F894      		cli
 1412 06a2 DEBF      		out __SP_H__,r29
 1413 06a4 0FBE      		out __SREG__,__tmp_reg__
 1414 06a6 CDBF      		out __SP_L__,r28
 1415 06a8 DF91      		pop r29
 1416 06aa CF91      		pop r28
 1417 06ac 0895      		ret
 1418               	/* epilogue end (size=9) */
 1419               	/* function switch_on_min_dels size 50 (31) */
 1424               	.Lscope12:
 1427               	.global	switch_on_max_dels
 1429               	switch_on_max_dels:
 183:ledmeter.c    ****         }
 184:ledmeter.c    ****     }
 185:ledmeter.c    **** }
 186:ledmeter.c    **** 
 187:ledmeter.c    **** /*
 188:ledmeter.c    ****  *  switch on every leds (from Nleds to n)
 189:ledmeter.c    ****  */
 190:ledmeter.c    **** void switch_on_max_dels(int n) {
 1431               	.LM98:
 1432               	/* prologue: frame size=4 */
 1433 06ae CF93      		push r28
 1434 06b0 DF93      		push r29
 1435 06b2 CDB7      		in r28,__SP_L__
 1436 06b4 DEB7      		in r29,__SP_H__
 1437 06b6 2497      		sbiw r28,4
 1438 06b8 0FB6      		in __tmp_reg__,__SREG__
 1439 06ba F894      		cli
 1440 06bc DEBF      		out __SP_H__,r29
 1441 06be 0FBE      		out __SREG__,__tmp_reg__
 1442 06c0 CDBF      		out __SP_L__,r28
 1443               	/* prologue end (size=10) */
 1444 06c2 9A83      		std Y+2,r25
 1445 06c4 8983      		std Y+1,r24
 191:ledmeter.c    ****     int i;
 192:ledmeter.c    ****     for(i = Nleds; i>=0; i--) {
 1447               	.LM99:
 1448 06c6 88E0      		ldi r24,lo8(8)
 1449 06c8 90E0      		ldi r25,hi8(8)
 1450 06ca 9C83      		std Y+4,r25
 1451 06cc 8B83      		std Y+3,r24
 1452               	.L63:
 1454               	.LM100:
 1455 06ce 8B81      		ldd r24,Y+3
 1456 06d0 9C81      		ldd r25,Y+4
 1457 06d2 9923      		tst r25
 1458 06d4 C4F0      		brlt .L62
 193:ledmeter.c    ****         if (i>=Nleds-n) {
 1460               	.LM101:
 1461 06d6 28E0      		ldi r18,lo8(8)
 1462 06d8 30E0      		ldi r19,hi8(8)
 1463 06da 8981      		ldd r24,Y+1
 1464 06dc 9A81      		ldd r25,Y+2
 1465 06de 281B      		sub r18,r24
 1466 06e0 390B      		sbc r19,r25
 1467 06e2 8B81      		ldd r24,Y+3
 1468 06e4 9C81      		ldd r25,Y+4
 1469 06e6 8217      		cp r24,r18
 1470 06e8 9307      		cpc r25,r19
 1471 06ea 24F0      		brlt .L66
 194:ledmeter.c    ****             switch_on_led(i);
 1473               	.LM102:
 1474 06ec 8B81      		ldd r24,Y+3
 1475 06ee 9C81      		ldd r25,Y+4
 1476 06f0 08DE      		rcall switch_on_led
 1477 06f2 03C0      		rjmp .L65
 1478               	.L66:
 195:ledmeter.c    ****         } else {
 196:ledmeter.c    ****             switch_off_led(i);
 1480               	.LM103:
 1481 06f4 8B81      		ldd r24,Y+3
 1482 06f6 9C81      		ldd r25,Y+4
 1483 06f8 30DE      		rcall switch_off_led
 1484               	.L65:
 1486               	.LM104:
 1487 06fa 8B81      		ldd r24,Y+3
 1488 06fc 9C81      		ldd r25,Y+4
 1489 06fe 0197      		sbiw r24,1
 1490 0700 9C83      		std Y+4,r25
 1491 0702 8B83      		std Y+3,r24
 1492 0704 E4CF      		rjmp .L63
 1493               	.L62:
 1494               	/* epilogue: frame size=4 */
 1495 0706 2496      		adiw r28,4
 1496 0708 0FB6      		in __tmp_reg__,__SREG__
 1497 070a F894      		cli
 1498 070c DEBF      		out __SP_H__,r29
 1499 070e 0FBE      		out __SREG__,__tmp_reg__
 1500 0710 CDBF      		out __SP_L__,r28
 1501 0712 DF91      		pop r29
 1502 0714 CF91      		pop r28
 1503 0716 0895      		ret
 1504               	/* epilogue end (size=9) */
 1505               	/* function switch_on_max_dels size 53 (34) */
 1510               	.Lscope13:
 1514               	.global	led_alarm
 1516               	led_alarm:
 197:ledmeter.c    ****         }
 198:ledmeter.c    ****     }
 199:ledmeter.c    ****     // TO TEST (switch off)
 200:ledmeter.c    **** }
 201:ledmeter.c    **** 
 202:ledmeter.c    **** /*
 203:ledmeter.c    ****  * switch off every leds, wait and swith them all, n times (a sort of visual alarm)
 204:ledmeter.c    ****  */
 205:ledmeter.c    **** void led_alarm(int n, double delay) {
 1518               	.LM105:
 1519               	/* prologue: frame size=20 */
 1520 0718 CF93      		push r28
 1521 071a DF93      		push r29
 1522 071c CDB7      		in r28,__SP_L__
 1523 071e DEB7      		in r29,__SP_H__
 1524 0720 6497      		sbiw r28,20
 1525 0722 0FB6      		in __tmp_reg__,__SREG__
 1526 0724 F894      		cli
 1527 0726 DEBF      		out __SP_H__,r29
 1528 0728 0FBE      		out __SREG__,__tmp_reg__
 1529 072a CDBF      		out __SP_L__,r28
 1530               	/* prologue end (size=10) */
 1531 072c 9A83      		std Y+2,r25
 1532 072e 8983      		std Y+1,r24
 1533 0730 4B83      		std Y+3,r20
 1534 0732 5C83      		std Y+4,r21
 1535 0734 6D83      		std Y+5,r22
 1536 0736 7E83      		std Y+6,r23
 206:ledmeter.c    ****     int i;
 207:ledmeter.c    ****     for(i = 1; i<=n; i++) {
 1538               	.LM106:
 1539 0738 81E0      		ldi r24,lo8(1)
 1540 073a 90E0      		ldi r25,hi8(1)
 1541 073c 9887      		std Y+8,r25
 1542 073e 8F83      		std Y+7,r24
 1543               	.L69:
 1545               	.LM107:
 1546 0740 2F81      		ldd r18,Y+7
 1547 0742 3885      		ldd r19,Y+8
 1548 0744 8981      		ldd r24,Y+1
 1549 0746 9A81      		ldd r25,Y+2
 1550 0748 8217      		cp r24,r18
 1551 074a 9307      		cpc r25,r19
 1552 074c 0CF4      		brge .+2
 1553 074e 9CC0      		rjmp .L68
 208:ledmeter.c    ****         switch_off_all_leds();
 1555               	.LM108:
 1556 0750 CEDD      		rcall switch_off_all_leds
 1557               	.LBB18:
 1559               	.Ltext9:
 1561               	.LM109:
 1562 0752 8B81      		ldd r24,Y+3
 1563 0754 9C81      		ldd r25,Y+4
 1564 0756 AD81      		ldd r26,Y+5
 1565 0758 BE81      		ldd r27,Y+6
 1566 075a 8987      		std Y+9,r24
 1567 075c 9A87      		std Y+10,r25
 1568 075e AB87      		std Y+11,r26
 1569 0760 BC87      		std Y+12,r27
 1570               	.LBB19:
 1572               	.LM110:
 1573 0762 20E0      		ldi r18,lo8(0x437a0000)
 1574 0764 30E0      		ldi r19,hi8(0x437a0000)
 1575 0766 4AE7      		ldi r20,hlo8(0x437a0000)
 1576 0768 53E4      		ldi r21,hhi8(0x437a0000)
 1577 076a 6985      		ldd r22,Y+9
 1578 076c 7A85      		ldd r23,Y+10
 1579 076e 8B85      		ldd r24,Y+11
 1580 0770 9C85      		ldd r25,Y+12
 1581 0772 00D0      		rcall __mulsf3
 1582 0774 DC01      		movw r26,r24
 1583 0776 CB01      		movw r24,r22
 1584 0778 8F87      		std Y+15,r24
 1585 077a 988B      		std Y+16,r25
 1586 077c A98B      		std Y+17,r26
 1587 077e BA8B      		std Y+18,r27
 1589               	.LM111:
 1590 0780 20E0      		ldi r18,lo8(0x3f800000)
 1591 0782 30E0      		ldi r19,hi8(0x3f800000)
 1592 0784 40E8      		ldi r20,hlo8(0x3f800000)
 1593 0786 5FE3      		ldi r21,hhi8(0x3f800000)
 1594 0788 6F85      		ldd r22,Y+15
 1595 078a 7889      		ldd r23,Y+16
 1596 078c 8989      		ldd r24,Y+17
 1597 078e 9A89      		ldd r25,Y+18
 1598 0790 00D0      		rcall __ltsf2
 1599 0792 8823      		tst r24
 1600 0794 0CF0      		brlt .L73
 1601 0796 05C0      		rjmp .L72
 1602               	.L73:
 1604               	.LM112:
 1605 0798 81E0      		ldi r24,lo8(1)
 1606 079a 90E0      		ldi r25,hi8(1)
 1607 079c 9E87      		std Y+14,r25
 1608 079e 8D87      		std Y+13,r24
 1609 07a0 18C0      		rjmp .L74
 1610               	.L72:
 1612               	.LM113:
 1613 07a2 20E0      		ldi r18,lo8(0x477fff00)
 1614 07a4 3FEF      		ldi r19,hi8(0x477fff00)
 1615 07a6 4FE7      		ldi r20,hlo8(0x477fff00)
 1616 07a8 57E4      		ldi r21,hhi8(0x477fff00)
 1617 07aa 6F85      		ldd r22,Y+15
 1618 07ac 7889      		ldd r23,Y+16
 1619 07ae 8989      		ldd r24,Y+17
 1620 07b0 9A89      		ldd r25,Y+18
 1621 07b2 00D0      		rcall __gtsf2
 1622 07b4 1816      		cp __zero_reg__,r24
 1623 07b6 0CF0      		brlt .L76
 1624 07b8 03C0      		rjmp .L75
 1625               	.L76:
 1627               	.LM114:
 1628 07ba 1E86      		std Y+14,__zero_reg__
 1629 07bc 1D86      		std Y+13,__zero_reg__
 1630 07be 09C0      		rjmp .L74
 1631               	.L75:
 1633               	.LM115:
 1634 07c0 6F85      		ldd r22,Y+15
 1635 07c2 7889      		ldd r23,Y+16
 1636 07c4 8989      		ldd r24,Y+17
 1637 07c6 9A89      		ldd r25,Y+18
 1638 07c8 00D0      		rcall __fixunssfsi
 1639 07ca DC01      		movw r26,r24
 1640 07cc CB01      		movw r24,r22
 1641 07ce 9E87      		std Y+14,r25
 1642 07d0 8D87      		std Y+13,r24
 1643               	.L74:
 1644               	.LBB20:
 1646               	.LM116:
 1647 07d2 8D85      		ldd r24,Y+13
 1648 07d4 9E85      		ldd r25,Y+14
 1649 07d6 9C8B      		std Y+20,r25
 1650 07d8 8B8B      		std Y+19,r24
 1651               	.LBB21:
 1653               	.LM117:
 1654 07da 8B89      		ldd r24,Y+19
 1655 07dc 9C89      		ldd r25,Y+20
 1656               	/* #APP */
 1657 07de 0197      		1: sbiw r24,1
 1658 07e0 F1F7      		brne 1b
 1659               	/* #NOAPP */
 1660 07e2 9C8B      		std Y+20,r25
 1661 07e4 8B8B      		std Y+19,r24
 1662               	.LBE21:
 1663               	.LBE20:
 1664               	.LBE19:
 1665               	.LBE18:
 1667               	.Ltext10:
 209:ledmeter.c    ****         _delay_ms(delay);
 210:ledmeter.c    ****         switch_on_all_leds();
 1669               	.LM118:
 1670 07e6 7ADD      		rcall switch_on_all_leds
 1671               	.LBB22:
 1673               	.Ltext11:
 1675               	.LM119:
 1676 07e8 8B81      		ldd r24,Y+3
 1677 07ea 9C81      		ldd r25,Y+4
 1678 07ec AD81      		ldd r26,Y+5
 1679 07ee BE81      		ldd r27,Y+6
 1680 07f0 8F87      		std Y+15,r24
 1681 07f2 988B      		std Y+16,r25
 1682 07f4 A98B      		std Y+17,r26
 1683 07f6 BA8B      		std Y+18,r27
 1684               	.LBB23:
 1686               	.LM120:
 1687 07f8 20E0      		ldi r18,lo8(0x437a0000)
 1688 07fa 30E0      		ldi r19,hi8(0x437a0000)
 1689 07fc 4AE7      		ldi r20,hlo8(0x437a0000)
 1690 07fe 53E4      		ldi r21,hhi8(0x437a0000)
 1691 0800 6F85      		ldd r22,Y+15
 1692 0802 7889      		ldd r23,Y+16
 1693 0804 8989      		ldd r24,Y+17
 1694 0806 9A89      		ldd r25,Y+18
 1695 0808 00D0      		rcall __mulsf3
 1696 080a DC01      		movw r26,r24
 1697 080c CB01      		movw r24,r22
 1698 080e 8987      		std Y+9,r24
 1699 0810 9A87      		std Y+10,r25
 1700 0812 AB87      		std Y+11,r26
 1701 0814 BC87      		std Y+12,r27
 1703               	.LM121:
 1704 0816 20E0      		ldi r18,lo8(0x3f800000)
 1705 0818 30E0      		ldi r19,hi8(0x3f800000)
 1706 081a 40E8      		ldi r20,hlo8(0x3f800000)
 1707 081c 5FE3      		ldi r21,hhi8(0x3f800000)
 1708 081e 6985      		ldd r22,Y+9
 1709 0820 7A85      		ldd r23,Y+10
 1710 0822 8B85      		ldd r24,Y+11
 1711 0824 9C85      		ldd r25,Y+12
 1712 0826 00D0      		rcall __ltsf2
 1713 0828 8823      		tst r24
 1714 082a 0CF0      		brlt .L81
 1715 082c 05C0      		rjmp .L80
 1716               	.L81:
 1718               	.LM122:
 1719 082e 81E0      		ldi r24,lo8(1)
 1720 0830 90E0      		ldi r25,hi8(1)
 1721 0832 9C8B      		std Y+20,r25
 1722 0834 8B8B      		std Y+19,r24
 1723 0836 18C0      		rjmp .L82
 1724               	.L80:
 1726               	.LM123:
 1727 0838 20E0      		ldi r18,lo8(0x477fff00)
 1728 083a 3FEF      		ldi r19,hi8(0x477fff00)
 1729 083c 4FE7      		ldi r20,hlo8(0x477fff00)
 1730 083e 57E4      		ldi r21,hhi8(0x477fff00)
 1731 0840 6985      		ldd r22,Y+9
 1732 0842 7A85      		ldd r23,Y+10
 1733 0844 8B85      		ldd r24,Y+11
 1734 0846 9C85      		ldd r25,Y+12
 1735 0848 00D0      		rcall __gtsf2
 1736 084a 1816      		cp __zero_reg__,r24
 1737 084c 0CF0      		brlt .L84
 1738 084e 03C0      		rjmp .L83
 1739               	.L84:
 1741               	.LM124:
 1742 0850 1C8A      		std Y+20,__zero_reg__
 1743 0852 1B8A      		std Y+19,__zero_reg__
 1744 0854 09C0      		rjmp .L82
 1745               	.L83:
 1747               	.LM125:
 1748 0856 6985      		ldd r22,Y+9
 1749 0858 7A85      		ldd r23,Y+10
 1750 085a 8B85      		ldd r24,Y+11
 1751 085c 9C85      		ldd r25,Y+12
 1752 085e 00D0      		rcall __fixunssfsi
 1753 0860 DC01      		movw r26,r24
 1754 0862 CB01      		movw r24,r22
 1755 0864 9C8B      		std Y+20,r25
 1756 0866 8B8B      		std Y+19,r24
 1757               	.L82:
 1758               	.LBB24:
 1760               	.LM126:
 1761 0868 8B89      		ldd r24,Y+19
 1762 086a 9C89      		ldd r25,Y+20
 1763 086c 9E87      		std Y+14,r25
 1764 086e 8D87      		std Y+13,r24
 1765               	.LBB25:
 1767               	.LM127:
 1768 0870 8D85      		ldd r24,Y+13
 1769 0872 9E85      		ldd r25,Y+14
 1770               	/* #APP */
 1771 0874 0197      		1: sbiw r24,1
 1772 0876 F1F7      		brne 1b
 1773               	/* #NOAPP */
 1774 0878 9E87      		std Y+14,r25
 1775 087a 8D87      		std Y+13,r24
 1776               	.LBE25:
 1777               	.LBE24:
 1778               	.LBE23:
 1779               	.LBE22:
 1781               	.Ltext12:
 1783               	.LM128:
 1784 087c 8F81      		ldd r24,Y+7
 1785 087e 9885      		ldd r25,Y+8
 1786 0880 0196      		adiw r24,1
 1787 0882 9887      		std Y+8,r25
 1788 0884 8F83      		std Y+7,r24
 1789 0886 5CCF      		rjmp .L69
 1790               	.L68:
 1791               	/* epilogue: frame size=20 */
 1792 0888 6496      		adiw r28,20
 1793 088a 0FB6      		in __tmp_reg__,__SREG__
 1794 088c F894      		cli
 1795 088e DEBF      		out __SP_H__,r29
 1796 0890 0FBE      		out __SREG__,__tmp_reg__
 1797 0892 CDBF      		out __SP_L__,r28
 1798 0894 DF91      		pop r29
 1799 0896 CF91      		pop r28
 1800 0898 0895      		ret
 1801               	/* epilogue end (size=9) */
 1802               	/* function led_alarm size 197 (178) */
 1827               	.Lscope14:
 1830               	.global	roundp
 1832               	roundp:
 211:ledmeter.c    ****         _delay_ms(delay);
 212:ledmeter.c    ****     }
 213:ledmeter.c    **** }
 214:ledmeter.c    **** 
 215:ledmeter.c    **** /*
 216:ledmeter.c    ****  * switch on every dels depending of the percentage p
 217:ledmeter.c    ****  */
 218:ledmeter.c    **** //#define roundp floor
 219:ledmeter.c    **** inline int roundp(double n) {
 1834               	.LM129:
 1835               	/* prologue: frame size=4 */
 1836 089a CF93      		push r28
 1837 089c DF93      		push r29
 1838 089e CDB7      		in r28,__SP_L__
 1839 08a0 DEB7      		in r29,__SP_H__
 1840 08a2 2497      		sbiw r28,4
 1841 08a4 0FB6      		in __tmp_reg__,__SREG__
 1842 08a6 F894      		cli
 1843 08a8 DEBF      		out __SP_H__,r29
 1844 08aa 0FBE      		out __SREG__,__tmp_reg__
 1845 08ac CDBF      		out __SP_L__,r28
 1846               	/* prologue end (size=10) */
 1847 08ae 6983      		std Y+1,r22
 1848 08b0 7A83      		std Y+2,r23
 1849 08b2 8B83      		std Y+3,r24
 1850 08b4 9C83      		std Y+4,r25
 220:ledmeter.c    ****     return floor(n+0.5);
 1852               	.LM130:
 1853 08b6 20E0      		ldi r18,lo8(0x3f000000)
 1854 08b8 30E0      		ldi r19,hi8(0x3f000000)
 1855 08ba 40E0      		ldi r20,hlo8(0x3f000000)
 1856 08bc 5FE3      		ldi r21,hhi8(0x3f000000)
 1857 08be 6981      		ldd r22,Y+1
 1858 08c0 7A81      		ldd r23,Y+2
 1859 08c2 8B81      		ldd r24,Y+3
 1860 08c4 9C81      		ldd r25,Y+4
 1861 08c6 00D0      		rcall __addsf3
 1862 08c8 DC01      		movw r26,r24
 1863 08ca CB01      		movw r24,r22
 1864 08cc BC01      		movw r22,r24
 1865 08ce CD01      		movw r24,r26
 1866 08d0 00D0      		rcall floor
 1867 08d2 DC01      		movw r26,r24
 1868 08d4 CB01      		movw r24,r22
 1869 08d6 BC01      		movw r22,r24
 1870 08d8 CD01      		movw r24,r26
 1871 08da 00D0      		rcall __fixsfsi
 1872 08dc DC01      		movw r26,r24
 1873 08de CB01      		movw r24,r22
 1874               	/* epilogue: frame size=4 */
 1875 08e0 2496      		adiw r28,4
 1876 08e2 0FB6      		in __tmp_reg__,__SREG__
 1877 08e4 F894      		cli
 1878 08e6 DEBF      		out __SP_H__,r29
 1879 08e8 0FBE      		out __SREG__,__tmp_reg__
 1880 08ea CDBF      		out __SP_L__,r28
 1881 08ec DF91      		pop r29
 1882 08ee CF91      		pop r28
 1883 08f0 0895      		ret
 1884               	/* epilogue end (size=9) */
 1885               	/* function roundp size 44 (25) */
 1887               	.Lscope15:
 1890               	.global	show_percent
 1892               	show_percent:
 221:ledmeter.c    **** }
 222:ledmeter.c    **** 
 223:ledmeter.c    **** // roundp = round for positive number
 224:ledmeter.c    **** void show_percent(double p) {
 1894               	.LM131:
 1895               	/* prologue: frame size=6 */
 1896 08f2 CF93      		push r28
 1897 08f4 DF93      		push r29
 1898 08f6 CDB7      		in r28,__SP_L__
 1899 08f8 DEB7      		in r29,__SP_H__
 1900 08fa 2697      		sbiw r28,6
 1901 08fc 0FB6      		in __tmp_reg__,__SREG__
 1902 08fe F894      		cli
 1903 0900 DEBF      		out __SP_H__,r29
 1904 0902 0FBE      		out __SREG__,__tmp_reg__
 1905 0904 CDBF      		out __SP_L__,r28
 1906               	/* prologue end (size=10) */
 1907 0906 6983      		std Y+1,r22
 1908 0908 7A83      		std Y+2,r23
 1909 090a 8B83      		std Y+3,r24
 1910 090c 9C83      		std Y+4,r25
 225:ledmeter.c    ****     // p pourcent
 226:ledmeter.c    ****     int n;
 227:ledmeter.c    ****     //n = 4;
 228:ledmeter.c    ****     n = roundp(p / 100.0 * Nleds); // TO FIX (math.h ceil floor ... round en Java !)
 1912               	.LM132:
 1913 090e 20E0      		ldi r18,lo8(0x42c80000)
 1914 0910 30E0      		ldi r19,hi8(0x42c80000)
 1915 0912 48EC      		ldi r20,hlo8(0x42c80000)
 1916 0914 52E4      		ldi r21,hhi8(0x42c80000)
 1917 0916 6981      		ldd r22,Y+1
 1918 0918 7A81      		ldd r23,Y+2
 1919 091a 8B81      		ldd r24,Y+3
 1920 091c 9C81      		ldd r25,Y+4
 1921 091e 00D0      		rcall __divsf3
 1922 0920 DC01      		movw r26,r24
 1923 0922 CB01      		movw r24,r22
 1924 0924 20E0      		ldi r18,lo8(0x41000000)
 1925 0926 30E0      		ldi r19,hi8(0x41000000)
 1926 0928 40E0      		ldi r20,hlo8(0x41000000)
 1927 092a 51E4      		ldi r21,hhi8(0x41000000)
 1928 092c BC01      		movw r22,r24
 1929 092e CD01      		movw r24,r26
 1930 0930 00D0      		rcall __mulsf3
 1931 0932 DC01      		movw r26,r24
 1932 0934 CB01      		movw r24,r22
 1933 0936 BC01      		movw r22,r24
 1934 0938 CD01      		movw r24,r26
 1935 093a AFDF      		rcall roundp
 1936 093c 9E83      		std Y+6,r25
 1937 093e 8D83      		std Y+5,r24
 229:ledmeter.c    ****     // TO FIX : +0.5 is a very dirty hack
 230:ledmeter.c    ****     switch_on_min_dels(n);
 1939               	.LM133:
 1940 0940 8D81      		ldd r24,Y+5
 1941 0942 9E81      		ldd r25,Y+6
 1942 0944 82DE      		rcall switch_on_min_dels
 1943               	/* epilogue: frame size=6 */
 1944 0946 2696      		adiw r28,6
 1945 0948 0FB6      		in __tmp_reg__,__SREG__
 1946 094a F894      		cli
 1947 094c DEBF      		out __SP_H__,r29
 1948 094e 0FBE      		out __SREG__,__tmp_reg__
 1949 0950 CDBF      		out __SP_L__,r28
 1950 0952 DF91      		pop r29
 1951 0954 CF91      		pop r28
 1952 0956 0895      		ret
 1953               	/* epilogue end (size=9) */
 1954               	/* function show_percent size 51 (32) */
 1959               	.Lscope16:
 1963               	.global	beep
 1965               	beep:
 231:ledmeter.c    **** }
 232:ledmeter.c    **** 
 233:ledmeter.c    **** /*
 234:ledmeter.c    ****  * send a sound (on or more beep(s))
 235:ledmeter.c    ****  */
 236:ledmeter.c    **** void beep(int n, double delay) {
 1967               	.LM134:
 1968               	/* prologue: frame size=20 */
 1969 0958 CF93      		push r28
 1970 095a DF93      		push r29
 1971 095c CDB7      		in r28,__SP_L__
 1972 095e DEB7      		in r29,__SP_H__
 1973 0960 6497      		sbiw r28,20
 1974 0962 0FB6      		in __tmp_reg__,__SREG__
 1975 0964 F894      		cli
 1976 0966 DEBF      		out __SP_H__,r29
 1977 0968 0FBE      		out __SREG__,__tmp_reg__
 1978 096a CDBF      		out __SP_L__,r28
 1979               	/* prologue end (size=10) */
 1980 096c 9A83      		std Y+2,r25
 1981 096e 8983      		std Y+1,r24
 1982 0970 4B83      		std Y+3,r20
 1983 0972 5C83      		std Y+4,r21
 1984 0974 6D83      		std Y+5,r22
 1985 0976 7E83      		std Y+6,r23
 237:ledmeter.c    ****     // TO DO
 238:ledmeter.c    ****     int i;
 239:ledmeter.c    ****     for(i = 1; i<=n; i++) {
 1987               	.LM135:
 1988 0978 81E0      		ldi r24,lo8(1)
 1989 097a 90E0      		ldi r25,hi8(1)
 1990 097c 9887      		std Y+8,r25
 1991 097e 8F83      		std Y+7,r24
 1992               	.L91:
 1994               	.LM136:
 1995 0980 2F81      		ldd r18,Y+7
 1996 0982 3885      		ldd r19,Y+8
 1997 0984 8981      		ldd r24,Y+1
 1998 0986 9A81      		ldd r25,Y+2
 1999 0988 8217      		cp r24,r18
 2000 098a 9307      		cpc r25,r19
 2001 098c 0CF4      		brge .+2
 2002 098e 56C0      		rjmp .L90
 240:ledmeter.c    ****         //TO DO : send a beep
 241:ledmeter.c    ****         if (n>1) {
 2004               	.LM137:
 2005 0990 8981      		ldd r24,Y+1
 2006 0992 9A81      		ldd r25,Y+2
 2007 0994 8230      		cpi r24,2
 2008 0996 9105      		cpc r25,__zero_reg__
 2009 0998 0CF4      		brge .+2
 2010 099a 4AC0      		rjmp .L93
 2011               	.LBB26:
 2013               	.Ltext13:
 2015               	.LM138:
 2016 099c 8B81      		ldd r24,Y+3
 2017 099e 9C81      		ldd r25,Y+4
 2018 09a0 AD81      		ldd r26,Y+5
 2019 09a2 BE81      		ldd r27,Y+6
 2020 09a4 8987      		std Y+9,r24
 2021 09a6 9A87      		std Y+10,r25
 2022 09a8 AB87      		std Y+11,r26
 2023 09aa BC87      		std Y+12,r27
 2024               	.LBB27:
 2026               	.LM139:
 2027 09ac 20E0      		ldi r18,lo8(0x437a0000)
 2028 09ae 30E0      		ldi r19,hi8(0x437a0000)
 2029 09b0 4AE7      		ldi r20,hlo8(0x437a0000)
 2030 09b2 53E4      		ldi r21,hhi8(0x437a0000)
 2031 09b4 6985      		ldd r22,Y+9
 2032 09b6 7A85      		ldd r23,Y+10
 2033 09b8 8B85      		ldd r24,Y+11
 2034 09ba 9C85      		ldd r25,Y+12
 2035 09bc 00D0      		rcall __mulsf3
 2036 09be DC01      		movw r26,r24
 2037 09c0 CB01      		movw r24,r22
 2038 09c2 8F87      		std Y+15,r24
 2039 09c4 988B      		std Y+16,r25
 2040 09c6 A98B      		std Y+17,r26
 2041 09c8 BA8B      		std Y+18,r27
 2043               	.LM140:
 2044 09ca 20E0      		ldi r18,lo8(0x3f800000)
 2045 09cc 30E0      		ldi r19,hi8(0x3f800000)
 2046 09ce 40E8      		ldi r20,hlo8(0x3f800000)
 2047 09d0 5FE3      		ldi r21,hhi8(0x3f800000)
 2048 09d2 6F85      		ldd r22,Y+15
 2049 09d4 7889      		ldd r23,Y+16
 2050 09d6 8989      		ldd r24,Y+17
 2051 09d8 9A89      		ldd r25,Y+18
 2052 09da 00D0      		rcall __ltsf2
 2053 09dc 8823      		tst r24
 2054 09de 0CF0      		brlt .L96
 2055 09e0 05C0      		rjmp .L95
 2056               	.L96:
 2058               	.LM141:
 2059 09e2 81E0      		ldi r24,lo8(1)
 2060 09e4 90E0      		ldi r25,hi8(1)
 2061 09e6 9E87      		std Y+14,r25
 2062 09e8 8D87      		std Y+13,r24
 2063 09ea 18C0      		rjmp .L97
 2064               	.L95:
 2066               	.LM142:
 2067 09ec 20E0      		ldi r18,lo8(0x477fff00)
 2068 09ee 3FEF      		ldi r19,hi8(0x477fff00)
 2069 09f0 4FE7      		ldi r20,hlo8(0x477fff00)
 2070 09f2 57E4      		ldi r21,hhi8(0x477fff00)
 2071 09f4 6F85      		ldd r22,Y+15
 2072 09f6 7889      		ldd r23,Y+16
 2073 09f8 8989      		ldd r24,Y+17
 2074 09fa 9A89      		ldd r25,Y+18
 2075 09fc 00D0      		rcall __gtsf2
 2076 09fe 1816      		cp __zero_reg__,r24
 2077 0a00 0CF0      		brlt .L99
 2078 0a02 03C0      		rjmp .L98
 2079               	.L99:
 2081               	.LM143:
 2082 0a04 1E86      		std Y+14,__zero_reg__
 2083 0a06 1D86      		std Y+13,__zero_reg__
 2084 0a08 09C0      		rjmp .L97
 2085               	.L98:
 2087               	.LM144:
 2088 0a0a 6F85      		ldd r22,Y+15
 2089 0a0c 7889      		ldd r23,Y+16
 2090 0a0e 8989      		ldd r24,Y+17
 2091 0a10 9A89      		ldd r25,Y+18
 2092 0a12 00D0      		rcall __fixunssfsi
 2093 0a14 DC01      		movw r26,r24
 2094 0a16 CB01      		movw r24,r22
 2095 0a18 9E87      		std Y+14,r25
 2096 0a1a 8D87      		std Y+13,r24
 2097               	.L97:
 2098               	.LBB28:
 2100               	.LM145:
 2101 0a1c 8D85      		ldd r24,Y+13
 2102 0a1e 9E85      		ldd r25,Y+14
 2103 0a20 9C8B      		std Y+20,r25
 2104 0a22 8B8B      		std Y+19,r24
 2105               	.LBB29:
 2107               	.LM146:
 2108 0a24 8B89      		ldd r24,Y+19
 2109 0a26 9C89      		ldd r25,Y+20
 2110               	/* #APP */
 2111 0a28 0197      		1: sbiw r24,1
 2112 0a2a F1F7      		brne 1b
 2113               	/* #NOAPP */
 2114 0a2c 9C8B      		std Y+20,r25
 2115 0a2e 8B8B      		std Y+19,r24
 2116               	.L93:
 2117               	.LBE29:
 2118               	.LBE28:
 2119               	.LBE27:
 2120               	.LBE26:
 2122               	.Ltext14:
 2124               	.LM147:
 2125 0a30 8F81      		ldd r24,Y+7
 2126 0a32 9885      		ldd r25,Y+8
 2127 0a34 0196      		adiw r24,1
 2128 0a36 9887      		std Y+8,r25
 2129 0a38 8F83      		std Y+7,r24
 2130 0a3a A2CF      		rjmp .L91
 2131               	.L90:
 2132               	/* epilogue: frame size=20 */
 2133 0a3c 6496      		adiw r28,20
 2134 0a3e 0FB6      		in __tmp_reg__,__SREG__
 2135 0a40 F894      		cli
 2136 0a42 DEBF      		out __SP_H__,r29
 2137 0a44 0FBE      		out __SREG__,__tmp_reg__
 2138 0a46 CDBF      		out __SP_L__,r28
 2139 0a48 DF91      		pop r29
 2140 0a4a CF91      		pop r28
 2141 0a4c 0895      		ret
 2142               	/* epilogue end (size=9) */
 2143               	/* function beep size 125 (106) */
 2158               	.Lscope17:
 2160               	.global	StartStopChronometer
 2162               	StartStopChronometer:
 242:ledmeter.c    ****             _delay_ms(delay);
 243:ledmeter.c    ****         }
 244:ledmeter.c    ****     }
 245:ledmeter.c    **** }
 246:ledmeter.c    **** 
 247:ledmeter.c    **** /*
 248:ledmeter.c    ****  * start or stop chronometer
 249:ledmeter.c    ****  */
 250:ledmeter.c    **** inline void StartStopChronometer() {
 2164               	.LM148:
 2165               	/* prologue: frame size=0 */
 2166 0a4e CF93      		push r28
 2167 0a50 DF93      		push r29
 2168 0a52 CDB7      		in r28,__SP_L__
 2169 0a54 DEB7      		in r29,__SP_H__
 2170               	/* prologue end (size=4) */
 251:ledmeter.c    ****     beep(1,100);
 2172               	.LM149:
 2173 0a56 40E0      		ldi r20,lo8(0x42c80000)
 2174 0a58 50E0      		ldi r21,hi8(0x42c80000)
 2175 0a5a 68EC      		ldi r22,hlo8(0x42c80000)
 2176 0a5c 72E4      		ldi r23,hhi8(0x42c80000)
 2177 0a5e 81E0      		ldi r24,lo8(1)
 2178 0a60 90E0      		ldi r25,hi8(1)
 2179 0a62 7ADF      		rcall beep
 252:ledmeter.c    ****     led_alarm(3,50);
 2181               	.LM150:
 2182 0a64 40E0      		ldi r20,lo8(0x42480000)
 2183 0a66 50E0      		ldi r21,hi8(0x42480000)
 2184 0a68 68E4      		ldi r22,hlo8(0x42480000)
 2185 0a6a 72E4      		ldi r23,hhi8(0x42480000)
 2186 0a6c 83E0      		ldi r24,lo8(3)
 2187 0a6e 90E0      		ldi r25,hi8(3)
 2188 0a70 53DE      		rcall led_alarm
 253:ledmeter.c    ****     if (running_chronometer) {
 2190               	.LM151:
 2191 0a72 8091 0000 		lds r24,running_chronometer
 2192 0a76 9091 0000 		lds r25,(running_chronometer)+1
 2193 0a7a 0097      		sbiw r24,0
 2194 0a7c 29F0      		breq .L104
 254:ledmeter.c    ****        running_chronometer = FALSE; // false = 0
 2196               	.LM152:
 2197 0a7e 1092 0000 		sts (running_chronometer)+1,__zero_reg__
 2198 0a82 1092 0000 		sts running_chronometer,__zero_reg__
 2199 0a86 06C0      		rjmp .L103
 2200               	.L104:
 255:ledmeter.c    ****     } else {
 256:ledmeter.c    ****        running_chronometer = TRUE; // true = -1
 2202               	.LM153:
 2203 0a88 8FEF      		ldi r24,lo8(-1)
 2204 0a8a 9FEF      		ldi r25,hi8(-1)
 2205 0a8c 9093 0000 		sts (running_chronometer)+1,r25
 2206 0a90 8093 0000 		sts running_chronometer,r24
 2207               	.L103:
 2208               	/* epilogue: frame size=0 */
 2209 0a94 DF91      		pop r29
 2210 0a96 CF91      		pop r28
 2211 0a98 0895      		ret
 2212               	/* epilogue end (size=3) */
 2213               	/* function StartStopChronometer size 38 (31) */
 2215               	.Lscope18:
 2217               	.global	TestRunningChronometer
 2219               	TestRunningChronometer:
 257:ledmeter.c    ****     }
 258:ledmeter.c    **** }
 259:ledmeter.c    **** 
 260:ledmeter.c    **** void TestRunningChronometer() {
 2221               	.LM154:
 2222               	/* prologue: frame size=12 */
 2223 0a9a CF93      		push r28
 2224 0a9c DF93      		push r29
 2225 0a9e CDB7      		in r28,__SP_L__
 2226 0aa0 DEB7      		in r29,__SP_H__
 2227 0aa2 2C97      		sbiw r28,12
 2228 0aa4 0FB6      		in __tmp_reg__,__SREG__
 2229 0aa6 F894      		cli
 2230 0aa8 DEBF      		out __SP_H__,r29
 2231 0aaa 0FBE      		out __SREG__,__tmp_reg__
 2232 0aac CDBF      		out __SP_L__,r28
 2233               	/* prologue end (size=10) */
 261:ledmeter.c    ****     if (running_chronometer) {
 2235               	.LM155:
 2236 0aae 8091 0000 		lds r24,running_chronometer
 2237 0ab2 9091 0000 		lds r25,(running_chronometer)+1
 2238 0ab6 0097      		sbiw r24,0
 2239 0ab8 09F4      		brne .+2
 2240 0aba 9AC0      		rjmp .L106
 262:ledmeter.c    ****         switch_on_led(8);
 2242               	.LM156:
 2243 0abc 88E0      		ldi r24,lo8(8)
 2244 0abe 90E0      		ldi r25,hi8(8)
 2245 0ac0 20DC      		rcall switch_on_led
 2246               	.LBB30:
 2248               	.Ltext15:
 2250               	.LM157:
 2251 0ac2 80E0      		ldi r24,lo8(0x42c80000)
 2252 0ac4 90E0      		ldi r25,hi8(0x42c80000)
 2253 0ac6 A8EC      		ldi r26,hlo8(0x42c80000)
 2254 0ac8 B2E4      		ldi r27,hhi8(0x42c80000)
 2255 0aca 8983      		std Y+1,r24
 2256 0acc 9A83      		std Y+2,r25
 2257 0ace AB83      		std Y+3,r26
 2258 0ad0 BC83      		std Y+4,r27
 2259               	.LBB31:
 2261               	.LM158:
 2262 0ad2 20E0      		ldi r18,lo8(0x437a0000)
 2263 0ad4 30E0      		ldi r19,hi8(0x437a0000)
 2264 0ad6 4AE7      		ldi r20,hlo8(0x437a0000)
 2265 0ad8 53E4      		ldi r21,hhi8(0x437a0000)
 2266 0ada 6981      		ldd r22,Y+1
 2267 0adc 7A81      		ldd r23,Y+2
 2268 0ade 8B81      		ldd r24,Y+3
 2269 0ae0 9C81      		ldd r25,Y+4
 2270 0ae2 00D0      		rcall __mulsf3
 2271 0ae4 DC01      		movw r26,r24
 2272 0ae6 CB01      		movw r24,r22
 2273 0ae8 8F83      		std Y+7,r24
 2274 0aea 9887      		std Y+8,r25
 2275 0aec A987      		std Y+9,r26
 2276 0aee BA87      		std Y+10,r27
 2278               	.LM159:
 2279 0af0 20E0      		ldi r18,lo8(0x3f800000)
 2280 0af2 30E0      		ldi r19,hi8(0x3f800000)
 2281 0af4 40E8      		ldi r20,hlo8(0x3f800000)
 2282 0af6 5FE3      		ldi r21,hhi8(0x3f800000)
 2283 0af8 6F81      		ldd r22,Y+7
 2284 0afa 7885      		ldd r23,Y+8
 2285 0afc 8985      		ldd r24,Y+9
 2286 0afe 9A85      		ldd r25,Y+10
 2287 0b00 00D0      		rcall __ltsf2
 2288 0b02 8823      		tst r24
 2289 0b04 0CF0      		brlt .L109
 2290 0b06 05C0      		rjmp .L108
 2291               	.L109:
 2293               	.LM160:
 2294 0b08 81E0      		ldi r24,lo8(1)
 2295 0b0a 90E0      		ldi r25,hi8(1)
 2296 0b0c 9E83      		std Y+6,r25
 2297 0b0e 8D83      		std Y+5,r24
 2298 0b10 18C0      		rjmp .L110
 2299               	.L108:
 2301               	.LM161:
 2302 0b12 20E0      		ldi r18,lo8(0x477fff00)
 2303 0b14 3FEF      		ldi r19,hi8(0x477fff00)
 2304 0b16 4FE7      		ldi r20,hlo8(0x477fff00)
 2305 0b18 57E4      		ldi r21,hhi8(0x477fff00)
 2306 0b1a 6F81      		ldd r22,Y+7
 2307 0b1c 7885      		ldd r23,Y+8
 2308 0b1e 8985      		ldd r24,Y+9
 2309 0b20 9A85      		ldd r25,Y+10
 2310 0b22 00D0      		rcall __gtsf2
 2311 0b24 1816      		cp __zero_reg__,r24
 2312 0b26 0CF0      		brlt .L112
 2313 0b28 03C0      		rjmp .L111
 2314               	.L112:
 2316               	.LM162:
 2317 0b2a 1E82      		std Y+6,__zero_reg__
 2318 0b2c 1D82      		std Y+5,__zero_reg__
 2319 0b2e 09C0      		rjmp .L110
 2320               	.L111:
 2322               	.LM163:
 2323 0b30 6F81      		ldd r22,Y+7
 2324 0b32 7885      		ldd r23,Y+8
 2325 0b34 8985      		ldd r24,Y+9
 2326 0b36 9A85      		ldd r25,Y+10
 2327 0b38 00D0      		rcall __fixunssfsi
 2328 0b3a DC01      		movw r26,r24
 2329 0b3c CB01      		movw r24,r22
 2330 0b3e 9E83      		std Y+6,r25
 2331 0b40 8D83      		std Y+5,r24
 2332               	.L110:
 2333               	.LBB32:
 2335               	.LM164:
 2336 0b42 8D81      		ldd r24,Y+5
 2337 0b44 9E81      		ldd r25,Y+6
 2338 0b46 9C87      		std Y+12,r25
 2339 0b48 8B87      		std Y+11,r24
 2340               	.LBB33:
 2342               	.LM165:
 2343 0b4a 8B85      		ldd r24,Y+11
 2344 0b4c 9C85      		ldd r25,Y+12
 2345               	/* #APP */
 2346 0b4e 0197      		1: sbiw r24,1
 2347 0b50 F1F7      		brne 1b
 2348               	/* #NOAPP */
 2349 0b52 9C87      		std Y+12,r25
 2350 0b54 8B87      		std Y+11,r24
 2351               	.LBE33:
 2352               	.LBE32:
 2353               	.LBE31:
 2354               	.LBE30:
 2356               	.Ltext16:
 263:ledmeter.c    ****         _delay_ms(100);
 264:ledmeter.c    ****         switch_off_led(8);
 2358               	.LM166:
 2359 0b56 88E0      		ldi r24,lo8(8)
 2360 0b58 90E0      		ldi r25,hi8(8)
 2361 0b5a FFDB      		rcall switch_off_led
 2362               	.LBB34:
 2364               	.Ltext17:
 2366               	.LM167:
 2367 0b5c 80E0      		ldi r24,lo8(0x42c80000)
 2368 0b5e 90E0      		ldi r25,hi8(0x42c80000)
 2369 0b60 A8EC      		ldi r26,hlo8(0x42c80000)
 2370 0b62 B2E4      		ldi r27,hhi8(0x42c80000)
 2371 0b64 8F83      		std Y+7,r24
 2372 0b66 9887      		std Y+8,r25
 2373 0b68 A987      		std Y+9,r26
 2374 0b6a BA87      		std Y+10,r27
 2375               	.LBB35:
 2377               	.LM168:
 2378 0b6c 20E0      		ldi r18,lo8(0x437a0000)
 2379 0b6e 30E0      		ldi r19,hi8(0x437a0000)
 2380 0b70 4AE7      		ldi r20,hlo8(0x437a0000)
 2381 0b72 53E4      		ldi r21,hhi8(0x437a0000)
 2382 0b74 6F81      		ldd r22,Y+7
 2383 0b76 7885      		ldd r23,Y+8
 2384 0b78 8985      		ldd r24,Y+9
 2385 0b7a 9A85      		ldd r25,Y+10
 2386 0b7c 00D0      		rcall __mulsf3
 2387 0b7e DC01      		movw r26,r24
 2388 0b80 CB01      		movw r24,r22
 2389 0b82 8983      		std Y+1,r24
 2390 0b84 9A83      		std Y+2,r25
 2391 0b86 AB83      		std Y+3,r26
 2392 0b88 BC83      		std Y+4,r27
 2394               	.LM169:
 2395 0b8a 20E0      		ldi r18,lo8(0x3f800000)
 2396 0b8c 30E0      		ldi r19,hi8(0x3f800000)
 2397 0b8e 40E8      		ldi r20,hlo8(0x3f800000)
 2398 0b90 5FE3      		ldi r21,hhi8(0x3f800000)
 2399 0b92 6981      		ldd r22,Y+1
 2400 0b94 7A81      		ldd r23,Y+2
 2401 0b96 8B81      		ldd r24,Y+3
 2402 0b98 9C81      		ldd r25,Y+4
 2403 0b9a 00D0      		rcall __ltsf2
 2404 0b9c 8823      		tst r24
 2405 0b9e 0CF0      		brlt .L117
 2406 0ba0 05C0      		rjmp .L116
 2407               	.L117:
 2409               	.LM170:
 2410 0ba2 81E0      		ldi r24,lo8(1)
 2411 0ba4 90E0      		ldi r25,hi8(1)
 2412 0ba6 9C87      		std Y+12,r25
 2413 0ba8 8B87      		std Y+11,r24
 2414 0baa 18C0      		rjmp .L118
 2415               	.L116:
 2417               	.LM171:
 2418 0bac 20E0      		ldi r18,lo8(0x477fff00)
 2419 0bae 3FEF      		ldi r19,hi8(0x477fff00)
 2420 0bb0 4FE7      		ldi r20,hlo8(0x477fff00)
 2421 0bb2 57E4      		ldi r21,hhi8(0x477fff00)
 2422 0bb4 6981      		ldd r22,Y+1
 2423 0bb6 7A81      		ldd r23,Y+2
 2424 0bb8 8B81      		ldd r24,Y+3
 2425 0bba 9C81      		ldd r25,Y+4
 2426 0bbc 00D0      		rcall __gtsf2
 2427 0bbe 1816      		cp __zero_reg__,r24
 2428 0bc0 0CF0      		brlt .L120
 2429 0bc2 03C0      		rjmp .L119
 2430               	.L120:
 2432               	.LM172:
 2433 0bc4 1C86      		std Y+12,__zero_reg__
 2434 0bc6 1B86      		std Y+11,__zero_reg__
 2435 0bc8 09C0      		rjmp .L118
 2436               	.L119:
 2438               	.LM173:
 2439 0bca 6981      		ldd r22,Y+1
 2440 0bcc 7A81      		ldd r23,Y+2
 2441 0bce 8B81      		ldd r24,Y+3
 2442 0bd0 9C81      		ldd r25,Y+4
 2443 0bd2 00D0      		rcall __fixunssfsi
 2444 0bd4 DC01      		movw r26,r24
 2445 0bd6 CB01      		movw r24,r22
 2446 0bd8 9C87      		std Y+12,r25
 2447 0bda 8B87      		std Y+11,r24
 2448               	.L118:
 2449               	.LBB36:
 2451               	.LM174:
 2452 0bdc 8B85      		ldd r24,Y+11
 2453 0bde 9C85      		ldd r25,Y+12
 2454 0be0 9E83      		std Y+6,r25
 2455 0be2 8D83      		std Y+5,r24
 2456               	.LBB37:
 2458               	.LM175:
 2459 0be4 8D81      		ldd r24,Y+5
 2460 0be6 9E81      		ldd r25,Y+6
 2461               	/* #APP */
 2462 0be8 0197      		1: sbiw r24,1
 2463 0bea F1F7      		brne 1b
 2464               	/* #NOAPP */
 2465 0bec 9E83      		std Y+6,r25
 2466 0bee 8D83      		std Y+5,r24
 2467               	.L106:
 2468               	.LBE37:
 2469               	.LBE36:
 2470               	.LBE35:
 2471               	.LBE34:
 2472               	/* epilogue: frame size=12 */
 2473 0bf0 2C96      		adiw r28,12
 2474 0bf2 0FB6      		in __tmp_reg__,__SREG__
 2475 0bf4 F894      		cli
 2476 0bf6 DEBF      		out __SP_H__,r29
 2477 0bf8 0FBE      		out __SREG__,__tmp_reg__
 2478 0bfa CDBF      		out __SP_L__,r28
 2479 0bfc DF91      		pop r29
 2480 0bfe CF91      		pop r28
 2481 0c00 0895      		ret
 2482               	/* epilogue end (size=9) */
 2483               	/* function TestRunningChronometer size 184 (165) */
 2505               	.Lscope19:
 2507               	.global	init
 2509               	init:
 2511               	.Ltext18:
 265:ledmeter.c    ****         _delay_ms(100);
 266:ledmeter.c    ****     }
 267:ledmeter.c    **** }
 268:ledmeter.c    **** 
 269:ledmeter.c    **** 
 270:ledmeter.c    **** /*
 271:ledmeter.c    ****  *  init function
 272:ledmeter.c    ****  */
 273:ledmeter.c    **** void init() {
 2513               	.LM176:
 2514               	/* prologue: frame size=2 */
 2515 0c02 CF93      		push r28
 2516 0c04 DF93      		push r29
 2517 0c06 CDB7      		in r28,__SP_L__
 2518 0c08 DEB7      		in r29,__SP_H__
 2519 0c0a 2297      		sbiw r28,2
 2520 0c0c 0FB6      		in __tmp_reg__,__SREG__
 2521 0c0e F894      		cli
 2522 0c10 DEBF      		out __SP_H__,r29
 2523 0c12 0FBE      		out __SREG__,__tmp_reg__
 2524 0c14 CDBF      		out __SP_L__,r28
 2525               	/* prologue end (size=10) */
 274:ledmeter.c    ****    // ******************
 275:ledmeter.c    ****    // * WatchDog Timer *
 276:ledmeter.c    ****    // ******************
 277:ledmeter.c    **** 
 278:ledmeter.c    **** 
 279:ledmeter.c    ****    // ********
 280:ledmeter.c    ****    // * LEDs *
 281:ledmeter.c    ****    // ********
 282:ledmeter.c    ****    DDRC=0xFF; // set up PORTD pins 0 to 7 as output
 2527               	.LM177:
 2528 0c16 8FEF      		ldi r24,lo8(-1)
 2529 0c18 8093 3400 		sts 52,r24
 283:ledmeter.c    ****    //switch_on_all_leds();
 284:ledmeter.c    ****    switch_off_all_leds();
 2531               	.LM178:
 2532 0c1c 68DB      		rcall switch_off_all_leds
 285:ledmeter.c    **** 
 286:ledmeter.c    ****    // *********************************
 287:ledmeter.c    ****    // * Start/Stop chronometer (INT0) *
 288:ledmeter.c    ****    // *********************************
 289:ledmeter.c    ****    // Set Pin 6 (PD2) as the pin to use for this example
 290:ledmeter.c    ****    //PCMSK |= (1<<PIND2); // TO FIX
 291:ledmeter.c    ****    //PIND |= (1<<PIND2); // try scls:Error : read-only !!!
 292:ledmeter.c    **** 
 293:ledmeter.c    ****    // interrupt on INT0 pin falling edge (sensor triggered)
 294:ledmeter.c    ****    MCUCR = (1<<ISC01) | (1<<ISC00);
 2534               	.LM179:
 2535 0c1e 83E0      		ldi r24,lo8(3)
 2536 0c20 8093 5500 		sts 85,r24
 295:ledmeter.c    **** 
 296:ledmeter.c    ****    // turn on interrupts!
 297:ledmeter.c    **** 
 298:ledmeter.c    ****    GICR |= (1<<INT0); //INT0
 2538               	.LM180:
 2539 0c24 8091 5B00 		lds r24,91
 2540 0c28 8064      		ori r24,lo8(64)
 2541 0c2a 8093 5B00 		sts 91,r24
 299:ledmeter.c    **** 
 300:ledmeter.c    ****    sei(); // enable interrupts
 2543               	.LM181:
 2544               	/* #APP */
 2545 0c2e 7894      		sei
 301:ledmeter.c    **** 
 302:ledmeter.c    ****    // *************************************************
 303:ledmeter.c    ****    // * Conv Analog to Digital (CAN for RPM and Temp) *
 304:ledmeter.c    ****    // *************************************************
 305:ledmeter.c    **** 
 306:ledmeter.c    ****    //volatile static int analog_result;
 307:ledmeter.c    ****    //volatile static unsigned char analog_busy;
 308:ledmeter.c    **** 
 309:ledmeter.c    ****    //analog_busy=1; // busy mark the ADC function
 310:ledmeter.c    ****    int channel = 0; // measure ADC0
 2547               	.LM182:
 2548               	/* #NOAPP */
 2549 0c30 1A82      		std Y+2,__zero_reg__
 2550 0c32 1982      		std Y+1,__zero_reg__
 311:ledmeter.c    **** 
 312:ledmeter.c    ****    // use internal 2.56V ref  REFS1=1 & REFS0=1 (11)
 313:ledmeter.c    ****    // use external ref (01)
 314:ledmeter.c    ****    ADMUX=(0<<REFS1)|(1<<REFS0)|(channel & 0x07); // channel & 0x07
 2552               	.LM183:
 2553 0c34 8981      		ldd r24,Y+1
 2554 0c36 8770      		andi r24,lo8(7)
 2555 0c38 8064      		ori r24,lo8(64)
 2556 0c3a 8093 2700 		sts 39,r24
 315:ledmeter.c    **** 
 316:ledmeter.c    ****    //ADCSRA=(1<<ADEN)|(1<<ADIE)|(1<<ADIF)|(1<<ADPS2); // interrupt ADIE=1
 317:ledmeter.c    ****    ADCSRA=(1<<ADEN)|(0<<ADIE)|(1<<ADIF)|(1<<ADPS2); // no interrupt ADIE=0
 2558               	.LM184:
 2559 0c3e 84E9      		ldi r24,lo8(-108)
 2560 0c40 8093 2600 		sts 38,r24
 318:ledmeter.c    **** 
 319:ledmeter.c    ****    ADCSRA |= (1 << (ADSC)); // start conversion
 2562               	.LM185:
 2563 0c44 8091 2600 		lds r24,38
 2564 0c48 8064      		ori r24,lo8(64)
 2565 0c4a 8093 2600 		sts 38,r24
 320:ledmeter.c    **** 
 321:ledmeter.c    ****    DDRA=0x00;
 2567               	.LM186:
 2568 0c4e 1092 3A00 		sts 58,__zero_reg__
 322:ledmeter.c    **** 	// make sure pull-up resistors are turned off
 323:ledmeter.c    **** 	PORTA = 0x00;
 2570               	.LM187:
 2571 0c52 1092 3B00 		sts 59,__zero_reg__
 324:ledmeter.c    **** 	
 325:ledmeter.c    **** 
 326:ledmeter.c    ****    // **********
 327:ledmeter.c    ****    // * Keypad *
 328:ledmeter.c    ****    // **********
 329:ledmeter.c    ****    // 1 joystick button (4 directions, up, down, left, right)
 330:ledmeter.c    ****    // 2 push buttons (ok, cancel)
 331:ledmeter.c    ****    DDRB=0x00;
 2573               	.LM188:
 2574 0c56 1092 3700 		sts 55,__zero_reg__
 332:ledmeter.c    ****    PORTB=0xFF;
 2576               	.LM189:
 2577 0c5a 8FEF      		ldi r24,lo8(-1)
 2578 0c5c 8093 3800 		sts 56,r24
 333:ledmeter.c    **** 
 334:ledmeter.c    ****    // ***************
 335:ledmeter.c    ****    // * Graphic LCD *
 336:ledmeter.c    ****    // ***************
 337:ledmeter.c    **** 
 338:ledmeter.c    ****    // Sound
 339:ledmeter.c    ****    beep(3,300);
 2580               	.LM190:
 2581 0c60 40E0      		ldi r20,lo8(0x43960000)
 2582 0c62 50E0      		ldi r21,hi8(0x43960000)
 2583 0c64 66E9      		ldi r22,hlo8(0x43960000)
 2584 0c66 73E4      		ldi r23,hhi8(0x43960000)
 2585 0c68 83E0      		ldi r24,lo8(3)
 2586 0c6a 90E0      		ldi r25,hi8(3)
 2587 0c6c 75DE      		rcall beep
 340:ledmeter.c    **** 
 341:ledmeter.c    ****    // Time
 342:ledmeter.c    ****    running_chronometer = FALSE;
 2589               	.LM191:
 2590 0c6e 1092 0000 		sts (running_chronometer)+1,__zero_reg__
 2591 0c72 1092 0000 		sts running_chronometer,__zero_reg__
 343:ledmeter.c    ****    init_time(&current_time);
 2593               	.LM192:
 2594 0c76 80E0      		ldi r24,lo8(current_time)
 2595 0c78 90E0      		ldi r25,hi8(current_time)
 2596 0c7a C2D9      		rcall init_time
 344:ledmeter.c    ****    init_time(&last_time);
 2598               	.LM193:
 2599 0c7c 80E0      		ldi r24,lo8(last_time)
 2600 0c7e 90E0      		ldi r25,hi8(last_time)
 2601 0c80 BFD9      		rcall init_time
 345:ledmeter.c    ****    init_time(&best_time);
 2603               	.LM194:
 2604 0c82 80E0      		ldi r24,lo8(best_time)
 2605 0c84 90E0      		ldi r25,hi8(best_time)
 2606 0c86 BCD9      		rcall init_time
 2607               	/* epilogue: frame size=2 */
 2608 0c88 2296      		adiw r28,2
 2609 0c8a 0FB6      		in __tmp_reg__,__SREG__
 2610 0c8c F894      		cli
 2611 0c8e DEBF      		out __SP_H__,r29
 2612 0c90 0FBE      		out __SREG__,__tmp_reg__
 2613 0c92 CDBF      		out __SP_L__,r28
 2614 0c94 DF91      		pop r29
 2615 0c96 CF91      		pop r28
 2616 0c98 0895      		ret
 2617               	/* epilogue end (size=9) */
 2618               	/* function init size 77 (58) */
 2623               	.Lscope20:
 2626               	.global	adcConvert10bit
 2628               	adcConvert10bit:
 346:ledmeter.c    **** 
 347:ledmeter.c    **** }
 348:ledmeter.c    **** 
 349:ledmeter.c    **** /*
 350:ledmeter.c    ****  * convert from analog to digital (10 bits)
 351:ledmeter.c    ****  */
 352:ledmeter.c    **** unsigned short adcConvert10bit(unsigned char ch)
 353:ledmeter.c    **** {
 2630               	.LM195:
 2631               	/* prologue: frame size=1 */
 2632 0c9a CF93      		push r28
 2633 0c9c DF93      		push r29
 2634 0c9e CDB7      		in r28,__SP_L__
 2635 0ca0 DEB7      		in r29,__SP_H__
 2636 0ca2 2197      		sbiw r28,1
 2637 0ca4 0FB6      		in __tmp_reg__,__SREG__
 2638 0ca6 F894      		cli
 2639 0ca8 DEBF      		out __SP_H__,r29
 2640 0caa 0FBE      		out __SREG__,__tmp_reg__
 2641 0cac CDBF      		out __SP_L__,r28
 2642               	/* prologue end (size=10) */
 2643 0cae 8983      		std Y+1,r24
 354:ledmeter.c    **** 	//a2dCompleteFlag = 0;				// clear conversion complete flag
 355:ledmeter.c    **** 	ADMUX = ((ADMUX) & ~0x1F) | (ch & 0x1F);	// set channel ADC_MUX_MASK=0x1F
 2645               	.LM196:
 2646 0cb0 8091 2700 		lds r24,39
 2647 0cb4 982F      		mov r25,r24
 2648 0cb6 907E      		andi r25,lo8(-32)
 2649 0cb8 8981      		ldd r24,Y+1
 2650 0cba 8F71      		andi r24,lo8(31)
 2651 0cbc 892B      		or r24,r25
 2652 0cbe 8093 2700 		sts 39,r24
 356:ledmeter.c    **** 	ADCSRA |= (_BV(ADIF)); // clear hardware "conversion complete" flag
 2654               	.LM197:
 2655 0cc2 8091 2600 		lds r24,38
 2656 0cc6 8061      		ori r24,lo8(16)
 2657 0cc8 8093 2600 		sts 38,r24
 357:ledmeter.c    **** 	ADCSRA |= (_BV(ADSC)); // start conversion
 2659               	.LM198:
 2660 0ccc 8091 2600 		lds r24,38
 2661 0cd0 8064      		ori r24,lo8(64)
 2662 0cd2 8093 2600 		sts 38,r24
 2663               	.L126:
 358:ledmeter.c    **** 							
 359:ledmeter.c    **** 	//while(!a2dCompleteFlag);				// wait until conversion complete
 360:ledmeter.c    **** 	//while( bit_is_clear(ADCSR, ADIF) );		// wait until conversion complete
 361:ledmeter.c    **** 	while( bit_is_set(ADCSRA, ADSC) );		// wait until conversion complete
 2665               	.LM199:
 2666 0cd6 8091 2600 		lds r24,38
 2667 0cda 9927      		clr r25
 2668 0cdc 8074      		andi r24,lo8(64)
 2669 0cde 9070      		andi r25,hi8(64)
 2670 0ce0 0097      		sbiw r24,0
 2671 0ce2 09F0      		breq .L127
 2672 0ce4 F8CF      		rjmp .L126
 2673               	.L127:
 362:ledmeter.c    **** 
 363:ledmeter.c    **** 	// CAUTION: MUST READ ADCL BEFORE ADCH!!!
 364:ledmeter.c    **** 	return ((ADCL) | ((ADCH)<<8));	// read ADC (full 10 bits);
 2675               	.LM200:
 2676 0ce6 8091 2400 		lds r24,36
 2677 0cea 282F      		mov r18,r24
 2678 0cec 3327      		clr r19
 2679 0cee 8091 2500 		lds r24,37
 2680 0cf2 9927      		clr r25
 2681 0cf4 982F      		mov r25,r24
 2682 0cf6 8827      		clr r24
 2683 0cf8 282B      		or r18,r24
 2684 0cfa 392B      		or r19,r25
 2685 0cfc C901      		movw r24,r18
 2686               	/* epilogue: frame size=1 */
 2687 0cfe 2196      		adiw r28,1
 2688 0d00 0FB6      		in __tmp_reg__,__SREG__
 2689 0d02 F894      		cli
 2690 0d04 DEBF      		out __SP_H__,r29
 2691 0d06 0FBE      		out __SREG__,__tmp_reg__
 2692 0d08 CDBF      		out __SP_L__,r28
 2693 0d0a DF91      		pop r29
 2694 0d0c CF91      		pop r28
 2695 0d0e 0895      		ret
 2696               	/* epilogue end (size=9) */
 2697               	/* function adcConvert10bit size 59 (40) */
 2699               	.Lscope21:
 2702               	.global	adcConvert8bit
 2704               	adcConvert8bit:
 365:ledmeter.c    **** }
 366:ledmeter.c    **** 
 367:ledmeter.c    **** /*
 368:ledmeter.c    ****  * convert from analog to digital (8 bits)
 369:ledmeter.c    ****  * starts conversion, waits until conversion is done, and returns result
 370:ledmeter.c    ****  */
 371:ledmeter.c    **** unsigned char adcConvert8bit(unsigned char ch)
 372:ledmeter.c    **** {
 2706               	.LM201:
 2707               	/* prologue: frame size=1 */
 2708 0d10 CF93      		push r28
 2709 0d12 DF93      		push r29
 2710 0d14 CDB7      		in r28,__SP_L__
 2711 0d16 DEB7      		in r29,__SP_H__
 2712 0d18 2197      		sbiw r28,1
 2713 0d1a 0FB6      		in __tmp_reg__,__SREG__
 2714 0d1c F894      		cli
 2715 0d1e DEBF      		out __SP_H__,r29
 2716 0d20 0FBE      		out __SREG__,__tmp_reg__
 2717 0d22 CDBF      		out __SP_L__,r28
 2718               	/* prologue end (size=10) */
 2719 0d24 8983      		std Y+1,r24
 373:ledmeter.c    **** 	// do 10-bit conversion and return highest 8 bits
 374:ledmeter.c    **** 	return adcConvert10bit(ch)>>2;			// return ADC MSB byte
 2721               	.LM202:
 2722 0d26 8981      		ldd r24,Y+1
 2723 0d28 B8DF      		rcall adcConvert10bit
 2724 0d2a 9695      		lsr r25
 2725 0d2c 8795      		ror r24
 2726 0d2e 9695      		lsr r25
 2727 0d30 8795      		ror r24
 2728 0d32 9927      		clr r25
 2729               	/* epilogue: frame size=1 */
 2730 0d34 2196      		adiw r28,1
 2731 0d36 0FB6      		in __tmp_reg__,__SREG__
 2732 0d38 F894      		cli
 2733 0d3a DEBF      		out __SP_H__,r29
 2734 0d3c 0FBE      		out __SREG__,__tmp_reg__
 2735 0d3e CDBF      		out __SP_L__,r28
 2736 0d40 DF91      		pop r29
 2737 0d42 CF91      		pop r28
 2738 0d44 0895      		ret
 2739               	/* epilogue end (size=9) */
 2740               	/* function adcConvert8bit size 27 (8) */
 2742               	.Lscope22:
 2744               	.global	SeekButtons
 2746               	SeekButtons:
 375:ledmeter.c    **** }
 376:ledmeter.c    **** 
 377:ledmeter.c    **** #define Nbuts 6
 378:ledmeter.c    **** #define B_LEFT 0
 379:ledmeter.c    **** #define B_RIGHT 1
 380:ledmeter.c    **** #define B_UP 2
 381:ledmeter.c    **** #define B_DOWN 3
 382:ledmeter.c    **** #define B_OK 4
 383:ledmeter.c    **** #define B_CANCEL 5
 384:ledmeter.c    **** 
 385:ledmeter.c    **** void SeekButtons(void) {
 2748               	.LM203:
 2749               	/* prologue: frame size=4 */
 2750 0d46 CF93      		push r28
 2751 0d48 DF93      		push r29
 2752 0d4a CDB7      		in r28,__SP_L__
 2753 0d4c DEB7      		in r29,__SP_H__
 2754 0d4e 2497      		sbiw r28,4
 2755 0d50 0FB6      		in __tmp_reg__,__SREG__
 2756 0d52 F894      		cli
 2757 0d54 DEBF      		out __SP_H__,r29
 2758 0d56 0FBE      		out __SREG__,__tmp_reg__
 2759 0d58 CDBF      		out __SP_L__,r28
 2760               	/* prologue end (size=10) */
 386:ledmeter.c    ****     int bstate = 0;
 2762               	.LM204:
 2763 0d5a 1A82      		std Y+2,__zero_reg__
 2764 0d5c 1982      		std Y+1,__zero_reg__
 387:ledmeter.c    ****     int i;
 388:ledmeter.c    **** 	 for (i=0; i<=Nbuts-1; i++) {
 2766               	.LM205:
 2767 0d5e 1C82      		std Y+4,__zero_reg__
 2768 0d60 1B82      		std Y+3,__zero_reg__
 2769               	.L130:
 2771               	.LM206:
 2772 0d62 8B81      		ldd r24,Y+3
 2773 0d64 9C81      		ldd r25,Y+4
 2774 0d66 8630      		cpi r24,6
 2775 0d68 9105      		cpc r25,__zero_reg__
 2776 0d6a 14F5      		brge .L129
 389:ledmeter.c    **** 	     if ( (PINB>>i) == 0 ) {
 2778               	.LM207:
 2779 0d6c 8091 3600 		lds r24,54
 2780 0d70 9927      		clr r25
 2781 0d72 0B80      		ldd r0,Y+3
 2782 0d74 02C0      		rjmp 2f
 2783 0d76 9595      	1:	asr r25
 2784 0d78 8795      		ror r24
 2785 0d7a 0A94      	2:	dec r0
 2786 0d7c E2F7      		brpl 1b
 2787 0d7e 0097      		sbiw r24,0
 2788 0d80 29F4      		brne .L133
 390:ledmeter.c    **** 	         bstate = TRUE;
 2790               	.LM208:
 2791 0d82 8FEF      		ldi r24,lo8(-1)
 2792 0d84 9FEF      		ldi r25,hi8(-1)
 2793 0d86 9A83      		std Y+2,r25
 2794 0d88 8983      		std Y+1,r24
 2795 0d8a 02C0      		rjmp .L134
 2796               	.L133:
 391:ledmeter.c    **** 	     } else {
 392:ledmeter.c    **** 	         bstate = FALSE;
 2798               	.LM209:
 2799 0d8c 1A82      		std Y+2,__zero_reg__
 2800 0d8e 1982      		std Y+1,__zero_reg__
 2801               	.L134:
 393:ledmeter.c    **** 	     }
 394:ledmeter.c    **** 		
 395:ledmeter.c    **** 	     if ( i==0 && bstate ) { // LEFT
 396:ledmeter.c    **** 
 397:ledmeter.c    **** 	     }
 398:ledmeter.c    **** 	     if ( i==1 && bstate ) { // RIGHT
 399:ledmeter.c    **** 
 400:ledmeter.c    **** 	     }
 401:ledmeter.c    **** 	     if ( i==2 && bstate ) { // UP
 402:ledmeter.c    **** 
 403:ledmeter.c    **** 	     }
 404:ledmeter.c    **** 	     if ( i==3 && bstate ) { // DOWN
 405:ledmeter.c    **** 
 406:ledmeter.c    **** 	     }
 407:ledmeter.c    **** 	     if ( i==4 && bstate ) { // OK
 2803               	.LM210:
 2804 0d90 8B81      		ldd r24,Y+3
 2805 0d92 9C81      		ldd r25,Y+4
 2806 0d94 8430      		cpi r24,4
 2807 0d96 9105      		cpc r25,__zero_reg__
 2808 0d98 29F4      		brne .L139
 2809 0d9a 8981      		ldd r24,Y+1
 2810 0d9c 9A81      		ldd r25,Y+2
 2811 0d9e 0097      		sbiw r24,0
 2812 0da0 09F0      		breq .L139
 408:ledmeter.c    ****             StartStopChronometer();
 2814               	.LM211:
 2815 0da2 55DE      		rcall StartStopChronometer
 2816               	.L139:
 2818               	.LM212:
 2819 0da4 8B81      		ldd r24,Y+3
 2820 0da6 9C81      		ldd r25,Y+4
 2821 0da8 0196      		adiw r24,1
 2822 0daa 9C83      		std Y+4,r25
 2823 0dac 8B83      		std Y+3,r24
 2824 0dae D9CF      		rjmp .L130
 2825               	.L129:
 2826               	/* epilogue: frame size=4 */
 2827 0db0 2496      		adiw r28,4
 2828 0db2 0FB6      		in __tmp_reg__,__SREG__
 2829 0db4 F894      		cli
 2830 0db6 DEBF      		out __SP_H__,r29
 2831 0db8 0FBE      		out __SREG__,__tmp_reg__
 2832 0dba CDBF      		out __SP_L__,r28
 2833 0dbc DF91      		pop r29
 2834 0dbe CF91      		pop r28
 2835 0dc0 0895      		ret
 2836               	/* epilogue end (size=9) */
 2837               	/* function SeekButtons size 62 (43) */
 2843               	.Lscope23:
 2845               	.global	loop
 2847               	loop:
 409:ledmeter.c    **** 	     }
 410:ledmeter.c    **** 	     if ( i==5 && bstate ) { // CANCEL
 411:ledmeter.c    **** 
 412:ledmeter.c    **** 	     }	     	     	     	
 413:ledmeter.c    **** 	}
 414:ledmeter.c    **** }
 415:ledmeter.c    **** 
 416:ledmeter.c    **** /*
 417:ledmeter.c    ****  *  this is the main loop
 418:ledmeter.c    ****  */
 419:ledmeter.c    **** void loop(void) {
 2849               	.LM213:
 2850               	/* prologue: frame size=8 */
 2851 0dc2 0F93      		push r16
 2852 0dc4 1F93      		push r17
 2853 0dc6 CF93      		push r28
 2854 0dc8 DF93      		push r29
 2855 0dca CDB7      		in r28,__SP_L__
 2856 0dcc DEB7      		in r29,__SP_H__
 2857 0dce 2897      		sbiw r28,8
 2858 0dd0 0FB6      		in __tmp_reg__,__SREG__
 2859 0dd2 F894      		cli
 2860 0dd4 DEBF      		out __SP_H__,r29
 2861 0dd6 0FBE      		out __SREG__,__tmp_reg__
 2862 0dd8 CDBF      		out __SP_L__,r28
 2863               	/* prologue end (size=12) */
 420:ledmeter.c    ****     SeekButtons();
 2865               	.LM214:
 2866 0dda B5DF      		rcall SeekButtons
 421:ledmeter.c    **** 
 422:ledmeter.c    ****     double ch0 = adcConvert10bit(0);
 2868               	.LM215:
 2869 0ddc 80E0      		ldi r24,lo8(0)
 2870 0dde 5DDF      		rcall adcConvert10bit
 2871 0de0 8C01      		movw r16,r24
 2872 0de2 C801      		movw r24,r16
 2873 0de4 AA27      		clr r26
 2874 0de6 97FD      		sbrc r25,7
 2875 0de8 A095      		com r26
 2876 0dea BA2F      		mov r27,r26
 2877 0dec BC01      		movw r22,r24
 2878 0dee CD01      		movw r24,r26
 2879 0df0 00D0      		rcall __floatsisf
 2880 0df2 6D83      		std Y+5,r22
 2881 0df4 7E83      		std Y+6,r23
 2882 0df6 8F83      		std Y+7,r24
 2883 0df8 9887      		std Y+8,r25
 2884 0dfa 1123      		tst r17
 2885 0dfc 7CF4      		brge .L142
 2887               	.LM216:
 2888 0dfe 20E0      		ldi r18,lo8(0x47800000)
 2889 0e00 30E0      		ldi r19,hi8(0x47800000)
 2890 0e02 40E8      		ldi r20,hlo8(0x47800000)
 2891 0e04 57E4      		ldi r21,hhi8(0x47800000)
 2892 0e06 6D81      		ldd r22,Y+5
 2893 0e08 7E81      		ldd r23,Y+6
 2894 0e0a 8F81      		ldd r24,Y+7
 2895 0e0c 9885      		ldd r25,Y+8
 2896 0e0e 00D0      		rcall __addsf3
 2897 0e10 DC01      		movw r26,r24
 2898 0e12 CB01      		movw r24,r22
 2899 0e14 8D83      		std Y+5,r24
 2900 0e16 9E83      		std Y+6,r25
 2901 0e18 AF83      		std Y+7,r26
 2902 0e1a B887      		std Y+8,r27
 2903               	.L142:
 2904 0e1c 8D81      		ldd r24,Y+5
 2905 0e1e 9E81      		ldd r25,Y+6
 2906 0e20 AF81      		ldd r26,Y+7
 2907 0e22 B885      		ldd r27,Y+8
 2908 0e24 8983      		std Y+1,r24
 2909 0e26 9A83      		std Y+2,r25
 2910 0e28 AB83      		std Y+3,r26
 2911 0e2a BC83      		std Y+4,r27
 423:ledmeter.c    ****     ch0 *= 0.09765625; // 0.09765625 = 100 / 2^10
 2913               	.LM217:
 2914 0e2c 20E0      		ldi r18,lo8(0x3dc80000)
 2915 0e2e 30E0      		ldi r19,hi8(0x3dc80000)
 2916 0e30 48EC      		ldi r20,hlo8(0x3dc80000)
 2917 0e32 5DE3      		ldi r21,hhi8(0x3dc80000)
 2918 0e34 6981      		ldd r22,Y+1
 2919 0e36 7A81      		ldd r23,Y+2
 2920 0e38 8B81      		ldd r24,Y+3
 2921 0e3a 9C81      		ldd r25,Y+4
 2922 0e3c 00D0      		rcall __mulsf3
 2923 0e3e DC01      		movw r26,r24
 2924 0e40 CB01      		movw r24,r22
 2925 0e42 8983      		std Y+1,r24
 2926 0e44 9A83      		std Y+2,r25
 2927 0e46 AB83      		std Y+3,r26
 2928 0e48 BC83      		std Y+4,r27
 424:ledmeter.c    ****     show_percent(ch0);
 2930               	.LM218:
 2931 0e4a 6981      		ldd r22,Y+1
 2932 0e4c 7A81      		ldd r23,Y+2
 2933 0e4e 8B81      		ldd r24,Y+3
 2934 0e50 9C81      		ldd r25,Y+4
 2935 0e52 4FDD      		rcall show_percent
 425:ledmeter.c    **** 
 426:ledmeter.c    **** /*
 427:ledmeter.c    ****     _delay_ms(500);
 428:ledmeter.c    **** 
 429:ledmeter.c    ****     double ch1 = adcConvert10bit(1);
 430:ledmeter.c    ****     ch1 *= 0.09765625; // 0.09765625 = 100 / 2^10
 431:ledmeter.c    ****     show_percent(ch1);
 432:ledmeter.c    **** 
 433:ledmeter.c    ****     _delay_ms(500);
 434:ledmeter.c    **** */
 435:ledmeter.c    **** 
 436:ledmeter.c    ****     TestRunningChronometer();
 2937               	.LM219:
 2938 0e54 22DE      		rcall TestRunningChronometer
 437:ledmeter.c    **** 
 438:ledmeter.c    ****     inc_time(&current_time);
 2940               	.LM220:
 2941 0e56 80E0      		ldi r24,lo8(current_time)
 2942 0e58 90E0      		ldi r25,hi8(current_time)
 2943 0e5a 84D9      		rcall inc_time
 2944               	/* epilogue: frame size=8 */
 2945 0e5c 2896      		adiw r28,8
 2946 0e5e 0FB6      		in __tmp_reg__,__SREG__
 2947 0e60 F894      		cli
 2948 0e62 DEBF      		out __SP_H__,r29
 2949 0e64 0FBE      		out __SREG__,__tmp_reg__
 2950 0e66 CDBF      		out __SP_L__,r28
 2951 0e68 DF91      		pop r29
 2952 0e6a CF91      		pop r28
 2953 0e6c 1F91      		pop r17
 2954 0e6e 0F91      		pop r16
 2955 0e70 0895      		ret
 2956               	/* epilogue end (size=11) */
 2957               	/* function loop size 88 (65) */
 2962               	.Lscope24:
 2964               	.global	main
 2966               	main:
 439:ledmeter.c    **** }
 440:ledmeter.c    **** 
 441:ledmeter.c    **** 
 442:ledmeter.c    **** /*
 443:ledmeter.c    ****  * main program
 444:ledmeter.c    ****  */
 445:ledmeter.c    **** int main(void) {
 2968               	.LM221:
 2969               	/* prologue: frame size=0 */
 2970 0e72 C0E0      		ldi r28,lo8(__stack - 0)
 2971 0e74 D0E0      		ldi r29,hi8(__stack - 0)
 2972 0e76 DEBF      		out __SP_H__,r29
 2973 0e78 CDBF      		out __SP_L__,r28
 2974               	/* prologue end (size=4) */
 446:ledmeter.c    ****     init();
 2976               	.LM222:
 2977 0e7a C3DE      		rcall init
 2978               	.L144:
 447:ledmeter.c    ****     while(1) { // Infinite loop; define here the
 448:ledmeter.c    ****         loop(); // system behaviour
 2980               	.LM223:
 2981 0e7c A2DF      		rcall loop
 2982 0e7e FECF      		rjmp .L144
 2983               	/* epilogue: frame size=0 */
 2984               	/* epilogue: noreturn */
 2985               	/* epilogue end (size=0) */
 2986               	/* function main size 7 (3) */
 2988               	.Lscope25:
 2990               	.global	__vector_1
 2992               	__vector_1:
 449:ledmeter.c    ****     }
 450:ledmeter.c    ****     return 0;
 451:ledmeter.c    **** }
 452:ledmeter.c    **** 
 453:ledmeter.c    **** /*
 454:ledmeter.c    ****  * interrupt handler for INT0
 455:ledmeter.c    ****  */
 456:ledmeter.c    **** SIGNAL(SIG_INTERRUPT0) {
 2994               	.LM224:
 2995               	/* prologue: frame size=0 */
 2996 0e80 1F92      		push __zero_reg__
 2997 0e82 0F92      		push __tmp_reg__
 2998 0e84 0FB6      		in __tmp_reg__,__SREG__
 2999 0e86 0F92      		push __tmp_reg__
 3000 0e88 1124      		clr __zero_reg__
 3001 0e8a 2F93      		push r18
 3002 0e8c 3F93      		push r19
 3003 0e8e 4F93      		push r20
 3004 0e90 5F93      		push r21
 3005 0e92 6F93      		push r22
 3006 0e94 7F93      		push r23
 3007 0e96 8F93      		push r24
 3008 0e98 9F93      		push r25
 3009 0e9a AF93      		push r26
 3010 0e9c BF93      		push r27
 3011 0e9e EF93      		push r30
 3012 0ea0 FF93      		push r31
 3013 0ea2 CF93      		push r28
 3014 0ea4 DF93      		push r29
 3015 0ea6 CDB7      		in r28,__SP_L__
 3016 0ea8 DEB7      		in r29,__SP_H__
 3017               	/* prologue end (size=21) */
 457:ledmeter.c    ****     StartStopChronometer();
 3019               	.LM225:
 3020 0eaa D1DD      		rcall StartStopChronometer
 3021               	/* epilogue: frame size=0 */
 3022 0eac DF91      		pop r29
 3023 0eae CF91      		pop r28
 3024 0eb0 FF91      		pop r31
 3025 0eb2 EF91      		pop r30
 3026 0eb4 BF91      		pop r27
 3027 0eb6 AF91      		pop r26
 3028 0eb8 9F91      		pop r25
 3029 0eba 8F91      		pop r24
 3030 0ebc 7F91      		pop r23
 3031 0ebe 6F91      		pop r22
 3032 0ec0 5F91      		pop r21
 3033 0ec2 4F91      		pop r20
 3034 0ec4 3F91      		pop r19
 3035 0ec6 2F91      		pop r18
 3036 0ec8 0F90      		pop __tmp_reg__
 3037 0eca 0FBE      		out __SREG__,__tmp_reg__
 3038 0ecc 0F90      		pop __tmp_reg__
 3039 0ece 1F90      		pop __zero_reg__
 3040 0ed0 1895      		reti
 3041               	/* epilogue end (size=19) */
 3042               	/* function __vector_1 size 41 (1) */
 3044               	.Lscope26:
 3045               		.comm current_time,8,1
 3046               		.comm last_time,8,1
 3047               		.comm best_time,8,1
 3052               		.text
 3054               	Letext:
 3055               	/* File "ledmeter.c": code 1916 = 0x077c (1429), prologues 259, epilogues 228 */
DEFINED SYMBOLS
                            *ABS*:00000000 ledmeter.c
C:\DOCUME~1\scls\LOCALS~1\Temp/ccGWaaaa.s:3      *ABS*:0000003f __SREG__
C:\DOCUME~1\scls\LOCALS~1\Temp/ccGWaaaa.s:4      *ABS*:0000003e __SP_H__
C:\DOCUME~1\scls\LOCALS~1\Temp/ccGWaaaa.s:5      *ABS*:0000003d __SP_L__
C:\DOCUME~1\scls\LOCALS~1\Temp/ccGWaaaa.s:6      *ABS*:00000000 __tmp_reg__
C:\DOCUME~1\scls\LOCALS~1\Temp/ccGWaaaa.s:7      *ABS*:00000001 __zero_reg__
C:\DOCUME~1\scls\LOCALS~1\Temp/ccGWaaaa.s:78     .bss:00000000 running_chronometer
C:\DOCUME~1\scls\LOCALS~1\Temp/ccGWaaaa.s:86     .text:00000000 init_time
C:\DOCUME~1\scls\LOCALS~1\Temp/ccGWaaaa.s:149    .text:0000004a print_time
C:\DOCUME~1\scls\LOCALS~1\Temp/ccGWaaaa.s:224    .text:000000be copy_time
C:\DOCUME~1\scls\LOCALS~1\Temp/ccGWaaaa.s:305    .text:00000132 compare_time
C:\DOCUME~1\scls\LOCALS~1\Temp/ccGWaaaa.s:346    .text:00000164 inc_time
C:\DOCUME~1\scls\LOCALS~1\Temp/ccGWaaaa.s:618    .text:000002dc switch_on_all_leds
C:\DOCUME~1\scls\LOCALS~1\Temp/ccGWaaaa.s:643    .text:000002ee switch_off_all_leds
C:\DOCUME~1\scls\LOCALS~1\Temp/ccGWaaaa.s:668    .text:00000302 switch_on_led
C:\DOCUME~1\scls\LOCALS~1\Temp/ccGWaaaa.s:734    .text:0000035a switch_off_led
C:\DOCUME~1\scls\LOCALS~1\Temp/ccGWaaaa.s:798    .text:000003ae switch_on_leds_with_delay
C:\DOCUME~1\scls\LOCALS~1\Temp/ccGWaaaa.s:988    .text:00000496 switch_off_leds_with_delay
C:\DOCUME~1\scls\LOCALS~1\Temp/ccGWaaaa.s:1176   .text:0000057c test_leds
C:\DOCUME~1\scls\LOCALS~1\Temp/ccGWaaaa.s:1346   .text:0000064a switch_on_min_dels
C:\DOCUME~1\scls\LOCALS~1\Temp/ccGWaaaa.s:1429   .text:000006ae switch_on_max_dels
C:\DOCUME~1\scls\LOCALS~1\Temp/ccGWaaaa.s:1516   .text:00000718 led_alarm
C:\DOCUME~1\scls\LOCALS~1\Temp/ccGWaaaa.s:1832   .text:0000089a roundp
C:\DOCUME~1\scls\LOCALS~1\Temp/ccGWaaaa.s:1892   .text:000008f2 show_percent
C:\DOCUME~1\scls\LOCALS~1\Temp/ccGWaaaa.s:1965   .text:00000958 beep
C:\DOCUME~1\scls\LOCALS~1\Temp/ccGWaaaa.s:2162   .text:00000a4e StartStopChronometer
C:\DOCUME~1\scls\LOCALS~1\Temp/ccGWaaaa.s:2219   .text:00000a9a TestRunningChronometer
C:\DOCUME~1\scls\LOCALS~1\Temp/ccGWaaaa.s:2509   .text:00000c02 init
                            *COM*:00000008 current_time
                            *COM*:00000008 last_time
                            *COM*:00000008 best_time
C:\DOCUME~1\scls\LOCALS~1\Temp/ccGWaaaa.s:2628   .text:00000c9a adcConvert10bit
C:\DOCUME~1\scls\LOCALS~1\Temp/ccGWaaaa.s:2704   .text:00000d10 adcConvert8bit
C:\DOCUME~1\scls\LOCALS~1\Temp/ccGWaaaa.s:2746   .text:00000d46 SeekButtons
C:\DOCUME~1\scls\LOCALS~1\Temp/ccGWaaaa.s:2847   .text:00000dc2 loop
C:\DOCUME~1\scls\LOCALS~1\Temp/ccGWaaaa.s:2966   .text:00000e72 main
C:\DOCUME~1\scls\LOCALS~1\Temp/ccGWaaaa.s:2992   .text:00000e80 __vector_1
C:\DOCUME~1\scls\LOCALS~1\Temp/ccGWaaaa.s:3054   .text:00000ed2 Letext

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
printf
__mulsf3
__ltsf2
__gtsf2
__fixunssfsi
__addsf3
floor
__fixsfsi
__divsf3
__floatsisf
__stack
