   1               		.file	"ledmeter.c"
   2               		.arch atmega8535
   3               	__SREG__ = 0x3f
   4               	__SP_H__ = 0x3e
   5               	__SP_L__ = 0x3d
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.global __do_copy_data
   9               		.global __do_clear_bss
  11               		.text
  12               	.Ltext0:
  83               	.global	running_chronometer
  84               	.global	running_chronometer
  85               		.section .bss
  88               	running_chronometer:
  89 0000 00        		.skip 1,0
  91               		.text
  94               	.global	init_time
  96               	init_time:
   1:ledmeter.c    **** // ***********************************************************
   2:ledmeter.c    **** // Project: OpenChrono
   3:ledmeter.c    **** // Author: Sebastien CELLES
   4:ledmeter.c    **** // Module description: an handhelds device for karts, bike or sport cars
   5:ledmeter.c    **** // ***********************************************************
   6:ledmeter.c    **** 
   7:ledmeter.c    **** #include <avr/io.h> // Most basic include files
   8:ledmeter.c    **** 
   9:ledmeter.c    **** #include <stdint.h> // uint8_t = unsigned char
  10:ledmeter.c    **** 
  11:ledmeter.c    **** #include <stdio.h> // TO FIX (LCD)
  12:ledmeter.c    **** 
  13:ledmeter.c    **** #include <math.h>
  14:ledmeter.c    **** 
  15:ledmeter.c    **** #define F_CPU 1000000UL  // 1 MHz
  16:ledmeter.c    **** #include <util/delay.h>
  17:ledmeter.c    **** 
  18:ledmeter.c    **** //#include <avr/io.h>              // Most basic include files
  19:ledmeter.c    **** #include <avr/interrupt.h>       // Add the necessary ones
  20:ledmeter.c    **** //#include <avr/signal.h>          // here
  21:ledmeter.c    **** 
  22:ledmeter.c    **** #define TRUE -1
  23:ledmeter.c    **** #define FALSE 0
  24:ledmeter.c    **** 
  25:ledmeter.c    **** //volatile unsigned char a2dCompleteFlag;
  26:ledmeter.c    **** 
  27:ledmeter.c    **** //int channel;
  28:ledmeter.c    **** //unsigned short analog_result;
  29:ledmeter.c    **** //int analog_busy;
  30:ledmeter.c    **** 
  31:ledmeter.c    **** #define Nleds 8  // number of leds connected to the uC
  32:ledmeter.c    **** 
  33:ledmeter.c    **** #define N 50 // number between 0 and 255
  34:ledmeter.c    **** #define Nmax 0xFF
  35:ledmeter.c    **** 
  36:ledmeter.c    **** 
  37:ledmeter.c    **** uint8_t running_chronometer = FALSE; // 0 false ; -1 true
  38:ledmeter.c    **** 
  39:ledmeter.c    **** typedef struct {
  40:ledmeter.c    ****     uint8_t hh; //8bits 0-255
  41:ledmeter.c    ****     uint8_t mm; //8bits 0-255
  42:ledmeter.c    ****     uint8_t ss; //8bits 0-255
  43:ledmeter.c    ****     unsigned short int xx;  //16bits 0-65535
  44:ledmeter.c    **** } time_typ;
  45:ledmeter.c    **** 
  46:ledmeter.c    **** time_typ current_time;
  47:ledmeter.c    **** time_typ last_time;
  48:ledmeter.c    **** time_typ best_time;
  49:ledmeter.c    **** 
  50:ledmeter.c    **** void init_time(time_typ * time) {
  98               	.LM1:
  99               	/* prologue: frame size=2 */
 100 0000 CF93      		push r28
 101 0002 DF93      		push r29
 102 0004 CDB7      		in r28,__SP_L__
 103 0006 DEB7      		in r29,__SP_H__
 104 0008 2297      		sbiw r28,2
 105 000a 0FB6      		in __tmp_reg__,__SREG__
 106 000c F894      		cli
 107 000e DEBF      		out __SP_H__,r29
 108 0010 0FBE      		out __SREG__,__tmp_reg__
 109 0012 CDBF      		out __SP_L__,r28
 110               	/* prologue end (size=10) */
 111 0014 9A83      		std Y+2,r25
 112 0016 8983      		std Y+1,r24
  51:ledmeter.c    ****     time->hh = 0;
 114               	.LM2:
 115 0018 E981      		ldd r30,Y+1
 116 001a FA81      		ldd r31,Y+2
 117 001c 1082      		st Z,__zero_reg__
  52:ledmeter.c    ****     time->mm = 0;
 119               	.LM3:
 120 001e E981      		ldd r30,Y+1
 121 0020 FA81      		ldd r31,Y+2
 122 0022 1182      		std Z+1,__zero_reg__
  53:ledmeter.c    ****     time->ss = 0;
 124               	.LM4:
 125 0024 E981      		ldd r30,Y+1
 126 0026 FA81      		ldd r31,Y+2
 127 0028 1282      		std Z+2,__zero_reg__
  54:ledmeter.c    ****     time->xx = 0;
 129               	.LM5:
 130 002a E981      		ldd r30,Y+1
 131 002c FA81      		ldd r31,Y+2
 132 002e 1482      		std Z+4,__zero_reg__
 133 0030 1382      		std Z+3,__zero_reg__
 134               	/* epilogue: frame size=2 */
 135 0032 2296      		adiw r28,2
 136 0034 0FB6      		in __tmp_reg__,__SREG__
 137 0036 F894      		cli
 138 0038 DEBF      		out __SP_H__,r29
 139 003a 0FBE      		out __SREG__,__tmp_reg__
 140 003c CDBF      		out __SP_L__,r28
 141 003e DF91      		pop r29
 142 0040 CF91      		pop r28
 143 0042 0895      		ret
 144               	/* epilogue end (size=9) */
 145               	/* function init_time size 34 (15) */
 147               	.Lscope0:
 148               		.data
 149               	.LC0:
 150 0000 3D3D 3D25 		.string	"===%02i:%02i:%02i:%03u===\n"
 150      3032 693A 
 150      2530 3269 
 150      3A25 3032 
 150      693A 2530 
 151               		.text
 154               	.global	print_time
 156               	print_time:
  55:ledmeter.c    **** }
  56:ledmeter.c    **** 
  57:ledmeter.c    **** void print_time(time_typ * t) {
 158               	.LM6:
 159               	/* prologue: frame size=2 */
 160 0044 CF93      		push r28
 161 0046 DF93      		push r29
 162 0048 CDB7      		in r28,__SP_L__
 163 004a DEB7      		in r29,__SP_H__
 164 004c 2297      		sbiw r28,2
 165 004e 0FB6      		in __tmp_reg__,__SREG__
 166 0050 F894      		cli
 167 0052 DEBF      		out __SP_H__,r29
 168 0054 0FBE      		out __SREG__,__tmp_reg__
 169 0056 CDBF      		out __SP_L__,r28
 170               	/* prologue end (size=10) */
 171 0058 9A83      		std Y+2,r25
 172 005a 8983      		std Y+1,r24
  58:ledmeter.c    ****     printf("===%02i:%02i:%02i:%03u===\n",t->hh,t->mm,t->ss,t->xx);
 174               	.LM7:
 175 005c E981      		ldd r30,Y+1
 176 005e FA81      		ldd r31,Y+2
 177 0060 8381      		ldd r24,Z+3
 178 0062 9481      		ldd r25,Z+4
 179 0064 9F93      		push r25
 180 0066 8F93      		push r24
 181 0068 E981      		ldd r30,Y+1
 182 006a FA81      		ldd r31,Y+2
 183 006c 8281      		ldd r24,Z+2
 184 006e 9927      		clr r25
 185 0070 9F93      		push r25
 186 0072 8F93      		push r24
 187 0074 E981      		ldd r30,Y+1
 188 0076 FA81      		ldd r31,Y+2
 189 0078 8181      		ldd r24,Z+1
 190 007a 9927      		clr r25
 191 007c 9F93      		push r25
 192 007e 8F93      		push r24
 193 0080 E981      		ldd r30,Y+1
 194 0082 FA81      		ldd r31,Y+2
 195 0084 8081      		ld r24,Z
 196 0086 9927      		clr r25
 197 0088 9F93      		push r25
 198 008a 8F93      		push r24
 199 008c 80E0      		ldi r24,lo8(.LC0)
 200 008e 90E0      		ldi r25,hi8(.LC0)
 201 0090 9F93      		push r25
 202 0092 8F93      		push r24
 203 0094 00D0      		rcall printf
 204 0096 8DB7      		in r24,__SP_L__
 205 0098 9EB7      		in r25,__SP_H__
 206 009a 0A96      		adiw r24,10
 207 009c 0FB6      		in __tmp_reg__,__SREG__
 208 009e F894      		cli
 209 00a0 9EBF      		out __SP_H__,r25
 210 00a2 0FBE      		out __SREG__,__tmp_reg__
 211 00a4 8DBF      		out __SP_L__,r24
 212               	/* epilogue: frame size=2 */
 213 00a6 2296      		adiw r28,2
 214 00a8 0FB6      		in __tmp_reg__,__SREG__
 215 00aa F894      		cli
 216 00ac DEBF      		out __SP_H__,r29
 217 00ae 0FBE      		out __SREG__,__tmp_reg__
 218 00b0 CDBF      		out __SP_L__,r28
 219 00b2 DF91      		pop r29
 220 00b4 CF91      		pop r28
 221 00b6 0895      		ret
 222               	/* epilogue end (size=9) */
 223               	/* function print_time size 58 (39) */
 225               	.Lscope1:
 229               	.global	copy_time
 231               	copy_time:
  59:ledmeter.c    **** }
  60:ledmeter.c    **** 
  61:ledmeter.c    **** void copy_time(time_typ * time_source, time_typ * time_dest) { // TO TEST (pointer ?)
 233               	.LM8:
 234               	/* prologue: frame size=4 */
 235 00b8 CF93      		push r28
 236 00ba DF93      		push r29
 237 00bc CDB7      		in r28,__SP_L__
 238 00be DEB7      		in r29,__SP_H__
 239 00c0 2497      		sbiw r28,4
 240 00c2 0FB6      		in __tmp_reg__,__SREG__
 241 00c4 F894      		cli
 242 00c6 DEBF      		out __SP_H__,r29
 243 00c8 0FBE      		out __SREG__,__tmp_reg__
 244 00ca CDBF      		out __SP_L__,r28
 245               	/* prologue end (size=10) */
 246 00cc 9A83      		std Y+2,r25
 247 00ce 8983      		std Y+1,r24
 248 00d0 7C83      		std Y+4,r23
 249 00d2 6B83      		std Y+3,r22
  62:ledmeter.c    ****     time_dest->hh = time_source->hh;
 251               	.LM9:
 252 00d4 AB81      		ldd r26,Y+3
 253 00d6 BC81      		ldd r27,Y+4
 254 00d8 E981      		ldd r30,Y+1
 255 00da FA81      		ldd r31,Y+2
 256 00dc 8081      		ld r24,Z
 257 00de 8C93      		st X,r24
  63:ledmeter.c    ****     time_dest->mm = time_source->mm;
 259               	.LM10:
 260 00e0 AB81      		ldd r26,Y+3
 261 00e2 BC81      		ldd r27,Y+4
 262 00e4 E981      		ldd r30,Y+1
 263 00e6 FA81      		ldd r31,Y+2
 264 00e8 8181      		ldd r24,Z+1
 265 00ea FD01      		movw r30,r26
 266 00ec 8183      		std Z+1,r24
  64:ledmeter.c    ****     time_dest->ss = time_source->ss;
 268               	.LM11:
 269 00ee AB81      		ldd r26,Y+3
 270 00f0 BC81      		ldd r27,Y+4
 271 00f2 E981      		ldd r30,Y+1
 272 00f4 FA81      		ldd r31,Y+2
 273 00f6 8281      		ldd r24,Z+2
 274 00f8 FD01      		movw r30,r26
 275 00fa 8283      		std Z+2,r24
  65:ledmeter.c    ****     time_dest->xx = time_source->xx;
 277               	.LM12:
 278 00fc AB81      		ldd r26,Y+3
 279 00fe BC81      		ldd r27,Y+4
 280 0100 E981      		ldd r30,Y+1
 281 0102 FA81      		ldd r31,Y+2
 282 0104 8381      		ldd r24,Z+3
 283 0106 9481      		ldd r25,Z+4
 284 0108 FD01      		movw r30,r26
 285 010a 9483      		std Z+4,r25
 286 010c 8383      		std Z+3,r24
 287               	/* epilogue: frame size=4 */
 288 010e 2496      		adiw r28,4
 289 0110 0FB6      		in __tmp_reg__,__SREG__
 290 0112 F894      		cli
 291 0114 DEBF      		out __SP_H__,r29
 292 0116 0FBE      		out __SREG__,__tmp_reg__
 293 0118 CDBF      		out __SP_L__,r28
 294 011a DF91      		pop r29
 295 011c CF91      		pop r28
 296 011e 0895      		ret
 297               	/* epilogue end (size=9) */
 298               	/* function copy_time size 52 (33) */
 300               	.Lscope2:
 304               	.global	compare_time
 306               	compare_time:
  66:ledmeter.c    **** }
  67:ledmeter.c    **** 
  68:ledmeter.c    **** uint8_t compare_time(time_typ * time1, time_typ * time2) {
 308               	.LM13:
 309               	/* prologue: frame size=4 */
 310 0120 CF93      		push r28
 311 0122 DF93      		push r29
 312 0124 CDB7      		in r28,__SP_L__
 313 0126 DEB7      		in r29,__SP_H__
 314 0128 2497      		sbiw r28,4
 315 012a 0FB6      		in __tmp_reg__,__SREG__
 316 012c F894      		cli
 317 012e DEBF      		out __SP_H__,r29
 318 0130 0FBE      		out __SREG__,__tmp_reg__
 319 0132 CDBF      		out __SP_L__,r28
 320               	/* prologue end (size=10) */
 321 0134 9A83      		std Y+2,r25
 322 0136 8983      		std Y+1,r24
 323 0138 7C83      		std Y+4,r23
 324 013a 6B83      		std Y+3,r22
  69:ledmeter.c    ****     //  0 time1=time2
  70:ledmeter.c    ****     // -1 time1<time2
  71:ledmeter.c    ****     //  1 time1>time2
  72:ledmeter.c    ****     return 0;
 326               	.LM14:
 327 013c 80E0      		ldi r24,lo8(0)
 328 013e 90E0      		ldi r25,hi8(0)
 329               	/* epilogue: frame size=4 */
 330 0140 2496      		adiw r28,4
 331 0142 0FB6      		in __tmp_reg__,__SREG__
 332 0144 F894      		cli
 333 0146 DEBF      		out __SP_H__,r29
 334 0148 0FBE      		out __SREG__,__tmp_reg__
 335 014a CDBF      		out __SP_L__,r28
 336 014c DF91      		pop r29
 337 014e CF91      		pop r28
 338 0150 0895      		ret
 339               	/* epilogue end (size=9) */
 340               	/* function compare_time size 25 (6) */
 342               	.Lscope3:
 345               	.global	inc_time
 347               	inc_time:
  73:ledmeter.c    **** }
  74:ledmeter.c    **** 
  75:ledmeter.c    **** void inc_time(time_typ * time) {
 349               	.LM15:
 350               	/* prologue: frame size=14 */
 351 0152 CF93      		push r28
 352 0154 DF93      		push r29
 353 0156 CDB7      		in r28,__SP_L__
 354 0158 DEB7      		in r29,__SP_H__
 355 015a 2E97      		sbiw r28,14
 356 015c 0FB6      		in __tmp_reg__,__SREG__
 357 015e F894      		cli
 358 0160 DEBF      		out __SP_H__,r29
 359 0162 0FBE      		out __SREG__,__tmp_reg__
 360 0164 CDBF      		out __SP_L__,r28
 361               	/* prologue end (size=10) */
 362 0166 9A83      		std Y+2,r25
 363 0168 8983      		std Y+1,r24
  76:ledmeter.c    ****   if (running_chronometer) {
 365               	.LM16:
 366 016a 8091 0000 		lds r24,running_chronometer
 367 016e 8823      		tst r24
 368 0170 09F4      		brne .+2
 369 0172 8FC0      		rjmp .L5
  77:ledmeter.c    ****     time->xx++;
 371               	.LM17:
 372 0174 A981      		ldd r26,Y+1
 373 0176 BA81      		ldd r27,Y+2
 374 0178 E981      		ldd r30,Y+1
 375 017a FA81      		ldd r31,Y+2
 376 017c 8381      		ldd r24,Z+3
 377 017e 9481      		ldd r25,Z+4
 378 0180 0196      		adiw r24,1
 379 0182 FD01      		movw r30,r26
 380 0184 9483      		std Z+4,r25
 381 0186 8383      		std Z+3,r24
  78:ledmeter.c    ****     if(time->xx >= 1000) {
 383               	.LM18:
 384 0188 E981      		ldd r30,Y+1
 385 018a FA81      		ldd r31,Y+2
 386 018c 8381      		ldd r24,Z+3
 387 018e 9481      		ldd r25,Z+4
 388 0190 F3E0      		ldi r31,hi8(1000)
 389 0192 883E      		cpi r24,lo8(1000)
 390 0194 9F07      		cpc r25,r31
 391 0196 98F1      		brlo .L7
  79:ledmeter.c    ****         time->xx = 0;
 393               	.LM19:
 394 0198 E981      		ldd r30,Y+1
 395 019a FA81      		ldd r31,Y+2
 396 019c 1482      		std Z+4,__zero_reg__
 397 019e 1382      		std Z+3,__zero_reg__
  80:ledmeter.c    ****         time->ss++;
 399               	.LM20:
 400 01a0 A981      		ldd r26,Y+1
 401 01a2 BA81      		ldd r27,Y+2
 402 01a4 E981      		ldd r30,Y+1
 403 01a6 FA81      		ldd r31,Y+2
 404 01a8 8281      		ldd r24,Z+2
 405 01aa 8F5F      		subi r24,lo8(-(1))
 406 01ac FD01      		movw r30,r26
 407 01ae 8283      		std Z+2,r24
  81:ledmeter.c    ****         if (time->ss >= 60) {
 409               	.LM21:
 410 01b0 E981      		ldd r30,Y+1
 411 01b2 FA81      		ldd r31,Y+2
 412 01b4 8281      		ldd r24,Z+2
 413 01b6 8C33      		cpi r24,lo8(60)
 414 01b8 10F1      		brlo .L7
  82:ledmeter.c    ****             time->ss = 0;
 416               	.LM22:
 417 01ba E981      		ldd r30,Y+1
 418 01bc FA81      		ldd r31,Y+2
 419 01be 1282      		std Z+2,__zero_reg__
  83:ledmeter.c    ****             time->mm++;
 421               	.LM23:
 422 01c0 A981      		ldd r26,Y+1
 423 01c2 BA81      		ldd r27,Y+2
 424 01c4 E981      		ldd r30,Y+1
 425 01c6 FA81      		ldd r31,Y+2
 426 01c8 8181      		ldd r24,Z+1
 427 01ca 8F5F      		subi r24,lo8(-(1))
 428 01cc FD01      		movw r30,r26
 429 01ce 8183      		std Z+1,r24
  84:ledmeter.c    ****             if (time->mm >= 60) {
 431               	.LM24:
 432 01d0 E981      		ldd r30,Y+1
 433 01d2 FA81      		ldd r31,Y+2
 434 01d4 8181      		ldd r24,Z+1
 435 01d6 8C33      		cpi r24,lo8(60)
 436 01d8 90F0      		brlo .L7
  85:ledmeter.c    ****                 time->mm = 0;
 438               	.LM25:
 439 01da E981      		ldd r30,Y+1
 440 01dc FA81      		ldd r31,Y+2
 441 01de 1182      		std Z+1,__zero_reg__
  86:ledmeter.c    ****                 time->hh++;
 443               	.LM26:
 444 01e0 A981      		ldd r26,Y+1
 445 01e2 BA81      		ldd r27,Y+2
 446 01e4 E981      		ldd r30,Y+1
 447 01e6 FA81      		ldd r31,Y+2
 448 01e8 8081      		ld r24,Z
 449 01ea 8F5F      		subi r24,lo8(-(1))
 450 01ec 8C93      		st X,r24
  87:ledmeter.c    ****                 if (time->hh >= 24) {
 452               	.LM27:
 453 01ee E981      		ldd r30,Y+1
 454 01f0 FA81      		ldd r31,Y+2
 455 01f2 8081      		ld r24,Z
 456 01f4 8831      		cpi r24,lo8(24)
 457 01f6 18F0      		brlo .L7
  88:ledmeter.c    ****                     time->hh = 0;
 459               	.LM28:
 460 01f8 E981      		ldd r30,Y+1
 461 01fa FA81      		ldd r31,Y+2
 462 01fc 1082      		st Z,__zero_reg__
 463               	.L7:
 464               	.LBB2:
 466               	.Ltext1:
   1:C:/WinAVR/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:C:/WinAVR/avr/include/util/delay.h ****    Copyright (c) 2004,2005 Joerg Wunsch
   3:C:/WinAVR/avr/include/util/delay.h ****    All rights reserved.
   4:C:/WinAVR/avr/include/util/delay.h **** 
   5:C:/WinAVR/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   6:C:/WinAVR/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   7:C:/WinAVR/avr/include/util/delay.h **** 
   8:C:/WinAVR/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
   9:C:/WinAVR/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  10:C:/WinAVR/avr/include/util/delay.h **** 
  11:C:/WinAVR/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  12:C:/WinAVR/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  13:C:/WinAVR/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  14:C:/WinAVR/avr/include/util/delay.h ****      distribution.
  15:C:/WinAVR/avr/include/util/delay.h **** 
  16:C:/WinAVR/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  17:C:/WinAVR/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  18:C:/WinAVR/avr/include/util/delay.h ****      from this software without specific prior written permission.
  19:C:/WinAVR/avr/include/util/delay.h **** 
  20:C:/WinAVR/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21:C:/WinAVR/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22:C:/WinAVR/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  23:C:/WinAVR/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  24:C:/WinAVR/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  25:C:/WinAVR/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  26:C:/WinAVR/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  27:C:/WinAVR/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  28:C:/WinAVR/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  29:C:/WinAVR/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  30:C:/WinAVR/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  31:C:/WinAVR/avr/include/util/delay.h **** 
  32:C:/WinAVR/avr/include/util/delay.h **** /* $Id: delay.h,v 1.1.2.1 2005/12/12 23:19:49 joerg_wunsch Exp $ */
  33:C:/WinAVR/avr/include/util/delay.h **** 
  34:C:/WinAVR/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  35:C:/WinAVR/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  36:C:/WinAVR/avr/include/util/delay.h **** 
  37:C:/WinAVR/avr/include/util/delay.h **** #include <inttypes.h>
  38:C:/WinAVR/avr/include/util/delay.h **** 
  39:C:/WinAVR/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Busy-wait delay loops
  40:C:/WinAVR/avr/include/util/delay.h ****     \code
  41:C:/WinAVR/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  42:C:/WinAVR/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  43:C:/WinAVR/avr/include/util/delay.h ****     #include <util/delay.h>
  44:C:/WinAVR/avr/include/util/delay.h ****     \endcode
  45:C:/WinAVR/avr/include/util/delay.h **** 
  46:C:/WinAVR/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  47:C:/WinAVR/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  48:C:/WinAVR/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  49:C:/WinAVR/avr/include/util/delay.h ****     used.
  50:C:/WinAVR/avr/include/util/delay.h **** 
  51:C:/WinAVR/avr/include/util/delay.h ****     The functions in this header file implement simple delay loops
  52:C:/WinAVR/avr/include/util/delay.h ****     that perform a busy-waiting.  They are typically used to
  53:C:/WinAVR/avr/include/util/delay.h ****     facilitate short delays in the program execution.  They are
  54:C:/WinAVR/avr/include/util/delay.h ****     implemented as count-down loops with a well-known CPU cycle
  55:C:/WinAVR/avr/include/util/delay.h ****     count per loop iteration.  As such, no other processing can
  56:C:/WinAVR/avr/include/util/delay.h ****     occur simultaneously.  It should be kept in mind that the
  57:C:/WinAVR/avr/include/util/delay.h ****     functions described here do not disable interrupts.
  58:C:/WinAVR/avr/include/util/delay.h **** 
  59:C:/WinAVR/avr/include/util/delay.h ****     In general, for long delays, the use of hardware timers is
  60:C:/WinAVR/avr/include/util/delay.h ****     much preferrable, as they free the CPU, and allow for
  61:C:/WinAVR/avr/include/util/delay.h ****     concurrent processing of other events while the timer is
  62:C:/WinAVR/avr/include/util/delay.h ****     running.  However, in particular for very short delays, the
  63:C:/WinAVR/avr/include/util/delay.h ****     overhead of setting up a hardware timer is too much compared
  64:C:/WinAVR/avr/include/util/delay.h ****     to the overall delay time.
  65:C:/WinAVR/avr/include/util/delay.h **** 
  66:C:/WinAVR/avr/include/util/delay.h ****     Two inline functions are provided for the actual delay algorithms.
  67:C:/WinAVR/avr/include/util/delay.h **** 
  68:C:/WinAVR/avr/include/util/delay.h ****     Two wrapper functions allow the specification of microsecond, and
  69:C:/WinAVR/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  70:C:/WinAVR/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).  These functions
  71:C:/WinAVR/avr/include/util/delay.h ****     operate on double typed arguments, however when optimization is
  72:C:/WinAVR/avr/include/util/delay.h ****     turned on, the entire floating-point calculation will be done at
  73:C:/WinAVR/avr/include/util/delay.h ****     compile-time.
  74:C:/WinAVR/avr/include/util/delay.h **** 
  75:C:/WinAVR/avr/include/util/delay.h ****     \note When using _delay_us() and _delay_ms(), the expressions
  76:C:/WinAVR/avr/include/util/delay.h ****     passed as arguments to these functions shall be compile-time
  77:C:/WinAVR/avr/include/util/delay.h ****     constants, otherwise the floating-point calculations to setup the
  78:C:/WinAVR/avr/include/util/delay.h ****     loops will be done at run-time, thereby drastically increasing
  79:C:/WinAVR/avr/include/util/delay.h ****     both the resulting code size, as well as the time required to
  80:C:/WinAVR/avr/include/util/delay.h ****     setup the loops.
  81:C:/WinAVR/avr/include/util/delay.h **** */
  82:C:/WinAVR/avr/include/util/delay.h **** 
  83:C:/WinAVR/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:C:/WinAVR/avr/include/util/delay.h **** static inline void _delay_loop_1(uint8_t __count) __attribute__((always_inline));
  85:C:/WinAVR/avr/include/util/delay.h **** static inline void _delay_loop_2(uint16_t __count) __attribute__((always_inline));
  86:C:/WinAVR/avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  87:C:/WinAVR/avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  88:C:/WinAVR/avr/include/util/delay.h **** #endif
  89:C:/WinAVR/avr/include/util/delay.h **** 
  90:C:/WinAVR/avr/include/util/delay.h **** /** \ingroup util_delay
  91:C:/WinAVR/avr/include/util/delay.h **** 
  92:C:/WinAVR/avr/include/util/delay.h ****     Delay loop using an 8-bit counter \c __count, so up to 256
  93:C:/WinAVR/avr/include/util/delay.h ****     iterations are possible.  (The value 256 would have to be passed
  94:C:/WinAVR/avr/include/util/delay.h ****     as 0.)  The loop executes three CPU cycles per iteration, not
  95:C:/WinAVR/avr/include/util/delay.h ****     including the overhead the compiler needs to setup the counter
  96:C:/WinAVR/avr/include/util/delay.h ****     register.
  97:C:/WinAVR/avr/include/util/delay.h **** 
  98:C:/WinAVR/avr/include/util/delay.h ****     Thus, at a CPU speed of 1 MHz, delays of up to 768 microseconds
  99:C:/WinAVR/avr/include/util/delay.h ****     can be achieved.
 100:C:/WinAVR/avr/include/util/delay.h **** */
 101:C:/WinAVR/avr/include/util/delay.h **** void
 102:C:/WinAVR/avr/include/util/delay.h **** _delay_loop_1(uint8_t __count)
 103:C:/WinAVR/avr/include/util/delay.h **** {
 104:C:/WinAVR/avr/include/util/delay.h **** 	__asm__ volatile (
 105:C:/WinAVR/avr/include/util/delay.h **** 		"1: dec %0" "\n\t"
 106:C:/WinAVR/avr/include/util/delay.h **** 		"brne 1b"
 107:C:/WinAVR/avr/include/util/delay.h **** 		: "=r" (__count)
 108:C:/WinAVR/avr/include/util/delay.h **** 		: "0" (__count)
 109:C:/WinAVR/avr/include/util/delay.h **** 	);
 110:C:/WinAVR/avr/include/util/delay.h **** }
 111:C:/WinAVR/avr/include/util/delay.h **** 
 112:C:/WinAVR/avr/include/util/delay.h **** /** \ingroup util_delay
 113:C:/WinAVR/avr/include/util/delay.h **** 
 114:C:/WinAVR/avr/include/util/delay.h ****     Delay loop using a 16-bit counter \c __count, so up to 65536
 115:C:/WinAVR/avr/include/util/delay.h ****     iterations are possible.  (The value 65536 would have to be
 116:C:/WinAVR/avr/include/util/delay.h ****     passed as 0.)  The loop executes four CPU cycles per iteration,
 117:C:/WinAVR/avr/include/util/delay.h ****     not including the overhead the compiler requires to setup the
 118:C:/WinAVR/avr/include/util/delay.h ****     counter register pair.
 119:C:/WinAVR/avr/include/util/delay.h **** 
 120:C:/WinAVR/avr/include/util/delay.h ****     Thus, at a CPU speed of 1 MHz, delays of up to about 262.1
 121:C:/WinAVR/avr/include/util/delay.h ****     milliseconds can be achieved.
 122:C:/WinAVR/avr/include/util/delay.h ****  */
 123:C:/WinAVR/avr/include/util/delay.h **** void
 124:C:/WinAVR/avr/include/util/delay.h **** _delay_loop_2(uint16_t __count)
 125:C:/WinAVR/avr/include/util/delay.h **** {
 126:C:/WinAVR/avr/include/util/delay.h **** 	__asm__ volatile (
 127:C:/WinAVR/avr/include/util/delay.h **** 		"1: sbiw %0,1" "\n\t"
 128:C:/WinAVR/avr/include/util/delay.h **** 		"brne 1b"
 129:C:/WinAVR/avr/include/util/delay.h **** 		: "=w" (__count)
 130:C:/WinAVR/avr/include/util/delay.h **** 		: "0" (__count)
 131:C:/WinAVR/avr/include/util/delay.h **** 	);
 132:C:/WinAVR/avr/include/util/delay.h **** }
 133:C:/WinAVR/avr/include/util/delay.h **** 
 134:C:/WinAVR/avr/include/util/delay.h **** #ifndef F_CPU
 135:C:/WinAVR/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
 136:C:/WinAVR/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
 137:C:/WinAVR/avr/include/util/delay.h **** # define F_CPU 1000000UL
 138:C:/WinAVR/avr/include/util/delay.h **** #endif
 139:C:/WinAVR/avr/include/util/delay.h **** 
 140:C:/WinAVR/avr/include/util/delay.h **** /**
 141:C:/WinAVR/avr/include/util/delay.h ****    \ingroup util_delay
 142:C:/WinAVR/avr/include/util/delay.h **** 
 143:C:/WinAVR/avr/include/util/delay.h ****    Perform a delay of \c __us microseconds, using _delay_loop_1().
 144:C:/WinAVR/avr/include/util/delay.h **** 
 145:C:/WinAVR/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 146:C:/WinAVR/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 147:C:/WinAVR/avr/include/util/delay.h **** 
 148:C:/WinAVR/avr/include/util/delay.h ****    The maximal possible delay is 768 us / F_CPU in MHz.
 149:C:/WinAVR/avr/include/util/delay.h ****  */
 150:C:/WinAVR/avr/include/util/delay.h **** void
 151:C:/WinAVR/avr/include/util/delay.h **** _delay_us(double __us)
 152:C:/WinAVR/avr/include/util/delay.h **** {
 153:C:/WinAVR/avr/include/util/delay.h **** 	uint8_t __ticks;
 154:C:/WinAVR/avr/include/util/delay.h **** 	double __tmp = ((F_CPU) / 3e6) * __us;
 155:C:/WinAVR/avr/include/util/delay.h **** 	if (__tmp < 1.0)
 156:C:/WinAVR/avr/include/util/delay.h **** 		__ticks = 1;
 157:C:/WinAVR/avr/include/util/delay.h **** 	else if (__tmp > 255)
 158:C:/WinAVR/avr/include/util/delay.h **** 		__ticks = 0;	/* i.e. 256 */
 159:C:/WinAVR/avr/include/util/delay.h **** 	else
 160:C:/WinAVR/avr/include/util/delay.h **** 		__ticks = (uint8_t)__tmp;
 161:C:/WinAVR/avr/include/util/delay.h **** 	_delay_loop_1(__ticks);
 162:C:/WinAVR/avr/include/util/delay.h **** }
 163:C:/WinAVR/avr/include/util/delay.h **** 
 164:C:/WinAVR/avr/include/util/delay.h **** 
 165:C:/WinAVR/avr/include/util/delay.h **** /**
 166:C:/WinAVR/avr/include/util/delay.h ****    \ingroup util_delay
 167:C:/WinAVR/avr/include/util/delay.h **** 
 168:C:/WinAVR/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 169:C:/WinAVR/avr/include/util/delay.h **** 
 170:C:/WinAVR/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 171:C:/WinAVR/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 172:C:/WinAVR/avr/include/util/delay.h **** 
 173:C:/WinAVR/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 174:C:/WinAVR/avr/include/util/delay.h ****  */
 175:C:/WinAVR/avr/include/util/delay.h **** void
 176:C:/WinAVR/avr/include/util/delay.h **** _delay_ms(double __ms)
 177:C:/WinAVR/avr/include/util/delay.h **** {
 468               	.LM29:
 469 01fe 80E0      		ldi r24,lo8(0x3f800000)
 470 0200 90E0      		ldi r25,hi8(0x3f800000)
 471 0202 A0E8      		ldi r26,hlo8(0x3f800000)
 472 0204 BFE3      		ldi r27,hhi8(0x3f800000)
 473 0206 8B83      		std Y+3,r24
 474 0208 9C83      		std Y+4,r25
 475 020a AD83      		std Y+5,r26
 476 020c BE83      		std Y+6,r27
 477               	.LBB3:
 178:C:/WinAVR/avr/include/util/delay.h **** 	uint16_t __ticks;
 179:C:/WinAVR/avr/include/util/delay.h **** 	double __tmp = ((F_CPU) / 4e3) * __ms;
 479               	.LM30:
 480 020e 20E0      		ldi r18,lo8(0x437a0000)
 481 0210 30E0      		ldi r19,hi8(0x437a0000)
 482 0212 4AE7      		ldi r20,hlo8(0x437a0000)
 483 0214 53E4      		ldi r21,hhi8(0x437a0000)
 484 0216 6B81      		ldd r22,Y+3
 485 0218 7C81      		ldd r23,Y+4
 486 021a 8D81      		ldd r24,Y+5
 487 021c 9E81      		ldd r25,Y+6
 488 021e 00D0      		rcall __mulsf3
 489 0220 DC01      		movw r26,r24
 490 0222 CB01      		movw r24,r22
 491 0224 8987      		std Y+9,r24
 492 0226 9A87      		std Y+10,r25
 493 0228 AB87      		std Y+11,r26
 494 022a BC87      		std Y+12,r27
 180:C:/WinAVR/avr/include/util/delay.h **** 	if (__tmp < 1.0)
 496               	.LM31:
 497 022c 20E0      		ldi r18,lo8(0x3f800000)
 498 022e 30E0      		ldi r19,hi8(0x3f800000)
 499 0230 40E8      		ldi r20,hlo8(0x3f800000)
 500 0232 5FE3      		ldi r21,hhi8(0x3f800000)
 501 0234 6985      		ldd r22,Y+9
 502 0236 7A85      		ldd r23,Y+10
 503 0238 8B85      		ldd r24,Y+11
 504 023a 9C85      		ldd r25,Y+12
 505 023c 00D0      		rcall __ltsf2
 506 023e 8823      		tst r24
 507 0240 0CF0      		brlt .L12
 508 0242 05C0      		rjmp .L11
 509               	.L12:
 181:C:/WinAVR/avr/include/util/delay.h **** 		__ticks = 1;
 511               	.LM32:
 512 0244 81E0      		ldi r24,lo8(1)
 513 0246 90E0      		ldi r25,hi8(1)
 514 0248 9887      		std Y+8,r25
 515 024a 8F83      		std Y+7,r24
 516 024c 18C0      		rjmp .L13
 517               	.L11:
 182:C:/WinAVR/avr/include/util/delay.h **** 	else if (__tmp > 65535)
 519               	.LM33:
 520 024e 20E0      		ldi r18,lo8(0x477fff00)
 521 0250 3FEF      		ldi r19,hi8(0x477fff00)
 522 0252 4FE7      		ldi r20,hlo8(0x477fff00)
 523 0254 57E4      		ldi r21,hhi8(0x477fff00)
 524 0256 6985      		ldd r22,Y+9
 525 0258 7A85      		ldd r23,Y+10
 526 025a 8B85      		ldd r24,Y+11
 527 025c 9C85      		ldd r25,Y+12
 528 025e 00D0      		rcall __gtsf2
 529 0260 1816      		cp __zero_reg__,r24
 530 0262 0CF0      		brlt .L15
 531 0264 03C0      		rjmp .L14
 532               	.L15:
 183:C:/WinAVR/avr/include/util/delay.h **** 		__ticks = 0;	/* i.e. 65536 */
 534               	.LM34:
 535 0266 1886      		std Y+8,__zero_reg__
 536 0268 1F82      		std Y+7,__zero_reg__
 537 026a 09C0      		rjmp .L13
 538               	.L14:
 184:C:/WinAVR/avr/include/util/delay.h **** 	else
 185:C:/WinAVR/avr/include/util/delay.h **** 		__ticks = (uint16_t)__tmp;
 540               	.LM35:
 541 026c 6985      		ldd r22,Y+9
 542 026e 7A85      		ldd r23,Y+10
 543 0270 8B85      		ldd r24,Y+11
 544 0272 9C85      		ldd r25,Y+12
 545 0274 00D0      		rcall __fixunssfsi
 546 0276 DC01      		movw r26,r24
 547 0278 CB01      		movw r24,r22
 548 027a 9887      		std Y+8,r25
 549 027c 8F83      		std Y+7,r24
 550               	.L13:
 551               	.LBB4:
 553               	.LM36:
 554 027e 8F81      		ldd r24,Y+7
 555 0280 9885      		ldd r25,Y+8
 556 0282 9E87      		std Y+14,r25
 557 0284 8D87      		std Y+13,r24
 558               	.LBB5:
 560               	.LM37:
 561 0286 8D85      		ldd r24,Y+13
 562 0288 9E85      		ldd r25,Y+14
 563               	/* #APP */
 564 028a 0197      		1: sbiw r24,1
 565 028c F1F7      		brne 1b
 566               	/* #NOAPP */
 567 028e 9E87      		std Y+14,r25
 568 0290 8D87      		std Y+13,r24
 569               	.L5:
 570               	.LBE5:
 571               	.LBE4:
 572               	.LBE3:
 573               	.LBE2:
 574               	/* epilogue: frame size=14 */
 575 0292 2E96      		adiw r28,14
 576 0294 0FB6      		in __tmp_reg__,__SREG__
 577 0296 F894      		cli
 578 0298 DEBF      		out __SP_H__,r29
 579 029a 0FBE      		out __SREG__,__tmp_reg__
 580 029c CDBF      		out __SP_L__,r28
 581 029e DF91      		pop r29
 582 02a0 CF91      		pop r28
 583 02a2 0895      		ret
 584               	/* epilogue end (size=9) */
 585               	/* function inc_time size 171 (152) */
 597               	.Lscope4:
 599               	.global	switch_on_all_leds
 601               	switch_on_all_leds:
 603               	.Ltext2:
  89:ledmeter.c    **** 					 }
  90:ledmeter.c    ****             }
  91:ledmeter.c    ****         }
  92:ledmeter.c    ****     }
  93:ledmeter.c    ****     _delay_ms(1);
  94:ledmeter.c    ****   }
  95:ledmeter.c    **** }
  96:ledmeter.c    **** 
  97:ledmeter.c    **** 
  98:ledmeter.c    **** 
  99:ledmeter.c    **** /*
 100:ledmeter.c    **** void switch_on_all_leds();
 101:ledmeter.c    **** void switch_off_all_leds();
 102:ledmeter.c    **** void switch_on_led(uint8_t led);
 103:ledmeter.c    **** void switch_off_led(uint8_t led);
 104:ledmeter.c    **** void loop(void);
 105:ledmeter.c    **** void init(void);
 106:ledmeter.c    **** */
 107:ledmeter.c    **** 
 108:ledmeter.c    **** // 1=off
 109:ledmeter.c    **** // 0=on
 110:ledmeter.c    **** 
 111:ledmeter.c    **** /*
 112:ledmeter.c    ****  * switch on all leds
 113:ledmeter.c    ****  */
 114:ledmeter.c    **** void switch_on_all_leds(void) {
 605               	.LM38:
 606               	/* prologue: frame size=0 */
 607 02a4 CF93      		push r28
 608 02a6 DF93      		push r29
 609 02a8 CDB7      		in r28,__SP_L__
 610 02aa DEB7      		in r29,__SP_H__
 611               	/* prologue end (size=4) */
 115:ledmeter.c    ****     PORTC = 0x00;
 613               	.LM39:
 614 02ac 1092 3500 		sts 53,__zero_reg__
 615               	/* epilogue: frame size=0 */
 616 02b0 DF91      		pop r29
 617 02b2 CF91      		pop r28
 618 02b4 0895      		ret
 619               	/* epilogue end (size=3) */
 620               	/* function switch_on_all_leds size 9 (2) */
 622               	.Lscope5:
 624               	.global	switch_off_all_leds
 626               	switch_off_all_leds:
 116:ledmeter.c    **** }
 117:ledmeter.c    **** 
 118:ledmeter.c    **** /*
 119:ledmeter.c    ****  * switch off all leds
 120:ledmeter.c    ****  */
 121:ledmeter.c    **** void switch_off_all_leds(void) {
 628               	.LM40:
 629               	/* prologue: frame size=0 */
 630 02b6 CF93      		push r28
 631 02b8 DF93      		push r29
 632 02ba CDB7      		in r28,__SP_L__
 633 02bc DEB7      		in r29,__SP_H__
 634               	/* prologue end (size=4) */
 122:ledmeter.c    ****     PORTC = 0xFF;
 636               	.LM41:
 637 02be 8FEF      		ldi r24,lo8(-1)
 638 02c0 8093 3500 		sts 53,r24
 639               	/* epilogue: frame size=0 */
 640 02c4 DF91      		pop r29
 641 02c6 CF91      		pop r28
 642 02c8 0895      		ret
 643               	/* epilogue end (size=3) */
 644               	/* function switch_off_all_leds size 10 (3) */
 646               	.Lscope6:
 649               	.global	switch_on_led
 651               	switch_on_led:
 123:ledmeter.c    **** }
 124:ledmeter.c    **** 
 125:ledmeter.c    **** // led from 1 to 8 (LEDSNUM)
 126:ledmeter.c    **** // PCx with w from 0 to 7
 127:ledmeter.c    **** 
 128:ledmeter.c    **** /*
 129:ledmeter.c    ****  * switch on the led with the number called "led"
 130:ledmeter.c    ****  */
 131:ledmeter.c    **** void switch_on_led(uint8_t led) {
 653               	.LM42:
 654               	/* prologue: frame size=3 */
 655 02ca CF93      		push r28
 656 02cc DF93      		push r29
 657 02ce CDB7      		in r28,__SP_L__
 658 02d0 DEB7      		in r29,__SP_H__
 659 02d2 2397      		sbiw r28,3
 660 02d4 0FB6      		in __tmp_reg__,__SREG__
 661 02d6 F894      		cli
 662 02d8 DEBF      		out __SP_H__,r29
 663 02da 0FBE      		out __SREG__,__tmp_reg__
 664 02dc CDBF      		out __SP_L__,r28
 665               	/* prologue end (size=10) */
 666 02de 8983      		std Y+1,r24
 132:ledmeter.c    ****     uint8_t pin = led - 1;
 668               	.LM43:
 669 02e0 8981      		ldd r24,Y+1
 670 02e2 8150      		subi r24,lo8(-(-1))
 671 02e4 8A83      		std Y+2,r24
 133:ledmeter.c    ****     uint8_t mask = ~(1<<pin);
 673               	.LM44:
 674 02e6 8A81      		ldd r24,Y+2
 675 02e8 282F      		mov r18,r24
 676 02ea 3327      		clr r19
 677 02ec 81E0      		ldi r24,lo8(1)
 678 02ee 90E0      		ldi r25,hi8(1)
 679 02f0 02C0      		rjmp 2f
 680 02f2 880F      	1:	lsl r24
 681 02f4 991F      		rol r25
 682 02f6 2A95      	2:	dec r18
 683 02f8 E2F7      		brpl 1b
 684 02fa 8095      		com r24
 685 02fc 8B83      		std Y+3,r24
 134:ledmeter.c    ****     PORTC&=mask;
 687               	.LM45:
 688 02fe 9091 3500 		lds r25,53
 689 0302 8B81      		ldd r24,Y+3
 690 0304 8923      		and r24,r25
 691 0306 8093 3500 		sts 53,r24
 692               	/* epilogue: frame size=3 */
 693 030a 2396      		adiw r28,3
 694 030c 0FB6      		in __tmp_reg__,__SREG__
 695 030e F894      		cli
 696 0310 DEBF      		out __SP_H__,r29
 697 0312 0FBE      		out __SREG__,__tmp_reg__
 698 0314 CDBF      		out __SP_L__,r28
 699 0316 DF91      		pop r29
 700 0318 CF91      		pop r28
 701 031a 0895      		ret
 702               	/* epilogue end (size=9) */
 703               	/* function switch_on_led size 42 (23) */
 709               	.Lscope7:
 712               	.global	switch_off_led
 714               	switch_off_led:
 135:ledmeter.c    **** }
 136:ledmeter.c    **** 
 137:ledmeter.c    **** /*
 138:ledmeter.c    ****  * switch off the led with the number called "led"
 139:ledmeter.c    ****  */
 140:ledmeter.c    **** void switch_off_led(uint8_t led) {
 716               	.LM46:
 717               	/* prologue: frame size=3 */
 718 031c CF93      		push r28
 719 031e DF93      		push r29
 720 0320 CDB7      		in r28,__SP_L__
 721 0322 DEB7      		in r29,__SP_H__
 722 0324 2397      		sbiw r28,3
 723 0326 0FB6      		in __tmp_reg__,__SREG__
 724 0328 F894      		cli
 725 032a DEBF      		out __SP_H__,r29
 726 032c 0FBE      		out __SREG__,__tmp_reg__
 727 032e CDBF      		out __SP_L__,r28
 728               	/* prologue end (size=10) */
 729 0330 8983      		std Y+1,r24
 141:ledmeter.c    ****     uint8_t pin = led - 1;
 731               	.LM47:
 732 0332 8981      		ldd r24,Y+1
 733 0334 8150      		subi r24,lo8(-(-1))
 734 0336 8A83      		std Y+2,r24
 142:ledmeter.c    ****     uint8_t mask = (1<<pin);
 736               	.LM48:
 737 0338 8A81      		ldd r24,Y+2
 738 033a 282F      		mov r18,r24
 739 033c 3327      		clr r19
 740 033e 81E0      		ldi r24,lo8(1)
 741 0340 90E0      		ldi r25,hi8(1)
 742 0342 02C0      		rjmp 2f
 743 0344 880F      	1:	lsl r24
 744 0346 991F      		rol r25
 745 0348 2A95      	2:	dec r18
 746 034a E2F7      		brpl 1b
 747 034c 8B83      		std Y+3,r24
 143:ledmeter.c    ****     PORTC|=mask;
 749               	.LM49:
 750 034e 9091 3500 		lds r25,53
 751 0352 8B81      		ldd r24,Y+3
 752 0354 892B      		or r24,r25
 753 0356 8093 3500 		sts 53,r24
 754               	/* epilogue: frame size=3 */
 755 035a 2396      		adiw r28,3
 756 035c 0FB6      		in __tmp_reg__,__SREG__
 757 035e F894      		cli
 758 0360 DEBF      		out __SP_H__,r29
 759 0362 0FBE      		out __SREG__,__tmp_reg__
 760 0364 CDBF      		out __SP_L__,r28
 761 0366 DF91      		pop r29
 762 0368 CF91      		pop r28
 763 036a 0895      		ret
 764               	/* epilogue end (size=9) */
 765               	/* function switch_off_led size 41 (22) */
 771               	.Lscope8:
 774               	.global	switch_on_leds_with_delay
 776               	switch_on_leds_with_delay:
 144:ledmeter.c    **** }
 145:ledmeter.c    **** 
 146:ledmeter.c    **** /*
 147:ledmeter.c    ****  * switch on every leds one after one with a delay (called "delay")
 148:ledmeter.c    ****  */
 149:ledmeter.c    **** void switch_on_leds_with_delay(double delay) {
 778               	.LM50:
 779               	/* prologue: frame size=17 */
 780 036c CF93      		push r28
 781 036e DF93      		push r29
 782 0370 CDB7      		in r28,__SP_L__
 783 0372 DEB7      		in r29,__SP_H__
 784 0374 6197      		sbiw r28,17
 785 0376 0FB6      		in __tmp_reg__,__SREG__
 786 0378 F894      		cli
 787 037a DEBF      		out __SP_H__,r29
 788 037c 0FBE      		out __SREG__,__tmp_reg__
 789 037e CDBF      		out __SP_L__,r28
 790               	/* prologue end (size=10) */
 791 0380 6983      		std Y+1,r22
 792 0382 7A83      		std Y+2,r23
 793 0384 8B83      		std Y+3,r24
 794 0386 9C83      		std Y+4,r25
 150:ledmeter.c    ****     uint8_t i;
 151:ledmeter.c    ****     for(i = 1; i<=Nleds; i++) {
 796               	.LM51:
 797 0388 81E0      		ldi r24,lo8(1)
 798 038a 8D83      		std Y+5,r24
 799               	.L24:
 801               	.LM52:
 802 038c 8D81      		ldd r24,Y+5
 803 038e 8930      		cpi r24,lo8(9)
 804 0390 08F0      		brlo .+2
 805 0392 50C0      		rjmp .L23
 806               	.LBB6:
 808               	.Ltext3:
 810               	.LM53:
 811 0394 8981      		ldd r24,Y+1
 812 0396 9A81      		ldd r25,Y+2
 813 0398 AB81      		ldd r26,Y+3
 814 039a BC81      		ldd r27,Y+4
 815 039c 8E83      		std Y+6,r24
 816 039e 9F83      		std Y+7,r25
 817 03a0 A887      		std Y+8,r26
 818 03a2 B987      		std Y+9,r27
 819               	.LBB7:
 821               	.LM54:
 822 03a4 20E0      		ldi r18,lo8(0x437a0000)
 823 03a6 30E0      		ldi r19,hi8(0x437a0000)
 824 03a8 4AE7      		ldi r20,hlo8(0x437a0000)
 825 03aa 53E4      		ldi r21,hhi8(0x437a0000)
 826 03ac 6E81      		ldd r22,Y+6
 827 03ae 7F81      		ldd r23,Y+7
 828 03b0 8885      		ldd r24,Y+8
 829 03b2 9985      		ldd r25,Y+9
 830 03b4 00D0      		rcall __mulsf3
 831 03b6 DC01      		movw r26,r24
 832 03b8 CB01      		movw r24,r22
 833 03ba 8C87      		std Y+12,r24
 834 03bc 9D87      		std Y+13,r25
 835 03be AE87      		std Y+14,r26
 836 03c0 BF87      		std Y+15,r27
 838               	.LM55:
 839 03c2 20E0      		ldi r18,lo8(0x3f800000)
 840 03c4 30E0      		ldi r19,hi8(0x3f800000)
 841 03c6 40E8      		ldi r20,hlo8(0x3f800000)
 842 03c8 5FE3      		ldi r21,hhi8(0x3f800000)
 843 03ca 6C85      		ldd r22,Y+12
 844 03cc 7D85      		ldd r23,Y+13
 845 03ce 8E85      		ldd r24,Y+14
 846 03d0 9F85      		ldd r25,Y+15
 847 03d2 00D0      		rcall __ltsf2
 848 03d4 8823      		tst r24
 849 03d6 0CF0      		brlt .L28
 850 03d8 05C0      		rjmp .L27
 851               	.L28:
 853               	.LM56:
 854 03da 81E0      		ldi r24,lo8(1)
 855 03dc 90E0      		ldi r25,hi8(1)
 856 03de 9B87      		std Y+11,r25
 857 03e0 8A87      		std Y+10,r24
 858 03e2 18C0      		rjmp .L29
 859               	.L27:
 861               	.LM57:
 862 03e4 20E0      		ldi r18,lo8(0x477fff00)
 863 03e6 3FEF      		ldi r19,hi8(0x477fff00)
 864 03e8 4FE7      		ldi r20,hlo8(0x477fff00)
 865 03ea 57E4      		ldi r21,hhi8(0x477fff00)
 866 03ec 6C85      		ldd r22,Y+12
 867 03ee 7D85      		ldd r23,Y+13
 868 03f0 8E85      		ldd r24,Y+14
 869 03f2 9F85      		ldd r25,Y+15
 870 03f4 00D0      		rcall __gtsf2
 871 03f6 1816      		cp __zero_reg__,r24
 872 03f8 0CF0      		brlt .L31
 873 03fa 03C0      		rjmp .L30
 874               	.L31:
 876               	.LM58:
 877 03fc 1B86      		std Y+11,__zero_reg__
 878 03fe 1A86      		std Y+10,__zero_reg__
 879 0400 09C0      		rjmp .L29
 880               	.L30:
 882               	.LM59:
 883 0402 6C85      		ldd r22,Y+12
 884 0404 7D85      		ldd r23,Y+13
 885 0406 8E85      		ldd r24,Y+14
 886 0408 9F85      		ldd r25,Y+15
 887 040a 00D0      		rcall __fixunssfsi
 888 040c DC01      		movw r26,r24
 889 040e CB01      		movw r24,r22
 890 0410 9B87      		std Y+11,r25
 891 0412 8A87      		std Y+10,r24
 892               	.L29:
 893               	.LBB8:
 895               	.LM60:
 896 0414 8A85      		ldd r24,Y+10
 897 0416 9B85      		ldd r25,Y+11
 898 0418 998B      		std Y+17,r25
 899 041a 888B      		std Y+16,r24
 900               	.LBB9:
 902               	.LM61:
 903 041c 8889      		ldd r24,Y+16
 904 041e 9989      		ldd r25,Y+17
 905               	/* #APP */
 906 0420 0197      		1: sbiw r24,1
 907 0422 F1F7      		brne 1b
 908               	/* #NOAPP */
 909 0424 998B      		std Y+17,r25
 910 0426 888B      		std Y+16,r24
 911               	.LBE9:
 912               	.LBE8:
 913               	.LBE7:
 914               	.LBE6:
 916               	.Ltext4:
 152:ledmeter.c    ****         _delay_ms(delay);
 153:ledmeter.c    ****         switch_on_led(i);
 918               	.LM62:
 919 0428 8D81      		ldd r24,Y+5
 920 042a 4FDF      		rcall switch_on_led
 922               	.LM63:
 923 042c 8D81      		ldd r24,Y+5
 924 042e 8F5F      		subi r24,lo8(-(1))
 925 0430 8D83      		std Y+5,r24
 926 0432 ACCF      		rjmp .L24
 927               	.L23:
 928               	/* epilogue: frame size=17 */
 929 0434 6196      		adiw r28,17
 930 0436 0FB6      		in __tmp_reg__,__SREG__
 931 0438 F894      		cli
 932 043a DEBF      		out __SP_H__,r29
 933 043c 0FBE      		out __SREG__,__tmp_reg__
 934 043e CDBF      		out __SP_L__,r28
 935 0440 DF91      		pop r29
 936 0442 CF91      		pop r28
 937 0444 0895      		ret
 938               	/* epilogue end (size=9) */
 939               	/* function switch_on_leds_with_delay size 111 (92) */
 954               	.Lscope9:
 957               	.global	switch_off_leds_with_delay
 959               	switch_off_leds_with_delay:
 154:ledmeter.c    ****     }
 155:ledmeter.c    **** }
 156:ledmeter.c    **** 
 157:ledmeter.c    **** /*
 158:ledmeter.c    ****  * switch off every leds on after one with a delay (called "delay")
 159:ledmeter.c    ****  */
 160:ledmeter.c    **** void switch_off_leds_with_delay(double delay) {
 961               	.LM64:
 962               	/* prologue: frame size=17 */
 963 0446 CF93      		push r28
 964 0448 DF93      		push r29
 965 044a CDB7      		in r28,__SP_L__
 966 044c DEB7      		in r29,__SP_H__
 967 044e 6197      		sbiw r28,17
 968 0450 0FB6      		in __tmp_reg__,__SREG__
 969 0452 F894      		cli
 970 0454 DEBF      		out __SP_H__,r29
 971 0456 0FBE      		out __SREG__,__tmp_reg__
 972 0458 CDBF      		out __SP_L__,r28
 973               	/* prologue end (size=10) */
 974 045a 6983      		std Y+1,r22
 975 045c 7A83      		std Y+2,r23
 976 045e 8B83      		std Y+3,r24
 977 0460 9C83      		std Y+4,r25
 161:ledmeter.c    ****     uint8_t i;
 162:ledmeter.c    ****     for(i = Nleds; i>=1; i--) {
 979               	.LM65:
 980 0462 88E0      		ldi r24,lo8(8)
 981 0464 8D83      		std Y+5,r24
 982               	.L36:
 984               	.LM66:
 985 0466 8D81      		ldd r24,Y+5
 986 0468 8823      		tst r24
 987 046a 09F4      		brne .+2
 988 046c 50C0      		rjmp .L35
 989               	.LBB10:
 991               	.Ltext5:
 993               	.LM67:
 994 046e 8981      		ldd r24,Y+1
 995 0470 9A81      		ldd r25,Y+2
 996 0472 AB81      		ldd r26,Y+3
 997 0474 BC81      		ldd r27,Y+4
 998 0476 8E83      		std Y+6,r24
 999 0478 9F83      		std Y+7,r25
 1000 047a A887      		std Y+8,r26
 1001 047c B987      		std Y+9,r27
 1002               	.LBB11:
 1004               	.LM68:
 1005 047e 20E0      		ldi r18,lo8(0x437a0000)
 1006 0480 30E0      		ldi r19,hi8(0x437a0000)
 1007 0482 4AE7      		ldi r20,hlo8(0x437a0000)
 1008 0484 53E4      		ldi r21,hhi8(0x437a0000)
 1009 0486 6E81      		ldd r22,Y+6
 1010 0488 7F81      		ldd r23,Y+7
 1011 048a 8885      		ldd r24,Y+8
 1012 048c 9985      		ldd r25,Y+9
 1013 048e 00D0      		rcall __mulsf3
 1014 0490 DC01      		movw r26,r24
 1015 0492 CB01      		movw r24,r22
 1016 0494 8C87      		std Y+12,r24
 1017 0496 9D87      		std Y+13,r25
 1018 0498 AE87      		std Y+14,r26
 1019 049a BF87      		std Y+15,r27
 1021               	.LM69:
 1022 049c 20E0      		ldi r18,lo8(0x3f800000)
 1023 049e 30E0      		ldi r19,hi8(0x3f800000)
 1024 04a0 40E8      		ldi r20,hlo8(0x3f800000)
 1025 04a2 5FE3      		ldi r21,hhi8(0x3f800000)
 1026 04a4 6C85      		ldd r22,Y+12
 1027 04a6 7D85      		ldd r23,Y+13
 1028 04a8 8E85      		ldd r24,Y+14
 1029 04aa 9F85      		ldd r25,Y+15
 1030 04ac 00D0      		rcall __ltsf2
 1031 04ae 8823      		tst r24
 1032 04b0 0CF0      		brlt .L40
 1033 04b2 05C0      		rjmp .L39
 1034               	.L40:
 1036               	.LM70:
 1037 04b4 81E0      		ldi r24,lo8(1)
 1038 04b6 90E0      		ldi r25,hi8(1)
 1039 04b8 9B87      		std Y+11,r25
 1040 04ba 8A87      		std Y+10,r24
 1041 04bc 18C0      		rjmp .L41
 1042               	.L39:
 1044               	.LM71:
 1045 04be 20E0      		ldi r18,lo8(0x477fff00)
 1046 04c0 3FEF      		ldi r19,hi8(0x477fff00)
 1047 04c2 4FE7      		ldi r20,hlo8(0x477fff00)
 1048 04c4 57E4      		ldi r21,hhi8(0x477fff00)
 1049 04c6 6C85      		ldd r22,Y+12
 1050 04c8 7D85      		ldd r23,Y+13
 1051 04ca 8E85      		ldd r24,Y+14
 1052 04cc 9F85      		ldd r25,Y+15
 1053 04ce 00D0      		rcall __gtsf2
 1054 04d0 1816      		cp __zero_reg__,r24
 1055 04d2 0CF0      		brlt .L43
 1056 04d4 03C0      		rjmp .L42
 1057               	.L43:
 1059               	.LM72:
 1060 04d6 1B86      		std Y+11,__zero_reg__
 1061 04d8 1A86      		std Y+10,__zero_reg__
 1062 04da 09C0      		rjmp .L41
 1063               	.L42:
 1065               	.LM73:
 1066 04dc 6C85      		ldd r22,Y+12
 1067 04de 7D85      		ldd r23,Y+13
 1068 04e0 8E85      		ldd r24,Y+14
 1069 04e2 9F85      		ldd r25,Y+15
 1070 04e4 00D0      		rcall __fixunssfsi
 1071 04e6 DC01      		movw r26,r24
 1072 04e8 CB01      		movw r24,r22
 1073 04ea 9B87      		std Y+11,r25
 1074 04ec 8A87      		std Y+10,r24
 1075               	.L41:
 1076               	.LBB12:
 1078               	.LM74:
 1079 04ee 8A85      		ldd r24,Y+10
 1080 04f0 9B85      		ldd r25,Y+11
 1081 04f2 998B      		std Y+17,r25
 1082 04f4 888B      		std Y+16,r24
 1083               	.LBB13:
 1085               	.LM75:
 1086 04f6 8889      		ldd r24,Y+16
 1087 04f8 9989      		ldd r25,Y+17
 1088               	/* #APP */
 1089 04fa 0197      		1: sbiw r24,1
 1090 04fc F1F7      		brne 1b
 1091               	/* #NOAPP */
 1092 04fe 998B      		std Y+17,r25
 1093 0500 888B      		std Y+16,r24
 1094               	.LBE13:
 1095               	.LBE12:
 1096               	.LBE11:
 1097               	.LBE10:
 1099               	.Ltext6:
 163:ledmeter.c    ****         _delay_ms(delay);
 164:ledmeter.c    ****         switch_off_led(i);
 1101               	.LM76:
 1102 0502 8D81      		ldd r24,Y+5
 1103 0504 0BDF      		rcall switch_off_led
 1105               	.LM77:
 1106 0506 8D81      		ldd r24,Y+5
 1107 0508 8150      		subi r24,lo8(-(-1))
 1108 050a 8D83      		std Y+5,r24
 1109 050c ACCF      		rjmp .L36
 1110               	.L35:
 1111               	/* epilogue: frame size=17 */
 1112 050e 6196      		adiw r28,17
 1113 0510 0FB6      		in __tmp_reg__,__SREG__
 1114 0512 F894      		cli
 1115 0514 DEBF      		out __SP_H__,r29
 1116 0516 0FBE      		out __SREG__,__tmp_reg__
 1117 0518 CDBF      		out __SP_L__,r28
 1118 051a DF91      		pop r29
 1119 051c CF91      		pop r28
 1120 051e 0895      		ret
 1121               	/* epilogue end (size=9) */
 1122               	/* function switch_off_leds_with_delay size 111 (92) */
 1137               	.Lscope10:
 1139               	.global	test_leds_up_down
 1141               	test_leds_up_down:
 165:ledmeter.c    ****     }
 166:ledmeter.c    **** }
 167:ledmeter.c    **** 
 168:ledmeter.c    **** /*
 169:ledmeter.c    ****  * a function for testing leds that switch on every leds and switch off every leds (one after one)
 170:ledmeter.c    ****  */
 171:ledmeter.c    **** void test_leds_up_down(void) {
 1143               	.LM78:
 1144               	/* prologue: frame size=12 */
 1145 0520 CF93      		push r28
 1146 0522 DF93      		push r29
 1147 0524 CDB7      		in r28,__SP_L__
 1148 0526 DEB7      		in r29,__SP_H__
 1149 0528 2C97      		sbiw r28,12
 1150 052a 0FB6      		in __tmp_reg__,__SREG__
 1151 052c F894      		cli
 1152 052e DEBF      		out __SP_H__,r29
 1153 0530 0FBE      		out __SREG__,__tmp_reg__
 1154 0532 CDBF      		out __SP_L__,r28
 1155               	/* prologue end (size=10) */
 172:ledmeter.c    ****     switch_on_leds_with_delay(50); //100
 1157               	.LM79:
 1158 0534 60E0      		ldi r22,lo8(0x42480000)
 1159 0536 70E0      		ldi r23,hi8(0x42480000)
 1160 0538 88E4      		ldi r24,hlo8(0x42480000)
 1161 053a 92E4      		ldi r25,hhi8(0x42480000)
 1162 053c 17DF      		rcall switch_on_leds_with_delay
 1163               	.LBB14:
 1165               	.Ltext7:
 1167               	.LM80:
 1168 053e 80E0      		ldi r24,lo8(0x42480000)
 1169 0540 90E0      		ldi r25,hi8(0x42480000)
 1170 0542 A8E4      		ldi r26,hlo8(0x42480000)
 1171 0544 B2E4      		ldi r27,hhi8(0x42480000)
 1172 0546 8983      		std Y+1,r24
 1173 0548 9A83      		std Y+2,r25
 1174 054a AB83      		std Y+3,r26
 1175 054c BC83      		std Y+4,r27
 1176               	.LBB15:
 1178               	.LM81:
 1179 054e 20E0      		ldi r18,lo8(0x437a0000)
 1180 0550 30E0      		ldi r19,hi8(0x437a0000)
 1181 0552 4AE7      		ldi r20,hlo8(0x437a0000)
 1182 0554 53E4      		ldi r21,hhi8(0x437a0000)
 1183 0556 6981      		ldd r22,Y+1
 1184 0558 7A81      		ldd r23,Y+2
 1185 055a 8B81      		ldd r24,Y+3
 1186 055c 9C81      		ldd r25,Y+4
 1187 055e 00D0      		rcall __mulsf3
 1188 0560 DC01      		movw r26,r24
 1189 0562 CB01      		movw r24,r22
 1190 0564 8F83      		std Y+7,r24
 1191 0566 9887      		std Y+8,r25
 1192 0568 A987      		std Y+9,r26
 1193 056a BA87      		std Y+10,r27
 1195               	.LM82:
 1196 056c 20E0      		ldi r18,lo8(0x3f800000)
 1197 056e 30E0      		ldi r19,hi8(0x3f800000)
 1198 0570 40E8      		ldi r20,hlo8(0x3f800000)
 1199 0572 5FE3      		ldi r21,hhi8(0x3f800000)
 1200 0574 6F81      		ldd r22,Y+7
 1201 0576 7885      		ldd r23,Y+8
 1202 0578 8985      		ldd r24,Y+9
 1203 057a 9A85      		ldd r25,Y+10
 1204 057c 00D0      		rcall __ltsf2
 1205 057e 8823      		tst r24
 1206 0580 0CF0      		brlt .L49
 1208               	.LM83:
 1209 0582 05C0      		rjmp .L48
 1210               	.L49:
 1212               	.LM84:
 1213 0584 81E0      		ldi r24,lo8(1)
 1214 0586 90E0      		ldi r25,hi8(1)
 1215 0588 9E83      		std Y+6,r25
 1216 058a 8D83      		std Y+5,r24
 1217 058c 18C0      		rjmp .L50
 1218               	.L48:
 1220               	.LM85:
 1221 058e 20E0      		ldi r18,lo8(0x477fff00)
 1222 0590 3FEF      		ldi r19,hi8(0x477fff00)
 1223 0592 4FE7      		ldi r20,hlo8(0x477fff00)
 1224 0594 57E4      		ldi r21,hhi8(0x477fff00)
 1225 0596 6F81      		ldd r22,Y+7
 1226 0598 7885      		ldd r23,Y+8
 1227 059a 8985      		ldd r24,Y+9
 1228 059c 9A85      		ldd r25,Y+10
 1229 059e 00D0      		rcall __gtsf2
 1230 05a0 1816      		cp __zero_reg__,r24
 1231 05a2 0CF0      		brlt .L52
 1232 05a4 03C0      		rjmp .L51
 1233               	.L52:
 1235               	.LM86:
 1236 05a6 1E82      		std Y+6,__zero_reg__
 1237 05a8 1D82      		std Y+5,__zero_reg__
 1238 05aa 09C0      		rjmp .L50
 1239               	.L51:
 1241               	.LM87:
 1242 05ac 6F81      		ldd r22,Y+7
 1243 05ae 7885      		ldd r23,Y+8
 1244 05b0 8985      		ldd r24,Y+9
 1245 05b2 9A85      		ldd r25,Y+10
 1246 05b4 00D0      		rcall __fixunssfsi
 1247 05b6 DC01      		movw r26,r24
 1248 05b8 CB01      		movw r24,r22
 1249 05ba 9E83      		std Y+6,r25
 1250 05bc 8D83      		std Y+5,r24
 1251               	.L50:
 1252               	.LBB16:
 1254               	.LM88:
 1255 05be 8D81      		ldd r24,Y+5
 1256 05c0 9E81      		ldd r25,Y+6
 1257 05c2 9C87      		std Y+12,r25
 1258 05c4 8B87      		std Y+11,r24
 1259               	.LBB17:
 1261               	.LM89:
 1262 05c6 8B85      		ldd r24,Y+11
 1263 05c8 9C85      		ldd r25,Y+12
 1264               	/* #APP */
 1265 05ca 0197      		1: sbiw r24,1
 1266 05cc F1F7      		brne 1b
 1267               	/* #NOAPP */
 1268 05ce 9C87      		std Y+12,r25
 1269 05d0 8B87      		std Y+11,r24
 1270               	.LBE17:
 1271               	.LBE16:
 1272               	.LBE15:
 1273               	.LBE14:
 1275               	.Ltext8:
 173:ledmeter.c    ****     _delay_ms(50); //50
 174:ledmeter.c    ****     switch_off_leds_with_delay(50); //100
 1277               	.LM90:
 1278 05d2 60E0      		ldi r22,lo8(0x42480000)
 1279 05d4 70E0      		ldi r23,hi8(0x42480000)
 1280 05d6 88E4      		ldi r24,hlo8(0x42480000)
 1281 05d8 92E4      		ldi r25,hhi8(0x42480000)
 1282 05da 35DF      		rcall switch_off_leds_with_delay
 1283               	/* epilogue: frame size=12 */
 1284 05dc 2C96      		adiw r28,12
 1285 05de 0FB6      		in __tmp_reg__,__SREG__
 1286 05e0 F894      		cli
 1287 05e2 DEBF      		out __SP_H__,r29
 1288 05e4 0FBE      		out __SREG__,__tmp_reg__
 1289 05e6 CDBF      		out __SP_L__,r28
 1290 05e8 DF91      		pop r29
 1291 05ea CF91      		pop r28
 1292 05ec 0895      		ret
 1293               	/* epilogue end (size=9) */
 1294               	/* function test_leds_up_down size 105 (86) */
 1306               	.Lscope11:
 1308               	.global	test_leds_up_off
 1310               	test_leds_up_off:
 175:ledmeter.c    **** }
 176:ledmeter.c    **** 
 177:ledmeter.c    **** void test_leds_up_off(void) {
 1312               	.LM91:
 1313               	/* prologue: frame size=12 */
 1314 05ee CF93      		push r28
 1315 05f0 DF93      		push r29
 1316 05f2 CDB7      		in r28,__SP_L__
 1317 05f4 DEB7      		in r29,__SP_H__
 1318 05f6 2C97      		sbiw r28,12
 1319 05f8 0FB6      		in __tmp_reg__,__SREG__
 1320 05fa F894      		cli
 1321 05fc DEBF      		out __SP_H__,r29
 1322 05fe 0FBE      		out __SREG__,__tmp_reg__
 1323 0600 CDBF      		out __SP_L__,r28
 1324               	/* prologue end (size=10) */
 178:ledmeter.c    ****     switch_on_leds_with_delay(50); //100
 1326               	.LM92:
 1327 0602 60E0      		ldi r22,lo8(0x42480000)
 1328 0604 70E0      		ldi r23,hi8(0x42480000)
 1329 0606 88E4      		ldi r24,hlo8(0x42480000)
 1330 0608 92E4      		ldi r25,hhi8(0x42480000)
 1331 060a B0DE      		rcall switch_on_leds_with_delay
 1332               	.LBB18:
 1334               	.Ltext9:
 1336               	.LM93:
 1337 060c 80E0      		ldi r24,lo8(0x42480000)
 1338 060e 90E0      		ldi r25,hi8(0x42480000)
 1339 0610 A8E4      		ldi r26,hlo8(0x42480000)
 1340 0612 B2E4      		ldi r27,hhi8(0x42480000)
 1341 0614 8983      		std Y+1,r24
 1342 0616 9A83      		std Y+2,r25
 1343 0618 AB83      		std Y+3,r26
 1344 061a BC83      		std Y+4,r27
 1345               	.LBB19:
 1347               	.LM94:
 1348 061c 20E0      		ldi r18,lo8(0x437a0000)
 1349 061e 30E0      		ldi r19,hi8(0x437a0000)
 1350 0620 4AE7      		ldi r20,hlo8(0x437a0000)
 1351 0622 53E4      		ldi r21,hhi8(0x437a0000)
 1352 0624 6981      		ldd r22,Y+1
 1353 0626 7A81      		ldd r23,Y+2
 1354 0628 8B81      		ldd r24,Y+3
 1355 062a 9C81      		ldd r25,Y+4
 1356 062c 00D0      		rcall __mulsf3
 1357 062e DC01      		movw r26,r24
 1358 0630 CB01      		movw r24,r22
 1359 0632 8F83      		std Y+7,r24
 1360 0634 9887      		std Y+8,r25
 1361 0636 A987      		std Y+9,r26
 1362 0638 BA87      		std Y+10,r27
 1364               	.LM95:
 1365 063a 20E0      		ldi r18,lo8(0x3f800000)
 1366 063c 30E0      		ldi r19,hi8(0x3f800000)
 1367 063e 40E8      		ldi r20,hlo8(0x3f800000)
 1368 0640 5FE3      		ldi r21,hhi8(0x3f800000)
 1369 0642 6F81      		ldd r22,Y+7
 1370 0644 7885      		ldd r23,Y+8
 1371 0646 8985      		ldd r24,Y+9
 1372 0648 9A85      		ldd r25,Y+10
 1373 064a 00D0      		rcall __ltsf2
 1374 064c 8823      		tst r24
 1375 064e 0CF0      		brlt .L58
 1377               	.LM96:
 1378 0650 05C0      		rjmp .L57
 1379               	.L58:
 1381               	.LM97:
 1382 0652 81E0      		ldi r24,lo8(1)
 1383 0654 90E0      		ldi r25,hi8(1)
 1384 0656 9E83      		std Y+6,r25
 1385 0658 8D83      		std Y+5,r24
 1386 065a 18C0      		rjmp .L59
 1387               	.L57:
 1389               	.LM98:
 1390 065c 20E0      		ldi r18,lo8(0x477fff00)
 1391 065e 3FEF      		ldi r19,hi8(0x477fff00)
 1392 0660 4FE7      		ldi r20,hlo8(0x477fff00)
 1393 0662 57E4      		ldi r21,hhi8(0x477fff00)
 1394 0664 6F81      		ldd r22,Y+7
 1395 0666 7885      		ldd r23,Y+8
 1396 0668 8985      		ldd r24,Y+9
 1397 066a 9A85      		ldd r25,Y+10
 1398 066c 00D0      		rcall __gtsf2
 1399 066e 1816      		cp __zero_reg__,r24
 1400 0670 0CF0      		brlt .L61
 1401 0672 03C0      		rjmp .L60
 1402               	.L61:
 1404               	.LM99:
 1405 0674 1E82      		std Y+6,__zero_reg__
 1406 0676 1D82      		std Y+5,__zero_reg__
 1407 0678 09C0      		rjmp .L59
 1408               	.L60:
 1410               	.LM100:
 1411 067a 6F81      		ldd r22,Y+7
 1412 067c 7885      		ldd r23,Y+8
 1413 067e 8985      		ldd r24,Y+9
 1414 0680 9A85      		ldd r25,Y+10
 1415 0682 00D0      		rcall __fixunssfsi
 1416 0684 DC01      		movw r26,r24
 1417 0686 CB01      		movw r24,r22
 1418 0688 9E83      		std Y+6,r25
 1419 068a 8D83      		std Y+5,r24
 1420               	.L59:
 1421               	.LBB20:
 1423               	.LM101:
 1424 068c 8D81      		ldd r24,Y+5
 1425 068e 9E81      		ldd r25,Y+6
 1426 0690 9C87      		std Y+12,r25
 1427 0692 8B87      		std Y+11,r24
 1428               	.LBB21:
 1430               	.LM102:
 1431 0694 8B85      		ldd r24,Y+11
 1432 0696 9C85      		ldd r25,Y+12
 1433               	/* #APP */
 1434 0698 0197      		1: sbiw r24,1
 1435 069a F1F7      		brne 1b
 1436               	/* #NOAPP */
 1437 069c 9C87      		std Y+12,r25
 1438 069e 8B87      		std Y+11,r24
 1439               	.LBE21:
 1440               	.LBE20:
 1441               	.LBE19:
 1442               	.LBE18:
 1444               	.Ltext10:
 179:ledmeter.c    ****     _delay_ms(50); //50
 180:ledmeter.c    ****     switch_off_all_leds();
 1446               	.LM103:
 1447 06a0 0ADE      		rcall switch_off_all_leds
 1448               	/* epilogue: frame size=12 */
 1449 06a2 2C96      		adiw r28,12
 1450 06a4 0FB6      		in __tmp_reg__,__SREG__
 1451 06a6 F894      		cli
 1452 06a8 DEBF      		out __SP_H__,r29
 1453 06aa 0FBE      		out __SREG__,__tmp_reg__
 1454 06ac CDBF      		out __SP_L__,r28
 1455 06ae DF91      		pop r29
 1456 06b0 CF91      		pop r28
 1457 06b2 0895      		ret
 1458               	/* epilogue end (size=9) */
 1459               	/* function test_leds_up_off size 101 (82) */
 1471               	.Lscope12:
 1474               	.global	switch_on_min_dels
 1476               	switch_on_min_dels:
 181:ledmeter.c    **** }
 182:ledmeter.c    **** 
 183:ledmeter.c    **** /*
 184:ledmeter.c    ****  *  switch on every leds (from 0 to n)  (and switch off others)
 185:ledmeter.c    ****  */
 186:ledmeter.c    **** void switch_on_min_dels(uint8_t n) {
 1478               	.LM104:
 1479               	/* prologue: frame size=2 */
 1480 06b4 CF93      		push r28
 1481 06b6 DF93      		push r29
 1482 06b8 CDB7      		in r28,__SP_L__
 1483 06ba DEB7      		in r29,__SP_H__
 1484 06bc 2297      		sbiw r28,2
 1485 06be 0FB6      		in __tmp_reg__,__SREG__
 1486 06c0 F894      		cli
 1487 06c2 DEBF      		out __SP_H__,r29
 1488 06c4 0FBE      		out __SREG__,__tmp_reg__
 1489 06c6 CDBF      		out __SP_L__,r28
 1490               	/* prologue end (size=10) */
 1491 06c8 8983      		std Y+1,r24
 187:ledmeter.c    ****     uint8_t i;
 188:ledmeter.c    ****     for(i = 1; i<=Nleds; i++) {
 1493               	.LM105:
 1494 06ca 81E0      		ldi r24,lo8(1)
 1495 06cc 8A83      		std Y+2,r24
 1496               	.L66:
 1498               	.LM106:
 1499 06ce 8A81      		ldd r24,Y+2
 1500 06d0 8930      		cpi r24,lo8(9)
 1501 06d2 68F4      		brsh .L65
 189:ledmeter.c    ****         if (i<=n) {
 1503               	.LM107:
 1504 06d4 9A81      		ldd r25,Y+2
 1505 06d6 8981      		ldd r24,Y+1
 1506 06d8 8917      		cp r24,r25
 1507 06da 18F0      		brlo .L69
 190:ledmeter.c    ****             switch_on_led(i);
 1509               	.LM108:
 1510 06dc 8A81      		ldd r24,Y+2
 1511 06de F5DD      		rcall switch_on_led
 1512 06e0 02C0      		rjmp .L68
 1513               	.L69:
 191:ledmeter.c    ****         } else {
 192:ledmeter.c    ****             switch_off_led(i);
 1515               	.LM109:
 1516 06e2 8A81      		ldd r24,Y+2
 1517 06e4 1BDE      		rcall switch_off_led
 1518               	.L68:
 1520               	.LM110:
 1521 06e6 8A81      		ldd r24,Y+2
 1522 06e8 8F5F      		subi r24,lo8(-(1))
 1523 06ea 8A83      		std Y+2,r24
 1524 06ec F0CF      		rjmp .L66
 1525               	.L65:
 1526               	/* epilogue: frame size=2 */
 1527 06ee 2296      		adiw r28,2
 1528 06f0 0FB6      		in __tmp_reg__,__SREG__
 1529 06f2 F894      		cli
 1530 06f4 DEBF      		out __SP_H__,r29
 1531 06f6 0FBE      		out __SREG__,__tmp_reg__
 1532 06f8 CDBF      		out __SP_L__,r28
 1533 06fa DF91      		pop r29
 1534 06fc CF91      		pop r28
 1535 06fe 0895      		ret
 1536               	/* epilogue end (size=9) */
 1537               	/* function switch_on_min_dels size 38 (19) */
 1542               	.Lscope13:
 1545               	.global	switch_on_max_dels
 1547               	switch_on_max_dels:
 193:ledmeter.c    ****         }
 194:ledmeter.c    ****     }
 195:ledmeter.c    **** }
 196:ledmeter.c    **** 
 197:ledmeter.c    **** /*
 198:ledmeter.c    ****  *  switch on every leds (from Nleds to n)
 199:ledmeter.c    ****  */
 200:ledmeter.c    **** void switch_on_max_dels(uint8_t n) {
 1549               	.LM111:
 1550               	/* prologue: frame size=2 */
 1551 0700 CF93      		push r28
 1552 0702 DF93      		push r29
 1553 0704 CDB7      		in r28,__SP_L__
 1554 0706 DEB7      		in r29,__SP_H__
 1555 0708 2297      		sbiw r28,2
 1556 070a 0FB6      		in __tmp_reg__,__SREG__
 1557 070c F894      		cli
 1558 070e DEBF      		out __SP_H__,r29
 1559 0710 0FBE      		out __SREG__,__tmp_reg__
 1560 0712 CDBF      		out __SP_L__,r28
 1561               	/* prologue end (size=10) */
 1562 0714 8983      		std Y+1,r24
 201:ledmeter.c    ****     uint8_t i;
 202:ledmeter.c    ****     for(i = Nleds; i>=1; i--) {
 1564               	.LM112:
 1565 0716 88E0      		ldi r24,lo8(8)
 1566 0718 8A83      		std Y+2,r24
 1567               	.L72:
 1569               	.LM113:
 1570 071a 8A81      		ldd r24,Y+2
 1571 071c 8823      		tst r24
 1572 071e B1F0      		breq .L71
 203:ledmeter.c    ****         if (i>=Nleds-n) {
 1574               	.LM114:
 1575 0720 8A81      		ldd r24,Y+2
 1576 0722 482F      		mov r20,r24
 1577 0724 5527      		clr r21
 1578 0726 8981      		ldd r24,Y+1
 1579 0728 282F      		mov r18,r24
 1580 072a 3327      		clr r19
 1581 072c 88E0      		ldi r24,lo8(8)
 1582 072e 90E0      		ldi r25,hi8(8)
 1583 0730 821B      		sub r24,r18
 1584 0732 930B      		sbc r25,r19
 1585 0734 4817      		cp r20,r24
 1586 0736 5907      		cpc r21,r25
 1587 0738 1CF0      		brlt .L75
 204:ledmeter.c    ****             switch_on_led(i);
 1589               	.LM115:
 1590 073a 8A81      		ldd r24,Y+2
 1591 073c C6DD      		rcall switch_on_led
 1592 073e 02C0      		rjmp .L74
 1593               	.L75:
 205:ledmeter.c    ****         } else {
 206:ledmeter.c    ****             switch_off_led(i);
 1595               	.LM116:
 1596 0740 8A81      		ldd r24,Y+2
 1597 0742 ECDD      		rcall switch_off_led
 1598               	.L74:
 1600               	.LM117:
 1601 0744 8A81      		ldd r24,Y+2
 1602 0746 8150      		subi r24,lo8(-(-1))
 1603 0748 8A83      		std Y+2,r24
 1604 074a E7CF      		rjmp .L72
 1605               	.L71:
 1606               	/* epilogue: frame size=2 */
 1607 074c 2296      		adiw r28,2
 1608 074e 0FB6      		in __tmp_reg__,__SREG__
 1609 0750 F894      		cli
 1610 0752 DEBF      		out __SP_H__,r29
 1611 0754 0FBE      		out __SREG__,__tmp_reg__
 1612 0756 CDBF      		out __SP_L__,r28
 1613 0758 DF91      		pop r29
 1614 075a CF91      		pop r28
 1615 075c 0895      		ret
 1616               	/* epilogue end (size=9) */
 1617               	/* function switch_on_max_dels size 47 (28) */
 1622               	.Lscope14:
 1626               	.global	led_alarm
 1628               	led_alarm:
 207:ledmeter.c    ****         }
 208:ledmeter.c    ****     }
 209:ledmeter.c    ****     // TO TEST (switch off)
 210:ledmeter.c    **** }
 211:ledmeter.c    **** 
 212:ledmeter.c    **** /*
 213:ledmeter.c    ****  * switch off every leds, wait and swith them all, n times (a sort of visual alarm)
 214:ledmeter.c    ****  */
 215:ledmeter.c    **** void led_alarm(uint8_t n, double delay) {
 1630               	.LM118:
 1631               	/* prologue: frame size=18 */
 1632 075e CF93      		push r28
 1633 0760 DF93      		push r29
 1634 0762 CDB7      		in r28,__SP_L__
 1635 0764 DEB7      		in r29,__SP_H__
 1636 0766 6297      		sbiw r28,18
 1637 0768 0FB6      		in __tmp_reg__,__SREG__
 1638 076a F894      		cli
 1639 076c DEBF      		out __SP_H__,r29
 1640 076e 0FBE      		out __SREG__,__tmp_reg__
 1641 0770 CDBF      		out __SP_L__,r28
 1642               	/* prologue end (size=10) */
 1643 0772 8983      		std Y+1,r24
 1644 0774 4A83      		std Y+2,r20
 1645 0776 5B83      		std Y+3,r21
 1646 0778 6C83      		std Y+4,r22
 1647 077a 7D83      		std Y+5,r23
 216:ledmeter.c    ****     uint8_t i;
 217:ledmeter.c    ****     for(i = 1; i<=n; i++) {
 1649               	.LM119:
 1650 077c 81E0      		ldi r24,lo8(1)
 1651 077e 8E83      		std Y+6,r24
 1652               	.L78:
 1654               	.LM120:
 1655 0780 9E81      		ldd r25,Y+6
 1656 0782 8981      		ldd r24,Y+1
 1657 0784 8917      		cp r24,r25
 1658 0786 08F4      		brsh .+2
 1659 0788 9AC0      		rjmp .L79
 218:ledmeter.c    ****         switch_off_all_leds();
 1661               	.LM121:
 1662 078a 95DD      		rcall switch_off_all_leds
 1663               	.LBB22:
 1665               	.Ltext11:
 1667               	.LM122:
 1668 078c 8A81      		ldd r24,Y+2
 1669 078e 9B81      		ldd r25,Y+3
 1670 0790 AC81      		ldd r26,Y+4
 1671 0792 BD81      		ldd r27,Y+5
 1672 0794 8F83      		std Y+7,r24
 1673 0796 9887      		std Y+8,r25
 1674 0798 A987      		std Y+9,r26
 1675 079a BA87      		std Y+10,r27
 1676               	.LBB23:
 1678               	.LM123:
 1679 079c 20E0      		ldi r18,lo8(0x437a0000)
 1680 079e 30E0      		ldi r19,hi8(0x437a0000)
 1681 07a0 4AE7      		ldi r20,hlo8(0x437a0000)
 1682 07a2 53E4      		ldi r21,hhi8(0x437a0000)
 1683 07a4 6F81      		ldd r22,Y+7
 1684 07a6 7885      		ldd r23,Y+8
 1685 07a8 8985      		ldd r24,Y+9
 1686 07aa 9A85      		ldd r25,Y+10
 1687 07ac 00D0      		rcall __mulsf3
 1688 07ae DC01      		movw r26,r24
 1689 07b0 CB01      		movw r24,r22
 1690 07b2 8D87      		std Y+13,r24
 1691 07b4 9E87      		std Y+14,r25
 1692 07b6 AF87      		std Y+15,r26
 1693 07b8 B88B      		std Y+16,r27
 1695               	.LM124:
 1696 07ba 20E0      		ldi r18,lo8(0x3f800000)
 1697 07bc 30E0      		ldi r19,hi8(0x3f800000)
 1698 07be 40E8      		ldi r20,hlo8(0x3f800000)
 1699 07c0 5FE3      		ldi r21,hhi8(0x3f800000)
 1700 07c2 6D85      		ldd r22,Y+13
 1701 07c4 7E85      		ldd r23,Y+14
 1702 07c6 8F85      		ldd r24,Y+15
 1703 07c8 9889      		ldd r25,Y+16
 1704 07ca 00D0      		rcall __ltsf2
 1705 07cc 8823      		tst r24
 1706 07ce 0CF0      		brlt .L82
 1707 07d0 05C0      		rjmp .L81
 1708               	.L82:
 1710               	.LM125:
 1711 07d2 81E0      		ldi r24,lo8(1)
 1712 07d4 90E0      		ldi r25,hi8(1)
 1713 07d6 9C87      		std Y+12,r25
 1714 07d8 8B87      		std Y+11,r24
 1715 07da 18C0      		rjmp .L83
 1716               	.L81:
 1718               	.LM126:
 1719 07dc 20E0      		ldi r18,lo8(0x477fff00)
 1720 07de 3FEF      		ldi r19,hi8(0x477fff00)
 1721 07e0 4FE7      		ldi r20,hlo8(0x477fff00)
 1722 07e2 57E4      		ldi r21,hhi8(0x477fff00)
 1723 07e4 6D85      		ldd r22,Y+13
 1724 07e6 7E85      		ldd r23,Y+14
 1725 07e8 8F85      		ldd r24,Y+15
 1726 07ea 9889      		ldd r25,Y+16
 1727 07ec 00D0      		rcall __gtsf2
 1728 07ee 1816      		cp __zero_reg__,r24
 1729 07f0 0CF0      		brlt .L85
 1730 07f2 03C0      		rjmp .L84
 1731               	.L85:
 1733               	.LM127:
 1734 07f4 1C86      		std Y+12,__zero_reg__
 1735 07f6 1B86      		std Y+11,__zero_reg__
 1736 07f8 09C0      		rjmp .L83
 1737               	.L84:
 1739               	.LM128:
 1740 07fa 6D85      		ldd r22,Y+13
 1741 07fc 7E85      		ldd r23,Y+14
 1742 07fe 8F85      		ldd r24,Y+15
 1743 0800 9889      		ldd r25,Y+16
 1744 0802 00D0      		rcall __fixunssfsi
 1745 0804 DC01      		movw r26,r24
 1746 0806 CB01      		movw r24,r22
 1747 0808 9C87      		std Y+12,r25
 1748 080a 8B87      		std Y+11,r24
 1749               	.L83:
 1750               	.LBB24:
 1752               	.LM129:
 1753 080c 8B85      		ldd r24,Y+11
 1754 080e 9C85      		ldd r25,Y+12
 1755 0810 9A8B      		std Y+18,r25
 1756 0812 898B      		std Y+17,r24
 1757               	.LBB25:
 1759               	.LM130:
 1760 0814 8989      		ldd r24,Y+17
 1761 0816 9A89      		ldd r25,Y+18
 1762               	/* #APP */
 1763 0818 0197      		1: sbiw r24,1
 1764 081a F1F7      		brne 1b
 1765               	/* #NOAPP */
 1766 081c 9A8B      		std Y+18,r25
 1767 081e 898B      		std Y+17,r24
 1768               	.LBE25:
 1769               	.LBE24:
 1770               	.LBE23:
 1771               	.LBE22:
 1773               	.Ltext12:
 219:ledmeter.c    ****         _delay_ms(delay);
 220:ledmeter.c    ****         switch_on_all_leds();
 1775               	.LM131:
 1776 0820 41DD      		rcall switch_on_all_leds
 1777               	.LBB26:
 1779               	.Ltext13:
 1781               	.LM132:
 1782 0822 8A81      		ldd r24,Y+2
 1783 0824 9B81      		ldd r25,Y+3
 1784 0826 AC81      		ldd r26,Y+4
 1785 0828 BD81      		ldd r27,Y+5
 1786 082a 8D87      		std Y+13,r24
 1787 082c 9E87      		std Y+14,r25
 1788 082e AF87      		std Y+15,r26
 1789 0830 B88B      		std Y+16,r27
 1790               	.LBB27:
 1792               	.LM133:
 1793 0832 20E0      		ldi r18,lo8(0x437a0000)
 1794 0834 30E0      		ldi r19,hi8(0x437a0000)
 1795 0836 4AE7      		ldi r20,hlo8(0x437a0000)
 1796 0838 53E4      		ldi r21,hhi8(0x437a0000)
 1797 083a 6D85      		ldd r22,Y+13
 1798 083c 7E85      		ldd r23,Y+14
 1799 083e 8F85      		ldd r24,Y+15
 1800 0840 9889      		ldd r25,Y+16
 1801 0842 00D0      		rcall __mulsf3
 1802 0844 DC01      		movw r26,r24
 1803 0846 CB01      		movw r24,r22
 1804 0848 8F83      		std Y+7,r24
 1805 084a 9887      		std Y+8,r25
 1806 084c A987      		std Y+9,r26
 1807 084e BA87      		std Y+10,r27
 1809               	.LM134:
 1810 0850 20E0      		ldi r18,lo8(0x3f800000)
 1811 0852 30E0      		ldi r19,hi8(0x3f800000)
 1812 0854 40E8      		ldi r20,hlo8(0x3f800000)
 1813 0856 5FE3      		ldi r21,hhi8(0x3f800000)
 1814 0858 6F81      		ldd r22,Y+7
 1815 085a 7885      		ldd r23,Y+8
 1816 085c 8985      		ldd r24,Y+9
 1817 085e 9A85      		ldd r25,Y+10
 1818 0860 00D0      		rcall __ltsf2
 1819 0862 8823      		tst r24
 1820 0864 0CF0      		brlt .L90
 1821 0866 05C0      		rjmp .L89
 1822               	.L90:
 1824               	.LM135:
 1825 0868 81E0      		ldi r24,lo8(1)
 1826 086a 90E0      		ldi r25,hi8(1)
 1827 086c 9A8B      		std Y+18,r25
 1828 086e 898B      		std Y+17,r24
 1829 0870 18C0      		rjmp .L91
 1830               	.L89:
 1832               	.LM136:
 1833 0872 20E0      		ldi r18,lo8(0x477fff00)
 1834 0874 3FEF      		ldi r19,hi8(0x477fff00)
 1835 0876 4FE7      		ldi r20,hlo8(0x477fff00)
 1836 0878 57E4      		ldi r21,hhi8(0x477fff00)
 1837 087a 6F81      		ldd r22,Y+7
 1838 087c 7885      		ldd r23,Y+8
 1839 087e 8985      		ldd r24,Y+9
 1840 0880 9A85      		ldd r25,Y+10
 1841 0882 00D0      		rcall __gtsf2
 1842 0884 1816      		cp __zero_reg__,r24
 1843 0886 0CF0      		brlt .L93
 1844 0888 03C0      		rjmp .L92
 1845               	.L93:
 1847               	.LM137:
 1848 088a 1A8A      		std Y+18,__zero_reg__
 1849 088c 198A      		std Y+17,__zero_reg__
 1850 088e 09C0      		rjmp .L91
 1851               	.L92:
 1853               	.LM138:
 1854 0890 6F81      		ldd r22,Y+7
 1855 0892 7885      		ldd r23,Y+8
 1856 0894 8985      		ldd r24,Y+9
 1857 0896 9A85      		ldd r25,Y+10
 1858 0898 00D0      		rcall __fixunssfsi
 1859 089a DC01      		movw r26,r24
 1860 089c CB01      		movw r24,r22
 1861 089e 9A8B      		std Y+18,r25
 1862 08a0 898B      		std Y+17,r24
 1863               	.L91:
 1864               	.LBB28:
 1866               	.LM139:
 1867 08a2 8989      		ldd r24,Y+17
 1868 08a4 9A89      		ldd r25,Y+18
 1869 08a6 9C87      		std Y+12,r25
 1870 08a8 8B87      		std Y+11,r24
 1871               	.LBB29:
 1873               	.LM140:
 1874 08aa 8B85      		ldd r24,Y+11
 1875 08ac 9C85      		ldd r25,Y+12
 1876               	/* #APP */
 1877 08ae 0197      		1: sbiw r24,1
 1878 08b0 F1F7      		brne 1b
 1879               	/* #NOAPP */
 1880 08b2 9C87      		std Y+12,r25
 1881 08b4 8B87      		std Y+11,r24
 1882               	.LBE29:
 1883               	.LBE28:
 1884               	.LBE27:
 1885               	.LBE26:
 1887               	.Ltext14:
 1889               	.LM141:
 1890 08b6 8E81      		ldd r24,Y+6
 1891 08b8 8F5F      		subi r24,lo8(-(1))
 1892 08ba 8E83      		std Y+6,r24
 1893 08bc 61CF      		rjmp .L78
 1894               	.L79:
 221:ledmeter.c    ****         _delay_ms(delay);
 222:ledmeter.c    ****     }
 223:ledmeter.c    ****     switch_off_all_leds();
 1896               	.LM142:
 1897 08be FBDC      		rcall switch_off_all_leds
 1898               	/* epilogue: frame size=18 */
 1899 08c0 6296      		adiw r28,18
 1900 08c2 0FB6      		in __tmp_reg__,__SREG__
 1901 08c4 F894      		cli
 1902 08c6 DEBF      		out __SP_H__,r29
 1903 08c8 0FBE      		out __SREG__,__tmp_reg__
 1904 08ca CDBF      		out __SP_L__,r28
 1905 08cc DF91      		pop r29
 1906 08ce CF91      		pop r28
 1907 08d0 0895      		ret
 1908               	/* epilogue end (size=9) */
 1909               	/* function led_alarm size 190 (171) */
 1934               	.Lscope15:
 1937               	.global	roundp
 1939               	roundp:
 224:ledmeter.c    **** }
 225:ledmeter.c    **** 
 226:ledmeter.c    **** /*
 227:ledmeter.c    ****  * switch on every dels depending of the percentage p
 228:ledmeter.c    ****  */
 229:ledmeter.c    **** //#define roundp floor
 230:ledmeter.c    **** inline uint8_t roundp(double n) {
 1941               	.LM143:
 1942               	/* prologue: frame size=4 */
 1943 08d2 CF93      		push r28
 1944 08d4 DF93      		push r29
 1945 08d6 CDB7      		in r28,__SP_L__
 1946 08d8 DEB7      		in r29,__SP_H__
 1947 08da 2497      		sbiw r28,4
 1948 08dc 0FB6      		in __tmp_reg__,__SREG__
 1949 08de F894      		cli
 1950 08e0 DEBF      		out __SP_H__,r29
 1951 08e2 0FBE      		out __SREG__,__tmp_reg__
 1952 08e4 CDBF      		out __SP_L__,r28
 1953               	/* prologue end (size=10) */
 1954 08e6 6983      		std Y+1,r22
 1955 08e8 7A83      		std Y+2,r23
 1956 08ea 8B83      		std Y+3,r24
 1957 08ec 9C83      		std Y+4,r25
 231:ledmeter.c    ****     return floor(n+0.5);
 1959               	.LM144:
 1960 08ee 20E0      		ldi r18,lo8(0x3f000000)
 1961 08f0 30E0      		ldi r19,hi8(0x3f000000)
 1962 08f2 40E0      		ldi r20,hlo8(0x3f000000)
 1963 08f4 5FE3      		ldi r21,hhi8(0x3f000000)
 1964 08f6 6981      		ldd r22,Y+1
 1965 08f8 7A81      		ldd r23,Y+2
 1966 08fa 8B81      		ldd r24,Y+3
 1967 08fc 9C81      		ldd r25,Y+4
 1968 08fe 00D0      		rcall __addsf3
 1969 0900 DC01      		movw r26,r24
 1970 0902 CB01      		movw r24,r22
 1971 0904 BC01      		movw r22,r24
 1972 0906 CD01      		movw r24,r26
 1973 0908 00D0      		rcall floor
 1974 090a DC01      		movw r26,r24
 1975 090c CB01      		movw r24,r22
 1976 090e BC01      		movw r22,r24
 1977 0910 CD01      		movw r24,r26
 1978 0912 00D0      		rcall __fixunssfsi
 1979 0914 DC01      		movw r26,r24
 1980 0916 CB01      		movw r24,r22
 1981 0918 9927      		clr r25
 1982               	/* epilogue: frame size=4 */
 1983 091a 2496      		adiw r28,4
 1984 091c 0FB6      		in __tmp_reg__,__SREG__
 1985 091e F894      		cli
 1986 0920 DEBF      		out __SP_H__,r29
 1987 0922 0FBE      		out __SREG__,__tmp_reg__
 1988 0924 CDBF      		out __SP_L__,r28
 1989 0926 DF91      		pop r29
 1990 0928 CF91      		pop r28
 1991 092a 0895      		ret
 1992               	/* epilogue end (size=9) */
 1993               	/* function roundp size 45 (26) */
 1995               	.Lscope16:
 1998               	.global	show_percent
 2000               	show_percent:
 232:ledmeter.c    **** }
 233:ledmeter.c    **** 
 234:ledmeter.c    **** // roundp = round for positive number
 235:ledmeter.c    **** void show_percent(double p) {
 2002               	.LM145:
 2003               	/* prologue: frame size=5 */
 2004 092c CF93      		push r28
 2005 092e DF93      		push r29
 2006 0930 CDB7      		in r28,__SP_L__
 2007 0932 DEB7      		in r29,__SP_H__
 2008 0934 2597      		sbiw r28,5
 2009 0936 0FB6      		in __tmp_reg__,__SREG__
 2010 0938 F894      		cli
 2011 093a DEBF      		out __SP_H__,r29
 2012 093c 0FBE      		out __SREG__,__tmp_reg__
 2013 093e CDBF      		out __SP_L__,r28
 2014               	/* prologue end (size=10) */
 2015 0940 6983      		std Y+1,r22
 2016 0942 7A83      		std Y+2,r23
 2017 0944 8B83      		std Y+3,r24
 2018 0946 9C83      		std Y+4,r25
 236:ledmeter.c    ****     // p pourcent
 237:ledmeter.c    ****     uint8_t n;
 238:ledmeter.c    ****     //n = 4;
 239:ledmeter.c    ****     n = roundp(p / 100.0 * Nleds); // TO FIX (math.h ceil floor ... round en Java !)
 2020               	.LM146:
 2021 0948 20E0      		ldi r18,lo8(0x42c80000)
 2022 094a 30E0      		ldi r19,hi8(0x42c80000)
 2023 094c 48EC      		ldi r20,hlo8(0x42c80000)
 2024 094e 52E4      		ldi r21,hhi8(0x42c80000)
 2025 0950 6981      		ldd r22,Y+1
 2026 0952 7A81      		ldd r23,Y+2
 2027 0954 8B81      		ldd r24,Y+3
 2028 0956 9C81      		ldd r25,Y+4
 2029 0958 00D0      		rcall __divsf3
 2030 095a DC01      		movw r26,r24
 2031 095c CB01      		movw r24,r22
 2032 095e 20E0      		ldi r18,lo8(0x41000000)
 2033 0960 30E0      		ldi r19,hi8(0x41000000)
 2034 0962 40E0      		ldi r20,hlo8(0x41000000)
 2035 0964 51E4      		ldi r21,hhi8(0x41000000)
 2036 0966 BC01      		movw r22,r24
 2037 0968 CD01      		movw r24,r26
 2038 096a 00D0      		rcall __mulsf3
 2039 096c DC01      		movw r26,r24
 2040 096e CB01      		movw r24,r22
 2041 0970 BC01      		movw r22,r24
 2042 0972 CD01      		movw r24,r26
 2043 0974 AEDF      		rcall roundp
 2044 0976 8D83      		std Y+5,r24
 240:ledmeter.c    ****     // TO FIX : +0.5 is a very dirty hack
 241:ledmeter.c    ****     switch_on_min_dels(n);
 2046               	.LM147:
 2047 0978 8D81      		ldd r24,Y+5
 2048 097a 9CDE      		rcall switch_on_min_dels
 2049               	/* epilogue: frame size=5 */
 2050 097c 2596      		adiw r28,5
 2051 097e 0FB6      		in __tmp_reg__,__SREG__
 2052 0980 F894      		cli
 2053 0982 DEBF      		out __SP_H__,r29
 2054 0984 0FBE      		out __SREG__,__tmp_reg__
 2055 0986 CDBF      		out __SP_L__,r28
 2056 0988 DF91      		pop r29
 2057 098a CF91      		pop r28
 2058 098c 0895      		ret
 2059               	/* epilogue end (size=9) */
 2060               	/* function show_percent size 49 (30) */
 2065               	.Lscope17:
 2069               	.global	beep
 2071               	beep:
 242:ledmeter.c    **** }
 243:ledmeter.c    **** 
 244:ledmeter.c    **** /*
 245:ledmeter.c    ****  * send a sound (on or more beep(s))
 246:ledmeter.c    ****  */
 247:ledmeter.c    **** void beep(uint8_t n, double delay) {
 2073               	.LM148:
 2074               	/* prologue: frame size=18 */
 2075 098e CF93      		push r28
 2076 0990 DF93      		push r29
 2077 0992 CDB7      		in r28,__SP_L__
 2078 0994 DEB7      		in r29,__SP_H__
 2079 0996 6297      		sbiw r28,18
 2080 0998 0FB6      		in __tmp_reg__,__SREG__
 2081 099a F894      		cli
 2082 099c DEBF      		out __SP_H__,r29
 2083 099e 0FBE      		out __SREG__,__tmp_reg__
 2084 09a0 CDBF      		out __SP_L__,r28
 2085               	/* prologue end (size=10) */
 2086 09a2 8983      		std Y+1,r24
 2087 09a4 4A83      		std Y+2,r20
 2088 09a6 5B83      		std Y+3,r21
 2089 09a8 6C83      		std Y+4,r22
 2090 09aa 7D83      		std Y+5,r23
 248:ledmeter.c    ****     // TO DO
 249:ledmeter.c    ****     uint8_t i;
 250:ledmeter.c    ****     for(i = 1; i<=n; i++) {
 2092               	.LM149:
 2093 09ac 81E0      		ldi r24,lo8(1)
 2094 09ae 8E83      		std Y+6,r24
 2095               	.L100:
 2097               	.LM150:
 2098 09b0 9E81      		ldd r25,Y+6
 2099 09b2 8981      		ldd r24,Y+1
 2100 09b4 8917      		cp r24,r25
 2101 09b6 08F4      		brsh .+2
 2102 09b8 52C0      		rjmp .L99
 251:ledmeter.c    ****         //TO DO : send a beep
 252:ledmeter.c    ****         if (n>1) {
 2104               	.LM151:
 2105 09ba 8981      		ldd r24,Y+1
 2106 09bc 8230      		cpi r24,lo8(2)
 2107 09be 08F4      		brsh .+2
 2108 09c0 4AC0      		rjmp .L102
 2109               	.LBB30:
 2111               	.Ltext15:
 2113               	.LM152:
 2114 09c2 8A81      		ldd r24,Y+2
 2115 09c4 9B81      		ldd r25,Y+3
 2116 09c6 AC81      		ldd r26,Y+4
 2117 09c8 BD81      		ldd r27,Y+5
 2118 09ca 8F83      		std Y+7,r24
 2119 09cc 9887      		std Y+8,r25
 2120 09ce A987      		std Y+9,r26
 2121 09d0 BA87      		std Y+10,r27
 2122               	.LBB31:
 2124               	.LM153:
 2125 09d2 20E0      		ldi r18,lo8(0x437a0000)
 2126 09d4 30E0      		ldi r19,hi8(0x437a0000)
 2127 09d6 4AE7      		ldi r20,hlo8(0x437a0000)
 2128 09d8 53E4      		ldi r21,hhi8(0x437a0000)
 2129 09da 6F81      		ldd r22,Y+7
 2130 09dc 7885      		ldd r23,Y+8
 2131 09de 8985      		ldd r24,Y+9
 2132 09e0 9A85      		ldd r25,Y+10
 2133 09e2 00D0      		rcall __mulsf3
 2134 09e4 DC01      		movw r26,r24
 2135 09e6 CB01      		movw r24,r22
 2136 09e8 8D87      		std Y+13,r24
 2137 09ea 9E87      		std Y+14,r25
 2138 09ec AF87      		std Y+15,r26
 2139 09ee B88B      		std Y+16,r27
 2141               	.LM154:
 2142 09f0 20E0      		ldi r18,lo8(0x3f800000)
 2143 09f2 30E0      		ldi r19,hi8(0x3f800000)
 2144 09f4 40E8      		ldi r20,hlo8(0x3f800000)
 2145 09f6 5FE3      		ldi r21,hhi8(0x3f800000)
 2146 09f8 6D85      		ldd r22,Y+13
 2147 09fa 7E85      		ldd r23,Y+14
 2148 09fc 8F85      		ldd r24,Y+15
 2149 09fe 9889      		ldd r25,Y+16
 2150 0a00 00D0      		rcall __ltsf2
 2151 0a02 8823      		tst r24
 2152 0a04 0CF0      		brlt .L105
 2153 0a06 05C0      		rjmp .L104
 2154               	.L105:
 2156               	.LM155:
 2157 0a08 81E0      		ldi r24,lo8(1)
 2158 0a0a 90E0      		ldi r25,hi8(1)
 2159 0a0c 9C87      		std Y+12,r25
 2160 0a0e 8B87      		std Y+11,r24
 2161 0a10 18C0      		rjmp .L106
 2162               	.L104:
 2164               	.LM156:
 2165 0a12 20E0      		ldi r18,lo8(0x477fff00)
 2166 0a14 3FEF      		ldi r19,hi8(0x477fff00)
 2167 0a16 4FE7      		ldi r20,hlo8(0x477fff00)
 2168 0a18 57E4      		ldi r21,hhi8(0x477fff00)
 2169 0a1a 6D85      		ldd r22,Y+13
 2170 0a1c 7E85      		ldd r23,Y+14
 2171 0a1e 8F85      		ldd r24,Y+15
 2172 0a20 9889      		ldd r25,Y+16
 2173 0a22 00D0      		rcall __gtsf2
 2174 0a24 1816      		cp __zero_reg__,r24
 2175 0a26 0CF0      		brlt .L108
 2176 0a28 03C0      		rjmp .L107
 2177               	.L108:
 2179               	.LM157:
 2180 0a2a 1C86      		std Y+12,__zero_reg__
 2181 0a2c 1B86      		std Y+11,__zero_reg__
 2182 0a2e 09C0      		rjmp .L106
 2183               	.L107:
 2185               	.LM158:
 2186 0a30 6D85      		ldd r22,Y+13
 2187 0a32 7E85      		ldd r23,Y+14
 2188 0a34 8F85      		ldd r24,Y+15
 2189 0a36 9889      		ldd r25,Y+16
 2190 0a38 00D0      		rcall __fixunssfsi
 2191 0a3a DC01      		movw r26,r24
 2192 0a3c CB01      		movw r24,r22
 2193 0a3e 9C87      		std Y+12,r25
 2194 0a40 8B87      		std Y+11,r24
 2195               	.L106:
 2196               	.LBB32:
 2198               	.LM159:
 2199 0a42 8B85      		ldd r24,Y+11
 2200 0a44 9C85      		ldd r25,Y+12
 2201 0a46 9A8B      		std Y+18,r25
 2202 0a48 898B      		std Y+17,r24
 2203               	.LBB33:
 2205               	.LM160:
 2206 0a4a 8989      		ldd r24,Y+17
 2207 0a4c 9A89      		ldd r25,Y+18
 2208               	/* #APP */
 2209 0a4e 0197      		1: sbiw r24,1
 2210 0a50 F1F7      		brne 1b
 2211               	/* #NOAPP */
 2212 0a52 9A8B      		std Y+18,r25
 2213 0a54 898B      		std Y+17,r24
 2214               	.L102:
 2215               	.LBE33:
 2216               	.LBE32:
 2217               	.LBE31:
 2218               	.LBE30:
 2220               	.Ltext16:
 2222               	.LM161:
 2223 0a56 8E81      		ldd r24,Y+6
 2224 0a58 8F5F      		subi r24,lo8(-(1))
 2225 0a5a 8E83      		std Y+6,r24
 2226 0a5c A9CF      		rjmp .L100
 2227               	.L99:
 2228               	/* epilogue: frame size=18 */
 2229 0a5e 6296      		adiw r28,18
 2230 0a60 0FB6      		in __tmp_reg__,__SREG__
 2231 0a62 F894      		cli
 2232 0a64 DEBF      		out __SP_H__,r29
 2233 0a66 0FBE      		out __SREG__,__tmp_reg__
 2234 0a68 CDBF      		out __SP_L__,r28
 2235 0a6a DF91      		pop r29
 2236 0a6c CF91      		pop r28
 2237 0a6e 0895      		ret
 2238               	/* epilogue end (size=9) */
 2239               	/* function beep size 115 (96) */
 2254               	.Lscope18:
 2256               	.global	StartStopChronometer
 2258               	StartStopChronometer:
 253:ledmeter.c    ****             _delay_ms(delay);
 254:ledmeter.c    ****         }
 255:ledmeter.c    ****     }
 256:ledmeter.c    **** }
 257:ledmeter.c    **** 
 258:ledmeter.c    **** /*
 259:ledmeter.c    ****  * start or stop chronometer
 260:ledmeter.c    ****  */
 261:ledmeter.c    **** inline void StartStopChronometer(void) {
 2260               	.LM162:
 2261               	/* prologue: frame size=0 */
 2262 0a70 CF93      		push r28
 2263 0a72 DF93      		push r29
 2264 0a74 CDB7      		in r28,__SP_L__
 2265 0a76 DEB7      		in r29,__SP_H__
 2266               	/* prologue end (size=4) */
 262:ledmeter.c    ****     beep(1,100);
 2268               	.LM163:
 2269 0a78 40E0      		ldi r20,lo8(0x42c80000)
 2270 0a7a 50E0      		ldi r21,hi8(0x42c80000)
 2271 0a7c 68EC      		ldi r22,hlo8(0x42c80000)
 2272 0a7e 72E4      		ldi r23,hhi8(0x42c80000)
 2273 0a80 81E0      		ldi r24,lo8(1)
 2274 0a82 85DF      		rcall beep
 263:ledmeter.c    ****     led_alarm(3,50);
 2276               	.LM164:
 2277 0a84 40E0      		ldi r20,lo8(0x42480000)
 2278 0a86 50E0      		ldi r21,hi8(0x42480000)
 2279 0a88 68E4      		ldi r22,hlo8(0x42480000)
 2280 0a8a 72E4      		ldi r23,hhi8(0x42480000)
 2281 0a8c 83E0      		ldi r24,lo8(3)
 2282 0a8e 67DE      		rcall led_alarm
 264:ledmeter.c    ****     if (running_chronometer) {
 2284               	.LM165:
 2285 0a90 8091 0000 		lds r24,running_chronometer
 2286 0a94 8823      		tst r24
 2287 0a96 19F0      		breq .L113
 265:ledmeter.c    ****        running_chronometer = FALSE; // false = 0
 2289               	.LM166:
 2290 0a98 1092 0000 		sts running_chronometer,__zero_reg__
 2291 0a9c 03C0      		rjmp .L112
 2292               	.L113:
 266:ledmeter.c    ****     } else {
 267:ledmeter.c    ****        running_chronometer = TRUE; // true = -1
 2294               	.LM167:
 2295 0a9e 8FEF      		ldi r24,lo8(-1)
 2296 0aa0 8093 0000 		sts running_chronometer,r24
 2297               	.L112:
 2298               	/* epilogue: frame size=0 */
 2299 0aa4 DF91      		pop r29
 2300 0aa6 CF91      		pop r28
 2301 0aa8 0895      		ret
 2302               	/* epilogue end (size=3) */
 2303               	/* function StartStopChronometer size 29 (22) */
 2305               	.Lscope19:
 2307               	.global	TestRunningChronometer
 2309               	TestRunningChronometer:
 268:ledmeter.c    ****     }
 269:ledmeter.c    **** }
 270:ledmeter.c    **** 
 271:ledmeter.c    **** void TestRunningChronometer(void) {
 2311               	.LM168:
 2312               	/* prologue: frame size=12 */
 2313 0aaa CF93      		push r28
 2314 0aac DF93      		push r29
 2315 0aae CDB7      		in r28,__SP_L__
 2316 0ab0 DEB7      		in r29,__SP_H__
 2317 0ab2 2C97      		sbiw r28,12
 2318 0ab4 0FB6      		in __tmp_reg__,__SREG__
 2319 0ab6 F894      		cli
 2320 0ab8 DEBF      		out __SP_H__,r29
 2321 0aba 0FBE      		out __SREG__,__tmp_reg__
 2322 0abc CDBF      		out __SP_L__,r28
 2323               	/* prologue end (size=10) */
 272:ledmeter.c    ****     if (running_chronometer) {
 2325               	.LM169:
 2326 0abe 8091 0000 		lds r24,running_chronometer
 2327 0ac2 8823      		tst r24
 2328 0ac4 09F4      		brne .+2
 2329 0ac6 98C0      		rjmp .L115
 273:ledmeter.c    ****         switch_on_led(8);
 2331               	.LM170:
 2332 0ac8 88E0      		ldi r24,lo8(8)
 2333 0aca FFDB      		rcall switch_on_led
 2334               	.LBB34:
 2336               	.Ltext17:
 2338               	.LM171:
 2339 0acc 80E0      		ldi r24,lo8(0x42c80000)
 2340 0ace 90E0      		ldi r25,hi8(0x42c80000)
 2341 0ad0 A8EC      		ldi r26,hlo8(0x42c80000)
 2342 0ad2 B2E4      		ldi r27,hhi8(0x42c80000)
 2343 0ad4 8983      		std Y+1,r24
 2344 0ad6 9A83      		std Y+2,r25
 2345 0ad8 AB83      		std Y+3,r26
 2346 0ada BC83      		std Y+4,r27
 2347               	.LBB35:
 2349               	.LM172:
 2350 0adc 20E0      		ldi r18,lo8(0x437a0000)
 2351 0ade 30E0      		ldi r19,hi8(0x437a0000)
 2352 0ae0 4AE7      		ldi r20,hlo8(0x437a0000)
 2353 0ae2 53E4      		ldi r21,hhi8(0x437a0000)
 2354 0ae4 6981      		ldd r22,Y+1
 2355 0ae6 7A81      		ldd r23,Y+2
 2356 0ae8 8B81      		ldd r24,Y+3
 2357 0aea 9C81      		ldd r25,Y+4
 2358 0aec 00D0      		rcall __mulsf3
 2359 0aee DC01      		movw r26,r24
 2360 0af0 CB01      		movw r24,r22
 2361 0af2 8F83      		std Y+7,r24
 2362 0af4 9887      		std Y+8,r25
 2363 0af6 A987      		std Y+9,r26
 2364 0af8 BA87      		std Y+10,r27
 2366               	.LM173:
 2367 0afa 20E0      		ldi r18,lo8(0x3f800000)
 2368 0afc 30E0      		ldi r19,hi8(0x3f800000)
 2369 0afe 40E8      		ldi r20,hlo8(0x3f800000)
 2370 0b00 5FE3      		ldi r21,hhi8(0x3f800000)
 2371 0b02 6F81      		ldd r22,Y+7
 2372 0b04 7885      		ldd r23,Y+8
 2373 0b06 8985      		ldd r24,Y+9
 2374 0b08 9A85      		ldd r25,Y+10
 2375 0b0a 00D0      		rcall __ltsf2
 2376 0b0c 8823      		tst r24
 2377 0b0e 0CF0      		brlt .L118
 2378 0b10 05C0      		rjmp .L117
 2379               	.L118:
 2381               	.LM174:
 2382 0b12 81E0      		ldi r24,lo8(1)
 2383 0b14 90E0      		ldi r25,hi8(1)
 2384 0b16 9E83      		std Y+6,r25
 2385 0b18 8D83      		std Y+5,r24
 2386 0b1a 18C0      		rjmp .L119
 2387               	.L117:
 2389               	.LM175:
 2390 0b1c 20E0      		ldi r18,lo8(0x477fff00)
 2391 0b1e 3FEF      		ldi r19,hi8(0x477fff00)
 2392 0b20 4FE7      		ldi r20,hlo8(0x477fff00)
 2393 0b22 57E4      		ldi r21,hhi8(0x477fff00)
 2394 0b24 6F81      		ldd r22,Y+7
 2395 0b26 7885      		ldd r23,Y+8
 2396 0b28 8985      		ldd r24,Y+9
 2397 0b2a 9A85      		ldd r25,Y+10
 2398 0b2c 00D0      		rcall __gtsf2
 2399 0b2e 1816      		cp __zero_reg__,r24
 2400 0b30 0CF0      		brlt .L121
 2401 0b32 03C0      		rjmp .L120
 2402               	.L121:
 2404               	.LM176:
 2405 0b34 1E82      		std Y+6,__zero_reg__
 2406 0b36 1D82      		std Y+5,__zero_reg__
 2407 0b38 09C0      		rjmp .L119
 2408               	.L120:
 2410               	.LM177:
 2411 0b3a 6F81      		ldd r22,Y+7
 2412 0b3c 7885      		ldd r23,Y+8
 2413 0b3e 8985      		ldd r24,Y+9
 2414 0b40 9A85      		ldd r25,Y+10
 2415 0b42 00D0      		rcall __fixunssfsi
 2416 0b44 DC01      		movw r26,r24
 2417 0b46 CB01      		movw r24,r22
 2418 0b48 9E83      		std Y+6,r25
 2419 0b4a 8D83      		std Y+5,r24
 2420               	.L119:
 2421               	.LBB36:
 2423               	.LM178:
 2424 0b4c 8D81      		ldd r24,Y+5
 2425 0b4e 9E81      		ldd r25,Y+6
 2426 0b50 9C87      		std Y+12,r25
 2427 0b52 8B87      		std Y+11,r24
 2428               	.LBB37:
 2430               	.LM179:
 2431 0b54 8B85      		ldd r24,Y+11
 2432 0b56 9C85      		ldd r25,Y+12
 2433               	/* #APP */
 2434 0b58 0197      		1: sbiw r24,1
 2435 0b5a F1F7      		brne 1b
 2436               	/* #NOAPP */
 2437 0b5c 9C87      		std Y+12,r25
 2438 0b5e 8B87      		std Y+11,r24
 2439               	.LBE37:
 2440               	.LBE36:
 2441               	.LBE35:
 2442               	.LBE34:
 2444               	.Ltext18:
 274:ledmeter.c    ****         _delay_ms(100);
 275:ledmeter.c    ****         switch_off_led(8);
 2446               	.LM180:
 2447 0b60 88E0      		ldi r24,lo8(8)
 2448 0b62 DCDB      		rcall switch_off_led
 2449               	.LBB38:
 2451               	.Ltext19:
 2453               	.LM181:
 2454 0b64 80E0      		ldi r24,lo8(0x42c80000)
 2455 0b66 90E0      		ldi r25,hi8(0x42c80000)
 2456 0b68 A8EC      		ldi r26,hlo8(0x42c80000)
 2457 0b6a B2E4      		ldi r27,hhi8(0x42c80000)
 2458 0b6c 8F83      		std Y+7,r24
 2459 0b6e 9887      		std Y+8,r25
 2460 0b70 A987      		std Y+9,r26
 2461 0b72 BA87      		std Y+10,r27
 2462               	.LBB39:
 2464               	.LM182:
 2465 0b74 20E0      		ldi r18,lo8(0x437a0000)
 2466 0b76 30E0      		ldi r19,hi8(0x437a0000)
 2467 0b78 4AE7      		ldi r20,hlo8(0x437a0000)
 2468 0b7a 53E4      		ldi r21,hhi8(0x437a0000)
 2469 0b7c 6F81      		ldd r22,Y+7
 2470 0b7e 7885      		ldd r23,Y+8
 2471 0b80 8985      		ldd r24,Y+9
 2472 0b82 9A85      		ldd r25,Y+10
 2473 0b84 00D0      		rcall __mulsf3
 2474 0b86 DC01      		movw r26,r24
 2475 0b88 CB01      		movw r24,r22
 2476 0b8a 8983      		std Y+1,r24
 2477 0b8c 9A83      		std Y+2,r25
 2478 0b8e AB83      		std Y+3,r26
 2479 0b90 BC83      		std Y+4,r27
 2481               	.LM183:
 2482 0b92 20E0      		ldi r18,lo8(0x3f800000)
 2483 0b94 30E0      		ldi r19,hi8(0x3f800000)
 2484 0b96 40E8      		ldi r20,hlo8(0x3f800000)
 2485 0b98 5FE3      		ldi r21,hhi8(0x3f800000)
 2486 0b9a 6981      		ldd r22,Y+1
 2487 0b9c 7A81      		ldd r23,Y+2
 2488 0b9e 8B81      		ldd r24,Y+3
 2489 0ba0 9C81      		ldd r25,Y+4
 2490 0ba2 00D0      		rcall __ltsf2
 2491 0ba4 8823      		tst r24
 2492 0ba6 0CF0      		brlt .L126
 2493 0ba8 05C0      		rjmp .L125
 2494               	.L126:
 2496               	.LM184:
 2497 0baa 81E0      		ldi r24,lo8(1)
 2498 0bac 90E0      		ldi r25,hi8(1)
 2499 0bae 9C87      		std Y+12,r25
 2500 0bb0 8B87      		std Y+11,r24
 2501 0bb2 18C0      		rjmp .L127
 2502               	.L125:
 2504               	.LM185:
 2505 0bb4 20E0      		ldi r18,lo8(0x477fff00)
 2506 0bb6 3FEF      		ldi r19,hi8(0x477fff00)
 2507 0bb8 4FE7      		ldi r20,hlo8(0x477fff00)
 2508 0bba 57E4      		ldi r21,hhi8(0x477fff00)
 2509 0bbc 6981      		ldd r22,Y+1
 2510 0bbe 7A81      		ldd r23,Y+2
 2511 0bc0 8B81      		ldd r24,Y+3
 2512 0bc2 9C81      		ldd r25,Y+4
 2513 0bc4 00D0      		rcall __gtsf2
 2514 0bc6 1816      		cp __zero_reg__,r24
 2515 0bc8 0CF0      		brlt .L129
 2516 0bca 03C0      		rjmp .L128
 2517               	.L129:
 2519               	.LM186:
 2520 0bcc 1C86      		std Y+12,__zero_reg__
 2521 0bce 1B86      		std Y+11,__zero_reg__
 2522 0bd0 09C0      		rjmp .L127
 2523               	.L128:
 2525               	.LM187:
 2526 0bd2 6981      		ldd r22,Y+1
 2527 0bd4 7A81      		ldd r23,Y+2
 2528 0bd6 8B81      		ldd r24,Y+3
 2529 0bd8 9C81      		ldd r25,Y+4
 2530 0bda 00D0      		rcall __fixunssfsi
 2531 0bdc DC01      		movw r26,r24
 2532 0bde CB01      		movw r24,r22
 2533 0be0 9C87      		std Y+12,r25
 2534 0be2 8B87      		std Y+11,r24
 2535               	.L127:
 2536               	.LBB40:
 2538               	.LM188:
 2539 0be4 8B85      		ldd r24,Y+11
 2540 0be6 9C85      		ldd r25,Y+12
 2541 0be8 9E83      		std Y+6,r25
 2542 0bea 8D83      		std Y+5,r24
 2543               	.LBB41:
 2545               	.LM189:
 2546 0bec 8D81      		ldd r24,Y+5
 2547 0bee 9E81      		ldd r25,Y+6
 2548               	/* #APP */
 2549 0bf0 0197      		1: sbiw r24,1
 2550 0bf2 F1F7      		brne 1b
 2551               	/* #NOAPP */
 2552 0bf4 9E83      		std Y+6,r25
 2553 0bf6 8D83      		std Y+5,r24
 2554               	.L115:
 2555               	.LBE41:
 2556               	.LBE40:
 2557               	.LBE39:
 2558               	.LBE38:
 2559               	/* epilogue: frame size=12 */
 2560 0bf8 2C96      		adiw r28,12
 2561 0bfa 0FB6      		in __tmp_reg__,__SREG__
 2562 0bfc F894      		cli
 2563 0bfe DEBF      		out __SP_H__,r29
 2564 0c00 0FBE      		out __SREG__,__tmp_reg__
 2565 0c02 CDBF      		out __SP_L__,r28
 2566 0c04 DF91      		pop r29
 2567 0c06 CF91      		pop r28
 2568 0c08 0895      		ret
 2569               	/* epilogue end (size=9) */
 2570               	/* function TestRunningChronometer size 180 (161) */
 2592               	.Lscope20:
 2594               	.global	sf_init
 2596               	sf_init:
 2598               	.Ltext20:
 276:ledmeter.c    ****         _delay_ms(100);
 277:ledmeter.c    ****     }
 278:ledmeter.c    **** }
 279:ledmeter.c    **** 
 280:ledmeter.c    **** /*
 281:ledmeter.c    ****  * software init function
 282:ledmeter.c    ****  */
 283:ledmeter.c    **** void sf_init(void) {
 2600               	.LM190:
 2601               	/* prologue: frame size=0 */
 2602 0c0a CF93      		push r28
 2603 0c0c DF93      		push r29
 2604 0c0e CDB7      		in r28,__SP_L__
 2605 0c10 DEB7      		in r29,__SP_H__
 2606               	/* prologue end (size=4) */
 284:ledmeter.c    ****     // Leds
 285:ledmeter.c    ****     //test_leds_up_off(); // uncomment for release or comment for debug
 286:ledmeter.c    **** 
 287:ledmeter.c    ****     // Sound
 288:ledmeter.c    ****     //beep(3,100); // uncomment for release or comment for debug
 289:ledmeter.c    **** 
 290:ledmeter.c    ****     // Time
 291:ledmeter.c    ****     running_chronometer = FALSE;
 2608               	.LM191:
 2609 0c12 1092 0000 		sts running_chronometer,__zero_reg__
 292:ledmeter.c    ****     init_time(&current_time);
 2611               	.LM192:
 2612 0c16 80E0      		ldi r24,lo8(current_time)
 2613 0c18 90E0      		ldi r25,hi8(current_time)
 2614 0c1a F2D9      		rcall init_time
 293:ledmeter.c    ****     init_time(&last_time);
 2616               	.LM193:
 2617 0c1c 80E0      		ldi r24,lo8(last_time)
 2618 0c1e 90E0      		ldi r25,hi8(last_time)
 2619 0c20 EFD9      		rcall init_time
 294:ledmeter.c    ****     init_time(&best_time);
 2621               	.LM194:
 2622 0c22 80E0      		ldi r24,lo8(best_time)
 2623 0c24 90E0      		ldi r25,hi8(best_time)
 2624 0c26 ECD9      		rcall init_time
 2625               	/* epilogue: frame size=0 */
 2626 0c28 DF91      		pop r29
 2627 0c2a CF91      		pop r28
 2628 0c2c 0895      		ret
 2629               	/* epilogue end (size=3) */
 2630               	/* function sf_init size 18 (11) */
 2632               	.Lscope21:
 2634               	.global	hw_init
 2636               	hw_init:
 295:ledmeter.c    **** }
 296:ledmeter.c    **** 
 297:ledmeter.c    **** /*
 298:ledmeter.c    ****  *  hardware init function
 299:ledmeter.c    ****  */
 300:ledmeter.c    **** void hw_init(void) {
 2638               	.LM195:
 2639               	/* prologue: frame size=1 */
 2640 0c2e CF93      		push r28
 2641 0c30 DF93      		push r29
 2642 0c32 CDB7      		in r28,__SP_L__
 2643 0c34 DEB7      		in r29,__SP_H__
 2644 0c36 2197      		sbiw r28,1
 2645 0c38 0FB6      		in __tmp_reg__,__SREG__
 2646 0c3a F894      		cli
 2647 0c3c DEBF      		out __SP_H__,r29
 2648 0c3e 0FBE      		out __SREG__,__tmp_reg__
 2649 0c40 CDBF      		out __SP_L__,r28
 2650               	/* prologue end (size=10) */
 301:ledmeter.c    ****    // ******************
 302:ledmeter.c    ****    // * WatchDog Timer *
 303:ledmeter.c    ****    // ******************
 304:ledmeter.c    ****    // disable by default
 305:ledmeter.c    **** 
 306:ledmeter.c    ****    // ********
 307:ledmeter.c    ****    // * LEDs *
 308:ledmeter.c    ****    // ********
 309:ledmeter.c    ****    DDRC=0xFF; // set up PORTD pins 0 to 7 as output
 2652               	.LM196:
 2653 0c42 8FEF      		ldi r24,lo8(-1)
 2654 0c44 8093 3400 		sts 52,r24
 310:ledmeter.c    ****    //switch_on_all_leds();
 311:ledmeter.c    ****    switch_off_all_leds();
 2656               	.LM197:
 2657 0c48 36DB      		rcall switch_off_all_leds
 312:ledmeter.c    **** 
 313:ledmeter.c    ****    // *********************************
 314:ledmeter.c    ****    // * Start/Stop chronometer (INT0) *
 315:ledmeter.c    ****    // *********************************
 316:ledmeter.c    ****    // Set Pin 6 (PD2) as the pin to use for this example
 317:ledmeter.c    ****    //PCMSK |= (1<<PIND2); // TO FIX
 318:ledmeter.c    ****    //PIND |= (1<<PIND2); // try scls:Error : read-only !!!
 319:ledmeter.c    **** 
 320:ledmeter.c    ****    // interrupt on INT0 pin falling edge (sensor triggered)
 321:ledmeter.c    ****    MCUCR = (1<<ISC01) | (1<<ISC00);
 2659               	.LM198:
 2660 0c4a 83E0      		ldi r24,lo8(3)
 2661 0c4c 8093 5500 		sts 85,r24
 322:ledmeter.c    **** 
 323:ledmeter.c    ****    // turn on interrupts!
 324:ledmeter.c    **** 
 325:ledmeter.c    ****    GICR |= (1<<INT0); //INT0
 2663               	.LM199:
 2664 0c50 8091 5B00 		lds r24,91
 2665 0c54 8064      		ori r24,lo8(64)
 2666 0c56 8093 5B00 		sts 91,r24
 326:ledmeter.c    **** 
 327:ledmeter.c    ****    sei(); // enable interrupts
 2668               	.LM200:
 2669               	/* #APP */
 2670 0c5a 7894      		sei
 328:ledmeter.c    **** 
 329:ledmeter.c    ****    // *************************************************
 330:ledmeter.c    ****    // * Conv Analog to Digital (CAN for RPM and Temp) *
 331:ledmeter.c    ****    // *************************************************
 332:ledmeter.c    **** 
 333:ledmeter.c    ****    //volatile static int analog_result;
 334:ledmeter.c    ****    //volatile static unsigned char analog_busy;
 335:ledmeter.c    **** 
 336:ledmeter.c    ****    //analog_busy=1; // busy mark the ADC function
 337:ledmeter.c    ****    uint8_t channel = 0; // measure ADC0
 2672               	.LM201:
 2673               	/* #NOAPP */
 2674 0c5c 1982      		std Y+1,__zero_reg__
 338:ledmeter.c    **** 
 339:ledmeter.c    ****    // use internal 2.56V ref  REFS1=1 & REFS0=1 (11)
 340:ledmeter.c    ****    // use external ref (01)
 341:ledmeter.c    ****    ADMUX=(0<<REFS1)|(1<<REFS0)|(channel & 0x07); // channel & 0x07
 2676               	.LM202:
 2677 0c5e 8981      		ldd r24,Y+1
 2678 0c60 8770      		andi r24,lo8(7)
 2679 0c62 8064      		ori r24,lo8(64)
 2680 0c64 8093 2700 		sts 39,r24
 342:ledmeter.c    **** 
 343:ledmeter.c    ****    //ADCSRA=(1<<ADEN)|(1<<ADIE)|(1<<ADIF)|(1<<ADPS2); // interrupt ADIE=1
 344:ledmeter.c    ****    ADCSRA=(1<<ADEN)|(0<<ADIE)|(1<<ADIF)|(1<<ADPS2); // no interrupt ADIE=0
 2682               	.LM203:
 2683 0c68 84E9      		ldi r24,lo8(-108)
 2684 0c6a 8093 2600 		sts 38,r24
 345:ledmeter.c    **** 
 346:ledmeter.c    ****    ADCSRA |= (1 << (ADSC)); // start conversion
 2686               	.LM204:
 2687 0c6e 8091 2600 		lds r24,38
 2688 0c72 8064      		ori r24,lo8(64)
 2689 0c74 8093 2600 		sts 38,r24
 347:ledmeter.c    **** 
 348:ledmeter.c    ****    DDRA=0x00;
 2691               	.LM205:
 2692 0c78 1092 3A00 		sts 58,__zero_reg__
 349:ledmeter.c    **** 	// make sure pull-up resistors are turned off
 350:ledmeter.c    **** 	PORTA = 0x00;
 2694               	.LM206:
 2695 0c7c 1092 3B00 		sts 59,__zero_reg__
 351:ledmeter.c    **** 	
 352:ledmeter.c    **** 
 353:ledmeter.c    ****    // **********
 354:ledmeter.c    ****    // * Keypad *
 355:ledmeter.c    ****    // **********
 356:ledmeter.c    ****    // 1 joystick button (4 directions, up, down, left, right)
 357:ledmeter.c    ****    // 2 push buttons (ok, cancel)
 358:ledmeter.c    ****    DDRB=0x00;
 2697               	.LM207:
 2698 0c80 1092 3700 		sts 55,__zero_reg__
 359:ledmeter.c    ****    PORTB=0xFF;
 2700               	.LM208:
 2701 0c84 8FEF      		ldi r24,lo8(-1)
 2702 0c86 8093 3800 		sts 56,r24
 2703               	/* epilogue: frame size=1 */
 2704 0c8a 2196      		adiw r28,1
 2705 0c8c 0FB6      		in __tmp_reg__,__SREG__
 2706 0c8e F894      		cli
 2707 0c90 DEBF      		out __SP_H__,r29
 2708 0c92 0FBE      		out __SREG__,__tmp_reg__
 2709 0c94 CDBF      		out __SP_L__,r28
 2710 0c96 DF91      		pop r29
 2711 0c98 CF91      		pop r28
 2712 0c9a 0895      		ret
 2713               	/* epilogue end (size=9) */
 2714               	/* function hw_init size 56 (37) */
 2719               	.Lscope22:
 2721               	.global	init
 2723               	init:
 360:ledmeter.c    **** 
 361:ledmeter.c    ****    // ***************
 362:ledmeter.c    ****    // * Graphic LCD *
 363:ledmeter.c    ****    // ***************
 364:ledmeter.c    **** 
 365:ledmeter.c    ****    // Sound
 366:ledmeter.c    **** 
 367:ledmeter.c    ****    // Time
 368:ledmeter.c    **** }
 369:ledmeter.c    **** 
 370:ledmeter.c    **** /*
 371:ledmeter.c    ****  * init function
 372:ledmeter.c    ****  */
 373:ledmeter.c    **** void init(void) {
 2725               	.LM209:
 2726               	/* prologue: frame size=0 */
 2727 0c9c CF93      		push r28
 2728 0c9e DF93      		push r29
 2729 0ca0 CDB7      		in r28,__SP_L__
 2730 0ca2 DEB7      		in r29,__SP_H__
 2731               	/* prologue end (size=4) */
 374:ledmeter.c    ****     hw_init();
 2733               	.LM210:
 2734 0ca4 C4DF      		rcall hw_init
 375:ledmeter.c    ****     sf_init();
 2736               	.LM211:
 2737 0ca6 B1DF      		rcall sf_init
 2738               	/* epilogue: frame size=0 */
 2739 0ca8 DF91      		pop r29
 2740 0caa CF91      		pop r28
 2741 0cac 0895      		ret
 2742               	/* epilogue end (size=3) */
 2743               	/* function init size 9 (2) */
 2745               	.Lscope23:
 2748               	.global	adcConvert10bit
 2750               	adcConvert10bit:
 376:ledmeter.c    **** }
 377:ledmeter.c    **** 
 378:ledmeter.c    **** /*
 379:ledmeter.c    ****  * convert from analog to digital (10 bits)
 380:ledmeter.c    ****  */
 381:ledmeter.c    **** unsigned short adcConvert10bit(uint8_t ch)
 382:ledmeter.c    **** {
 2752               	.LM212:
 2753               	/* prologue: frame size=1 */
 2754 0cae CF93      		push r28
 2755 0cb0 DF93      		push r29
 2756 0cb2 CDB7      		in r28,__SP_L__
 2757 0cb4 DEB7      		in r29,__SP_H__
 2758 0cb6 2197      		sbiw r28,1
 2759 0cb8 0FB6      		in __tmp_reg__,__SREG__
 2760 0cba F894      		cli
 2761 0cbc DEBF      		out __SP_H__,r29
 2762 0cbe 0FBE      		out __SREG__,__tmp_reg__
 2763 0cc0 CDBF      		out __SP_L__,r28
 2764               	/* prologue end (size=10) */
 2765 0cc2 8983      		std Y+1,r24
 383:ledmeter.c    **** 	//a2dCompleteFlag = 0;				// clear conversion complete flag
 384:ledmeter.c    **** 	ADMUX = ((ADMUX) & ~0x1F) | (ch & 0x1F);	// set channel ADC_MUX_MASK=0x1F
 2767               	.LM213:
 2768 0cc4 8091 2700 		lds r24,39
 2769 0cc8 982F      		mov r25,r24
 2770 0cca 907E      		andi r25,lo8(-32)
 2771 0ccc 8981      		ldd r24,Y+1
 2772 0cce 8F71      		andi r24,lo8(31)
 2773 0cd0 892B      		or r24,r25
 2774 0cd2 8093 2700 		sts 39,r24
 385:ledmeter.c    **** 	ADCSRA |= (_BV(ADIF)); // clear hardware "conversion complete" flag
 2776               	.LM214:
 2777 0cd6 8091 2600 		lds r24,38
 2778 0cda 8061      		ori r24,lo8(16)
 2779 0cdc 8093 2600 		sts 38,r24
 386:ledmeter.c    **** 	ADCSRA |= (_BV(ADSC)); // start conversion
 2781               	.LM215:
 2782 0ce0 8091 2600 		lds r24,38
 2783 0ce4 8064      		ori r24,lo8(64)
 2784 0ce6 8093 2600 		sts 38,r24
 2785               	.L137:
 387:ledmeter.c    **** 							
 388:ledmeter.c    **** 	//while(!a2dCompleteFlag);				// wait until conversion complete
 389:ledmeter.c    **** 	//while( bit_is_clear(ADCSR, ADIF) );		// wait until conversion complete
 390:ledmeter.c    **** 	while( bit_is_set(ADCSRA, ADSC) );		// wait until conversion complete
 2787               	.LM216:
 2788 0cea 8091 2600 		lds r24,38
 2789 0cee 9927      		clr r25
 2790 0cf0 8074      		andi r24,lo8(64)
 2791 0cf2 9070      		andi r25,hi8(64)
 2792 0cf4 0097      		sbiw r24,0
 2793 0cf6 09F0      		breq .L138
 2794 0cf8 F8CF      		rjmp .L137
 2795               	.L138:
 391:ledmeter.c    **** 
 392:ledmeter.c    **** 	// CAUTION: MUST READ ADCL BEFORE ADCH!!!
 393:ledmeter.c    **** 	return ((ADCL) | ((ADCH)<<8));	// read ADC (full 10 bits);
 2797               	.LM217:
 2798 0cfa 8091 2400 		lds r24,36
 2799 0cfe 282F      		mov r18,r24
 2800 0d00 3327      		clr r19
 2801 0d02 8091 2500 		lds r24,37
 2802 0d06 9927      		clr r25
 2803 0d08 982F      		mov r25,r24
 2804 0d0a 8827      		clr r24
 2805 0d0c 282B      		or r18,r24
 2806 0d0e 392B      		or r19,r25
 2807 0d10 C901      		movw r24,r18
 2808               	/* epilogue: frame size=1 */
 2809 0d12 2196      		adiw r28,1
 2810 0d14 0FB6      		in __tmp_reg__,__SREG__
 2811 0d16 F894      		cli
 2812 0d18 DEBF      		out __SP_H__,r29
 2813 0d1a 0FBE      		out __SREG__,__tmp_reg__
 2814 0d1c CDBF      		out __SP_L__,r28
 2815 0d1e DF91      		pop r29
 2816 0d20 CF91      		pop r28
 2817 0d22 0895      		ret
 2818               	/* epilogue end (size=9) */
 2819               	/* function adcConvert10bit size 59 (40) */
 2821               	.Lscope24:
 2824               	.global	adcConvert8bit
 2826               	adcConvert8bit:
 394:ledmeter.c    **** }
 395:ledmeter.c    **** 
 396:ledmeter.c    **** /*
 397:ledmeter.c    ****  * convert from analog to digital (8 bits)
 398:ledmeter.c    ****  * starts conversion, waits until conversion is done, and returns result
 399:ledmeter.c    ****  */
 400:ledmeter.c    **** unsigned char adcConvert8bit(unsigned char ch)
 401:ledmeter.c    **** {
 2828               	.LM218:
 2829               	/* prologue: frame size=1 */
 2830 0d24 CF93      		push r28
 2831 0d26 DF93      		push r29
 2832 0d28 CDB7      		in r28,__SP_L__
 2833 0d2a DEB7      		in r29,__SP_H__
 2834 0d2c 2197      		sbiw r28,1
 2835 0d2e 0FB6      		in __tmp_reg__,__SREG__
 2836 0d30 F894      		cli
 2837 0d32 DEBF      		out __SP_H__,r29
 2838 0d34 0FBE      		out __SREG__,__tmp_reg__
 2839 0d36 CDBF      		out __SP_L__,r28
 2840               	/* prologue end (size=10) */
 2841 0d38 8983      		std Y+1,r24
 402:ledmeter.c    **** 	// do 10-bit conversion and return highest 8 bits
 403:ledmeter.c    **** 	return adcConvert10bit(ch)>>2;			// return ADC MSB byte
 2843               	.LM219:
 2844 0d3a 8981      		ldd r24,Y+1
 2845 0d3c B8DF      		rcall adcConvert10bit
 2846 0d3e 9695      		lsr r25
 2847 0d40 8795      		ror r24
 2848 0d42 9695      		lsr r25
 2849 0d44 8795      		ror r24
 2850 0d46 9927      		clr r25
 2851               	/* epilogue: frame size=1 */
 2852 0d48 2196      		adiw r28,1
 2853 0d4a 0FB6      		in __tmp_reg__,__SREG__
 2854 0d4c F894      		cli
 2855 0d4e DEBF      		out __SP_H__,r29
 2856 0d50 0FBE      		out __SREG__,__tmp_reg__
 2857 0d52 CDBF      		out __SP_L__,r28
 2858 0d54 DF91      		pop r29
 2859 0d56 CF91      		pop r28
 2860 0d58 0895      		ret
 2861               	/* epilogue end (size=9) */
 2862               	/* function adcConvert8bit size 27 (8) */
 2864               	.Lscope25:
 2866               	.global	SeekButtons
 2868               	SeekButtons:
 404:ledmeter.c    **** }
 405:ledmeter.c    **** 
 406:ledmeter.c    **** #define Nbuts 6
 407:ledmeter.c    **** #define B_LEFT 0
 408:ledmeter.c    **** #define B_RIGHT 1
 409:ledmeter.c    **** #define B_UP 2
 410:ledmeter.c    **** #define B_DOWN 3
 411:ledmeter.c    **** #define B_OK 4
 412:ledmeter.c    **** #define B_CANCEL 5
 413:ledmeter.c    **** 
 414:ledmeter.c    **** void SeekButtons(void) {
 2870               	.LM220:
 2871               	/* prologue: frame size=2 */
 2872 0d5a CF93      		push r28
 2873 0d5c DF93      		push r29
 2874 0d5e CDB7      		in r28,__SP_L__
 2875 0d60 DEB7      		in r29,__SP_H__
 2876 0d62 2297      		sbiw r28,2
 2877 0d64 0FB6      		in __tmp_reg__,__SREG__
 2878 0d66 F894      		cli
 2879 0d68 DEBF      		out __SP_H__,r29
 2880 0d6a 0FBE      		out __SREG__,__tmp_reg__
 2881 0d6c CDBF      		out __SP_L__,r28
 2882               	/* prologue end (size=10) */
 415:ledmeter.c    ****     uint8_t bstate = FALSE;
 2884               	.LM221:
 2885 0d6e 1982      		std Y+1,__zero_reg__
 416:ledmeter.c    ****     uint8_t i;
 417:ledmeter.c    **** 	 for (i=0; i<=Nbuts-1; i++) {
 2887               	.LM222:
 2888 0d70 1A82      		std Y+2,__zero_reg__
 2889               	.L141:
 2891               	.LM223:
 2892 0d72 8A81      		ldd r24,Y+2
 2893 0d74 8630      		cpi r24,lo8(6)
 2894 0d76 E8F4      		brsh .L140
 418:ledmeter.c    **** 	     if (PINB>>i) {
 2896               	.LM224:
 2897 0d78 8091 3600 		lds r24,54
 2898 0d7c 282F      		mov r18,r24
 2899 0d7e 3327      		clr r19
 2900 0d80 8A81      		ldd r24,Y+2
 2901 0d82 9927      		clr r25
 2902 0d84 02C0      		rjmp 2f
 2903 0d86 3595      	1:	asr r19
 2904 0d88 2795      		ror r18
 2905 0d8a 8A95      	2:	dec r24
 2906 0d8c E2F7      		brpl 1b
 2907 0d8e C901      		movw r24,r18
 2908 0d90 0097      		sbiw r24,0
 2909 0d92 11F0      		breq .L144
 419:ledmeter.c    **** 	         bstate = FALSE;
 2911               	.LM225:
 2912 0d94 1982      		std Y+1,__zero_reg__
 2913 0d96 02C0      		rjmp .L145
 2914               	.L144:
 420:ledmeter.c    **** 	     } else {
 421:ledmeter.c    **** 	         bstate = TRUE;
 2916               	.LM226:
 2917 0d98 8FEF      		ldi r24,lo8(-1)
 2918 0d9a 8983      		std Y+1,r24
 2919               	.L145:
 422:ledmeter.c    **** 	     }
 423:ledmeter.c    **** 		
 424:ledmeter.c    **** 	     if ( i==B_LEFT && bstate ) { // LEFT
 425:ledmeter.c    **** 
 426:ledmeter.c    **** 	     }
 427:ledmeter.c    **** 	     if ( i==B_RIGHT && bstate ) { // RIGHT
 428:ledmeter.c    **** 
 429:ledmeter.c    **** 	     }
 430:ledmeter.c    **** 	     if ( i==B_UP && bstate ) { // UP
 431:ledmeter.c    **** 
 432:ledmeter.c    **** 	     }
 433:ledmeter.c    **** 	     if ( i==B_DOWN && bstate ) { // DOWN
 434:ledmeter.c    **** 
 435:ledmeter.c    **** 	     }
 436:ledmeter.c    **** 	     if ( i==B_OK && bstate ) { // OK
 2921               	.LM227:
 2922 0d9c 8A81      		ldd r24,Y+2
 2923 0d9e 8430      		cpi r24,lo8(4)
 2924 0da0 21F4      		brne .L150
 2925 0da2 8981      		ldd r24,Y+1
 2926 0da4 8823      		tst r24
 2927 0da6 09F0      		breq .L150
 437:ledmeter.c    ****             StartStopChronometer();
 2929               	.LM228:
 2930 0da8 63DE      		rcall StartStopChronometer
 2931               	.L150:
 2933               	.LM229:
 2934 0daa 8A81      		ldd r24,Y+2
 2935 0dac 8F5F      		subi r24,lo8(-(1))
 2936 0dae 8A83      		std Y+2,r24
 2937 0db0 E0CF      		rjmp .L141
 2938               	.L140:
 2939               	/* epilogue: frame size=2 */
 2940 0db2 2296      		adiw r28,2
 2941 0db4 0FB6      		in __tmp_reg__,__SREG__
 2942 0db6 F894      		cli
 2943 0db8 DEBF      		out __SP_H__,r29
 2944 0dba 0FBE      		out __SREG__,__tmp_reg__
 2945 0dbc CDBF      		out __SP_L__,r28
 2946 0dbe DF91      		pop r29
 2947 0dc0 CF91      		pop r28
 2948 0dc2 0895      		ret
 2949               	/* epilogue end (size=9) */
 2950               	/* function SeekButtons size 54 (35) */
 2956               	.Lscope26:
 2958               	.global	loop
 2960               	loop:
 438:ledmeter.c    **** 	     }
 439:ledmeter.c    **** 	     if ( i==B_CANCEL && bstate ) { // CANCEL
 440:ledmeter.c    **** 
 441:ledmeter.c    **** 	     }	     	     	     	
 442:ledmeter.c    **** 	}
 443:ledmeter.c    **** }
 444:ledmeter.c    **** 
 445:ledmeter.c    **** /*
 446:ledmeter.c    ****  *  this is the main loop
 447:ledmeter.c    ****  */
 448:ledmeter.c    **** void loop(void) {
 2962               	.LM230:
 2963               	/* prologue: frame size=8 */
 2964 0dc4 0F93      		push r16
 2965 0dc6 1F93      		push r17
 2966 0dc8 CF93      		push r28
 2967 0dca DF93      		push r29
 2968 0dcc CDB7      		in r28,__SP_L__
 2969 0dce DEB7      		in r29,__SP_H__
 2970 0dd0 2897      		sbiw r28,8
 2971 0dd2 0FB6      		in __tmp_reg__,__SREG__
 2972 0dd4 F894      		cli
 2973 0dd6 DEBF      		out __SP_H__,r29
 2974 0dd8 0FBE      		out __SREG__,__tmp_reg__
 2975 0dda CDBF      		out __SP_L__,r28
 2976               	/* prologue end (size=12) */
 449:ledmeter.c    ****     SeekButtons();
 2978               	.LM231:
 2979 0ddc BEDF      		rcall SeekButtons
 450:ledmeter.c    **** 
 451:ledmeter.c    ****     volatile double ch0 = adcConvert10bit(0);
 2981               	.LM232:
 2982 0dde 80E0      		ldi r24,lo8(0)
 2983 0de0 66DF      		rcall adcConvert10bit
 2984 0de2 8C01      		movw r16,r24
 2985 0de4 C801      		movw r24,r16
 2986 0de6 AA27      		clr r26
 2987 0de8 97FD      		sbrc r25,7
 2988 0dea A095      		com r26
 2989 0dec BA2F      		mov r27,r26
 2990 0dee BC01      		movw r22,r24
 2991 0df0 CD01      		movw r24,r26
 2992 0df2 00D0      		rcall __floatsisf
 2993 0df4 6D83      		std Y+5,r22
 2994 0df6 7E83      		std Y+6,r23
 2995 0df8 8F83      		std Y+7,r24
 2996 0dfa 9887      		std Y+8,r25
 2997 0dfc 1123      		tst r17
 2998 0dfe 7CF4      		brge .L153
 3000               	.LM233:
 3001 0e00 20E0      		ldi r18,lo8(0x47800000)
 3002 0e02 30E0      		ldi r19,hi8(0x47800000)
 3003 0e04 40E8      		ldi r20,hlo8(0x47800000)
 3004 0e06 57E4      		ldi r21,hhi8(0x47800000)
 3005 0e08 6D81      		ldd r22,Y+5
 3006 0e0a 7E81      		ldd r23,Y+6
 3007 0e0c 8F81      		ldd r24,Y+7
 3008 0e0e 9885      		ldd r25,Y+8
 3009 0e10 00D0      		rcall __addsf3
 3010 0e12 DC01      		movw r26,r24
 3011 0e14 CB01      		movw r24,r22
 3012 0e16 8D83      		std Y+5,r24
 3013 0e18 9E83      		std Y+6,r25
 3014 0e1a AF83      		std Y+7,r26
 3015 0e1c B887      		std Y+8,r27
 3016               	.L153:
 3017 0e1e 8D81      		ldd r24,Y+5
 3018 0e20 9E81      		ldd r25,Y+6
 3019 0e22 AF81      		ldd r26,Y+7
 3020 0e24 B885      		ldd r27,Y+8
 3021 0e26 8983      		std Y+1,r24
 3022 0e28 9A83      		std Y+2,r25
 3023 0e2a AB83      		std Y+3,r26
 3024 0e2c BC83      		std Y+4,r27
 452:ledmeter.c    ****     ch0 *= 0.09765625; // 0.09765625 = 100 / 2^10
 3026               	.LM234:
 3027 0e2e 20E0      		ldi r18,lo8(0x3dc80000)
 3028 0e30 30E0      		ldi r19,hi8(0x3dc80000)
 3029 0e32 48EC      		ldi r20,hlo8(0x3dc80000)
 3030 0e34 5DE3      		ldi r21,hhi8(0x3dc80000)
 3031 0e36 6981      		ldd r22,Y+1
 3032 0e38 7A81      		ldd r23,Y+2
 3033 0e3a 8B81      		ldd r24,Y+3
 3034 0e3c 9C81      		ldd r25,Y+4
 3035 0e3e 00D0      		rcall __mulsf3
 3036 0e40 DC01      		movw r26,r24
 3037 0e42 CB01      		movw r24,r22
 3038 0e44 8983      		std Y+1,r24
 3039 0e46 9A83      		std Y+2,r25
 3040 0e48 AB83      		std Y+3,r26
 3041 0e4a BC83      		std Y+4,r27
 453:ledmeter.c    ****     show_percent(ch0);
 3043               	.LM235:
 3044 0e4c 6981      		ldd r22,Y+1
 3045 0e4e 7A81      		ldd r23,Y+2
 3046 0e50 8B81      		ldd r24,Y+3
 3047 0e52 9C81      		ldd r25,Y+4
 3048 0e54 6BDD      		rcall show_percent
 454:ledmeter.c    **** 
 455:ledmeter.c    **** /*
 456:ledmeter.c    ****     _delay_ms(500);
 457:ledmeter.c    **** 
 458:ledmeter.c    ****     double ch1 = adcConvert10bit(1);
 459:ledmeter.c    ****     ch1 *= 0.09765625; // 0.09765625 = 100 / 2^10
 460:ledmeter.c    ****     show_percent(ch1);
 461:ledmeter.c    **** 
 462:ledmeter.c    ****     _delay_ms(500);
 463:ledmeter.c    **** */
 464:ledmeter.c    **** 
 465:ledmeter.c    ****     TestRunningChronometer();
 3050               	.LM236:
 3051 0e56 29DE      		rcall TestRunningChronometer
 466:ledmeter.c    **** 
 467:ledmeter.c    ****     inc_time(&current_time);
 3053               	.LM237:
 3054 0e58 80E0      		ldi r24,lo8(current_time)
 3055 0e5a 90E0      		ldi r25,hi8(current_time)
 3056 0e5c 7AD9      		rcall inc_time
 3057               	/* epilogue: frame size=8 */
 3058 0e5e 2896      		adiw r28,8
 3059 0e60 0FB6      		in __tmp_reg__,__SREG__
 3060 0e62 F894      		cli
 3061 0e64 DEBF      		out __SP_H__,r29
 3062 0e66 0FBE      		out __SREG__,__tmp_reg__
 3063 0e68 CDBF      		out __SP_L__,r28
 3064 0e6a DF91      		pop r29
 3065 0e6c CF91      		pop r28
 3066 0e6e 1F91      		pop r17
 3067 0e70 0F91      		pop r16
 3068 0e72 0895      		ret
 3069               	/* epilogue end (size=11) */
 3070               	/* function loop size 88 (65) */
 3075               	.Lscope27:
 3077               	.global	main
 3079               	main:
 468:ledmeter.c    **** }
 469:ledmeter.c    **** 
 470:ledmeter.c    **** 
 471:ledmeter.c    **** /*
 472:ledmeter.c    ****  * main program
 473:ledmeter.c    ****  */
 474:ledmeter.c    **** int main(void) {
 3081               	.LM238:
 3082               	/* prologue: frame size=0 */
 3083 0e74 C0E0      		ldi r28,lo8(__stack - 0)
 3084 0e76 D0E0      		ldi r29,hi8(__stack - 0)
 3085 0e78 DEBF      		out __SP_H__,r29
 3086 0e7a CDBF      		out __SP_L__,r28
 3087               	/* prologue end (size=4) */
 475:ledmeter.c    ****     init();
 3089               	.LM239:
 3090 0e7c 0FDF      		rcall init
 3091               	.L155:
 476:ledmeter.c    ****     while(1) { // Infinite loop; define here the
 477:ledmeter.c    ****         loop(); // system behaviour
 3093               	.LM240:
 3094 0e7e A2DF      		rcall loop
 3095 0e80 FECF      		rjmp .L155
 3096               	/* epilogue: frame size=0 */
 3097               	/* epilogue: noreturn */
 3098               	/* epilogue end (size=0) */
 3099               	/* function main size 7 (3) */
 3101               	.Lscope28:
 3103               	.global	__vector_1
 3105               	__vector_1:
 478:ledmeter.c    ****     }
 479:ledmeter.c    ****     return 0;
 480:ledmeter.c    **** }
 481:ledmeter.c    **** 
 482:ledmeter.c    **** /*
 483:ledmeter.c    ****  * interrupt handler for INT0
 484:ledmeter.c    ****  */
 485:ledmeter.c    **** SIGNAL(SIG_INTERRUPT0) {
 3107               	.LM241:
 3108               	/* prologue: frame size=0 */
 3109 0e82 1F92      		push __zero_reg__
 3110 0e84 0F92      		push __tmp_reg__
 3111 0e86 0FB6      		in __tmp_reg__,__SREG__
 3112 0e88 0F92      		push __tmp_reg__
 3113 0e8a 1124      		clr __zero_reg__
 3114 0e8c 2F93      		push r18
 3115 0e8e 3F93      		push r19
 3116 0e90 4F93      		push r20
 3117 0e92 5F93      		push r21
 3118 0e94 6F93      		push r22
 3119 0e96 7F93      		push r23
 3120 0e98 8F93      		push r24
 3121 0e9a 9F93      		push r25
 3122 0e9c AF93      		push r26
 3123 0e9e BF93      		push r27
 3124 0ea0 EF93      		push r30
 3125 0ea2 FF93      		push r31
 3126 0ea4 CF93      		push r28
 3127 0ea6 DF93      		push r29
 3128 0ea8 CDB7      		in r28,__SP_L__
 3129 0eaa DEB7      		in r29,__SP_H__
 3130               	/* prologue end (size=21) */
 486:ledmeter.c    ****     StartStopChronometer();
 3132               	.LM242:
 3133 0eac E1DD      		rcall StartStopChronometer
 3134               	/* epilogue: frame size=0 */
 3135 0eae DF91      		pop r29
 3136 0eb0 CF91      		pop r28
 3137 0eb2 FF91      		pop r31
 3138 0eb4 EF91      		pop r30
 3139 0eb6 BF91      		pop r27
 3140 0eb8 AF91      		pop r26
 3141 0eba 9F91      		pop r25
 3142 0ebc 8F91      		pop r24
 3143 0ebe 7F91      		pop r23
 3144 0ec0 6F91      		pop r22
 3145 0ec2 5F91      		pop r21
 3146 0ec4 4F91      		pop r20
 3147 0ec6 3F91      		pop r19
 3148 0ec8 2F91      		pop r18
 3149 0eca 0F90      		pop __tmp_reg__
 3150 0ecc 0FBE      		out __SREG__,__tmp_reg__
 3151 0ece 0F90      		pop __tmp_reg__
 3152 0ed0 1F90      		pop __zero_reg__
 3153 0ed2 1895      		reti
 3154               	/* epilogue end (size=19) */
 3155               	/* function __vector_1 size 41 (1) */
 3157               	.Lscope29:
 3158               		.comm current_time,5,1
 3159               		.comm last_time,5,1
 3160               		.comm best_time,5,1
 3165               		.text
 3167               	Letext:
 3168               	/* File "ledmeter.c": code 1922 = 0x0782 (1402), prologues 277, epilogues 243 */
DEFINED SYMBOLS
                            *ABS*:00000000 ledmeter.c
C:\DOCUME~1\scls\LOCALS~1\Temp/ccycaaaa.s:3      *ABS*:0000003f __SREG__
C:\DOCUME~1\scls\LOCALS~1\Temp/ccycaaaa.s:4      *ABS*:0000003e __SP_H__
C:\DOCUME~1\scls\LOCALS~1\Temp/ccycaaaa.s:5      *ABS*:0000003d __SP_L__
C:\DOCUME~1\scls\LOCALS~1\Temp/ccycaaaa.s:6      *ABS*:00000000 __tmp_reg__
C:\DOCUME~1\scls\LOCALS~1\Temp/ccycaaaa.s:7      *ABS*:00000001 __zero_reg__
C:\DOCUME~1\scls\LOCALS~1\Temp/ccycaaaa.s:88     .bss:00000000 running_chronometer
C:\DOCUME~1\scls\LOCALS~1\Temp/ccycaaaa.s:96     .text:00000000 init_time
C:\DOCUME~1\scls\LOCALS~1\Temp/ccycaaaa.s:156    .text:00000044 print_time
C:\DOCUME~1\scls\LOCALS~1\Temp/ccycaaaa.s:231    .text:000000b8 copy_time
C:\DOCUME~1\scls\LOCALS~1\Temp/ccycaaaa.s:306    .text:00000120 compare_time
C:\DOCUME~1\scls\LOCALS~1\Temp/ccycaaaa.s:347    .text:00000152 inc_time
C:\DOCUME~1\scls\LOCALS~1\Temp/ccycaaaa.s:601    .text:000002a4 switch_on_all_leds
C:\DOCUME~1\scls\LOCALS~1\Temp/ccycaaaa.s:626    .text:000002b6 switch_off_all_leds
C:\DOCUME~1\scls\LOCALS~1\Temp/ccycaaaa.s:651    .text:000002ca switch_on_led
C:\DOCUME~1\scls\LOCALS~1\Temp/ccycaaaa.s:714    .text:0000031c switch_off_led
C:\DOCUME~1\scls\LOCALS~1\Temp/ccycaaaa.s:776    .text:0000036c switch_on_leds_with_delay
C:\DOCUME~1\scls\LOCALS~1\Temp/ccycaaaa.s:959    .text:00000446 switch_off_leds_with_delay
C:\DOCUME~1\scls\LOCALS~1\Temp/ccycaaaa.s:1141   .text:00000520 test_leds_up_down
C:\DOCUME~1\scls\LOCALS~1\Temp/ccycaaaa.s:1310   .text:000005ee test_leds_up_off
C:\DOCUME~1\scls\LOCALS~1\Temp/ccycaaaa.s:1476   .text:000006b4 switch_on_min_dels
C:\DOCUME~1\scls\LOCALS~1\Temp/ccycaaaa.s:1547   .text:00000700 switch_on_max_dels
C:\DOCUME~1\scls\LOCALS~1\Temp/ccycaaaa.s:1628   .text:0000075e led_alarm
C:\DOCUME~1\scls\LOCALS~1\Temp/ccycaaaa.s:1939   .text:000008d2 roundp
C:\DOCUME~1\scls\LOCALS~1\Temp/ccycaaaa.s:2000   .text:0000092c show_percent
C:\DOCUME~1\scls\LOCALS~1\Temp/ccycaaaa.s:2071   .text:0000098e beep
C:\DOCUME~1\scls\LOCALS~1\Temp/ccycaaaa.s:2258   .text:00000a70 StartStopChronometer
C:\DOCUME~1\scls\LOCALS~1\Temp/ccycaaaa.s:2309   .text:00000aaa TestRunningChronometer
C:\DOCUME~1\scls\LOCALS~1\Temp/ccycaaaa.s:2596   .text:00000c0a sf_init
                            *COM*:00000005 current_time
                            *COM*:00000005 last_time
                            *COM*:00000005 best_time
C:\DOCUME~1\scls\LOCALS~1\Temp/ccycaaaa.s:2636   .text:00000c2e hw_init
C:\DOCUME~1\scls\LOCALS~1\Temp/ccycaaaa.s:2723   .text:00000c9c init
C:\DOCUME~1\scls\LOCALS~1\Temp/ccycaaaa.s:2750   .text:00000cae adcConvert10bit
C:\DOCUME~1\scls\LOCALS~1\Temp/ccycaaaa.s:2826   .text:00000d24 adcConvert8bit
C:\DOCUME~1\scls\LOCALS~1\Temp/ccycaaaa.s:2868   .text:00000d5a SeekButtons
C:\DOCUME~1\scls\LOCALS~1\Temp/ccycaaaa.s:2960   .text:00000dc4 loop
C:\DOCUME~1\scls\LOCALS~1\Temp/ccycaaaa.s:3079   .text:00000e74 main
C:\DOCUME~1\scls\LOCALS~1\Temp/ccycaaaa.s:3105   .text:00000e82 __vector_1
C:\DOCUME~1\scls\LOCALS~1\Temp/ccycaaaa.s:3167   .text:00000ed4 Letext

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
printf
__mulsf3
__ltsf2
__gtsf2
__fixunssfsi
__addsf3
floor
__divsf3
__floatsisf
__stack
