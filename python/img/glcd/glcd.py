#!/usr/bin/env python

# =====================================================================
# = convert a picture to data for T6963 or KS0108B graphic controller =
# =====================================================================
# = Sebastien Celles                                                  =
# = 2010/04/16                                                        =
# =====================================================================
# = using Python Imaging Library Handbook                             =
# =  http://www.pythonware.com/library/pil/handbook/index.htm         =
# =====================================================================

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import Image
from datetime import datetime

input = 'glcd.bmp'
output = 'glcd.c'
pixelsperbyte = 8 # 8 or 6

#bytesperline = 4 # nb of bytes per lines of code

im = Image.open(input)
print "Input:", input, im.format, im.size, im.mode
print "Output:", output

#im.show()

data = list(im.getdata())
#print data

	
#i=0
#for d in data:
#  i=i+1
  #mean = (d[0]+d[1]+d[2])/3.0 # si RGB
#  mean = d # 
#  print "%i : %s : %i" % (i, d, mean)
  
  #if mean == 0:
  #	pass
    #print "%i : %s : false" % (i, d)
  #else:
  #  print "%i : %s : true" % (i, d)

f = open(output, 'w')

# Header

head_params = {'output': output,
	'input': input,
	'format': im.format,
	'size': im.size,
	'mode': im.mode,
	'now': datetime.now()
	}
	
head_c = """/*********************************************************
 *  Filename: %(output)s
 *  Generated by Python script glcd.py
 *   using Python Imaging Library (PIL)
 *   %(now)s
 *  Input picture: %(input)s
 *  Image Format: %(format)s
 *  Image Size: %(size)s
 *  Image Mode: %(mode)s
 *********************************************************/
""" % head_params

head_asm = """\t; \t\tFilename: %(output)s
\t; \t\tGenerated by Python script glcd.py
\t; \t\t using Python Imaging Library (PIL)
\t; \t\t %(now)s
\t; \t\tInput picture: %(input)s
\t; \t\tImage Format: %(format)s
\t; \t\tImage Size: %(size)s
\t; \t\tImage Mode: %(mode)s
""" % head_params

# Datastring

datastring = ""
for i in range(0, len(data)/pixelsperbyte):
	byte = 0
	for bit in range(0, pixelsperbyte):
		byte = byte + data[i*pixelsperbyte+pixelsperbyte-1-bit]*2**bit #T6963
	#datastring = datastring + "data[%i] = 0x%02X;\n" % (i, byte) # C
	datastring = datastring + "\tretlw\t0x%02X\n" % byte # ASM TAB MICROCHIP PIC
	#"	DA	0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00" # ASM DATA MICROCHIP PIC
	#"	.db	0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00" # ASM DATA ATMEL
	#"fcb$00 , $00 , $00 , $00 , $00 , $00 , $00 , $00" # ASM DATA ATMEL
	#Pix(0,0) = &H2A& : Pix(0,1) = &H20& : Pix(0,2) = &H00& : Pix(0,3) = &H00& # VB
	
# End Of File

eof_c = "/*********************************************************/"+"\n"
eof_asm = "\t; \t\tEOF"

# Write ASM
#f.write(head_asm)
#f.write("\n")
#f.write(datastring)
#f.write("\n")
#f.write(eof_asm)

# Write C
f.write(head_c)
f.write("\n")
f.write(datastring)
f.write("\n")
f.write(eof_c)

f.close()
