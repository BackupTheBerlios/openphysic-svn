from Numeric import *
uneListe = range(10)
trancheListe = uneListe[3:7]
trancheListe[2] = 22
print trancheListe, uneListe       # Affiche : [3, 4, 22, 6] [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
unTableau = array(uneListe)
trancheTableau = unTableau[3:7]
trancheTableau[2] = 33
print trancheTableau, unTableau	   # Affiche : [ 3 4 33 6] [ 0 1 2 3 4 33 6 7 8 9]

----------

# a vaut [[ 0, 1, 2, 3, 4, 5],
#         [10,11,12,13,14,15],
#         [20,21,22,23,24,25],
#         [30,31,32,33,34,35],
#         [40,41,42,43,44,45],
#         [50,51,52,53,54,55]]

a[0,2:4]                        # array([2, 3])
a[3:,3:]                        # array([[33, 34, 35],
                                #        [43, 44, 45],
                                #        [53, 54, 55]])
a[:,4]                          # array([4, 14, 24, 34, 44, 54])
a[2::2,::2]                     # array([[20, 22, 24],
                                #        [40, 42, 44]])

----------

a = Numeric.array( [ [], [], [] ] )
if a: print 'a is true'
else: print 'a is false'                       # prints: a is false
if len(a): print 'a has some items'
else: print 'a has no items'                   # prints: a has some items
if Numeric.size(a): print 'a has some elements'
else: print 'a has no elements'                # prints: a has no elements

----------

array(range(4), typecode = 'b') + 2.0                       # array([2.,3.,4.,5.])
array(range(4), typecode = 'b', savespace = True) + 2.0     # array([2,3,4,5])
array(range(4), typecode = 'b', savespace = True) + 258.7   # array([2,3,4,5])


----------

a = zeros(3)
a[0] = 0.3                    # a vaut array([0, 0, 0])

----------

a = zeros(3,Float)
a[0] = 0.3                    # a vaut array([0.3, 0., 0.])

----------

a=array([[1, 2, 3], [4, 5, 6]], typecode='d')
print a.shape             # Affiche : (2, 3)
print a                   # Affiche : [[1. 2. 3.]
                          #            [4. 5. 6.]]
print list(a)             # Affiche : [array([1., 2., 3.]), array([4., 5., 6.])]
print a.tolist()          # Affiche : [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]]

----------

x = [52, 115, 99, 111, 114, 101, 97, 110, 100, 55]
print Numeric.argsort(x)   # Affiche : [0 9 6 2 8 5 7 3 4 1]
print Numeric.sort(x)      # Affiche : [52 55 97 99 100 101 110 111 114 115]
print Numeric.take(x, Numeric.argsort(x)) # Affiche : [52 55 97 99 100 101 110 111 114 115]

----------

print Numeric.choose(Numeric.identity(3), 'ox')   # Affiche: [[x o o]
                                                  #           [o x o]
                                                  #           [o o x]]

---------

print Numeric.clip(Numeric.arange(10) ,2, 7)   # Affiche : [2 2 2 3 4 5 6 7 7 7]

----------

a = Numeric.arange(10)
print Numeric.compress(a % 2 == 0, a)   # Affiche : [0 2 4 6 8]

----------

print Numeric.concatenate([Numeric.arange(5),
                           Numeric.arange(3)])  # Affiche : [0 1 2 3 4 0 1 2]

----------

a = Numeric.arange(6)
b = Numeric.arange(4)
print Numeric.convolve(a, b)          # Affiche : [0 0 1 4 10 16 22 22 15]
print Numeric.convolve(a, b, 1)       # Affiche : [0 1 4 10 16 22]
print Numeric.convolve(a, b, 0)       # Affiche : [4 10 16]

----------

# a vaut [[0 1 2 3]
#         [4 5 6 7]
#         [8 9 10 11]
#         [12 13 14 15]]
print Numeric.diagonal(a)        # Affiche : [0 5 10 15]
print Numeric.diagonal(a, 1)     # Affiche : [1 6 11]
print Numeric.diagonal(a, -1)    # Affiche : [4 9 14]

----------

print Numeric.indices((2,4))     # Affiche : [[[0 0 0 0]
                                 #            [1 1 1 1]]
                                 #           [[0 1 2 3]
                                 #            [0 1 2 3]]]

----------

print Numeric.reshape(range(12),(3,-1))     
# prints: [[0 1 2 3]
#          [4 5 6 7]
#          [8 9 10 11]]

----------

print Numeric.resize(range(5),(3,4))        
# prints: [[0 1 2 3]
#          [4 0 1 2]
#          [3 4 0 1]]

----------

print Numeric.searchsorted([0,1], [0.2,-0.3,0.5,1.3,1.0,0.0,0.3]) # Affiche : [1 0 1 2 1 0 1]

----------

# x vaut [[0 1 2 3]
#         [4 0 1 2]
#         [3 4 0 1]]
print Numeric.sort(x)       # Affiche : [[0 1 2 3]
                            #            [0 1 2 4]
                            #            [0 1 3 4]]
print Numeric.sort(x, 0)    # Affiche : [[0 0 0 1]
                            #            [3 1 1 2]
                            #            [4 4 2 3]]

----------

def logsupto(N):
    return [math.log(x) for x in range(2, N)]

----------

def logsupto(N):
    return map(math.log, range(2, N))

----------

def logsupto(N):
    return Numeric.log(range(2, N)).tolist()

----------

def logsupto(N):
    temp = Numeric.arange(2, N, typecode = Numeric.Float)
    Numeric.log(temp, temp)
    return temp.tolist( )

----------

print add.accumulate(range(10))      # Affiche : [0 1 3 6 10 15 21 28 36 45]

----------

a = Numeric.arange(3, 5)
b = Numeric.arange(1, 6)
c = Numeric.multiply.outer(a, b)
print a.shape, b.shape, c.shape # Affiche : (2,) (5,) (2,5)
print c                         # Affiche : [[3 6 9 12 15]
                                #            [4 8 12 16 20]]

----------

print add.reduceat(range(10),(2, 6, 8)) # Affiche : [14 13 17]

----------

print Numeric.maximum(range(1, 20),range(20, 1, -1)) # Affiche : [20 19 18 17 16 15 14 13 12 11 11 12 13 14 15 16 17 18 19]

