;; Object doc_classe_latex_phys_ch_pha/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "doc_classe_latex_phys_ch_pha/"
  :tables (list 
   (semanticdb-table "Makefile"
    :major-mode 'makefile-mode
    :tags '(("input" variable (:default-value ("main")) nil [1 12]) ("page" variable (:default-value ("0")) nil [13 20]) ("dvi_viewer" variable (:default-value ("xdvi")) nil [21 37]) ("ps_viewer" variable (:default-value ("gv")) nil [37 50]) ("pdf_viewer" variable (:default-value ("xpdf")) nil [50 82]) ("do" variable (:default-value ("view-ps")) nil [83 94]) ("file" variable (:default-value ("title.tex")) nil [169 184]) ("all" function nil nil [185 243]) ("dvi" function (:arguments ("$(input).dvi")) nil [520 540]) ("ps" function (:arguments ("$(input).ps")) nil [538 557]) ("ps2" function (:arguments ("$(input)_suite_2.ps")) nil [554 582]) ("pdf" function (:arguments ("$(input)_dvips.pdf")) nil [579 607]) ("pdf2" function (:arguments ("$(input)_dvips_suite_2.pdf")) nil [603 637]) (".PHONY" function (:arguments ("all" "main.dvi" "clean" "view-ps" "view-pdf" "view-pdf-dvips" "view-pdf-pdflatex" "edit" "view-ps-2" "only.tex" "this" "brouillon" "clean_temp" "distclean")) nil [638 776]) ("$(input)" function nil nil [776 878]) ("$(input)" function (:arguments ("$(input).dvi")) nil [878 921]) ("$(input)" function (:arguments ("$(input).ps")) nil [921 1004]) ("view-dvi" function (:arguments ("$(input).dvi")) nil [1004 1058]) ("view-ps" function (:arguments ("$(input).ps")) nil [1058 1099]) ("view-pdf" function nil nil [1099 1134]) ("view-pdf-dvips" function (:arguments ("$(input)_dvips.pdf")) nil [1134 1190]) ("view-pdf-pdflatex" function (:arguments ("$(input)_pdflatex.pdf")) nil [1190 1252]) ("clean_temp" function nil nil [1252 1279]) ("clean" function nil nil [1279 1462]) ("distclean" function (:arguments ("clean")) nil [1462 1480]) ("edit" function nil nil [1480 1517]) ("$(input)" function (:arguments ("$(input).ps")) nil [1518 1572]) ("view-ps-2" function (:arguments ("$(input)_suite_2.ps")) nil [1572 1657]) ("$(input)" function (:arguments ("$(input)_dvips.pdf")) nil [1658 1757]) ("view-pdf-dvips-2" function (:arguments ("$(input)_dvips_suite_2.pdf")) nil [1757 1823]) ("$(input)" function (:arguments ("$(input)_pdflatex.pdf")) nil [1823 1928]) ("view-pdf-2" function nil nil [1928 1967]) ("view-pdf-pdflatex-2" function (:arguments ("$(input)_dvips_pdflatex_2.pdf")) nil [1967 2039]) ("zip" function nil nil [2039 2088]) ("ftp" function nil nil [2088 2209]) ("ftp_full_build" function nil nil [2222 2370]) ("get" function nil nil [2370 2480]) ("select" function (:arguments ("$(input).ps")) nil [2482 2670]) ("clean_select" function nil nil [2670 2710]) ("clean_only" function nil nil [2712 2738]) ("only.tex" function nil nil [2738 3027]) ("only.dvi" function (:arguments ("only.tex")) nil [3028 3058]) ("only.ps" function (:arguments ("only.dvi")) nil [3058 3093]) ("only-ps" function (:arguments ("only.ps")) nil [3093 3130]) ("only_suite_2.ps" function (:arguments ("only.ps")) nil [3130 3176]) ("only-ps2" function (:arguments ("only_suite_2.ps")) nil [3176 3241]) ("only-pdf" function (:arguments ("only.pdf")) nil [3241 3281]) ("only-pdf2" function (:arguments ("only_suite_2.pdf")) nil [3312 3361]) ("only.pdf" function (:arguments ("only.ps")) nil [3361 3394]) ("only_suite_2.pdf" function (:arguments ("only.pdf")) nil [3394 3473]) ("this" function nil nil [3473 3595]) ("brouillon" function nil nil [3781 3836]) ("scan" function nil nil [3837 3872]) ("mini.dvi" function (:arguments ("mini.tex")) nil [3874 3904]) ("mini.ps" function (:arguments ("mini.dvi")) nil [3904 3939]) ("mini-ps" function (:arguments ("mini.ps")) nil [3939 3976]) ("mini_suite_2.ps" function (:arguments ("mini.ps")) nil [3976 4022]) ("mini-ps2" function (:arguments ("mini_suite_2.ps")) nil [4022 4087]) ("mini-pdf" function (:arguments ("mini.pdf")) nil [4087 4127]) ("mini-pdf2" function (:arguments ("mini_suite_2.pdf")) nil [4127 4176]) ("mini.pdf" function (:arguments ("mini.ps")) nil [4176 4209]) ("mini_suite_2.pdf" function (:arguments ("mini.pdf")) nil [4209 4288]) ("commit_pdf" function nil nil [4288 4363]) ("commit" function nil nil [4363 4384]) ("update" function nil nil [4384 4405]) ("version" function nil nil [4405 4458]) ("status" function nil nil [4458 4479]) ("rubber" function nil nil [4479 4560]) ("silent" function nil nil [4560 4731]))
    :file "Makefile"
    :pointmax 4731
    )
   )
  :file "semantic.cache"
  :semantic-tag-version "2.0beta3"
  :semanticdb-version "2.0beta3"
  )
