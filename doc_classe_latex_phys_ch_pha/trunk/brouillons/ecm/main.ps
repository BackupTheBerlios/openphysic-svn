%!PS-Adobe-2.0
%%Creator: dvips(k) 5.92b Copyright 2002 Radical Eye Software
%%Title: main.dvi
%%Pages: 1
%%PageOrder: Ascend
%%BoundingBox: 0 0 596 842
%%DocumentFonts: CMR10
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips main.dvi -o main.ps
%DVIPSParameters: dpi=600, compressed
%DVIPSSource:  TeX output 2005.10.08:2145
%%BeginProcSet: texc.pro
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/id 0 N/rw 0 N/rc 0 N/gp 0 N/cp 0 N/G 0 N/CharBuilder{save 3
1 roll S A/base get 2 index get S/BitMaps get S get/Cd X pop/ctr 0 N Cdx
0 Cx Cy Ch sub Cx Cw add Cy setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx
sub Cy .1 sub]/id Ci N/rw Cw 7 add 8 idiv string N/rc 0 N/gp 0 N/cp 0 N{
rc 0 ne{rc 1 sub/rc X rw}{G}ifelse}imagemask restore}B/G{{id gp get/gp
gp 1 add N A 18 mod S 18 idiv pl S get exec}loop}B/adv{cp add/cp X}B
/chg{rw cp id gp 4 index getinterval putinterval A gp add/gp X adv}B/nd{
/cp 0 N rw exit}B/lsh{rw cp 2 copy get A 0 eq{pop 1}{A 255 eq{pop 254}{
A A add 255 and S 1 and or}ifelse}ifelse put 1 adv}B/rsh{rw cp 2 copy
get A 0 eq{pop 128}{A 255 eq{pop 127}{A 2 idiv S 128 and or}ifelse}
ifelse put 1 adv}B/clr{rw cp 2 index string putinterval adv}B/set{rw cp
fillstr 0 4 index getinterval putinterval adv}B/fillstr 18 string 0 1 17
{2 copy 255 put pop}for N/pl[{adv 1 chg}{adv 1 chg nd}{1 add chg}{1 add
chg nd}{adv lsh}{adv lsh nd}{adv rsh}{adv rsh nd}{1 add adv}{/rc X nd}{
1 add set}{1 add clr}{adv 2 chg}{adv 2 chg nd}{pop nd}]A{bind pop}
forall N/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro
%!
% PostScript prologue for pstricks.tex.
% Version 97 patch 3, 98/06/01
% For distribution, see pstricks.tex.
%
/tx@Dict 200 dict def tx@Dict begin
/ADict 25 dict def
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Atan { /atan load stopped { pop pop 0 } if } def
/Div { dup 0 eq { pop } { div } ifelse } def
/NET { neg exch neg exch T } def
/Pyth { dup mul exch dup mul add sqrt } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def }
def
/PathLength { flattenpath /z 0 def { /y1 ED /x1 ED /y2 y1 def /x2 x1 def
} { /y ED /x ED PathLength@ } {} { /y y2 def /x x2 def PathLength@ }
/pathforall load stopped { pop pop pop pop } if z } def
/STP { .996264 dup scale } def
/STV { SDict begin normalscale end STP  } def
/DashLine { dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def
PathLength } ifelse /b ED /x ED /y ED /z y x add def b a .5 sub 2 mul y
mul sub z Div round z mul a .5 sub 2 mul y mul add b exch Div dup y mul
/y ED x mul /x ED x 0 gt y 0 gt and { [ y x ] 1 a sub y mul } { [ 1 0 ]
0 } ifelse setdash stroke } def
/DotLine { /b PathLength def /a ED /z ED /y CLW def /z y z add def a 0 gt
{ /b b a div def } { a 0 eq { /b b y sub def } { a -3 eq { /b b y add
def } if } ifelse } ifelse [ 0 b b z Div round Div dup 0 le { pop 1 } if
] a 0 gt { 0 } { y 2 div a -2 gt { neg } if } ifelse setdash 1
setlinecap stroke } def
/LineFill { gsave abs CLW add /a ED a 0 dtransform round exch round exch
2 copy idtransform exch Atan rotate idtransform pop /a ED .25 .25
% DG/SR modification begin - Dec. 12, 1997 - Patch 2
%itransform translate pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
itransform pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
% DG/SR modification end
Div cvi /x1 ED /y2 y2 y1 sub def clip newpath 2 setlinecap systemdict
/setstrokeadjust known { true setstrokeadjust } if x2 x1 sub 1 add { x1
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore }
% def
a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore
pop pop } def
% DG/SR modification end
/BeginArrow { ADict begin /@mtrx CM def gsave 2 copy T 2 index sub neg
exch 3 index sub exch Atan rotate newpath } def
/EndArrow { @mtrx setmatrix CP grestore end } def
/Arrow { CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1
scale } if w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore } def
/Tbar { CLW mul add /z ED z -2 div CLW 2 div moveto z 0 rlineto stroke 0
CLW moveto } def
/Bracket { CLW mul add dup CLW sub 2 div /x ED mul CLW add /y ED /z CLW 2
div def x neg y moveto x neg CLW 2 div L x CLW 2 div L x y L stroke 0
CLW moveto } def
/RoundBracket { CLW mul add dup 2 div /x ED mul /y ED /mtrx CM def 0 CLW
2 div T x y mul 0 ne { x y scale } if 1 1 moveto .85 .5 .35 0 0 0
curveto -.35 0 -.85 .5 -1 1 curveto mtrx setmatrix stroke 0 CLW moveto }
def
/SD { 0 360 arc fill } def
/EndDot { { /z DS def } { /z 0 def } ifelse /b ED 0 z DS SD b { 0 z DS
CLW sub SD } if 0 DS z add CLW 4 div sub moveto } def
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
/closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
load } if ] cvx newpath 3 1 roll T exec } def
/NArray { aload length 2 div dup dup cvi eq not { exch pop } if /n exch
cvi def } def
/NArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop } if
f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/Line { NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub
def n { Lineto } repeat CP 4 2 roll ArrowB L pop pop } if } def
/Arcto { /a [ 6 -2 roll ] cvx def a r /arcto load stopped { 5 } { 4 }
ifelse { pop } repeat a } def
/CheckClosed { dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
and { pop pop /n n 1 sub def } if } def
/Polygon { NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop }
repeat } { n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1
ED /x1 ED x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1
moveto /n n 2 sub def n { Lineto } repeat x1 y1 x0 y0 6 4 roll Lineto
Lineto pop pop closepath } ifelse } def
/Diamond { /mtrx CM def T rotate /h ED /w ED dup 0 eq { pop } { CLW mul
neg /d ED /a w h Atan def /h d a sin Div h add def /w d a cos Div w add
def } ifelse mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2
div /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
setmatrix } def
% DG modification begin - Jan. 15, 1997
%/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup 0 eq {
%pop } { CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
%div dup cos exch sin Div mul sub def } ifelse mark 0 d w neg d 0 h w d 0
%d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
%setmatrix } def
/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup
CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
div dup cos exch sin Div mul sub def mark 0 d w neg d 0 h w d 0
d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
setmatrix pop } def
% DG/SR modification end
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CC { /l0 l1 def /x1 x dx sub def /y1 y dy sub def /dx0 dx1 def /dy0 dy1
def CCA /dx dx0 l1 c exp mul dx1 l0 c exp mul add def /dy dy0 l1 c exp
mul dy1 l0 c exp mul add def /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos
abs b exp a mul dx dy Pyth Div 2 div def /x2 x l0 dx mul m mul sub def
/y2 y l0 dy mul m mul sub def /dx l1 dx mul m mul neg def /dy l1 dy mul
m mul neg def } def
/IC { /c c 1 add def c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if }
ifelse /a a 2 mul 3 div 45 cos b exp div def CCA /dx 0 def /dy 0 def }
def
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
/OpenCurve { NArray n 3 lt { n { pop pop } repeat } { BOC /n n 3 sub def
n { NC } repeat EOC } ifelse } def
/AltCurve { { false NArray n 2 mul 2 roll [ n 2 mul 3 sub 1 roll ] aload
/Points ED n 2 mul -2 roll } { false NArray } ifelse n 4 lt { n { pop
pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse } def
/ClosedCurve { NArray n 3 lt { n { pop pop } repeat } { n 3 gt {
CheckClosed } if 6 copy n 2 mul 6 add 6 roll IC CC x y moveto n { NC }
repeat closepath pop pop } ifelse } def
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore }
def
/FontDot { DS 2 mul dup matrix scale matrix concatmatrix exch matrix
rotate matrix concatmatrix exch findfont exch makefont setfont } def
/Rect { x1 y1 y2 add 2 div moveto x1 y2 lineto x2 y2 lineto x2 y1 lineto
x1 y1 lineto closepath } def
/OvalFrame { x1 x2 eq y1 y2 eq or { pop pop x1 y1 moveto x2 y2 L } { y1
y2 sub abs x1 x2 sub abs 2 copy gt { exch pop } { pop } ifelse 2 div
exch { dup 3 1 roll mul exch } if 2 copy lt { pop } { exch pop } ifelse
/b ED x1 y1 y2 add 2 div moveto x1 y2 x2 y2 b arcto x2 y2 x2 y1 b arcto
x2 y1 x1 y1 b arcto x1 y1 x1 y2 b arcto 16 { pop } repeat closepath }
ifelse } def
/Frame { CLW mul /a ED 3 -1 roll 2 copy gt { exch } if a sub /y2 ED a add
/y1 ED 2 copy gt { exch } if a sub /x2 ED a add /x1 ED 1 index 0 eq {
pop pop Rect } { OvalFrame } ifelse } def
/BezierNArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop
} if n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat f { ]
aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/OpenBezier { BezierNArray n 1 eq { pop pop } { ArrowA n 4 sub 3 idiv { 6
2 roll 4 2 roll curveto } repeat 6 2 roll 4 2 roll ArrowB curveto }
ifelse } def
/ClosedBezier { BezierNArray n 1 eq { pop pop } { moveto n 1 sub 3 idiv {
6 2 roll 4 2 roll curveto } repeat closepath } ifelse } def
/BezierShowPoints { gsave Points aload length 2 div cvi /n ED moveto n 1
sub { lineto } repeat CLW 2 div SLW [ 4 4 ] 0 setdash stroke grestore }
def
/Parab { /y0 exch def /x0 exch def /y1 exch def /x1 exch def /dx x0 x1
sub 3 div def /dy y0 y1 sub 3 div def x0 dx sub y0 dy add x1 y1 ArrowA
x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB curveto /Points [ x1 y1 x0
y0 x0 2 mul x1 sub y1 ] def } def
/Grid { newpath /a 4 string def /b ED /c ED /n ED cvi dup 1 lt { pop 1 }
if /s ED s div dup 0 eq { pop 1 } if /dy ED s div dup 0 eq { pop 1 } if
/dx ED dy div round dy mul /y0 ED dx div round dx mul /x0 ED dy div
round cvi /y2 ED dx div round cvi /x2 ED dy div round cvi /y1 ED dx div
round cvi /x1 ED /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def /w x2 x1 sub
0 gt { 1 } { -1 } ifelse def b 0 gt { /z1 b 4 div CLW 2 div add def
/Helvetica findfont b scalefont setfont /b b .95 mul CLW 2 div add def }
if systemdict /setstrokeadjust known { true setstrokeadjust /t { } def }
{ /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
exch itransform } bind def } ifelse gsave n 0 gt { 1 setlinecap [ 0 dy n
div ] dy n div 2 div setdash } { 2 setlinecap } ifelse /i x1 def /f y1
dy mul n 0 gt { dy n div 2 div h mul sub } if def /g y2 dy mul n 0 gt {
dy n div 2 div h mul add } if def x2 x1 sub w mul 1 add dup 1000 gt {
pop 1000 } if { i dx mul dup y0 moveto b 0 gt { gsave c i a cvs dup
stringwidth pop /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse h 0 gt {b neg}
{z1} ifelse rmoveto show grestore } if dup t f moveto g t L stroke /i i
w add def } repeat grestore gsave n 0 gt
% DG/SR modification begin - Nov. 7, 1997 - Patch 1
%{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
{ 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
% DG/SR modification end
{ 2 setlinecap } ifelse /i y1 def /f x1 dx mul
n 0 gt { dx n div 2 div w mul sub } if def /g x2 dx mul n 0 gt { dx n
div 2 div w mul add } if def y2 y1 sub h mul 1 add dup 1000 gt { pop
1000 } if { newpath i dy mul dup x0 exch moveto b 0 gt { gsave c i a cvs
dup stringwidth pop /z2 ED w 0 gt {z1 z2 add neg} {z1} ifelse h 0 gt
{z1} {b neg} ifelse rmoveto show grestore } if dup f exch t moveto g
exch t L stroke /i i h add def } repeat grestore } def
/ArcArrow { /d ED /b ED /a ED gsave newpath 0 -1000 moveto clip newpath 0
1 0 0 b grestore c mul /e ED pop pop pop r a e d PtoC y add exch x add
exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
mul neg d } def
/Ellipse { /mtrx CM def T scale 0 0 1 5 3 roll arc mtrx setmatrix } def
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
/RotBegin { tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 }
def } if /TMatrix [ TMatrix CM ] cvx def /a ED a Rot /RAngle [ RAngle
dup a add ] cvx def } def
/RotEnd { /TMatrix [ TMatrix setmatrix ] cvx def /RAngle [ RAngle pop ]
cvx def } def
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
/Uput { /a ED add 2 div /h ED 2 div /w ED /s a sin def /c a cos def /b s
abs c abs 2 copy gt dup /q ED { pop } { exch pop } ifelse def /w1 c b
div w mul def /h1 s b div h mul def q { w1 abs w sub dup c mul abs } {
h1 abs h sub dup s mul abs } ifelse } def
/UUput { /z ED abs /y ED /x ED q { x s div c mul abs y gt } { x c div s
mul abs y gt } ifelse { x x mul y y mul sub z z mul add sqrt z add } { q
{ x s div } { x c div } ifelse abs } ifelse a PtoC h1 add exch w1 add
exch } def
/BeginOL { dup (all) eq exch TheOL eq or { IfVisible not { Visible
/IfVisible true def } if } { IfVisible { Invisible /IfVisible false def
} if } ifelse } def
/InitOL { /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
/Visible { CP OLUnit idtransform T moveto } def /Invisible { CP OLUnit
neg exch neg exch idtransform T moveto } def /BOL { BeginOL } def
/IfVisible true def } def
end
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro
%!PS-Adobe-2.0
%%Title: Dot Font for PSTricks
%%Creator: Timothy Van Zandt <tvz@Princeton.EDU>
%%Creation Date: May 7, 1993
%% Version 97 patch 1, 99/12/16
%% Modified by Etienne Riga <etienne.riga@skynet.be> - Dec. 16, 1999
%% to add /Diamond, /SolidDiamond and /BoldDiamond
10 dict dup begin
  /FontType 3 def
  /FontMatrix [ .001 0 0 .001 0 0 ] def
  /FontBBox [ 0 0 0 0 ] def
  /Encoding 256 array def
  0 1 255 { Encoding exch /.notdef put } for
  Encoding
    dup (b) 0 get /Bullet put
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
% DG/SR modification end
  /Metrics 13 dict def
  Metrics begin
    /Bullet        1000   def
    /Circle        1000   def
    /BoldCircle    1000   def
    /SolidTriangle 1344   def
    /Triangle      1344   def
    /BoldTriangle  1344   def
    /SolidSquare    886   def
    /Square         886   def
    /BoldSquare     886   def
    /SolidPentagon 1093.2 def
    /Pentagon      1093.2 def
    /BoldPentagon  1093.2 def
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    /SolidDiamond  1008   def
    /Diamond       1008   def
    /BoldDiamond   1008   def
% DG/SR modification end
    /.notdef 0 def
  end
  /BBoxes 13 dict def
  BBoxes begin
    /Circle        { -550 -550 550 550 } def
    /BoldCircle    /Circle load def
    /Bullet        /Circle load def
    /Triangle      { -571.5 -330 571.5 660 } def
    /BoldTriangle  /Triangle load def
    /SolidTriangle /Triangle load def
    /Square        { -450 -450 450 450 } def
    /BoldSquare    /Square load def
    /SolidSquare   /Square load def
    /Pentagon      { -546.6 -465 546.6 574.7 } def
    /BoldPentagon  /Pentagon load def
    /SolidPentagon /Pentagon load def
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    /Diamond       { -428.5 -742.5 428.5 742.5 } def
    /BoldDiamond   /Diamond load def
    /SolidDiamond  /Diamond load def
% DG/SR modification end
    /.notdef { 0 0 0 0 } def
  end
  /CharProcs 20 dict def
  CharProcs begin
    /Adjust {
      2 copy dtransform floor .5 add exch floor .5 add exch idtransform
      3 -1 roll div 3 1 roll exch div exch scale
    } def
    /CirclePath    { 0 0 500 0 360 arc closepath } def
    /Bullet        { 500 500 Adjust CirclePath fill } def
    /Circle        { 500 500 Adjust CirclePath .9 .9 scale CirclePath
                     eofill } def
    /BoldCircle    { 500 500 Adjust CirclePath .8 .8 scale CirclePath
                     eofill } def
    /BoldCircle    { CirclePath .8 .8 scale CirclePath eofill } def
    /TrianglePath  { 0  660 moveto -571.5 -330 lineto 571.5 -330 lineto
                     closepath } def
    /SolidTriangle { TrianglePath fill } def
    /Triangle      { TrianglePath .85 .85 scale TrianglePath eofill } def
    /BoldTriangle  { TrianglePath .7 .7 scale TrianglePath eofill } def
    /SquarePath    { -450 450 moveto 450 450 lineto 450 -450 lineto
                     -450 -450 lineto closepath } def
    /SolidSquare   { SquarePath fill } def
    /Square        { SquarePath .89 .89 scale SquarePath eofill } def
    /BoldSquare    { SquarePath .78 .78 scale SquarePath eofill } def
    /PentagonPath  {
      -337.8 -465   moveto
       337.8 -465   lineto
       546.6  177.6 lineto
         0    574.7 lineto
      -546.6  177.6 lineto
      closepath
    } def
    /SolidPentagon { PentagonPath fill } def
    /Pentagon      { PentagonPath .89 .89 scale PentagonPath eofill } def
    /BoldPentagon  { PentagonPath .78 .78 scale PentagonPath eofill } def
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    /DiamondPath   { 0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto
                     428.5 0 lineto closepath } def
    /SolidDiamond  { DiamondPath fill } def
    /Diamond       { DiamondPath .85 .85 scale DiamondPath eofill } def
    /BoldDiamond   { DiamondPath .7 .7 scale DiamondPath eofill } def
% DG/SR modification end
    /.notdef { } def
  end
  /BuildGlyph {
    exch
    begin
      Metrics 1 index get exec 0
      BBoxes 3 index get exec
      setcachedevice
      CharProcs begin load exec end
    end
  } def
  /BuildChar {
    1 index /Encoding get exch get
    1 index /BuildGlyph get exec
  } bind def
end
/PSTricksDotFont exch definefont pop
%END pst-dots.pro

%%EndProcSet
%%BeginProcSet: f7b6d320.enc
% Thomas Esser, Dec 2002. public domain
%
% Encoding for:
%     cmb10 cmbx10 cmbx12 cmbx5 cmbx6 cmbx7 cmbx8 cmbx9 cmbxsl10
%     cmdunh10 cmr10 cmr12 cmr17cmr6 cmr7 cmr8 cmr9 cmsl10 cmsl12 cmsl8
%     cmsl9 cmss10cmss12 cmss17 cmss8 cmss9 cmssbx10 cmssdc10 cmssi10
%     cmssi12 cmssi17 cmssi8cmssi9 cmssq8 cmssqi8 cmvtt10
%
/TeXf7b6d320Encoding [
/Gamma /Delta /Theta /Lambda /Xi /Pi /Sigma /Upsilon /Phi /Psi /Omega
/ff /fi /fl /ffi /ffl /dotlessi /dotlessj /grave /acute /caron /breve
/macron /ring /cedilla /germandbls /ae /oe /oslash /AE /OE /Oslash
/suppress /exclam /quotedblright /numbersign /dollar /percent /ampersand
/quoteright /parenleft /parenright /asterisk /plus /comma /hyphen
/period /slash /zero /one /two /three /four /five /six /seven /eight
/nine /colon /semicolon /exclamdown /equal /questiondown /question /at
/A /B /C /D /E /F /G /H /I /J /K /L /M /N /O /P /Q /R /S /T /U /V /W /X
/Y /Z /bracketleft /quotedblleft /bracketright /circumflex /dotaccent
/quoteleft /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o /p /q /r /s /t /u
/v /w /x /y /z /endash /emdash /hungarumlaut /tilde /dieresis /suppress
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /space
/Gamma /Delta /Theta /Lambda /Xi /Pi /Sigma /Upsilon /Phi /Psi /.notdef
/.notdef /Omega /ff /fi /fl /ffi /ffl /dotlessi /dotlessj /grave /acute
/caron /breve /macron /ring /cedilla /germandbls /ae /oe /oslash /AE
/OE /Oslash /suppress /dieresis /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
] def

%%EndProcSet
%%BeginProcSet: texps.pro
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
%%BeginFont: CMR10
%!PS-AdobeFont-1.1: CMR10 1.00B
%%CreationDate: 1992 Feb 19 19:54:52
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.00B) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMR10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/FontName /CMR10 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/FontBBox{-251 -250 1009 969}readonly def
/UniqueID 5000793 def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
016CA6CA4B712ADEB258FAAB9A130EE605E61F77FC1B738ABC7C51CD46EF8171
9098D5FEE67660E69A7AB91B58F29A4D79E57022F783EB0FBBB6D4F4EC35014F
D2DECBA99459A4C59DF0C6EBA150284454E707DC2100C15B76B4C19B84363758
469A6C558785B226332152109871A9883487DD7710949204DDCF837E6A8708B8
2BDBF16FBC7512FAA308A093FE5CF7158F1163BC1F3352E22A1452E73FECA8A4
87100FB1FFC4C8AF409B2067537220E605DA0852CA49839E1386AF9D7A1A455F
D1F017CE45884D76EF2CB9BC5821FD25365DDEA6E45F332B5F68A44AD8A530F0
92A36FAC8D27F9087AFEEA2096F839A2BC4B937F24E080EF7C0F9374A18D565C
295A05210DB96A23175AC59A9BD0147A310EF49C551A417E0A22703F94FF7B75
409A5D417DA6730A69E310FA6A4229FC7E4F620B0FC4C63C50E99E179EB51E4C
4BC45217722F1E8E40F1E1428E792EAFE05C5A50D38C52114DFCD24D54027CBF
2512DD116F0463DE4052A7AD53B641A27E81E481947884CE35661B49153FA19E
0A2A860C7B61558671303DE6AE06A80E4E450E17067676E6BBB42A9A24ACBC3E
B0CA7B7A3BFEA84FED39CCFB6D545BB2BCC49E5E16976407AB9D94556CD4F008
24EF579B6800B6DC3AAF840B3FC6822872368E3B4274DD06CA36AF8F6346C11B
43C772CC242F3B212C4BD7018D71A1A74C9A94ED0093A5FB6557F4E0751047AF
D72098ECA301B8AE68110F983796E581F106144951DF5B750432A230FDA3B575
5A38B5E7972AABC12306A01A99FCF8189D71B8DBF49550BAEA9CF1B97CBFC7CC
96498ECC938B1A1710B670657DE923A659DB8757147B140A48067328E7E3F9C3
7D1888B284904301450CE0BC15EEEA00E48CCD6388F3FC3C8578EF9A20A0E06E
4F7ADDAF0E7D1E182D115BF1AD931977325AD391E72E2B13CC108E3726C11099
E2000623188AAAC9F3E233EB253BDD8B0A4759A66A113E066238B0086AC1B634
5ABFF90E4B5ED3FA69C22541981B2BFC9710AEF6B50A8BB53431C7B4D380D721
639E005D6B4688EE16BFF48443E7C9E5FB5BC5883E271CB0342893C0BBC0A879
B7220832FB50103F72F8B5D98CF223DB1D0EE09EE454D9496C392F12478835E1
762DF62F2BCF601F3355828AB3963623C4B9BDBBC761B9DE9EDE67C74277FECB
B3AAEE9240011A2BC34C4879B3673E7EEB374A3FB8ED01FB5FB85AFBC1F7299A
8371255D51560E1946A50092C8E48F3BF180229FF21A1A79020E4BEB512EABF1
02AA111461557961E3B891E4FC323C61D497CCCE9D2586EB93DE4D6FB682B960
B36D5C4AB832F0F8D8CFBA86753A9A919B814D506A80B2A8399C9396D9C94C4B
74FD9890373C583561A49FBED4F520EFC18DBA2E1BFE377A7B11B3684EFA80F5
E9122A94423BC3A5B27D8A4FC17EE6DD29
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 39158280 55380996 1000 600 600 (main.dvi)
@start /Fa 206[42 49[{ TeXf7b6d320Encoding ReEncodeFont }1
83.022 /CMR10 rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%PaperSize: A4
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 565 2102 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  [ 0.0 0.0  false NArray
/DS 2.0 2. CLW mul add 2 div def /Times-Roman 45. [2.3 0.0 0.0 2.3
-0.6486 -0.5819] FontDot /Dot { moveto gsave 1.  1.  scale <2B> show
grestore } bind def  newpath n { transform floor .5 add exch floor
.5 add exch itransform Dot } repeat end


@endspecial 1037 1629 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  [ 0.0 0.0  false NArray
/DS 2.0 2. CLW mul add 2 div def /Times-Roman 45. [2.3 0.0 0.0 2.3
-0.6486 -0.5819] FontDot /Dot { moveto gsave 1.  1.  scale <2B> show
grestore } bind def  newpath n { transform floor .5 add exch floor
.5 add exch itransform Dot } repeat end
 
@endspecial
1509 1157 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  [ 0.0 0.0  false NArray
/DS 2.0 2. CLW mul add 2 div def /Times-Roman 45. [2.3 0.0 0.0 2.3
-0.6486 -0.5819] FontDot /Dot { moveto gsave 1.  1.  scale <2B> show
grestore } bind def  newpath n { transform floor .5 add exch floor
.5 add exch itransform Dot } repeat end
 
@endspecial 565
2102 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /ArrowA { moveto } def
/ArrowB { } def [ 42.67911 5.69046 14.22636 5.69046  /Lineto /lineto
load def false Line  gsave 0.8 SLW 0. setgray 0 setlinecap stroke 
grestore end
 
@endspecial 1037 1629
a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /ArrowA { moveto } def
/ArrowB { } def [ 42.67911 5.69046 14.22636 5.69046  /Lineto /lineto
load def false Line  gsave 0.8 SLW 0. setgray 0 setlinecap stroke 
grestore end
 
@endspecial 1509 1157 a
@beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /ArrowA { moveto } def
/ArrowB { } def [ 42.67911 5.69046 14.22636 5.69046  /Lineto /lineto
load def false Line  gsave 0.8 SLW 0. setgray 0 setlinecap stroke 
grestore end
 
@endspecial 565 2102 a
 tx@Dict begin 15.  RotBegin  end
 565
2102 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 1. 0. 0. setrgbcolor  /ArrowA {
moveto } def /ArrowB { } def [ 34.1432 5.69046 5.69046 5.69046  /Lineto
/lineto load def false Line  gsave 0.8 SLW 1. 0. 0. setrgbcolor 0 setlinecap
stroke  grestore end
 
@endspecial 565 2102
a
 tx@Dict begin RotEnd  end
 565 2102 a 1037 1629 a
 tx@Dict begin 15.  RotBegin  end
 1037 1629 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 1. 0. 0. setrgbcolor  /ArrowA {
moveto } def /ArrowB { } def [ 34.1432 5.69046 5.69046 5.69046  /Lineto
/lineto load def false Line  gsave 0.8 SLW 1. 0. 0. setrgbcolor 0 setlinecap
stroke  grestore end


@endspecial 1037 1629 a
 tx@Dict begin RotEnd  end
 1037 1629 a 1509 1157 a
 tx@Dict begin 15.  RotBegin  end
 1509
1157 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 1. 0. 0. setrgbcolor  /ArrowA {
moveto } def /ArrowB { } def [ 34.1432 5.69046 5.69046 5.69046  /Lineto
/lineto load def false Line  gsave 0.8 SLW 1. 0. 0. setrgbcolor 0 setlinecap
stroke  grestore end
 
@endspecial 1509 1157
a
 tx@Dict begin RotEnd  end
 1509 1157 a 565 2102 a
 tx@Dict begin 30.  RotBegin  end
 565 2102 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. 1. 0. setrgbcolor  /ArrowA {
moveto } def /ArrowB { } def [ 34.1432 5.69046 5.69046 5.69046  /Lineto
/lineto load def false Line  gsave 0.8 SLW 0. 1. 0. setrgbcolor 0 setlinecap
stroke  grestore end


@endspecial 565 2102 a
 tx@Dict begin RotEnd  end
 565 2102 a 1037 1629 a
 tx@Dict begin 30.  RotBegin  end
 1037 1629
a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. 1. 0. setrgbcolor  /ArrowA {
moveto } def /ArrowB { } def [ 34.1432 5.69046 5.69046 5.69046  /Lineto
/lineto load def false Line  gsave 0.8 SLW 0. 1. 0. setrgbcolor 0 setlinecap
stroke  grestore end
 
@endspecial 1037 1629 a
 tx@Dict begin RotEnd  end

1037 1629 a 1509 1157 a
 tx@Dict begin 30.  RotBegin  end
 1509 1157 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. 1. 0. setrgbcolor  /ArrowA {
moveto } def /ArrowB { } def [ 34.1432 5.69046 5.69046 5.69046  /Lineto
/lineto load def false Line  gsave 0.8 SLW 0. 1. 0. setrgbcolor 0 setlinecap
stroke  grestore end


@endspecial 1509 1157 a
 tx@Dict begin RotEnd  end
 1509 1157 a 565 2102 a
 tx@Dict begin 45.  RotBegin  end
 565 2102
a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. 0. 1. setrgbcolor  /ArrowA {
moveto } def /ArrowB { } def [ 34.1432 5.69046 5.69046 5.69046  /Lineto
/lineto load def false Line  gsave 0.8 SLW 0. 0. 1. setrgbcolor 0 setlinecap
stroke  grestore end
 
@endspecial 565 2102 a
 tx@Dict begin RotEnd  end
 565
2102 a 1037 1629 a
 tx@Dict begin 45.  RotBegin  end
 1037 1629 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. 0. 1. setrgbcolor  /ArrowA {
moveto } def /ArrowB { } def [ 34.1432 5.69046 5.69046 5.69046  /Lineto
/lineto load def false Line  gsave 0.8 SLW 0. 0. 1. setrgbcolor 0 setlinecap
stroke  grestore end


@endspecial 1037 1629 a
 tx@Dict begin RotEnd  end
 1037 1629 a 1509 1157 a
 tx@Dict begin 45.  RotBegin  end
 1509
1157 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. 0. 1. setrgbcolor  /ArrowA {
moveto } def /ArrowB { } def [ 34.1432 5.69046 5.69046 5.69046  /Lineto
/lineto load def false Line  gsave 0.8 SLW 0. 0. 1. setrgbcolor 0 setlinecap
stroke  grestore end
 
@endspecial 1509 1157
a
 tx@Dict begin RotEnd  end
 1509 1157 a 565 2102 a
 tx@Dict begin 60.  RotBegin  end
 565 2102 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 1. 0. 0. setrgbcolor  /ArrowA {
moveto } def /ArrowB { } def [ 34.1432 5.69046 5.69046 5.69046  /Lineto
/lineto load def false Line  gsave 0.8 SLW 1. 0. 0. setrgbcolor 0 setlinecap
stroke  grestore end


@endspecial 565 2102 a
 tx@Dict begin RotEnd  end
 565 2102 a 1037 1629 a
 tx@Dict begin 60.  RotBegin  end
 1037 1629
a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 1. 0. 0. setrgbcolor  /ArrowA {
moveto } def /ArrowB { } def [ 34.1432 5.69046 5.69046 5.69046  /Lineto
/lineto load def false Line  gsave 0.8 SLW 1. 0. 0. setrgbcolor 0 setlinecap
stroke  grestore end
 
@endspecial 1037 1629 a
 tx@Dict begin RotEnd  end

1037 1629 a 1509 1157 a
 tx@Dict begin 60.  RotBegin  end
 1509 1157 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 1. 0. 0. setrgbcolor  /ArrowA {
moveto } def /ArrowB { } def [ 34.1432 5.69046 5.69046 5.69046  /Lineto
/lineto load def false Line  gsave 0.8 SLW 1. 0. 0. setrgbcolor 0 setlinecap
stroke  grestore end


@endspecial 1509 1157 a
 tx@Dict begin RotEnd  end
 1509 1157 a 565 2102 a
 tx@Dict begin 75.  RotBegin  end
 565 2102
a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. 1. 0. setrgbcolor  /ArrowA {
moveto } def /ArrowB { } def [ 34.1432 5.69046 5.69046 5.69046  /Lineto
/lineto load def false Line  gsave 0.8 SLW 0. 1. 0. setrgbcolor 0 setlinecap
stroke  grestore end
 
@endspecial 565 2102 a
 tx@Dict begin RotEnd  end
 565
2102 a 1037 1629 a
 tx@Dict begin 75.  RotBegin  end
 1037 1629 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. 1. 0. setrgbcolor  /ArrowA {
moveto } def /ArrowB { } def [ 34.1432 5.69046 5.69046 5.69046  /Lineto
/lineto load def false Line  gsave 0.8 SLW 0. 1. 0. setrgbcolor 0 setlinecap
stroke  grestore end


@endspecial 1037 1629 a
 tx@Dict begin RotEnd  end
 1037 1629 a 1509 1157 a
 tx@Dict begin 75.  RotBegin  end
 1509
1157 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. 1. 0. setrgbcolor  /ArrowA {
moveto } def /ArrowB { } def [ 34.1432 5.69046 5.69046 5.69046  /Lineto
/lineto load def false Line  gsave 0.8 SLW 0. 1. 0. setrgbcolor 0 setlinecap
stroke  grestore end
 
@endspecial 1509 1157
a
 tx@Dict begin RotEnd  end
 1509 1157 a 565 2102 a
 tx@Dict begin 90.  RotBegin  end
 565 2102 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. 0. 1. setrgbcolor  /ArrowA {
moveto } def /ArrowB { } def [ 34.1432 5.69046 5.69046 5.69046  /Lineto
/lineto load def false Line  gsave 0.8 SLW 0. 0. 1. setrgbcolor 0 setlinecap
stroke  grestore end


@endspecial 565 2102 a
 tx@Dict begin RotEnd  end
 565 2102 a 1037 1629 a
 tx@Dict begin 90.  RotBegin  end
 1037 1629
a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. 0. 1. setrgbcolor  /ArrowA {
moveto } def /ArrowB { } def [ 34.1432 5.69046 5.69046 5.69046  /Lineto
/lineto load def false Line  gsave 0.8 SLW 0. 0. 1. setrgbcolor 0 setlinecap
stroke  grestore end
 
@endspecial 1037 1629 a
 tx@Dict begin RotEnd  end

1037 1629 a 1509 1157 a
 tx@Dict begin 90.  RotBegin  end
 1509 1157 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. 0. 1. setrgbcolor  /ArrowA {
moveto } def /ArrowB { } def [ 34.1432 5.69046 5.69046 5.69046  /Lineto
/lineto load def false Line  gsave 0.8 SLW 0. 0. 1. setrgbcolor 0 setlinecap
stroke  grestore end


@endspecial 1509 1157 a
 tx@Dict begin RotEnd  end
 1509 1157 a 565 2102 a
 tx@Dict begin 105.  RotBegin  end
 565 2102
a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 1. 0. 0. setrgbcolor  /ArrowA {
moveto } def /ArrowB { } def [ 34.1432 5.69046 5.69046 5.69046  /Lineto
/lineto load def false Line  gsave 0.8 SLW 1. 0. 0. setrgbcolor 0 setlinecap
stroke  grestore end
 
@endspecial 565 2102 a
 tx@Dict begin RotEnd  end
 565
2102 a 1037 1629 a
 tx@Dict begin 105.  RotBegin  end
 1037 1629 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 1. 0. 0. setrgbcolor  /ArrowA {
moveto } def /ArrowB { } def [ 34.1432 5.69046 5.69046 5.69046  /Lineto
/lineto load def false Line  gsave 0.8 SLW 1. 0. 0. setrgbcolor 0 setlinecap
stroke  grestore end


@endspecial 1037 1629 a
 tx@Dict begin RotEnd  end
 1037 1629 a 1509 1157 a
 tx@Dict begin 105.  RotBegin  end
 1509
1157 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 1. 0. 0. setrgbcolor  /ArrowA {
moveto } def /ArrowB { } def [ 34.1432 5.69046 5.69046 5.69046  /Lineto
/lineto load def false Line  gsave 0.8 SLW 1. 0. 0. setrgbcolor 0 setlinecap
stroke  grestore end
 
@endspecial 1509 1157
a
 tx@Dict begin RotEnd  end
 1509 1157 a 565 2102 a
 tx@Dict begin 120.  RotBegin  end
 565 2102 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. 1. 0. setrgbcolor  /ArrowA {
moveto } def /ArrowB { } def [ 34.1432 5.69046 5.69046 5.69046  /Lineto
/lineto load def false Line  gsave 0.8 SLW 0. 1. 0. setrgbcolor 0 setlinecap
stroke  grestore end


@endspecial 565 2102 a
 tx@Dict begin RotEnd  end
 565 2102 a 1037 1629 a
 tx@Dict begin 120.  RotBegin  end
 1037 1629
a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. 1. 0. setrgbcolor  /ArrowA {
moveto } def /ArrowB { } def [ 34.1432 5.69046 5.69046 5.69046  /Lineto
/lineto load def false Line  gsave 0.8 SLW 0. 1. 0. setrgbcolor 0 setlinecap
stroke  grestore end
 
@endspecial 1037 1629 a
 tx@Dict begin RotEnd  end

1037 1629 a 1509 1157 a
 tx@Dict begin 120.  RotBegin  end
 1509 1157 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. 1. 0. setrgbcolor  /ArrowA {
moveto } def /ArrowB { } def [ 34.1432 5.69046 5.69046 5.69046  /Lineto
/lineto load def false Line  gsave 0.8 SLW 0. 1. 0. setrgbcolor 0 setlinecap
stroke  grestore end


@endspecial 1509 1157 a
 tx@Dict begin RotEnd  end
 1509 1157 a 565 2102 a
 tx@Dict begin 135.  RotBegin  end
 565 2102
a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. 0. 1. setrgbcolor  /ArrowA {
moveto } def /ArrowB { } def [ 34.1432 5.69046 5.69046 5.69046  /Lineto
/lineto load def false Line  gsave 0.8 SLW 0. 0. 1. setrgbcolor 0 setlinecap
stroke  grestore end
 
@endspecial 565 2102 a
 tx@Dict begin RotEnd  end
 565
2102 a 1037 1629 a
 tx@Dict begin 135.  RotBegin  end
 1037 1629 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. 0. 1. setrgbcolor  /ArrowA {
moveto } def /ArrowB { } def [ 34.1432 5.69046 5.69046 5.69046  /Lineto
/lineto load def false Line  gsave 0.8 SLW 0. 0. 1. setrgbcolor 0 setlinecap
stroke  grestore end


@endspecial 1037 1629 a
 tx@Dict begin RotEnd  end
 1037 1629 a 1509 1157 a
 tx@Dict begin 135.  RotBegin  end
 1509
1157 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. 0. 1. setrgbcolor  /ArrowA {
moveto } def /ArrowB { } def [ 34.1432 5.69046 5.69046 5.69046  /Lineto
/lineto load def false Line  gsave 0.8 SLW 0. 0. 1. setrgbcolor 0 setlinecap
stroke  grestore end
 
@endspecial 1509 1157
a
 tx@Dict begin RotEnd  end
 1509 1157 a 565 2102 a
 tx@Dict begin 150.  RotBegin  end
 565 2102 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 1. 0. 0. setrgbcolor  /ArrowA {
moveto } def /ArrowB { } def [ 34.1432 5.69046 5.69046 5.69046  /Lineto
/lineto load def false Line  gsave 0.8 SLW 1. 0. 0. setrgbcolor 0 setlinecap
stroke  grestore end


@endspecial 565 2102 a
 tx@Dict begin RotEnd  end
 565 2102 a 1037 1629 a
 tx@Dict begin 150.  RotBegin  end
 1037 1629
a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 1. 0. 0. setrgbcolor  /ArrowA {
moveto } def /ArrowB { } def [ 34.1432 5.69046 5.69046 5.69046  /Lineto
/lineto load def false Line  gsave 0.8 SLW 1. 0. 0. setrgbcolor 0 setlinecap
stroke  grestore end
 
@endspecial 1037 1629 a
 tx@Dict begin RotEnd  end

1037 1629 a 1509 1157 a
 tx@Dict begin 150.  RotBegin  end
 1509 1157 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 1. 0. 0. setrgbcolor  /ArrowA {
moveto } def /ArrowB { } def [ 34.1432 5.69046 5.69046 5.69046  /Lineto
/lineto load def false Line  gsave 0.8 SLW 1. 0. 0. setrgbcolor 0 setlinecap
stroke  grestore end


@endspecial 1509 1157 a
 tx@Dict begin RotEnd  end
 1509 1157 a 565 2102 a
 tx@Dict begin 165.  RotBegin  end
 565 2102
a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. 1. 0. setrgbcolor  /ArrowA {
moveto } def /ArrowB { } def [ 34.1432 5.69046 5.69046 5.69046  /Lineto
/lineto load def false Line  gsave 0.8 SLW 0. 1. 0. setrgbcolor 0 setlinecap
stroke  grestore end
 
@endspecial 565 2102 a
 tx@Dict begin RotEnd  end
 565
2102 a 1037 1629 a
 tx@Dict begin 165.  RotBegin  end
 1037 1629 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. 1. 0. setrgbcolor  /ArrowA {
moveto } def /ArrowB { } def [ 34.1432 5.69046 5.69046 5.69046  /Lineto
/lineto load def false Line  gsave 0.8 SLW 0. 1. 0. setrgbcolor 0 setlinecap
stroke  grestore end


@endspecial 1037 1629 a
 tx@Dict begin RotEnd  end
 1037 1629 a 1509 1157 a
 tx@Dict begin 165.  RotBegin  end
 1509
1157 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. 1. 0. setrgbcolor  /ArrowA {
moveto } def /ArrowB { } def [ 34.1432 5.69046 5.69046 5.69046  /Lineto
/lineto load def false Line  gsave 0.8 SLW 0. 1. 0. setrgbcolor 0 setlinecap
stroke  grestore end
 
@endspecial 1509 1157
a
 tx@Dict begin RotEnd  end
 1509 1157 a 565 2102 a
 tx@Dict begin 180.  RotBegin  end
 565 2102 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. 0. 1. setrgbcolor  /ArrowA {
moveto } def /ArrowB { } def [ 34.1432 5.69046 5.69046 5.69046  /Lineto
/lineto load def false Line  gsave 0.8 SLW 0. 0. 1. setrgbcolor 0 setlinecap
stroke  grestore end


@endspecial 565 2102 a
 tx@Dict begin RotEnd  end
 565 2102 a 1037 1629 a
 tx@Dict begin 180.  RotBegin  end
 1037 1629
a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. 0. 1. setrgbcolor  /ArrowA {
moveto } def /ArrowB { } def [ 34.1432 5.69046 5.69046 5.69046  /Lineto
/lineto load def false Line  gsave 0.8 SLW 0. 0. 1. setrgbcolor 0 setlinecap
stroke  grestore end
 
@endspecial 1037 1629 a
 tx@Dict begin RotEnd  end

1037 1629 a 1509 1157 a
 tx@Dict begin 180.  RotBegin  end
 1509 1157 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. 0. 1. setrgbcolor  /ArrowA {
moveto } def /ArrowB { } def [ 34.1432 5.69046 5.69046 5.69046  /Lineto
/lineto load def false Line  gsave 0.8 SLW 0. 0. 1. setrgbcolor 0 setlinecap
stroke  grestore end


@endspecial 1509 1157 a
 tx@Dict begin RotEnd  end
 1509 1157 a 1851 5662 a Fa(1)p
eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
